
DOLEV_freeRTOS_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032e8  080175c8  080175c8  000275c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a8b0  0801a8b0  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a8b0  0801a8b0  0002a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a8b8  0801a8b8  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a8b8  0801a8b8  0002a8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a8bc  0801a8bc  0002a8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0801a8c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  0801a958  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  0801a9f8  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000303e8  200001d8  0801aa98  000301d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200305c0  0801aa98  000305c0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037d8b  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000820e  00000000  00000000  00067f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002630  00000000  00000000  000701a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002470  00000000  00000000  000727d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038921  00000000  00000000  00074c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003b907  00000000  00000000  000ad569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00118001  00000000  00000000  000e8e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00200e71  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a8b0  00000000  00000000  00200ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080175b0 	.word	0x080175b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080175b0 	.word	0x080175b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	200001f4 	.word	0x200001f4
 80005f4:	200002a8 	.word	0x200002a8

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f001 fc62 	bl	8001ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f821 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8e5 	bl	80007d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060a:	f000 f885 	bl	8000718 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060e:	f000 f8b3 	bl	8000778 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  // my custom main file
  ex_main();
 8000612:	f000 fc1d 	bl	8000e50 <ex_main>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 300);
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <main+0x48>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f007 fb65 	bl	8007cfc <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	; (8000644 <main+0x4c>)
 8000636:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000638:	f007 fb49 	bl	8007cce <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x44>
 800063e:	bf00      	nop
 8000640:	080175d4 	.word	0x080175d4
 8000644:	20000ce8 	.word	0x20000ce8

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f015 fdb5 	bl	80161c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066c:	f003 fbc6 	bl	8003dfc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <SystemClock_Config+0xc8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a26      	ldr	r2, [pc, #152]	; (8000710 <SystemClock_Config+0xc8>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <SystemClock_Config+0xc8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <SystemClock_Config+0xcc>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <SystemClock_Config+0xcc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006bc:	2348      	movs	r3, #72	; 0x48
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006c4:	2303      	movs	r3, #3
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fba5 	bl	8003e1c <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f93a 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fe33 	bl	8004364 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000704:	f000 f924 	bl	8000950 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	; 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART3_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800075c:	f004 ff2a 	bl	80055b4 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f8f3 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000758 	.word	0x20000758
 8000774:	40004800 	.word	0x40004800

08000778 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000782:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2206      	movs	r2, #6
 8000788:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2202      	movs	r2, #2
 800078e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2202      	movs	r2, #2
 800079a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	f003 f9d5 	bl	8003b6a <HAL_PCD_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f8c3 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200007e0 	.word	0x200007e0

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b47      	ldr	r3, [pc, #284]	; (8000908 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a46      	ldr	r2, [pc, #280]	; (8000908 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a40      	ldr	r2, [pc, #256]	; (8000908 <MX_GPIO_Init+0x134>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a3a      	ldr	r2, [pc, #232]	; (8000908 <MX_GPIO_Init+0x134>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b38      	ldr	r3, [pc, #224]	; (8000908 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a34      	ldr	r2, [pc, #208]	; (8000908 <MX_GPIO_Init+0x134>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2e      	ldr	r2, [pc, #184]	; (8000908 <MX_GPIO_Init+0x134>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a28      	ldr	r2, [pc, #160]	; (8000908 <MX_GPIO_Init+0x134>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000880:	4822      	ldr	r0, [pc, #136]	; (800090c <MX_GPIO_Init+0x138>)
 8000882:	f003 f93f 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_GPIO_Init+0x13c>)
 800088c:	f003 f93a 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	481b      	ldr	r0, [pc, #108]	; (8000914 <MX_GPIO_Init+0x140>)
 80008a8:	f002 ff80 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_GPIO_Init+0x138>)
 80008c6:	f002 ff71 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008e2:	f002 ff63 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008fa:	f002 ff57 	bl	80037ac <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020800 	.word	0x40020800

08000918 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000920:	f006 fb7a 	bl	8007018 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f007 fa35 	bl	8007d94 <osDelay>
 800092a:	e7fb      	b.n	8000924 <StartDefaultTask+0xc>

0800092c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d101      	bne.n	8000942 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093e:	f001 facf 	bl	8001ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010000 	.word	0x40010000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_MspInit+0x4c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	f06f 0001 	mvn.w	r0, #1
 800099a:	f001 fb9d 	bl	80020d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0aa      	sub	sp, #168	; 0xa8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	2284      	movs	r2, #132	; 0x84
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f015 fbfa 	bl	80161c6 <memset>
  if(huart->Instance==USART3)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a26      	ldr	r2, [pc, #152]	; (8000a70 <HAL_UART_MspInit+0xc4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d144      	bne.n	8000a66 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 ff12 	bl	8004814 <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009f6:	f7ff ffab 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <HAL_UART_MspInit+0xc8>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a1d      	ldr	r2, [pc, #116]	; (8000a74 <HAL_UART_MspInit+0xc8>)
 8000a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_UART_MspInit+0xc8>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0xc8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0xc8>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0xc8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a44:	2307      	movs	r3, #7
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <HAL_UART_MspInit+0xcc>)
 8000a52:	f002 feab 	bl	80037ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2105      	movs	r1, #5
 8000a5a:	2027      	movs	r0, #39	; 0x27
 8000a5c:	f001 fb3c 	bl	80020d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a60:	2027      	movs	r0, #39	; 0x27
 8000a62:	f001 fb55 	bl	8002110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	37a8      	adds	r7, #168	; 0xa8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004800 	.word	0x40004800
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020c00 	.word	0x40020c00

08000a7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0ac      	sub	sp, #176	; 0xb0
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	2284      	movs	r2, #132	; 0x84
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f015 fb92 	bl	80161c6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aaa:	d159      	bne.n	8000b60 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000aac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ab0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab8:	f107 0318 	add.w	r3, r7, #24
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fea9 	bl	8004814 <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ac8:	f7ff ff42 	bl	8000950 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <HAL_PCD_MspInit+0xec>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a25      	ldr	r2, [pc, #148]	; (8000b68 <HAL_PCD_MspInit+0xec>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <HAL_PCD_MspInit+0xec>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ae4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000afe:	230a      	movs	r3, #10
 8000b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4818      	ldr	r0, [pc, #96]	; (8000b6c <HAL_PCD_MspInit+0xf0>)
 8000b0c:	f002 fe4e 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <HAL_PCD_MspInit+0xf0>)
 8000b2c:	f002 fe3e 	bl	80037ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_PCD_MspInit+0xec>)
 8000b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b34:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <HAL_PCD_MspInit+0xec>)
 8000b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3a:	6353      	str	r3, [r2, #52]	; 0x34
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_PCD_MspInit+0xec>)
 8000b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <HAL_PCD_MspInit+0xec>)
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_PCD_MspInit+0xec>)
 8000b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b52:	6453      	str	r3, [r2, #68]	; 0x44
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <HAL_PCD_MspInit+0xec>)
 8000b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b60:	bf00      	nop
 8000b62:	37b0      	adds	r7, #176	; 0xb0
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b80:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <HAL_InitTick+0xcc>)
 8000b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b84:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <HAL_InitTick+0xcc>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_InitTick+0xcc>)
 8000b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b98:	f107 020c 	add.w	r2, r7, #12
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 fe04 	bl	80047b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ba8:	f003 fdee 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 8000bac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb0:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <HAL_InitTick+0xd0>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_InitTick+0xd4>)
 8000bbe:	4a22      	ldr	r2, [pc, #136]	; (8000c48 <HAL_InitTick+0xd8>)
 8000bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_InitTick+0xd4>)
 8000bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <HAL_InitTick+0xd4>)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_InitTick+0xd4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_InitTick+0xd4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_InitTick+0xd4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000be2:	4818      	ldr	r0, [pc, #96]	; (8000c44 <HAL_InitTick+0xd4>)
 8000be4:	f004 fa06 	bl	8004ff4 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d11b      	bne.n	8000c2e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bf6:	4813      	ldr	r0, [pc, #76]	; (8000c44 <HAL_InitTick+0xd4>)
 8000bf8:	f004 fa5e 	bl	80050b8 <HAL_TIM_Base_Start_IT>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d111      	bne.n	8000c2e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c0a:	2019      	movs	r0, #25
 8000c0c:	f001 fa80 	bl	8002110 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d808      	bhi.n	8000c28 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c16:	2200      	movs	r2, #0
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	2019      	movs	r0, #25
 8000c1c:	f001 fa5c 	bl	80020d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_InitTick+0xdc>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e002      	b.n	8000c2e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3730      	adds	r7, #48	; 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	431bde83 	.word	0x431bde83
 8000c44:	20000cec 	.word	0x20000cec
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	20000008 	.word	0x20000008

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c82:	f004 fa91 	bl	80051a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000cec 	.word	0x20000cec

08000c90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <USART3_IRQHandler+0x10>)
 8000c96:	f004 fe81 	bl	800599c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000758 	.word	0x20000758

08000ca4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <ETH_IRQHandler+0x10>)
 8000caa:	f001 feab 	bl	8002a04 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200057e4 	.word	0x200057e4

08000cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	return 1;
 8000cbc:	2301      	movs	r3, #1
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_kill>:

int _kill(int pid, int sig)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <_kill+0x20>)
 8000cd4:	2216      	movs	r2, #22
 8000cd6:	601a      	str	r2, [r3, #0]
	return -1;
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	200305bc 	.word	0x200305bc

08000cec <_exit>:

void _exit (int status)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ffe5 	bl	8000cc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cfe:	e7fe      	b.n	8000cfe <_exit+0x12>

08000d00 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	return -1;
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d28:	605a      	str	r2, [r3, #4]
	return 0;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_isatty>:

int _isatty(int file)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	return 1;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
	return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d205      	bcs.n	8000da4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <_sbrk+0x6c>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20050000 	.word	0x20050000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	20000d38 	.word	0x20000d38
 8000dd0:	200305c0 	.word	0x200305c0
 8000dd4:	200305bc 	.word	0x200305bc

08000dd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e18:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e26:	f7ff ffd7 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f015 f96d 	bl	8016108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fbe3 	bl	80005f8 <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000e40:	0801a8c0 	.word	0x0801a8c0
  ldr r2, =_sbss
 8000e44:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000e48:	200305c0 	.word	0x200305c0

08000e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>
	...

08000e50 <ex_main>:
 * its a city dispatcher reads events from buffer using TFTP,
 * send it to queue by department and priority and then
 * try to take from the queue and print the task
 */
void ex_main()
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af02      	add	r7, sp, #8
	printf("***** START PROGRAM *****\r\n");
 8000e56:	48b7      	ldr	r0, [pc, #732]	; (8001134 <ex_main+0x2e4>)
 8000e58:	f015 fad8 	bl	801640c <puts>

/*-----------------------------------------------------------*/
	// creating queue for events.
	xCriPoliceQueue 	= xQueueCreate(CRI_QUEUE_SIZE, sizeof(dispMessage_t));
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2152      	movs	r1, #82	; 0x52
 8000e60:	200a      	movs	r0, #10
 8000e62:	f007 fb47 	bl	80084f4 <xQueueGenericCreate>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4ab3      	ldr	r2, [pc, #716]	; (8001138 <ex_main+0x2e8>)
 8000e6a:	6013      	str	r3, [r2, #0]
	xCriFireQueue 		= xQueueCreate(CRI_QUEUE_SIZE, sizeof(dispMessage_t));
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2152      	movs	r1, #82	; 0x52
 8000e70:	200a      	movs	r0, #10
 8000e72:	f007 fb3f 	bl	80084f4 <xQueueGenericCreate>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4ab0      	ldr	r2, [pc, #704]	; (800113c <ex_main+0x2ec>)
 8000e7a:	6013      	str	r3, [r2, #0]
	xCriAmbulanceQueue 	= xQueueCreate(CRI_QUEUE_SIZE, sizeof(dispMessage_t));
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2152      	movs	r1, #82	; 0x52
 8000e80:	200a      	movs	r0, #10
 8000e82:	f007 fb37 	bl	80084f4 <xQueueGenericCreate>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4aad      	ldr	r2, [pc, #692]	; (8001140 <ex_main+0x2f0>)
 8000e8a:	6013      	str	r3, [r2, #0]
	xCriMaintenQueue 	= xQueueCreate(CRI_QUEUE_SIZE, sizeof(dispMessage_t));
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2152      	movs	r1, #82	; 0x52
 8000e90:	200a      	movs	r0, #10
 8000e92:	f007 fb2f 	bl	80084f4 <xQueueGenericCreate>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4aaa      	ldr	r2, [pc, #680]	; (8001144 <ex_main+0x2f4>)
 8000e9a:	6013      	str	r3, [r2, #0]

	xNotWarPoliceQueue 		= xQueueCreate(NOTWAR_QUEUE_SIZE, sizeof(dispMessage_t));
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2152      	movs	r1, #82	; 0x52
 8000ea0:	2014      	movs	r0, #20
 8000ea2:	f007 fb27 	bl	80084f4 <xQueueGenericCreate>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4aa7      	ldr	r2, [pc, #668]	; (8001148 <ex_main+0x2f8>)
 8000eaa:	6013      	str	r3, [r2, #0]
	xNotWarFireQueue 		= xQueueCreate(NOTWAR_QUEUE_SIZE, sizeof(dispMessage_t));
 8000eac:	2200      	movs	r2, #0
 8000eae:	2152      	movs	r1, #82	; 0x52
 8000eb0:	2014      	movs	r0, #20
 8000eb2:	f007 fb1f 	bl	80084f4 <xQueueGenericCreate>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4aa4      	ldr	r2, [pc, #656]	; (800114c <ex_main+0x2fc>)
 8000eba:	6013      	str	r3, [r2, #0]
	xNotWarAmbulanceQueue 	= xQueueCreate(NOTWAR_QUEUE_SIZE, sizeof(dispMessage_t));
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2152      	movs	r1, #82	; 0x52
 8000ec0:	2014      	movs	r0, #20
 8000ec2:	f007 fb17 	bl	80084f4 <xQueueGenericCreate>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4aa1      	ldr	r2, [pc, #644]	; (8001150 <ex_main+0x300>)
 8000eca:	6013      	str	r3, [r2, #0]
	xNotWarMaintenQueue 	= xQueueCreate(NOTWAR_QUEUE_SIZE, sizeof(dispMessage_t));
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2152      	movs	r1, #82	; 0x52
 8000ed0:	2014      	movs	r0, #20
 8000ed2:	f007 fb0f 	bl	80084f4 <xQueueGenericCreate>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a9e      	ldr	r2, [pc, #632]	; (8001154 <ex_main+0x304>)
 8000eda:	6013      	str	r3, [r2, #0]

/*-----------------------------------------------------------*/
	// checking all queues were created successfully.
	if (xCriPoliceQueue 	  		!= NULL
 8000edc:	4b96      	ldr	r3, [pc, #600]	; (8001138 <ex_main+0x2e8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 81a5 	beq.w	8001230 <ex_main+0x3e0>
		&& xCriFireQueue 			!= NULL
 8000ee6:	4b95      	ldr	r3, [pc, #596]	; (800113c <ex_main+0x2ec>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 81a0 	beq.w	8001230 <ex_main+0x3e0>
		&& xCriAmbulanceQueue 		!= NULL
 8000ef0:	4b93      	ldr	r3, [pc, #588]	; (8001140 <ex_main+0x2f0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 819b 	beq.w	8001230 <ex_main+0x3e0>
		&& xCriMaintenQueue 		!= NULL
 8000efa:	4b92      	ldr	r3, [pc, #584]	; (8001144 <ex_main+0x2f4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8196 	beq.w	8001230 <ex_main+0x3e0>
		&& xNotWarPoliceQueue 		!= NULL
 8000f04:	4b90      	ldr	r3, [pc, #576]	; (8001148 <ex_main+0x2f8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 8191 	beq.w	8001230 <ex_main+0x3e0>
		&& xNotWarFireQueue 		!= NULL
 8000f0e:	4b8f      	ldr	r3, [pc, #572]	; (800114c <ex_main+0x2fc>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 818c 	beq.w	8001230 <ex_main+0x3e0>
		&& xNotWarAmbulanceQueue 	!= NULL
 8000f18:	4b8d      	ldr	r3, [pc, #564]	; (8001150 <ex_main+0x300>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 8187 	beq.w	8001230 <ex_main+0x3e0>
		&& xNotWarMaintenQueue 		!= NULL)
 8000f22:	4b8c      	ldr	r3, [pc, #560]	; (8001154 <ex_main+0x304>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 8182 	beq.w	8001230 <ex_main+0x3e0>
	{
/*-----------------------------------------------------------*/
		//creating tasks
		if (xTaskCreate(vLwipTask,			"LWIP init",LWIP_STACK_SIZE,NULL,TFTP_PRIORITY,NULL) != pdPASS)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	2306      	movs	r3, #6
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f3a:	4987      	ldr	r1, [pc, #540]	; (8001158 <ex_main+0x308>)
 8000f3c:	4887      	ldr	r0, [pc, #540]	; (800115c <ex_main+0x30c>)
 8000f3e:	f008 f9ce 	bl	80092de <xTaskCreate>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d005      	beq.n	8000f54 <ex_main+0x104>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8000f48:	4885      	ldr	r0, [pc, #532]	; (8001160 <ex_main+0x310>)
 8000f4a:	f015 fa5f 	bl	801640c <puts>
			exit(1);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f014 ffd0 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vDispatcher, 		"Dispatcher",configMINIMAL_STACK_SIZE ,NULL, DISP_PRIORITY, NULL) != pdPASS)
 8000f54:	2300      	movs	r3, #0
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	2304      	movs	r3, #4
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f62:	4980      	ldr	r1, [pc, #512]	; (8001164 <ex_main+0x314>)
 8000f64:	4880      	ldr	r0, [pc, #512]	; (8001168 <ex_main+0x318>)
 8000f66:	f008 f9ba 	bl	80092de <xTaskCreate>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <ex_main+0x12c>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8000f70:	487b      	ldr	r0, [pc, #492]	; (8001160 <ex_main+0x310>)
 8000f72:	f015 fa4b 	bl	801640c <puts>
			exit(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f014 ffbc 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vPoliceManage, 		"Police 1.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2300      	movs	r3, #0
 8000f86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f8a:	4978      	ldr	r1, [pc, #480]	; (800116c <ex_main+0x31c>)
 8000f8c:	4878      	ldr	r0, [pc, #480]	; (8001170 <ex_main+0x320>)
 8000f8e:	f008 f9a6 	bl	80092de <xTaskCreate>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d005      	beq.n	8000fa4 <ex_main+0x154>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8000f98:	4871      	ldr	r0, [pc, #452]	; (8001160 <ex_main+0x310>)
 8000f9a:	f015 fa37 	bl	801640c <puts>
			exit(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f014 ffa8 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vPoliceManage, 		"Police 2.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2300      	movs	r3, #0
 8000fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fb2:	4970      	ldr	r1, [pc, #448]	; (8001174 <ex_main+0x324>)
 8000fb4:	486e      	ldr	r0, [pc, #440]	; (8001170 <ex_main+0x320>)
 8000fb6:	f008 f992 	bl	80092de <xTaskCreate>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d005      	beq.n	8000fcc <ex_main+0x17c>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8000fc0:	4867      	ldr	r0, [pc, #412]	; (8001160 <ex_main+0x310>)
 8000fc2:	f015 fa23 	bl	801640c <puts>
			exit(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f014 ff94 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vPoliceManage, 		"Police 3.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fda:	4967      	ldr	r1, [pc, #412]	; (8001178 <ex_main+0x328>)
 8000fdc:	4864      	ldr	r0, [pc, #400]	; (8001170 <ex_main+0x320>)
 8000fde:	f008 f97e 	bl	80092de <xTaskCreate>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <ex_main+0x1a4>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8000fe8:	485d      	ldr	r0, [pc, #372]	; (8001160 <ex_main+0x310>)
 8000fea:	f015 fa0f 	bl	801640c <puts>
			exit(1);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f014 ff80 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vFireManage, 		"Fire 1.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001002:	495e      	ldr	r1, [pc, #376]	; (800117c <ex_main+0x32c>)
 8001004:	485e      	ldr	r0, [pc, #376]	; (8001180 <ex_main+0x330>)
 8001006:	f008 f96a 	bl	80092de <xTaskCreate>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <ex_main+0x1cc>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8001010:	4853      	ldr	r0, [pc, #332]	; (8001160 <ex_main+0x310>)
 8001012:	f015 f9fb 	bl	801640c <puts>
			exit(1);
 8001016:	2001      	movs	r0, #1
 8001018:	f014 ff6c 	bl	8015ef4 <exit>
		}


		if (xTaskCreate(vFireManage, 		"Fire 2.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 800101c:	2300      	movs	r3, #0
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	2301      	movs	r3, #1
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2300      	movs	r3, #0
 8001026:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800102a:	4956      	ldr	r1, [pc, #344]	; (8001184 <ex_main+0x334>)
 800102c:	4854      	ldr	r0, [pc, #336]	; (8001180 <ex_main+0x330>)
 800102e:	f008 f956 	bl	80092de <xTaskCreate>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <ex_main+0x1f4>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8001038:	4849      	ldr	r0, [pc, #292]	; (8001160 <ex_main+0x310>)
 800103a:	f015 f9e7 	bl	801640c <puts>
			exit(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f014 ff58 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vFireManage, 		"Fire 3.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 8001044:	2300      	movs	r3, #0
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	2301      	movs	r3, #1
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001052:	494d      	ldr	r1, [pc, #308]	; (8001188 <ex_main+0x338>)
 8001054:	484a      	ldr	r0, [pc, #296]	; (8001180 <ex_main+0x330>)
 8001056:	f008 f942 	bl	80092de <xTaskCreate>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d005      	beq.n	800106c <ex_main+0x21c>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8001060:	483f      	ldr	r0, [pc, #252]	; (8001160 <ex_main+0x310>)
 8001062:	f015 f9d3 	bl	801640c <puts>
			exit(1);
 8001066:	2001      	movs	r0, #1
 8001068:	f014 ff44 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vAmbulanceManage, 	"Ambulance 1.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 800106c:	2300      	movs	r3, #0
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	2301      	movs	r3, #1
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2300      	movs	r3, #0
 8001076:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800107a:	4944      	ldr	r1, [pc, #272]	; (800118c <ex_main+0x33c>)
 800107c:	4844      	ldr	r0, [pc, #272]	; (8001190 <ex_main+0x340>)
 800107e:	f008 f92e 	bl	80092de <xTaskCreate>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	d005      	beq.n	8001094 <ex_main+0x244>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8001088:	4835      	ldr	r0, [pc, #212]	; (8001160 <ex_main+0x310>)
 800108a:	f015 f9bf 	bl	801640c <puts>
			exit(1);
 800108e:	2001      	movs	r0, #1
 8001090:	f014 ff30 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vAmbulanceManage,	"Ambulance 2.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 8001094:	2300      	movs	r3, #0
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	2301      	movs	r3, #1
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2300      	movs	r3, #0
 800109e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010a2:	493c      	ldr	r1, [pc, #240]	; (8001194 <ex_main+0x344>)
 80010a4:	483a      	ldr	r0, [pc, #232]	; (8001190 <ex_main+0x340>)
 80010a6:	f008 f91a 	bl	80092de <xTaskCreate>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d005      	beq.n	80010bc <ex_main+0x26c>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 80010b0:	482b      	ldr	r0, [pc, #172]	; (8001160 <ex_main+0x310>)
 80010b2:	f015 f9ab 	bl	801640c <puts>
			exit(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f014 ff1c 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vAmbulanceManage, 	"Ambulance 3.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 80010bc:	2300      	movs	r3, #0
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2300      	movs	r3, #0
 80010c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010ca:	4933      	ldr	r1, [pc, #204]	; (8001198 <ex_main+0x348>)
 80010cc:	4830      	ldr	r0, [pc, #192]	; (8001190 <ex_main+0x340>)
 80010ce:	f008 f906 	bl	80092de <xTaskCreate>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d005      	beq.n	80010e4 <ex_main+0x294>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 80010d8:	4821      	ldr	r0, [pc, #132]	; (8001160 <ex_main+0x310>)
 80010da:	f015 f997 	bl	801640c <puts>
			exit(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f014 ff08 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vAmbulanceManage, 	"Ambulance 4.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 80010e4:	2300      	movs	r3, #0
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010f2:	492a      	ldr	r1, [pc, #168]	; (800119c <ex_main+0x34c>)
 80010f4:	4826      	ldr	r0, [pc, #152]	; (8001190 <ex_main+0x340>)
 80010f6:	f008 f8f2 	bl	80092de <xTaskCreate>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d005      	beq.n	800110c <ex_main+0x2bc>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8001100:	4817      	ldr	r0, [pc, #92]	; (8001160 <ex_main+0x310>)
 8001102:	f015 f983 	bl	801640c <puts>
			exit(1);
 8001106:	2001      	movs	r0, #1
 8001108:	f014 fef4 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vMaintenanceManage, "Maintenance 1.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 800110c:	2300      	movs	r3, #0
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	2301      	movs	r3, #1
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800111a:	4921      	ldr	r1, [pc, #132]	; (80011a0 <ex_main+0x350>)
 800111c:	4821      	ldr	r0, [pc, #132]	; (80011a4 <ex_main+0x354>)
 800111e:	f008 f8de 	bl	80092de <xTaskCreate>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d03f      	beq.n	80011a8 <ex_main+0x358>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <ex_main+0x310>)
 800112a:	f015 f96f 	bl	801640c <puts>
			exit(1);
 800112e:	2001      	movs	r0, #1
 8001130:	f014 fee0 	bl	8015ef4 <exit>
 8001134:	080175f0 	.word	0x080175f0
 8001138:	20000de0 	.word	0x20000de0
 800113c:	20000de4 	.word	0x20000de4
 8001140:	20000de8 	.word	0x20000de8
 8001144:	20000dec 	.word	0x20000dec
 8001148:	20000df0 	.word	0x20000df0
 800114c:	20000df4 	.word	0x20000df4
 8001150:	20000df8 	.word	0x20000df8
 8001154:	20000dfc 	.word	0x20000dfc
 8001158:	0801760c 	.word	0x0801760c
 800115c:	08001ac5 	.word	0x08001ac5
 8001160:	08017618 	.word	0x08017618
 8001164:	08017648 	.word	0x08017648
 8001168:	08001261 	.word	0x08001261
 800116c:	08017654 	.word	0x08017654
 8001170:	08001715 	.word	0x08001715
 8001174:	08017660 	.word	0x08017660
 8001178:	0801766c 	.word	0x0801766c
 800117c:	08017678 	.word	0x08017678
 8001180:	08001801 	.word	0x08001801
 8001184:	08017680 	.word	0x08017680
 8001188:	08017688 	.word	0x08017688
 800118c:	08017690 	.word	0x08017690
 8001190:	080018ed 	.word	0x080018ed
 8001194:	080176a0 	.word	0x080176a0
 8001198:	080176b0 	.word	0x080176b0
 800119c:	080176c0 	.word	0x080176c0
 80011a0:	080176d0 	.word	0x080176d0
 80011a4:	080019d9 	.word	0x080019d9
		}

		if (xTaskCreate(vMaintenanceManage, "Maintenance 2.", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 80011a8:	2300      	movs	r3, #0
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2301      	movs	r3, #1
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2300      	movs	r3, #0
 80011b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011b6:	4922      	ldr	r1, [pc, #136]	; (8001240 <ex_main+0x3f0>)
 80011b8:	4822      	ldr	r0, [pc, #136]	; (8001244 <ex_main+0x3f4>)
 80011ba:	f008 f890 	bl	80092de <xTaskCreate>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <ex_main+0x380>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 80011c4:	4820      	ldr	r0, [pc, #128]	; (8001248 <ex_main+0x3f8>)
 80011c6:	f015 f921 	bl	801640c <puts>
			exit(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f014 fe92 	bl	8015ef4 <exit>
		}

		if (xTaskCreate(vLightLedTask, "Red Led", configMINIMAL_STACK_SIZE,NULL, EVENT_PRIORITY, NULL) != pdPASS)
 80011d0:	2300      	movs	r3, #0
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011de:	491b      	ldr	r1, [pc, #108]	; (800124c <ex_main+0x3fc>)
 80011e0:	481b      	ldr	r0, [pc, #108]	; (8001250 <ex_main+0x400>)
 80011e2:	f008 f87c 	bl	80092de <xTaskCreate>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d005      	beq.n	80011f8 <ex_main+0x3a8>
		{
			printf("Error occurred when creating task, exiting...\r\n");
 80011ec:	4816      	ldr	r0, [pc, #88]	; (8001248 <ex_main+0x3f8>)
 80011ee:	f015 f90d 	bl	801640c <puts>
			exit(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f014 fe7e 	bl	8015ef4 <exit>
		}

/*-----------------------------------------------------------*/
		//creating binary semaphores for print
		xPrintSemaphore = xSemaphoreCreateBinary();
 80011f8:	2203      	movs	r2, #3
 80011fa:	2100      	movs	r1, #0
 80011fc:	2001      	movs	r0, #1
 80011fe:	f007 f979 	bl	80084f4 <xQueueGenericCreate>
 8001202:	4603      	mov	r3, r0
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <ex_main+0x404>)
 8001206:	6013      	str	r3, [r2, #0]

		if (xPrintSemaphore == NULL)
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <ex_main+0x404>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <ex_main+0x3cc>
		{
			printf("Couldn't create semaphore.. exiting\r\n");
 8001210:	4811      	ldr	r0, [pc, #68]	; (8001258 <ex_main+0x408>)
 8001212:	f015 f8fb 	bl	801640c <puts>
			exit(1);
 8001216:	2001      	movs	r0, #1
 8001218:	f014 fe6c 	bl	8015ef4 <exit>
		}
/*-----------------------------------------------------------*/
		// GIVE SEMAPHORES
		xSemaphoreGive(xPrintSemaphore);
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <ex_main+0x404>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	f007 fa13 	bl	8008650 <xQueueGenericSend>

		// SCHEDULER STARTS
		vTaskStartScheduler();
 800122a:	f008 fa6f 	bl	800970c <vTaskStartScheduler>
 800122e:	e005      	b.n	800123c <ex_main+0x3ec>
	}
	else
	{
		printf("Couldn't create queue, exiting program...\r\n");
 8001230:	480a      	ldr	r0, [pc, #40]	; (800125c <ex_main+0x40c>)
 8001232:	f015 f8eb 	bl	801640c <puts>
		exit(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f014 fe5c 	bl	8015ef4 <exit>
	}
	while(1);
 800123c:	e7fe      	b.n	800123c <ex_main+0x3ec>
 800123e:	bf00      	nop
 8001240:	080176e0 	.word	0x080176e0
 8001244:	080019d9 	.word	0x080019d9
 8001248:	08017618 	.word	0x08017618
 800124c:	080176f0 	.word	0x080176f0
 8001250:	08001aed 	.word	0x08001aed
 8001254:	20000ddc 	.word	0x20000ddc
 8001258:	080176f8 	.word	0x080176f8
 800125c:	08017720 	.word	0x08017720

08001260 <vDispatcher>:
}
/*-----------------------------------------------------------*/
void vDispatcher(void *pvParameters){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	BaseType_t xSendStatus;
	const TickType_t xTicksToWait = pdMS_TO_TICKS(TIME_TO_GET_EVENT);
 8001268:	2364      	movs	r3, #100	; 0x64
 800126a:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		// check event department
		switch(events[eventsLogCtr % MAX_EVENT_AMOUNT].handlingDepartment)
 800126c:	4baf      	ldr	r3, [pc, #700]	; (800152c <vDispatcher+0x2cc>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4baf      	ldr	r3, [pc, #700]	; (8001530 <vDispatcher+0x2d0>)
 8001272:	fb83 1302 	smull	r1, r3, r3, r2
 8001276:	1119      	asrs	r1, r3, #4
 8001278:	17d3      	asrs	r3, r2, #31
 800127a:	1acb      	subs	r3, r1, r3
 800127c:	2132      	movs	r1, #50	; 0x32
 800127e:	fb01 f303 	mul.w	r3, r1, r3
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	4aab      	ldr	r2, [pc, #684]	; (8001534 <vDispatcher+0x2d4>)
 8001286:	2152      	movs	r1, #82	; 0x52
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b31      	subs	r3, #49	; 0x31
 8001292:	2b03      	cmp	r3, #3
 8001294:	f200 8223 	bhi.w	80016de <vDispatcher+0x47e>
 8001298:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <vDispatcher+0x40>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	080012b1 	.word	0x080012b1
 80012a4:	080013b3 	.word	0x080013b3
 80012a8:	080014b5 	.word	0x080014b5
 80012ac:	080015dd 	.word	0x080015dd
		{
			case POLICE:
			{
				// check for event severity
				switch(events[eventsLogCtr % MAX_EVENT_AMOUNT].eventSeverity)
 80012b0:	4b9e      	ldr	r3, [pc, #632]	; (800152c <vDispatcher+0x2cc>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b9e      	ldr	r3, [pc, #632]	; (8001530 <vDispatcher+0x2d0>)
 80012b6:	fb83 1302 	smull	r1, r3, r3, r2
 80012ba:	1119      	asrs	r1, r3, #4
 80012bc:	17d3      	asrs	r3, r2, #31
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	2132      	movs	r1, #50	; 0x32
 80012c2:	fb01 f303 	mul.w	r3, r1, r3
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	4a9a      	ldr	r2, [pc, #616]	; (8001534 <vDispatcher+0x2d4>)
 80012ca:	2152      	movs	r1, #82	; 0x52
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	3301      	adds	r3, #1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b33      	cmp	r3, #51	; 0x33
 80012d8:	d044      	beq.n	8001364 <vDispatcher+0x104>
 80012da:	2b33      	cmp	r3, #51	; 0x33
 80012dc:	dc61      	bgt.n	80013a2 <vDispatcher+0x142>
 80012de:	2b31      	cmp	r3, #49	; 0x31
 80012e0:	d002      	beq.n	80012e8 <vDispatcher+0x88>
 80012e2:	2b32      	cmp	r3, #50	; 0x32
 80012e4:	d01f      	beq.n	8001326 <vDispatcher+0xc6>
						}
						break;
					}
					//in case we got other severity than the three mention above
					default:
						break;
 80012e6:	e05c      	b.n	80013a2 <vDispatcher+0x142>
						xSendStatus = xQueueSendToBack(xCriPoliceQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 80012e8:	4b93      	ldr	r3, [pc, #588]	; (8001538 <vDispatcher+0x2d8>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	4b8f      	ldr	r3, [pc, #572]	; (800152c <vDispatcher+0x2cc>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b8f      	ldr	r3, [pc, #572]	; (8001530 <vDispatcher+0x2d0>)
 80012f2:	fb83 1302 	smull	r1, r3, r3, r2
 80012f6:	1119      	asrs	r1, r3, #4
 80012f8:	17d3      	asrs	r3, r2, #31
 80012fa:	1acb      	subs	r3, r1, r3
 80012fc:	2132      	movs	r1, #50	; 0x32
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2252      	movs	r2, #82	; 0x52
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	4a8a      	ldr	r2, [pc, #552]	; (8001534 <vDispatcher+0x2d4>)
 800130c:	1899      	adds	r1, r3, r2
 800130e:	2300      	movs	r3, #0
 8001310:	2200      	movs	r2, #0
 8001312:	f007 f99d 	bl	8008650 <xQueueGenericSend>
 8001316:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d043      	beq.n	80013a6 <vDispatcher+0x146>
							printf( "Could not send to the queue.\r\n" );
 800131e:	4887      	ldr	r0, [pc, #540]	; (800153c <vDispatcher+0x2dc>)
 8001320:	f015 f874 	bl	801640c <puts>
						break;
 8001324:	e03f      	b.n	80013a6 <vDispatcher+0x146>
						xSendStatus = xQueueSendToFront(xNotWarPoliceQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 8001326:	4b86      	ldr	r3, [pc, #536]	; (8001540 <vDispatcher+0x2e0>)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	4b80      	ldr	r3, [pc, #512]	; (800152c <vDispatcher+0x2cc>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b80      	ldr	r3, [pc, #512]	; (8001530 <vDispatcher+0x2d0>)
 8001330:	fb83 1302 	smull	r1, r3, r3, r2
 8001334:	1119      	asrs	r1, r3, #4
 8001336:	17d3      	asrs	r3, r2, #31
 8001338:	1acb      	subs	r3, r1, r3
 800133a:	2132      	movs	r1, #50	; 0x32
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2252      	movs	r2, #82	; 0x52
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	4a7a      	ldr	r2, [pc, #488]	; (8001534 <vDispatcher+0x2d4>)
 800134a:	1899      	adds	r1, r3, r2
 800134c:	2301      	movs	r3, #1
 800134e:	2200      	movs	r2, #0
 8001350:	f007 f97e 	bl	8008650 <xQueueGenericSend>
 8001354:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d026      	beq.n	80013aa <vDispatcher+0x14a>
							printf( "Could not send to the queue.\r\n" );
 800135c:	4877      	ldr	r0, [pc, #476]	; (800153c <vDispatcher+0x2dc>)
 800135e:	f015 f855 	bl	801640c <puts>
						break;
 8001362:	e022      	b.n	80013aa <vDispatcher+0x14a>
						xSendStatus = xQueueSendToBack(xNotWarPoliceQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 8001364:	4b76      	ldr	r3, [pc, #472]	; (8001540 <vDispatcher+0x2e0>)
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	4b70      	ldr	r3, [pc, #448]	; (800152c <vDispatcher+0x2cc>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b70      	ldr	r3, [pc, #448]	; (8001530 <vDispatcher+0x2d0>)
 800136e:	fb83 1302 	smull	r1, r3, r3, r2
 8001372:	1119      	asrs	r1, r3, #4
 8001374:	17d3      	asrs	r3, r2, #31
 8001376:	1acb      	subs	r3, r1, r3
 8001378:	2132      	movs	r1, #50	; 0x32
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2252      	movs	r2, #82	; 0x52
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	4a6b      	ldr	r2, [pc, #428]	; (8001534 <vDispatcher+0x2d4>)
 8001388:	1899      	adds	r1, r3, r2
 800138a:	2300      	movs	r3, #0
 800138c:	2200      	movs	r2, #0
 800138e:	f007 f95f 	bl	8008650 <xQueueGenericSend>
 8001392:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d009      	beq.n	80013ae <vDispatcher+0x14e>
							printf( "Could not send to the queue.\r\n" );
 800139a:	4868      	ldr	r0, [pc, #416]	; (800153c <vDispatcher+0x2dc>)
 800139c:	f015 f836 	bl	801640c <puts>
						break;
 80013a0:	e005      	b.n	80013ae <vDispatcher+0x14e>
						break;
 80013a2:	bf00      	nop
 80013a4:	e19c      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80013a6:	bf00      	nop
 80013a8:	e19a      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80013aa:	bf00      	nop
 80013ac:	e198      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80013ae:	bf00      	nop
				}
				break;
 80013b0:	e196      	b.n	80016e0 <vDispatcher+0x480>
			}
			case FIRE:
			{
				// check for event severity
				switch(events[eventsLogCtr % MAX_EVENT_AMOUNT].eventSeverity)
 80013b2:	4b5e      	ldr	r3, [pc, #376]	; (800152c <vDispatcher+0x2cc>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <vDispatcher+0x2d0>)
 80013b8:	fb83 1302 	smull	r1, r3, r3, r2
 80013bc:	1119      	asrs	r1, r3, #4
 80013be:	17d3      	asrs	r3, r2, #31
 80013c0:	1acb      	subs	r3, r1, r3
 80013c2:	2132      	movs	r1, #50	; 0x32
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	4a5a      	ldr	r2, [pc, #360]	; (8001534 <vDispatcher+0x2d4>)
 80013cc:	2152      	movs	r1, #82	; 0x52
 80013ce:	fb01 f303 	mul.w	r3, r1, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	3301      	adds	r3, #1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b33      	cmp	r3, #51	; 0x33
 80013da:	d044      	beq.n	8001466 <vDispatcher+0x206>
 80013dc:	2b33      	cmp	r3, #51	; 0x33
 80013de:	dc61      	bgt.n	80014a4 <vDispatcher+0x244>
 80013e0:	2b31      	cmp	r3, #49	; 0x31
 80013e2:	d002      	beq.n	80013ea <vDispatcher+0x18a>
 80013e4:	2b32      	cmp	r3, #50	; 0x32
 80013e6:	d01f      	beq.n	8001428 <vDispatcher+0x1c8>
						}
						break;
					}
					//in case we got other severity than the three mention above
					default:
						break;
 80013e8:	e05c      	b.n	80014a4 <vDispatcher+0x244>
						xSendStatus = xQueueSendToBack(xCriFireQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <vDispatcher+0x2e4>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	4b4f      	ldr	r3, [pc, #316]	; (800152c <vDispatcher+0x2cc>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <vDispatcher+0x2d0>)
 80013f4:	fb83 1302 	smull	r1, r3, r3, r2
 80013f8:	1119      	asrs	r1, r3, #4
 80013fa:	17d3      	asrs	r3, r2, #31
 80013fc:	1acb      	subs	r3, r1, r3
 80013fe:	2132      	movs	r1, #50	; 0x32
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2252      	movs	r2, #82	; 0x52
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	4a49      	ldr	r2, [pc, #292]	; (8001534 <vDispatcher+0x2d4>)
 800140e:	1899      	adds	r1, r3, r2
 8001410:	2300      	movs	r3, #0
 8001412:	2200      	movs	r2, #0
 8001414:	f007 f91c 	bl	8008650 <xQueueGenericSend>
 8001418:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d043      	beq.n	80014a8 <vDispatcher+0x248>
							printf( "Could not send to the queue.\r\n" );
 8001420:	4846      	ldr	r0, [pc, #280]	; (800153c <vDispatcher+0x2dc>)
 8001422:	f014 fff3 	bl	801640c <puts>
						break;
 8001426:	e03f      	b.n	80014a8 <vDispatcher+0x248>
						xSendStatus = xQueueSendToFront(xNotWarFireQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 8001428:	4b47      	ldr	r3, [pc, #284]	; (8001548 <vDispatcher+0x2e8>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	4b3f      	ldr	r3, [pc, #252]	; (800152c <vDispatcher+0x2cc>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <vDispatcher+0x2d0>)
 8001432:	fb83 1302 	smull	r1, r3, r3, r2
 8001436:	1119      	asrs	r1, r3, #4
 8001438:	17d3      	asrs	r3, r2, #31
 800143a:	1acb      	subs	r3, r1, r3
 800143c:	2132      	movs	r1, #50	; 0x32
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2252      	movs	r2, #82	; 0x52
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4a3a      	ldr	r2, [pc, #232]	; (8001534 <vDispatcher+0x2d4>)
 800144c:	1899      	adds	r1, r3, r2
 800144e:	2301      	movs	r3, #1
 8001450:	2200      	movs	r2, #0
 8001452:	f007 f8fd 	bl	8008650 <xQueueGenericSend>
 8001456:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d026      	beq.n	80014ac <vDispatcher+0x24c>
							printf( "Could not send to the queue.\r\n" );
 800145e:	4837      	ldr	r0, [pc, #220]	; (800153c <vDispatcher+0x2dc>)
 8001460:	f014 ffd4 	bl	801640c <puts>
						break;
 8001464:	e022      	b.n	80014ac <vDispatcher+0x24c>
						xSendStatus = xQueueSendToBack(xNotWarFireQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <vDispatcher+0x2e8>)
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	4b30      	ldr	r3, [pc, #192]	; (800152c <vDispatcher+0x2cc>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <vDispatcher+0x2d0>)
 8001470:	fb83 1302 	smull	r1, r3, r3, r2
 8001474:	1119      	asrs	r1, r3, #4
 8001476:	17d3      	asrs	r3, r2, #31
 8001478:	1acb      	subs	r3, r1, r3
 800147a:	2132      	movs	r1, #50	; 0x32
 800147c:	fb01 f303 	mul.w	r3, r1, r3
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2252      	movs	r2, #82	; 0x52
 8001484:	fb02 f303 	mul.w	r3, r2, r3
 8001488:	4a2a      	ldr	r2, [pc, #168]	; (8001534 <vDispatcher+0x2d4>)
 800148a:	1899      	adds	r1, r3, r2
 800148c:	2300      	movs	r3, #0
 800148e:	2200      	movs	r2, #0
 8001490:	f007 f8de 	bl	8008650 <xQueueGenericSend>
 8001494:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d009      	beq.n	80014b0 <vDispatcher+0x250>
							printf( "Could not send to the queue.\r\n" );
 800149c:	4827      	ldr	r0, [pc, #156]	; (800153c <vDispatcher+0x2dc>)
 800149e:	f014 ffb5 	bl	801640c <puts>
						break;
 80014a2:	e005      	b.n	80014b0 <vDispatcher+0x250>
						break;
 80014a4:	bf00      	nop
 80014a6:	e11b      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80014a8:	bf00      	nop
 80014aa:	e119      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80014ac:	bf00      	nop
 80014ae:	e117      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80014b0:	bf00      	nop
				}
				break;
 80014b2:	e115      	b.n	80016e0 <vDispatcher+0x480>
			}

			case AMBULANCE:
			{
				// check for event severity
				switch(events[eventsLogCtr % MAX_EVENT_AMOUNT].eventSeverity)
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <vDispatcher+0x2cc>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <vDispatcher+0x2d0>)
 80014ba:	fb83 1302 	smull	r1, r3, r3, r2
 80014be:	1119      	asrs	r1, r3, #4
 80014c0:	17d3      	asrs	r3, r2, #31
 80014c2:	1acb      	subs	r3, r1, r3
 80014c4:	2132      	movs	r1, #50	; 0x32
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <vDispatcher+0x2d4>)
 80014ce:	2152      	movs	r1, #82	; 0x52
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	3301      	adds	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b33      	cmp	r3, #51	; 0x33
 80014dc:	d057      	beq.n	800158e <vDispatcher+0x32e>
 80014de:	2b33      	cmp	r3, #51	; 0x33
 80014e0:	dc74      	bgt.n	80015cc <vDispatcher+0x36c>
 80014e2:	2b31      	cmp	r3, #49	; 0x31
 80014e4:	d002      	beq.n	80014ec <vDispatcher+0x28c>
 80014e6:	2b32      	cmp	r3, #50	; 0x32
 80014e8:	d032      	beq.n	8001550 <vDispatcher+0x2f0>
						}
						break;
					}
					//in case we got other severity than the three mention above
					default:
						break;
 80014ea:	e06f      	b.n	80015cc <vDispatcher+0x36c>
						xSendStatus = xQueueSendToBack(xCriAmbulanceQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <vDispatcher+0x2ec>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <vDispatcher+0x2cc>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <vDispatcher+0x2d0>)
 80014f6:	fb83 1302 	smull	r1, r3, r3, r2
 80014fa:	1119      	asrs	r1, r3, #4
 80014fc:	17d3      	asrs	r3, r2, #31
 80014fe:	1acb      	subs	r3, r1, r3
 8001500:	2132      	movs	r1, #50	; 0x32
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2252      	movs	r2, #82	; 0x52
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <vDispatcher+0x2d4>)
 8001510:	1899      	adds	r1, r3, r2
 8001512:	2300      	movs	r3, #0
 8001514:	2200      	movs	r2, #0
 8001516:	f007 f89b 	bl	8008650 <xQueueGenericSend>
 800151a:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d056      	beq.n	80015d0 <vDispatcher+0x370>
							printf( "Could not send to the queue.\r\n" );
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <vDispatcher+0x2dc>)
 8001524:	f014 ff72 	bl	801640c <puts>
						break;
 8001528:	e052      	b.n	80015d0 <vDispatcher+0x370>
 800152a:	bf00      	nop
 800152c:	20000d40 	.word	0x20000d40
 8001530:	51eb851f 	.word	0x51eb851f
 8001534:	2002bcd4 	.word	0x2002bcd4
 8001538:	20000de0 	.word	0x20000de0
 800153c:	0801774c 	.word	0x0801774c
 8001540:	20000df0 	.word	0x20000df0
 8001544:	20000de4 	.word	0x20000de4
 8001548:	20000df4 	.word	0x20000df4
 800154c:	20000de8 	.word	0x20000de8
						xSendStatus = xQueueSendToFront(xNotWarAmbulanceQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 8001550:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <vDispatcher+0x494>)
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <vDispatcher+0x498>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <vDispatcher+0x49c>)
 800155a:	fb83 1302 	smull	r1, r3, r3, r2
 800155e:	1119      	asrs	r1, r3, #4
 8001560:	17d3      	asrs	r3, r2, #31
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	2132      	movs	r1, #50	; 0x32
 8001566:	fb01 f303 	mul.w	r3, r1, r3
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2252      	movs	r2, #82	; 0x52
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a63      	ldr	r2, [pc, #396]	; (8001700 <vDispatcher+0x4a0>)
 8001574:	1899      	adds	r1, r3, r2
 8001576:	2301      	movs	r3, #1
 8001578:	2200      	movs	r2, #0
 800157a:	f007 f869 	bl	8008650 <xQueueGenericSend>
 800157e:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d026      	beq.n	80015d4 <vDispatcher+0x374>
							printf( "Could not send to the queue.\r\n" );
 8001586:	485f      	ldr	r0, [pc, #380]	; (8001704 <vDispatcher+0x4a4>)
 8001588:	f014 ff40 	bl	801640c <puts>
						break;
 800158c:	e022      	b.n	80015d4 <vDispatcher+0x374>
						xSendStatus = xQueueSendToBack(xNotWarAmbulanceQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 800158e:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <vDispatcher+0x494>)
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <vDispatcher+0x498>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b59      	ldr	r3, [pc, #356]	; (80016fc <vDispatcher+0x49c>)
 8001598:	fb83 1302 	smull	r1, r3, r3, r2
 800159c:	1119      	asrs	r1, r3, #4
 800159e:	17d3      	asrs	r3, r2, #31
 80015a0:	1acb      	subs	r3, r1, r3
 80015a2:	2132      	movs	r1, #50	; 0x32
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2252      	movs	r2, #82	; 0x52
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	4a53      	ldr	r2, [pc, #332]	; (8001700 <vDispatcher+0x4a0>)
 80015b2:	1899      	adds	r1, r3, r2
 80015b4:	2300      	movs	r3, #0
 80015b6:	2200      	movs	r2, #0
 80015b8:	f007 f84a 	bl	8008650 <xQueueGenericSend>
 80015bc:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d009      	beq.n	80015d8 <vDispatcher+0x378>
							printf( "Could not send to the queue.\r\n" );
 80015c4:	484f      	ldr	r0, [pc, #316]	; (8001704 <vDispatcher+0x4a4>)
 80015c6:	f014 ff21 	bl	801640c <puts>
						break;
 80015ca:	e005      	b.n	80015d8 <vDispatcher+0x378>
						break;
 80015cc:	bf00      	nop
 80015ce:	e087      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80015d0:	bf00      	nop
 80015d2:	e085      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80015d4:	bf00      	nop
 80015d6:	e083      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80015d8:	bf00      	nop
				}
				break;
 80015da:	e081      	b.n	80016e0 <vDispatcher+0x480>
			}
			case MAINTENANCE:
			{
				// check for event severity
				switch(events[eventsLogCtr % MAX_EVENT_AMOUNT].eventSeverity)
 80015dc:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <vDispatcher+0x498>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b46      	ldr	r3, [pc, #280]	; (80016fc <vDispatcher+0x49c>)
 80015e2:	fb83 1302 	smull	r1, r3, r3, r2
 80015e6:	1119      	asrs	r1, r3, #4
 80015e8:	17d3      	asrs	r3, r2, #31
 80015ea:	1acb      	subs	r3, r1, r3
 80015ec:	2132      	movs	r1, #50	; 0x32
 80015ee:	fb01 f303 	mul.w	r3, r1, r3
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	4a42      	ldr	r2, [pc, #264]	; (8001700 <vDispatcher+0x4a0>)
 80015f6:	2152      	movs	r1, #82	; 0x52
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	3301      	adds	r3, #1
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b33      	cmp	r3, #51	; 0x33
 8001604:	d044      	beq.n	8001690 <vDispatcher+0x430>
 8001606:	2b33      	cmp	r3, #51	; 0x33
 8001608:	dc61      	bgt.n	80016ce <vDispatcher+0x46e>
 800160a:	2b31      	cmp	r3, #49	; 0x31
 800160c:	d002      	beq.n	8001614 <vDispatcher+0x3b4>
 800160e:	2b32      	cmp	r3, #50	; 0x32
 8001610:	d01f      	beq.n	8001652 <vDispatcher+0x3f2>
						}
						break;
					}
					//in case we got other severity than the three mention above
					default:
						break;
 8001612:	e05c      	b.n	80016ce <vDispatcher+0x46e>
						xSendStatus = xQueueSendToBack(xCriMaintenQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 8001614:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <vDispatcher+0x4a8>)
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <vDispatcher+0x498>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b37      	ldr	r3, [pc, #220]	; (80016fc <vDispatcher+0x49c>)
 800161e:	fb83 1302 	smull	r1, r3, r3, r2
 8001622:	1119      	asrs	r1, r3, #4
 8001624:	17d3      	asrs	r3, r2, #31
 8001626:	1acb      	subs	r3, r1, r3
 8001628:	2132      	movs	r1, #50	; 0x32
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2252      	movs	r2, #82	; 0x52
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	4a32      	ldr	r2, [pc, #200]	; (8001700 <vDispatcher+0x4a0>)
 8001638:	1899      	adds	r1, r3, r2
 800163a:	2300      	movs	r3, #0
 800163c:	2200      	movs	r2, #0
 800163e:	f007 f807 	bl	8008650 <xQueueGenericSend>
 8001642:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d043      	beq.n	80016d2 <vDispatcher+0x472>
							printf( "Could not send to the queue.\r\n" );
 800164a:	482e      	ldr	r0, [pc, #184]	; (8001704 <vDispatcher+0x4a4>)
 800164c:	f014 fede 	bl	801640c <puts>
						break;
 8001650:	e03f      	b.n	80016d2 <vDispatcher+0x472>
						xSendStatus = xQueueSendToFront(xNotWarMaintenQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <vDispatcher+0x4ac>)
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <vDispatcher+0x498>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <vDispatcher+0x49c>)
 800165c:	fb83 1302 	smull	r1, r3, r3, r2
 8001660:	1119      	asrs	r1, r3, #4
 8001662:	17d3      	asrs	r3, r2, #31
 8001664:	1acb      	subs	r3, r1, r3
 8001666:	2132      	movs	r1, #50	; 0x32
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2252      	movs	r2, #82	; 0x52
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	4a22      	ldr	r2, [pc, #136]	; (8001700 <vDispatcher+0x4a0>)
 8001676:	1899      	adds	r1, r3, r2
 8001678:	2301      	movs	r3, #1
 800167a:	2200      	movs	r2, #0
 800167c:	f006 ffe8 	bl	8008650 <xQueueGenericSend>
 8001680:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d026      	beq.n	80016d6 <vDispatcher+0x476>
							printf( "Could not sevPrintCityLognd to the queue.\r\n" );
 8001688:	4821      	ldr	r0, [pc, #132]	; (8001710 <vDispatcher+0x4b0>)
 800168a:	f014 febf 	bl	801640c <puts>
						break;
 800168e:	e022      	b.n	80016d6 <vDispatcher+0x476>
						xSendStatus = xQueueSendToBack(xNotWarMaintenQueue, &events[eventsLogCtr % MAX_EVENT_AMOUNT], ZERO_TICKS_TO_WAIT);
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <vDispatcher+0x4ac>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <vDispatcher+0x498>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <vDispatcher+0x49c>)
 800169a:	fb83 1302 	smull	r1, r3, r3, r2
 800169e:	1119      	asrs	r1, r3, #4
 80016a0:	17d3      	asrs	r3, r2, #31
 80016a2:	1acb      	subs	r3, r1, r3
 80016a4:	2132      	movs	r1, #50	; 0x32
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2252      	movs	r2, #82	; 0x52
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <vDispatcher+0x4a0>)
 80016b4:	1899      	adds	r1, r3, r2
 80016b6:	2300      	movs	r3, #0
 80016b8:	2200      	movs	r2, #0
 80016ba:	f006 ffc9 	bl	8008650 <xQueueGenericSend>
 80016be:	60b8      	str	r0, [r7, #8]
						if( xSendStatus != pdPASS )
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d009      	beq.n	80016da <vDispatcher+0x47a>
							printf( "Could not send to the queue.\r\n" );
 80016c6:	480f      	ldr	r0, [pc, #60]	; (8001704 <vDispatcher+0x4a4>)
 80016c8:	f014 fea0 	bl	801640c <puts>
						break;
 80016cc:	e005      	b.n	80016da <vDispatcher+0x47a>
						break;
 80016ce:	bf00      	nop
 80016d0:	e006      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80016d2:	bf00      	nop
 80016d4:	e004      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80016d6:	bf00      	nop
 80016d8:	e002      	b.n	80016e0 <vDispatcher+0x480>
						break;
 80016da:	bf00      	nop
				}
				break;
 80016dc:	e000      	b.n	80016e0 <vDispatcher+0x480>
			//in case we got event for other department
			default:
				break;
 80016de:	bf00      	nop
			}
		}
		eventsLogCtr++;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <vDispatcher+0x498>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <vDispatcher+0x498>)
 80016e8:	6013      	str	r3, [r2, #0]
		vTaskDelay(xTicksToWait);
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f007 ffd8 	bl	80096a0 <vTaskDelay>
		switch(events[eventsLogCtr % MAX_EVENT_AMOUNT].handlingDepartment)
 80016f0:	e5bc      	b.n	800126c <vDispatcher+0xc>
 80016f2:	bf00      	nop
 80016f4:	20000df8 	.word	0x20000df8
 80016f8:	20000d40 	.word	0x20000d40
 80016fc:	51eb851f 	.word	0x51eb851f
 8001700:	2002bcd4 	.word	0x2002bcd4
 8001704:	0801774c 	.word	0x0801774c
 8001708:	20000dec 	.word	0x20000dec
 800170c:	20000dfc 	.word	0x20000dfc
 8001710:	0801776c 	.word	0x0801776c

08001714 <vPoliceManage>:
 * in this task we are checking for police queues
 * if there are messages in critical queue, the will be pulled first.
 * we can take from each queue or print out the msg only once
 * until last task printed then a semaphore will release
 */
void vPoliceManage (void *pvParameters){
 8001714:	b580      	push	{r7, lr}
 8001716:	b09a      	sub	sp, #104	; 0x68
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
		const TickType_t xTicksToDelay = pdMS_TO_TICKS(MS_TO_WAIT);
 800171c:	230a      	movs	r3, #10
 800171e:	667b      	str	r3, [r7, #100]	; 0x64
		BaseType_t xRecStatus;
		dispMessage_t ptemp;
		for(;;)
		{
			//check if queue is not empty
			if(prvIsQueueEmpty(xCriPoliceQueue)!= pdTRUE)
 8001720:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <vPoliceManage+0xd0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f007 fd49 	bl	80091bc <prvIsQueueEmpty>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	d028      	beq.n	8001782 <vPoliceManage+0x6e>
			{
				xRecStatus = xQueueReceive(xCriPoliceQueue, &ptemp, ZERO_TICKS_TO_WAIT);
 8001730:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <vPoliceManage+0xd0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f107 010c 	add.w	r1, r7, #12
 8001738:	2200      	movs	r2, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f007 f9c4 	bl	8008ac8 <xQueueReceive>
 8001740:	6638      	str	r0, [r7, #96]	; 0x60
				if (xRecStatus != pdTRUE)
 8001742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001744:	2b01      	cmp	r3, #1
 8001746:	d003      	beq.n	8001750 <vPoliceManage+0x3c>
				{
					vTaskDelay(xTicksToDelay);
 8001748:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800174a:	f007 ffa9 	bl	80096a0 <vTaskDelay>
					continue;
 800174e:	e048      	b.n	80017e2 <vPoliceManage+0xce>
				}
				// waiting for semaphore to print
				xSemaphoreTake(xPrintSemaphore, portMAX_DELAY);
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <vPoliceManage+0xd4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001758:	4618      	mov	r0, r3
 800175a:	f007 fa9b 	bl	8008c94 <xQueueSemaphoreTake>
				sprintf(text,"POLICE critical event happened in address %s\r\n",(char *)ptemp.eventAddress);
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	3302      	adds	r3, #2
 8001764:	461a      	mov	r2, r3
 8001766:	4921      	ldr	r1, [pc, #132]	; (80017ec <vPoliceManage+0xd8>)
 8001768:	4821      	ldr	r0, [pc, #132]	; (80017f0 <vPoliceManage+0xdc>)
 800176a:	f014 ff0f 	bl	801658c <siprintf>
				HAL_UART_Transmit_IT(UART_DEBUG,(uint8_t *)text, EVENT_MSG_LEN);
 800176e:	2296      	movs	r2, #150	; 0x96
 8001770:	491f      	ldr	r1, [pc, #124]	; (80017f0 <vPoliceManage+0xdc>)
 8001772:	4820      	ldr	r0, [pc, #128]	; (80017f4 <vPoliceManage+0xe0>)
 8001774:	f004 f8b4 	bl	80058e0 <HAL_UART_Transmit_IT>
				HAL_Delay(BUSY_WAIT);
 8001778:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800177c:	f000 fbd0 	bl	8001f20 <HAL_Delay>
 8001780:	e7ce      	b.n	8001720 <vPoliceManage+0xc>
			}
			//check if queue is not empty
			else if(prvIsQueueEmpty(xNotWarPoliceQueue)!= pdTRUE)
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <vPoliceManage+0xe4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f007 fd18 	bl	80091bc <prvIsQueueEmpty>
 800178c:	4603      	mov	r3, r0
 800178e:	2b01      	cmp	r3, #1
 8001790:	d0c6      	beq.n	8001720 <vPoliceManage+0xc>
			{
				xRecStatus = xQueueReceive(xNotWarPoliceQueue, &ptemp, ZERO_TICKS_TO_WAIT);
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <vPoliceManage+0xe4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f107 010c 	add.w	r1, r7, #12
 800179a:	2200      	movs	r2, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f007 f993 	bl	8008ac8 <xQueueReceive>
 80017a2:	6638      	str	r0, [r7, #96]	; 0x60
				if (xRecStatus != pdTRUE)
 80017a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d003      	beq.n	80017b2 <vPoliceManage+0x9e>
				{
					vTaskDelay(xTicksToDelay);
 80017aa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80017ac:	f007 ff78 	bl	80096a0 <vTaskDelay>
					continue;
 80017b0:	e017      	b.n	80017e2 <vPoliceManage+0xce>
				}
				// waiting for semaphore to print
				xSemaphoreTake(xPrintSemaphore, portMAX_DELAY);
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <vPoliceManage+0xd4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017ba:	4618      	mov	r0, r3
 80017bc:	f007 fa6a 	bl	8008c94 <xQueueSemaphoreTake>
				sprintf(text,"POLICE warning event happened in address %s\r\n",(char *)ptemp.eventAddress);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	3302      	adds	r3, #2
 80017c6:	461a      	mov	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <vPoliceManage+0xe8>)
 80017ca:	4809      	ldr	r0, [pc, #36]	; (80017f0 <vPoliceManage+0xdc>)
 80017cc:	f014 fede 	bl	801658c <siprintf>
				HAL_UART_Transmit_IT(UART_DEBUG,(uint8_t *)text, EVENT_MSG_LEN);
 80017d0:	2296      	movs	r2, #150	; 0x96
 80017d2:	4907      	ldr	r1, [pc, #28]	; (80017f0 <vPoliceManage+0xdc>)
 80017d4:	4807      	ldr	r0, [pc, #28]	; (80017f4 <vPoliceManage+0xe0>)
 80017d6:	f004 f883 	bl	80058e0 <HAL_UART_Transmit_IT>
				HAL_Delay(BUSY_WAIT);
 80017da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017de:	f000 fb9f 	bl	8001f20 <HAL_Delay>
			if(prvIsQueueEmpty(xCriPoliceQueue)!= pdTRUE)
 80017e2:	e79d      	b.n	8001720 <vPoliceManage+0xc>
 80017e4:	20000de0 	.word	0x20000de0
 80017e8:	20000ddc 	.word	0x20000ddc
 80017ec:	08017798 	.word	0x08017798
 80017f0:	20000d44 	.word	0x20000d44
 80017f4:	20000758 	.word	0x20000758
 80017f8:	20000df0 	.word	0x20000df0
 80017fc:	080177c8 	.word	0x080177c8

08001800 <vFireManage>:
 * in this task we are checking for fire queues
 * if there are messages in critical queue, the will be pulled first.
 * we can take from each queue or print out the msg only once
 * until last task printed then a semaphore will release
 */
void vFireManage (void *pvParameters){
 8001800:	b580      	push	{r7, lr}
 8001802:	b09a      	sub	sp, #104	; 0x68
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	const TickType_t xTicksToDelay = pdMS_TO_TICKS(MS_TO_WAIT);
 8001808:	230a      	movs	r3, #10
 800180a:	667b      	str	r3, [r7, #100]	; 0x64
	BaseType_t xRecStatus;
	dispMessage_t ftemp;
	for(;;)
	{
		//check if queue is not empty
		if(prvIsQueueEmpty(xCriFireQueue)!= pdTRUE)
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <vFireManage+0xd0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f007 fcd3 	bl	80091bc <prvIsQueueEmpty>
 8001816:	4603      	mov	r3, r0
 8001818:	2b01      	cmp	r3, #1
 800181a:	d028      	beq.n	800186e <vFireManage+0x6e>
		{
			xRecStatus = xQueueReceive(xCriFireQueue, &ftemp, ZERO_TICKS_TO_WAIT);
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <vFireManage+0xd0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f107 010c 	add.w	r1, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f007 f94e 	bl	8008ac8 <xQueueReceive>
 800182c:	6638      	str	r0, [r7, #96]	; 0x60
			if (xRecStatus != pdTRUE)
 800182e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001830:	2b01      	cmp	r3, #1
 8001832:	d003      	beq.n	800183c <vFireManage+0x3c>
					{
						vTaskDelay(xTicksToDelay);
 8001834:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001836:	f007 ff33 	bl	80096a0 <vTaskDelay>
						continue;
 800183a:	e048      	b.n	80018ce <vFireManage+0xce>
					}
			// waiting for semaphore to print
			xSemaphoreTake(xPrintSemaphore, portMAX_DELAY);
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <vFireManage+0xd4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001844:	4618      	mov	r0, r3
 8001846:	f007 fa25 	bl	8008c94 <xQueueSemaphoreTake>
			sprintf(text,"FIRE critical event happened in address %s\r\n",(char *)ftemp.eventAddress);
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	3302      	adds	r3, #2
 8001850:	461a      	mov	r2, r3
 8001852:	4921      	ldr	r1, [pc, #132]	; (80018d8 <vFireManage+0xd8>)
 8001854:	4821      	ldr	r0, [pc, #132]	; (80018dc <vFireManage+0xdc>)
 8001856:	f014 fe99 	bl	801658c <siprintf>
			HAL_UART_Transmit_IT(UART_DEBUG,(uint8_t *)text, EVENT_MSG_LEN);
 800185a:	2296      	movs	r2, #150	; 0x96
 800185c:	491f      	ldr	r1, [pc, #124]	; (80018dc <vFireManage+0xdc>)
 800185e:	4820      	ldr	r0, [pc, #128]	; (80018e0 <vFireManage+0xe0>)
 8001860:	f004 f83e 	bl	80058e0 <HAL_UART_Transmit_IT>
			HAL_Delay(BUSY_WAIT);
 8001864:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001868:	f000 fb5a 	bl	8001f20 <HAL_Delay>
 800186c:	e7ce      	b.n	800180c <vFireManage+0xc>
		}
		//check if queue is not empty
		else if(prvIsQueueEmpty(xNotWarFireQueue)!= pdTRUE)
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <vFireManage+0xe4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f007 fca2 	bl	80091bc <prvIsQueueEmpty>
 8001878:	4603      	mov	r3, r0
 800187a:	2b01      	cmp	r3, #1
 800187c:	d0c6      	beq.n	800180c <vFireManage+0xc>
		{
			xRecStatus = xQueueReceive(xNotWarFireQueue, &ftemp, ZERO_TICKS_TO_WAIT);
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <vFireManage+0xe4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f107 010c 	add.w	r1, r7, #12
 8001886:	2200      	movs	r2, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f007 f91d 	bl	8008ac8 <xQueueReceive>
 800188e:	6638      	str	r0, [r7, #96]	; 0x60
			if (xRecStatus != pdTRUE)
 8001890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001892:	2b01      	cmp	r3, #1
 8001894:	d003      	beq.n	800189e <vFireManage+0x9e>
					{
						vTaskDelay(xTicksToDelay);
 8001896:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001898:	f007 ff02 	bl	80096a0 <vTaskDelay>
						continue;
 800189c:	e017      	b.n	80018ce <vFireManage+0xce>
					}
			// waiting for semaphore to print
			xSemaphoreTake(xPrintSemaphore, portMAX_DELAY);
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <vFireManage+0xd4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a6:	4618      	mov	r0, r3
 80018a8:	f007 f9f4 	bl	8008c94 <xQueueSemaphoreTake>
			sprintf(text,"FIRE warning event happened in address %s\r\n",(char *)ftemp.eventAddress);
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	3302      	adds	r3, #2
 80018b2:	461a      	mov	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <vFireManage+0xe8>)
 80018b6:	4809      	ldr	r0, [pc, #36]	; (80018dc <vFireManage+0xdc>)
 80018b8:	f014 fe68 	bl	801658c <siprintf>
			HAL_UART_Transmit_IT(UART_DEBUG,(uint8_t *)text, EVENT_MSG_LEN);
 80018bc:	2296      	movs	r2, #150	; 0x96
 80018be:	4907      	ldr	r1, [pc, #28]	; (80018dc <vFireManage+0xdc>)
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <vFireManage+0xe0>)
 80018c2:	f004 f80d 	bl	80058e0 <HAL_UART_Transmit_IT>
			HAL_Delay(BUSY_WAIT);
 80018c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018ca:	f000 fb29 	bl	8001f20 <HAL_Delay>
		if(prvIsQueueEmpty(xCriFireQueue)!= pdTRUE)
 80018ce:	e79d      	b.n	800180c <vFireManage+0xc>
 80018d0:	20000de4 	.word	0x20000de4
 80018d4:	20000ddc 	.word	0x20000ddc
 80018d8:	080177f8 	.word	0x080177f8
 80018dc:	20000d44 	.word	0x20000d44
 80018e0:	20000758 	.word	0x20000758
 80018e4:	20000df4 	.word	0x20000df4
 80018e8:	08017828 	.word	0x08017828

080018ec <vAmbulanceManage>:
 * in this task we are checking for ambulance queues
 * if there are messages in critical queue, the will be pulled first.
 * we can take from each queue or print out the msg only once
 * until last task printed then a semaphore will release
 */
void vAmbulanceManage (void *pvParameters){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b09a      	sub	sp, #104	; 0x68
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	const TickType_t xTicksToDelay = pdMS_TO_TICKS(MS_TO_WAIT);
 80018f4:	230a      	movs	r3, #10
 80018f6:	667b      	str	r3, [r7, #100]	; 0x64
	BaseType_t xRecStatus;
	dispMessage_t atemp;
	for(;;)
	{
		//check if queue is not empty
		if(prvIsQueueEmpty(xCriAmbulanceQueue)!= pdTRUE)
 80018f8:	4b30      	ldr	r3, [pc, #192]	; (80019bc <vAmbulanceManage+0xd0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f007 fc5d 	bl	80091bc <prvIsQueueEmpty>
 8001902:	4603      	mov	r3, r0
 8001904:	2b01      	cmp	r3, #1
 8001906:	d028      	beq.n	800195a <vAmbulanceManage+0x6e>
		{
			xRecStatus = xQueueReceive(xCriAmbulanceQueue, &atemp, ZERO_TICKS_TO_WAIT);
 8001908:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <vAmbulanceManage+0xd0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f107 010c 	add.w	r1, r7, #12
 8001910:	2200      	movs	r2, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f007 f8d8 	bl	8008ac8 <xQueueReceive>
 8001918:	6638      	str	r0, [r7, #96]	; 0x60
			if (xRecStatus != pdTRUE)
 800191a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800191c:	2b01      	cmp	r3, #1
 800191e:	d003      	beq.n	8001928 <vAmbulanceManage+0x3c>
					{
						vTaskDelay(xTicksToDelay);
 8001920:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001922:	f007 febd 	bl	80096a0 <vTaskDelay>
						continue;
 8001926:	e048      	b.n	80019ba <vAmbulanceManage+0xce>
					}
			// waiting for semaphore to print
			xSemaphoreTake(xPrintSemaphore, portMAX_DELAY);
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <vAmbulanceManage+0xd4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001930:	4618      	mov	r0, r3
 8001932:	f007 f9af 	bl	8008c94 <xQueueSemaphoreTake>
			sprintf(text,"AMBULANCE critical event happened in address %s\r\n",(char *)atemp.eventAddress);
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	3302      	adds	r3, #2
 800193c:	461a      	mov	r2, r3
 800193e:	4921      	ldr	r1, [pc, #132]	; (80019c4 <vAmbulanceManage+0xd8>)
 8001940:	4821      	ldr	r0, [pc, #132]	; (80019c8 <vAmbulanceManage+0xdc>)
 8001942:	f014 fe23 	bl	801658c <siprintf>
			HAL_UART_Transmit_IT(UART_DEBUG,(uint8_t *)text, EVENT_MSG_LEN);
 8001946:	2296      	movs	r2, #150	; 0x96
 8001948:	491f      	ldr	r1, [pc, #124]	; (80019c8 <vAmbulanceManage+0xdc>)
 800194a:	4820      	ldr	r0, [pc, #128]	; (80019cc <vAmbulanceManage+0xe0>)
 800194c:	f003 ffc8 	bl	80058e0 <HAL_UART_Transmit_IT>
			HAL_Delay(BUSY_WAIT);
 8001950:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001954:	f000 fae4 	bl	8001f20 <HAL_Delay>
 8001958:	e7ce      	b.n	80018f8 <vAmbulanceManage+0xc>
		}
		//check if queue is not empty
		else if(prvIsQueueEmpty(xNotWarAmbulanceQueue)!= pdTRUE)
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <vAmbulanceManage+0xe4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f007 fc2c 	bl	80091bc <prvIsQueueEmpty>
 8001964:	4603      	mov	r3, r0
 8001966:	2b01      	cmp	r3, #1
 8001968:	d0c6      	beq.n	80018f8 <vAmbulanceManage+0xc>
		{
			xRecStatus = xQueueReceive(xNotWarAmbulanceQueue, &atemp, ZERO_TICKS_TO_WAIT);
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <vAmbulanceManage+0xe4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f107 010c 	add.w	r1, r7, #12
 8001972:	2200      	movs	r2, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f007 f8a7 	bl	8008ac8 <xQueueReceive>
 800197a:	6638      	str	r0, [r7, #96]	; 0x60
			if (xRecStatus != pdTRUE)
 800197c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800197e:	2b01      	cmp	r3, #1
 8001980:	d003      	beq.n	800198a <vAmbulanceManage+0x9e>
					{
						vTaskDelay(xTicksToDelay);
 8001982:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001984:	f007 fe8c 	bl	80096a0 <vTaskDelay>
						continue;
 8001988:	e017      	b.n	80019ba <vAmbulanceManage+0xce>
					}
			// waiting for semaphore to print
			xSemaphoreTake(xPrintSemaphore, portMAX_DELAY);
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <vAmbulanceManage+0xd4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001992:	4618      	mov	r0, r3
 8001994:	f007 f97e 	bl	8008c94 <xQueueSemaphoreTake>
			sprintf(text,"AMBULANCE warning event happened in address %s\r\n",(char *)atemp.eventAddress);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	3302      	adds	r3, #2
 800199e:	461a      	mov	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <vAmbulanceManage+0xe8>)
 80019a2:	4809      	ldr	r0, [pc, #36]	; (80019c8 <vAmbulanceManage+0xdc>)
 80019a4:	f014 fdf2 	bl	801658c <siprintf>
			HAL_UART_Transmit_IT(UART_DEBUG,(uint8_t *)text, EVENT_MSG_LEN);
 80019a8:	2296      	movs	r2, #150	; 0x96
 80019aa:	4907      	ldr	r1, [pc, #28]	; (80019c8 <vAmbulanceManage+0xdc>)
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <vAmbulanceManage+0xe0>)
 80019ae:	f003 ff97 	bl	80058e0 <HAL_UART_Transmit_IT>
			HAL_Delay(BUSY_WAIT);
 80019b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019b6:	f000 fab3 	bl	8001f20 <HAL_Delay>
		if(prvIsQueueEmpty(xCriAmbulanceQueue)!= pdTRUE)
 80019ba:	e79d      	b.n	80018f8 <vAmbulanceManage+0xc>
 80019bc:	20000de8 	.word	0x20000de8
 80019c0:	20000ddc 	.word	0x20000ddc
 80019c4:	08017854 	.word	0x08017854
 80019c8:	20000d44 	.word	0x20000d44
 80019cc:	20000758 	.word	0x20000758
 80019d0:	20000df8 	.word	0x20000df8
 80019d4:	08017888 	.word	0x08017888

080019d8 <vMaintenanceManage>:
 * in this task we are checking for maintenance queues
 * if there are messages in critical queue, the will be pulled first.
 * we can take from each queue or print out the msg only once
 * until last task printed then a semaphore will release
 */
void vMaintenanceManage (void *pvParameters){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b09a      	sub	sp, #104	; 0x68
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	const TickType_t xTicksToDelay = pdMS_TO_TICKS(MS_TO_WAIT);
 80019e0:	230a      	movs	r3, #10
 80019e2:	667b      	str	r3, [r7, #100]	; 0x64
	BaseType_t xRecStatus;
	dispMessage_t temp;
	for(;;)
	{
		//check if queue is not empty
		if(prvIsQueueEmpty(xCriMaintenQueue)!= pdTRUE)
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <vMaintenanceManage+0xd0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f007 fbe7 	bl	80091bc <prvIsQueueEmpty>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d028      	beq.n	8001a46 <vMaintenanceManage+0x6e>
		{

			xRecStatus = xQueueReceive(xCriMaintenQueue, &temp, ZERO_TICKS_TO_WAIT);
 80019f4:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <vMaintenanceManage+0xd0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f107 010c 	add.w	r1, r7, #12
 80019fc:	2200      	movs	r2, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f007 f862 	bl	8008ac8 <xQueueReceive>
 8001a04:	6638      	str	r0, [r7, #96]	; 0x60
			if (xRecStatus != pdTRUE)
 8001a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d003      	beq.n	8001a14 <vMaintenanceManage+0x3c>
					{
						vTaskDelay(xTicksToDelay);
 8001a0c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001a0e:	f007 fe47 	bl	80096a0 <vTaskDelay>
						continue;
 8001a12:	e048      	b.n	8001aa6 <vMaintenanceManage+0xce>
					}
			// waiting for semaphore to print
			xSemaphoreTake(xPrintSemaphore, portMAX_DELAY);
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <vMaintenanceManage+0xd4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f007 f939 	bl	8008c94 <xQueueSemaphoreTake>
			sprintf(text,"MAINTENANCE critical event happened in address %s\r\n",(char *)temp.eventAddress);
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	3302      	adds	r3, #2
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4921      	ldr	r1, [pc, #132]	; (8001ab0 <vMaintenanceManage+0xd8>)
 8001a2c:	4821      	ldr	r0, [pc, #132]	; (8001ab4 <vMaintenanceManage+0xdc>)
 8001a2e:	f014 fdad 	bl	801658c <siprintf>
			HAL_UART_Transmit_IT(UART_DEBUG,(uint8_t *)text, EVENT_MSG_LEN);
 8001a32:	2296      	movs	r2, #150	; 0x96
 8001a34:	491f      	ldr	r1, [pc, #124]	; (8001ab4 <vMaintenanceManage+0xdc>)
 8001a36:	4820      	ldr	r0, [pc, #128]	; (8001ab8 <vMaintenanceManage+0xe0>)
 8001a38:	f003 ff52 	bl	80058e0 <HAL_UART_Transmit_IT>
			HAL_Delay(BUSY_WAIT);
 8001a3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a40:	f000 fa6e 	bl	8001f20 <HAL_Delay>
 8001a44:	e7ce      	b.n	80019e4 <vMaintenanceManage+0xc>
		}
		//check if queue is not empty
		else if(prvIsQueueEmpty(xNotWarMaintenQueue)!= pdTRUE)
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <vMaintenanceManage+0xe4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f007 fbb6 	bl	80091bc <prvIsQueueEmpty>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d0c6      	beq.n	80019e4 <vMaintenanceManage+0xc>
		{
			xRecStatus = xQueueReceive(xNotWarMaintenQueue, &temp, ZERO_TICKS_TO_WAIT);
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <vMaintenanceManage+0xe4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f107 010c 	add.w	r1, r7, #12
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f007 f831 	bl	8008ac8 <xQueueReceive>
 8001a66:	6638      	str	r0, [r7, #96]	; 0x60
			if (xRecStatus != pdTRUE)
 8001a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d003      	beq.n	8001a76 <vMaintenanceManage+0x9e>
					{
						vTaskDelay(xTicksToDelay);
 8001a6e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001a70:	f007 fe16 	bl	80096a0 <vTaskDelay>
						continue;
 8001a74:	e017      	b.n	8001aa6 <vMaintenanceManage+0xce>
					}
			// waiting for semaphore to print
			xSemaphoreTake(xPrintSemaphore, portMAX_DELAY);
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <vMaintenanceManage+0xd4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f007 f908 	bl	8008c94 <xQueueSemaphoreTake>
			sprintf(text,"MAINTENANCE warning event happened in address %s\r\n",(char *)temp.eventAddress);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	3302      	adds	r3, #2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <vMaintenanceManage+0xe8>)
 8001a8e:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <vMaintenanceManage+0xdc>)
 8001a90:	f014 fd7c 	bl	801658c <siprintf>
			HAL_UART_Transmit_IT(UART_DEBUG,(uint8_t *)text, EVENT_MSG_LEN);
 8001a94:	2296      	movs	r2, #150	; 0x96
 8001a96:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <vMaintenanceManage+0xdc>)
 8001a98:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <vMaintenanceManage+0xe0>)
 8001a9a:	f003 ff21 	bl	80058e0 <HAL_UART_Transmit_IT>
			HAL_Delay(BUSY_WAIT);
 8001a9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001aa2:	f000 fa3d 	bl	8001f20 <HAL_Delay>
		if(prvIsQueueEmpty(xCriMaintenQueue)!= pdTRUE)
 8001aa6:	e79d      	b.n	80019e4 <vMaintenanceManage+0xc>
 8001aa8:	20000dec 	.word	0x20000dec
 8001aac:	20000ddc 	.word	0x20000ddc
 8001ab0:	080178bc 	.word	0x080178bc
 8001ab4:	20000d44 	.word	0x20000d44
 8001ab8:	20000758 	.word	0x20000758
 8001abc:	20000dfc 	.word	0x20000dfc
 8001ac0:	080178f0 	.word	0x080178f0

08001ac4 <vLwipTask>:

/*
 * this task init the lwip and tftp server on EVB
 */
void vLwipTask(void *pvParameters)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  MX_LWIP_Init();
 8001acc:	f005 faa4 	bl	8007018 <MX_LWIP_Init>
  tftp_init(ctx);
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <vLwipTask+0x24>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f009 fe9f 	bl	800b818 <tftp_init>

  vTaskDelete(NULL);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f007 fd4e 	bl	800957c <vTaskDelete>

}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000d3c 	.word	0x20000d3c

08001aec <vLightLedTask>:
/*
 * task for toggle red led
 * has busy wait of 5 ms and then go
 * delay for 1 sec
 */
void vLightLedTask (void *pvParameters){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
		for (;;)
		{
			HAL_GPIO_TogglePin(GPIOB, RED_LED);
 8001af4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <vLightLedTask+0x2c>)
 8001afa:	f002 f81c 	bl	8003b36 <HAL_GPIO_TogglePin>
			HAL_Delay(LED_BUSY_WAIT);
 8001afe:	2005      	movs	r0, #5
 8001b00:	f000 fa0e 	bl	8001f20 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOB, RED_LED);
 8001b04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b08:	4803      	ldr	r0, [pc, #12]	; (8001b18 <vLightLedTask+0x2c>)
 8001b0a:	f002 f814 	bl	8003b36 <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(LED_DELAY));
 8001b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b12:	f007 fdc5 	bl	80096a0 <vTaskDelay>
			HAL_GPIO_TogglePin(GPIOB, RED_LED);
 8001b16:	e7ed      	b.n	8001af4 <vLightLedTask+0x8>
 8001b18:	40020400 	.word	0x40020400

08001b1c <HAL_UART_TxCpltCallback>:
 * relevant queue means the one that just printed out the message
 * this is check by the event in text buffer
 * at the end we setting text to o and give semaphore for printing
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	memset(text,BUF_INIT_VALUE,sizeof(text));
 8001b24:	2296      	movs	r2, #150	; 0x96
 8001b26:	2100      	movs	r1, #0
 8001b28:	4806      	ldr	r0, [pc, #24]	; (8001b44 <HAL_UART_TxCpltCallback+0x28>)
 8001b2a:	f014 fb4c 	bl	80161c6 <memset>
	xQueueGiveFromISR(xPrintSemaphore,&xHigherPriorityTaskWoken);
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_UART_TxCpltCallback+0x2c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4906      	ldr	r1, [pc, #24]	; (8001b4c <HAL_UART_TxCpltCallback+0x30>)
 8001b34:	4618      	mov	r0, r3
 8001b36:	f006 ff31 	bl	800899c <xQueueGiveFromISR>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000d44 	.word	0x20000d44
 8001b48:	20000ddc 	.word	0x20000ddc
 8001b4c:	20000004 	.word	0x20000004

08001b50 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	4804      	ldr	r0, [pc, #16]	; (8001b78 <_write+0x28>)
 8001b68:	f003 fd72 	bl	8005650 <HAL_UART_Transmit>
	return len;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000758 	.word	0x20000758

08001b7c <__io_getchar>:

// scanf
int __io_getchar(void) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8001b86:	1df9      	adds	r1, r7, #7
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4807      	ldr	r0, [pc, #28]	; (8001bac <__io_getchar+0x30>)
 8001b90:	f003 fde1 	bl	8005756 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8001b94:	1df9      	adds	r1, r7, #7
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4803      	ldr	r0, [pc, #12]	; (8001bac <__io_getchar+0x30>)
 8001b9e:	f003 fd57 	bl	8005650 <HAL_UART_Transmit>
	return ch;
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000758 	.word	0x20000758

08001bb0 <_read>:

int _read(int file, char *ptr, int len) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
	char ch;
	for (; DataIdx < len; DataIdx++) {
 8001bc0:	e016      	b.n	8001bf0 <_read+0x40>
		ch = __io_getchar();
 8001bc2:	f7ff ffdb 	bl	8001b7c <__io_getchar>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	74fb      	strb	r3, [r7, #19]
		*ptr = ch;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	7cfa      	ldrb	r2, [r7, #19]
 8001bce:	701a      	strb	r2, [r3, #0]
		ptr++;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 8001bd6:	7cfb      	ldrb	r3, [r7, #19]
 8001bd8:	2b0d      	cmp	r3, #13
 8001bda:	d002      	beq.n	8001be2 <_read+0x32>
 8001bdc:	7cfb      	ldrb	r3, [r7, #19]
 8001bde:	2b0a      	cmp	r3, #10
 8001be0:	d103      	bne.n	8001bea <_read+0x3a>
			*(ptr) = 0;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
			break;
 8001be8:	e006      	b.n	8001bf8 <_read+0x48>
	for (; DataIdx < len; DataIdx++) {
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dbe4      	blt.n	8001bc2 <_read+0x12>
		}
	}
	return DataIdx + 1;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00b      	beq.n	8001c2c <LAN8742_RegisterBusIO+0x28>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <LAN8742_RegisterBusIO+0x28>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <LAN8742_RegisterBusIO+0x28>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c30:	e014      	b.n	8001c5c <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d17c      	bne.n	8001d82 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e01c      	b.n	8001cdc <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f107 0208 	add.w	r2, r7, #8
 8001caa:	2112      	movs	r1, #18
 8001cac:	6978      	ldr	r0, [r7, #20]
 8001cae:	4798      	blx	r3
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da03      	bge.n	8001cbe <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001cb6:	f06f 0304 	mvn.w	r3, #4
 8001cba:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001cbc:	e00b      	b.n	8001cd6 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d105      	bne.n	8001cd6 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
         break;
 8001cd4:	e005      	b.n	8001ce2 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b1f      	cmp	r3, #31
 8001ce0:	d9df      	bls.n	8001ca2 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b1f      	cmp	r3, #31
 8001ce8:	d902      	bls.n	8001cf0 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001cea:	f06f 0302 	mvn.w	r3, #2
 8001cee:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d145      	bne.n	8001d82 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6810      	ldr	r0, [r2, #0]
 8001cfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d02:	2100      	movs	r1, #0
 8001d04:	4798      	blx	r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db37      	blt.n	8001d7c <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6810      	ldr	r0, [r2, #0]
 8001d14:	f107 0208 	add.w	r2, r7, #8
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4798      	blx	r3
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db28      	blt.n	8001d74 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4798      	blx	r3
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d2c:	e01c      	b.n	8001d68 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	4798      	blx	r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d40:	d80e      	bhi.n	8001d60 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6810      	ldr	r0, [r2, #0]
 8001d4a:	f107 0208 	add.w	r2, r7, #8
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4798      	blx	r3
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	da07      	bge.n	8001d68 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001d58:	f06f 0304 	mvn.w	r3, #4
 8001d5c:	613b      	str	r3, [r7, #16]
                 break;
 8001d5e:	e010      	b.n	8001d82 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001d60:	f06f 0301 	mvn.w	r3, #1
 8001d64:	613b      	str	r3, [r7, #16]
               break;
 8001d66:	e00c      	b.n	8001d82 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1dd      	bne.n	8001d2e <LAN8742_Init+0xc6>
 8001d72:	e006      	b.n	8001d82 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001d74:	f06f 0304 	mvn.w	r3, #4
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	e002      	b.n	8001d82 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001d7c:	f06f 0303 	mvn.w	r3, #3
 8001d80:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d112      	bne.n	8001dae <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4798      	blx	r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001d92:	bf00      	nop
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4798      	blx	r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001da6:	d9f5      	bls.n	8001d94 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001dae:	693b      	ldr	r3, [r7, #16]
 }
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6810      	ldr	r0, [r2, #0]
 8001dcc:	f107 020c 	add.w	r2, r7, #12
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4798      	blx	r3
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da02      	bge.n	8001de0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001dda:	f06f 0304 	mvn.w	r3, #4
 8001dde:	e06e      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6810      	ldr	r0, [r2, #0]
 8001de8:	f107 020c 	add.w	r2, r7, #12
 8001dec:	2101      	movs	r1, #1
 8001dee:	4798      	blx	r3
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	da02      	bge.n	8001dfc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001df6:	f06f 0304 	mvn.w	r3, #4
 8001dfa:	e060      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001e06:	2301      	movs	r3, #1
 8001e08:	e059      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6810      	ldr	r0, [r2, #0]
 8001e12:	f107 020c 	add.w	r2, r7, #12
 8001e16:	2100      	movs	r1, #0
 8001e18:	4798      	blx	r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da02      	bge.n	8001e26 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e20:	f06f 0304 	mvn.w	r3, #4
 8001e24:	e04b      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11b      	bne.n	8001e68 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <LAN8742_GetLinkState+0x90>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e44:	2302      	movs	r3, #2
 8001e46:	e03a      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e033      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e60:	2304      	movs	r3, #4
 8001e62:	e02c      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e64:	2305      	movs	r3, #5
 8001e66:	e02a      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6810      	ldr	r0, [r2, #0]
 8001e70:	f107 020c 	add.w	r2, r7, #12
 8001e74:	211f      	movs	r1, #31
 8001e76:	4798      	blx	r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da02      	bge.n	8001e84 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001e7e:	f06f 0304 	mvn.w	r3, #4
 8001e82:	e01c      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001e8e:	2306      	movs	r3, #6
 8001e90:	e015      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 031c 	and.w	r3, r3, #28
 8001e98:	2b18      	cmp	r3, #24
 8001e9a:	d101      	bne.n	8001ea0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e00e      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 031c 	and.w	r3, r3, #28
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d101      	bne.n	8001eae <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e007      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 031c 	and.w	r3, r3, #28
 8001eb4:	2b14      	cmp	r3, #20
 8001eb6:	d101      	bne.n	8001ebc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	e000      	b.n	8001ebe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001ebc:	2305      	movs	r3, #5
    }				
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eca:	2003      	movs	r0, #3
 8001ecc:	f000 f8f9 	bl	80020c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed0:	200f      	movs	r0, #15
 8001ed2:	f7fe fe4d 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed6:	f7fe fd41 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	2000000c 	.word	0x2000000c
 8001f04:	20000e00 	.word	0x20000e00

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000e00 	.word	0x20000e00

08001f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff ffee 	bl	8001f08 <HAL_GetTick>
 8001f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f38:	d005      	beq.n	8001f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_Delay+0x44>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f46:	bf00      	nop
 8001f48:	f7ff ffde 	bl	8001f08 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d8f7      	bhi.n	8001f48 <HAL_Delay+0x28>
  {
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000000c 	.word	0x2000000c

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00
 8001fac:	05fa0000 	.word	0x05fa0000

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4907      	ldr	r1, [pc, #28]	; (8002004 <__NVIC_EnableIRQ+0x38>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	; (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ff4c 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ea:	f7ff ff61 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 80020ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	6978      	ldr	r0, [r7, #20]
 80020f6:	f7ff ffb1 	bl	800205c <NVIC_EncodePriority>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff80 	bl	8002008 <__NVIC_SetPriority>
}
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff54 	bl	8001fcc <__NVIC_EnableIRQ>
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800213a:	f7ff fee5 	bl	8001f08 <HAL_GetTick>
 800213e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d008      	beq.n	800215e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e052      	b.n	8002204 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0216 	bic.w	r2, r2, #22
 800216c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800217c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <HAL_DMA_Abort+0x62>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0208 	bic.w	r2, r2, #8
 800219c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ae:	e013      	b.n	80021d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b0:	f7ff feaa 	bl	8001f08 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d90c      	bls.n	80021d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2220      	movs	r2, #32
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2203      	movs	r2, #3
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e015      	b.n	8002204 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1e4      	bne.n	80021b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	223f      	movs	r2, #63	; 0x3f
 80021ec:	409a      	lsls	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d004      	beq.n	800222a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00c      	b.n	8002244 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2205      	movs	r2, #5
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06a      	b.n	8002338 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002268:	2b00      	cmp	r3, #0
 800226a:	d106      	bne.n	800227a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2223      	movs	r2, #35	; 0x23
 8002270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f005 fae7 	bl	8007848 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_ETH_Init+0xf0>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a30      	ldr	r2, [pc, #192]	; (8002340 <HAL_ETH_Init+0xf0>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <HAL_ETH_Init+0xf0>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_ETH_Init+0xf4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4a2b      	ldr	r2, [pc, #172]	; (8002344 <HAL_ETH_Init+0xf4>)
 8002298:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800229c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_ETH_Init+0xf4>)
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4927      	ldr	r1, [pc, #156]	; (8002344 <HAL_ETH_Init+0xf4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_ETH_Init+0xf4>)
 80022ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022c8:	f7ff fe1e 	bl	8001f08 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022ce:	e011      	b.n	80022f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80022d0:	f7ff fe1a 	bl	8001f08 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022de:	d909      	bls.n	80022f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2204      	movs	r2, #4
 80022e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	22e0      	movs	r2, #224	; 0xe0
 80022ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e021      	b.n	8002338 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e4      	bne.n	80022d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 ffac 	bl	8003264 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f001 f853 	bl	80033b8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f001 f8a9 	bl	800346a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	461a      	mov	r2, r3
 800231e:	2100      	movs	r1, #0
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f001 f811 	bl	8003348 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2210      	movs	r2, #16
 8002332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	40013800 	.word	0x40013800

08002348 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002356:	2b10      	cmp	r3, #16
 8002358:	d150      	bne.n	80023fc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2223      	movs	r2, #35	; 0x23
 800235e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2204      	movs	r2, #4
 8002366:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fa7b 	bl	8002864 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0208 	orr.w	r2, r2, #8
 800237c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002386:	2001      	movs	r0, #1
 8002388:	f7ff fdca 	bl	8001f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0204 	orr.w	r2, r2, #4
 80023a2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7ff fdb7 	bl	8001f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fdf3 	bl	8002fa6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023d6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	f043 0302 	orr.w	r3, r3, #2
 80023ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ee:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2223      	movs	r2, #35	; 0x23
 80023f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002416:	2b10      	cmp	r3, #16
 8002418:	d17b      	bne.n	8002512 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2223      	movs	r2, #35	; 0x23
 800241e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002436:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_ETH_Start_IT+0x114>)
 8002446:	430b      	orrs	r3, r1
 8002448:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800245c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2204      	movs	r2, #4
 8002464:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f9fc 	bl	8002864 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0208 	orr.w	r2, r2, #8
 800247a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002484:	2001      	movs	r0, #1
 8002486:	f7ff fd4b 	bl	8001f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0204 	orr.w	r2, r2, #4
 80024a0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7ff fd38 	bl	8001f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fd74 	bl	8002fa6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024d4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ec:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f6:	69d9      	ldr	r1, [r3, #28]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_ETH_Start_IT+0x118>)
 80024fe:	430b      	orrs	r3, r1
 8002500:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002504:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2223      	movs	r2, #35	; 0x23
 800250a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
  }
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	00020060 	.word	0x00020060
 8002520:	0001a0c1 	.word	0x0001a0c1

08002524 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002532:	2b23      	cmp	r3, #35	; 0x23
 8002534:	d16e      	bne.n	8002614 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2223      	movs	r2, #35	; 0x23
 800253a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002546:	69d9      	ldr	r1, [r3, #28]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b34      	ldr	r3, [pc, #208]	; (8002620 <HAL_ETH_Stop_IT+0xfc>)
 800254e:	400b      	ands	r3, r1
 8002550:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002554:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800256c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	f023 0302 	bic.w	r3, r3, #2
 8002580:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002584:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0204 	bic.w	r2, r2, #4
 8002594:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800259e:	2001      	movs	r0, #1
 80025a0:	f7ff fcbe 	bl	8001f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fcfa 	bl	8002fa6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0208 	bic.w	r2, r2, #8
 80025c0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7ff fca8 	bl	8001f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e00e      	b.n	80025fc <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	3212      	adds	r2, #18
 80025e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d9ed      	bls.n	80025de <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2210      	movs	r2, #16
 800260c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	fffe5f3e 	.word	0xfffe5f3e

08002624 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e045      	b.n	80026d4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264e:	2b23      	cmp	r3, #35	; 0x23
 8002650:	d13f      	bne.n	80026d2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800265a:	2201      	movs	r2, #1
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 ff70 	bl	8003544 <ETH_Prepare_Tx_Descriptors>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f043 0202 	orr.w	r2, r3, #2
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e02a      	b.n	80026d4 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800267e:	f3bf 8f4f 	dsb	sy
}
 8002682:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	629a      	str	r2, [r3, #40]	; 0x28
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	2b03      	cmp	r3, #3
 8002694:	d904      	bls.n	80026a0 <HAL_ETH_Transmit_IT+0x7c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	1f1a      	subs	r2, r3, #4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ba:	461a      	mov	r2, r3
 80026bc:	2304      	movs	r3, #4
 80026be:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	461a      	mov	r2, r3
 80026ca:	2300      	movs	r3, #0
 80026cc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0a8      	b.n	800285a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800270e:	2b23      	cmp	r3, #35	; 0x23
 8002710:	d001      	beq.n	8002716 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0a1      	b.n	800285a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	3212      	adds	r2, #18
 8002722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002726:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272c:	f1c3 0304 	rsb	r3, r3, #4
 8002730:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002732:	e06a      	b.n	800280a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <HAL_ETH_ReadData+0x88>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d040      	beq.n	80027e6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002798:	3b04      	subs	r3, #4
 800279a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80027c0:	461a      	mov	r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f005 fa0b 	bl	8007be0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	441a      	add	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2200      	movs	r2, #0
 80027e4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d902      	bls.n	80027f8 <HAL_ETH_ReadData+0x11c>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3b04      	subs	r3, #4
 80027f6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	3212      	adds	r2, #18
 80027fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002802:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3301      	adds	r3, #1
 8002808:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db06      	blt.n	8002820 <HAL_ETH_ReadData+0x144>
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	429a      	cmp	r2, r3
 8002818:	d202      	bcs.n	8002820 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d089      	beq.n	8002734 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	441a      	add	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f815 	bl	8002864 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d108      	bne.n	8002858 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e000      	b.n	800285a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
}
 800285a:	4618      	mov	r0, r3
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002870:	2301      	movs	r3, #1
 8002872:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002878:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	3212      	adds	r2, #18
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800288c:	e040      	b.n	8002910 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d112      	bne.n	80028bc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	4618      	mov	r0, r3
 800289c:	f005 f970 	bl	8007b80 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	74fb      	strb	r3, [r7, #19]
 80028aa:	e007      	b.n	80028bc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	461a      	mov	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	461a      	mov	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d026      	beq.n	8002910 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <ETH_UpdateDescriptor+0xe4>)
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	e003      	b.n	80028da <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80028d8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028da:	f3bf 8f5f 	dmb	sy
}
 80028de:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	3301      	adds	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d902      	bls.n	80028fe <ETH_UpdateDescriptor+0x9a>
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3b04      	subs	r3, #4
 80028fc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	3212      	adds	r2, #18
 8002904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002908:	617b      	str	r3, [r7, #20]
      desccount--;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	3b01      	subs	r3, #1
 800290e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <ETH_UpdateDescriptor+0xb8>
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1b8      	bne.n	800288e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	429a      	cmp	r2, r3
 8002924:	d00c      	beq.n	8002940 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292e:	461a      	mov	r2, r3
 8002930:	2300      	movs	r3, #0
 8002932:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002940:	bf00      	nop
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	800045f8 	.word	0x800045f8

0800294c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3318      	adds	r3, #24
 8002958:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800296a:	e03f      	b.n	80029ec <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800296c:	2301      	movs	r3, #1
 800296e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3b01      	subs	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	3304      	adds	r3, #4
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	3301      	adds	r3, #1
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002994:	7bbb      	ldrb	r3, [r7, #14]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d028      	beq.n	80029ec <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68d9      	ldr	r1, [r3, #12]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	db1b      	blt.n	80029e8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	3304      	adds	r3, #4
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	f005 f951 	bl	8007c64 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	3304      	adds	r3, #4
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	3301      	adds	r3, #1
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80029e6:	e001      	b.n	80029ec <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_ETH_ReleaseTxPacket+0xac>
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1b9      	bne.n	800296c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d112      	bne.n	8002a44 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d109      	bne.n	8002a44 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <HAL_ETH_IRQHandler+0x178>)
 8002a3c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f004 fc66 	bl	8007310 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d113      	bne.n	8002a7e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10a      	bne.n	8002a7e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a70:	461a      	mov	r2, r3
 8002a72:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002a76:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f004 fc59 	bl	8007330 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a90:	d14c      	bne.n	8002b2c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa4:	d142      	bne.n	8002b2c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aac:	f043 0208 	orr.w	r2, r3, #8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac8:	d11a      	bne.n	8002b00 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <HAL_ETH_IRQHandler+0x17c>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002af0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002af4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	22e0      	movs	r2, #224	; 0xe0
 8002afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002afe:	e012      	b.n	8002b26 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	f248 6380 	movw	r3, #34432	; 0x8680
 8002b0e:	4013      	ands	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f248 6380 	movw	r3, #34432	; 0x8680
 8002b24:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f004 fc12 	bl	8007350 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d10e      	bne.n	8002b58 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f81c 	bl	8002b88 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_ETH_IRQHandler+0x180>)
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_ETH_IRQHandler+0x180>)
 8002b66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002b6a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f815 	bl	8002b9c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	00010040 	.word	0x00010040
 8002b80:	007e2000 	.word	0x007e2000
 8002b84:	40013c00 	.word	0x40013c00

08002b88 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 031c 	and.w	r3, r3, #28
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	02db      	lsls	r3, r3, #11
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 0302 	bic.w	r3, r3, #2
 8002bee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002c00:	f7ff f982 	bl	8001f08 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c06:	e00d      	b.n	8002c24 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002c08:	f7ff f97e 	bl	8001f08 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c16:	d301      	bcc.n	8002c1c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e010      	b.n	8002c3e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1ec      	bne.n	8002c08 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 031c 	and.w	r3, r3, #28
 8002c62:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	02db      	lsls	r3, r3, #11
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	019b      	lsls	r3, r3, #6
 8002c74:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca0:	f7ff f932 	bl	8001f08 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ca6:	e00d      	b.n	8002cc4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002ca8:	f7ff f92e 	bl	8001f08 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d301      	bcc.n	8002cbc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e009      	b.n	8002cd0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1ec      	bne.n	8002ca8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0d9      	b.n	8002ea0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bf14      	ite	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	2300      	moveq	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf14      	ite	ne
 8002e20:	2301      	movne	r3, #1
 8002e22:	2300      	moveq	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf14      	ite	ne
 8002e90:	2301      	movne	r3, #1
 8002e92:	2300      	moveq	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e00b      	b.n	8002ed8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d105      	bne.n	8002ed6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002eca:	6839      	ldr	r1, [r7, #0]
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f88f 	bl	8002ff0 <ETH_SetMACConfig>

    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
  }
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 031c 	bic.w	r3, r3, #28
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002ef8:	f001 fc26 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 8002efc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d908      	bls.n	8002f18 <HAL_ETH_SetMDIOClockRange+0x38>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d804      	bhi.n	8002f18 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f043 0308 	orr.w	r3, r3, #8
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e027      	b.n	8002f68 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d908      	bls.n	8002f32 <HAL_ETH_SetMDIOClockRange+0x52>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d204      	bcs.n	8002f32 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f043 030c 	orr.w	r3, r3, #12
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e01a      	b.n	8002f68 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d303      	bcc.n	8002f42 <HAL_ETH_SetMDIOClockRange+0x62>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d911      	bls.n	8002f66 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d908      	bls.n	8002f5c <HAL_ETH_SetMDIOClockRange+0x7c>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d804      	bhi.n	8002f5c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	e005      	b.n	8002f68 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f043 0310 	orr.w	r3, r3, #16
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e000      	b.n	8002f68 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002f66:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	01312cff 	.word	0x01312cff
 8002f7c:	02160ebf 	.word	0x02160ebf
 8002f80:	03938700 	.word	0x03938700
 8002f84:	05f5e0ff 	.word	0x05f5e0ff
 8002f88:	08f0d17f 	.word	0x08f0d17f

08002f8c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fc8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f7fe ffa2 	bl	8001f20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fe6:	6193      	str	r3, [r2, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4b51      	ldr	r3, [pc, #324]	; (800314c <ETH_SetMACConfig+0x15c>)
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7c1b      	ldrb	r3, [r3, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <ETH_SetMACConfig+0x28>
 8003012:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003016:	e000      	b.n	800301a <ETH_SetMACConfig+0x2a>
 8003018:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	7c5b      	ldrb	r3, [r3, #17]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <ETH_SetMACConfig+0x38>
 8003022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003026:	e000      	b.n	800302a <ETH_SetMACConfig+0x3a>
 8003028:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800302a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003030:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	7fdb      	ldrb	r3, [r3, #31]
 8003036:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003038:	431a      	orrs	r2, r3
                        macconf->Speed |
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800303e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	7f92      	ldrb	r2, [r2, #30]
 8003044:	2a00      	cmp	r2, #0
 8003046:	d102      	bne.n	800304e <ETH_SetMACConfig+0x5e>
 8003048:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800304c:	e000      	b.n	8003050 <ETH_SetMACConfig+0x60>
 800304e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003050:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	7f1b      	ldrb	r3, [r3, #28]
 8003056:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003058:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800305e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	791b      	ldrb	r3, [r3, #4]
 8003064:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003066:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800306e:	2a00      	cmp	r2, #0
 8003070:	d102      	bne.n	8003078 <ETH_SetMACConfig+0x88>
 8003072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003076:	e000      	b.n	800307a <ETH_SetMACConfig+0x8a>
 8003078:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800307a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	7bdb      	ldrb	r3, [r3, #15]
 8003080:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003082:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003088:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003090:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003092:	4313      	orrs	r3, r2
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030aa:	2001      	movs	r0, #1
 80030ac:	f7fe ff38 	bl	8001f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80030c6:	4013      	ands	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	d101      	bne.n	80030de <ETH_SetMACConfig+0xee>
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	e000      	b.n	80030e0 <ETH_SetMACConfig+0xf0>
 80030de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030e0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80030e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80030ee:	2a01      	cmp	r2, #1
 80030f0:	d101      	bne.n	80030f6 <ETH_SetMACConfig+0x106>
 80030f2:	2208      	movs	r2, #8
 80030f4:	e000      	b.n	80030f8 <ETH_SetMACConfig+0x108>
 80030f6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80030f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003100:	2a01      	cmp	r2, #1
 8003102:	d101      	bne.n	8003108 <ETH_SetMACConfig+0x118>
 8003104:	2204      	movs	r2, #4
 8003106:	e000      	b.n	800310a <ETH_SetMACConfig+0x11a>
 8003108:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800310a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003112:	2a01      	cmp	r2, #1
 8003114:	d101      	bne.n	800311a <ETH_SetMACConfig+0x12a>
 8003116:	2202      	movs	r2, #2
 8003118:	e000      	b.n	800311c <ETH_SetMACConfig+0x12c>
 800311a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800311c:	4313      	orrs	r3, r2
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003134:	2001      	movs	r0, #1
 8003136:	f7fe fef3 	bl	8001f20 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	619a      	str	r2, [r3, #24]
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	ff20810f 	.word	0xff20810f

08003150 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <ETH_SetDMAConfig+0x110>)
 800316a:	4013      	ands	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	7b1b      	ldrb	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <ETH_SetDMAConfig+0x2c>
 8003176:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800317a:	e000      	b.n	800317e <ETH_SetDMAConfig+0x2e>
 800317c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	7b5b      	ldrb	r3, [r3, #13]
 8003182:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003184:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	7f52      	ldrb	r2, [r2, #29]
 800318a:	2a00      	cmp	r2, #0
 800318c:	d102      	bne.n	8003194 <ETH_SetDMAConfig+0x44>
 800318e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003192:	e000      	b.n	8003196 <ETH_SetDMAConfig+0x46>
 8003194:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003196:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	7b9b      	ldrb	r3, [r3, #14]
 800319c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800319e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80031a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	7f1b      	ldrb	r3, [r3, #28]
 80031aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80031ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	7f9b      	ldrb	r3, [r3, #30]
 80031b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80031b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80031ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80031c4:	4313      	orrs	r3, r2
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d4:	461a      	mov	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031e6:	2001      	movs	r0, #1
 80031e8:	f7fe fe9a 	bl	8001f20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f4:	461a      	mov	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	791b      	ldrb	r3, [r3, #4]
 80031fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003204:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800320a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003210:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003218:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800321a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003222:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003228:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003232:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003236:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003244:	2001      	movs	r0, #1
 8003246:	f7fe fe6b 	bl	8001f20 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003252:	461a      	mov	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	f8de3f23 	.word	0xf8de3f23

08003264 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b0a6      	sub	sp, #152	; 0x98
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003278:	2300      	movs	r3, #0
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80032a0:	2300      	movs	r3, #0
 80032a2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80032c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80032cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80032d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fe86 	bl	8002ff0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80032e4:	2301      	movs	r3, #1
 80032e6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80032e8:	2301      	movs	r3, #1
 80032ea:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003306:	2300      	movs	r3, #0
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003310:	2301      	movs	r3, #1
 8003312:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003318:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800331a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800331e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003324:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800332c:	2300      	movs	r3, #0
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003334:	f107 0308 	add.w	r3, r7, #8
 8003338:	4619      	mov	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ff08 	bl	8003150 <ETH_SetDMAConfig>
}
 8003340:	bf00      	nop
 8003342:	3798      	adds	r7, #152	; 0x98
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3305      	adds	r3, #5
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	3204      	adds	r2, #4
 8003360:	7812      	ldrb	r2, [r2, #0]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <ETH_MACAddressConfig+0x68>)
 800336a:	4413      	add	r3, r2
 800336c:	461a      	mov	r2, r3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3303      	adds	r3, #3
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	061a      	lsls	r2, r3, #24
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3302      	adds	r3, #2
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3301      	adds	r3, #1
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	021b      	lsls	r3, r3, #8
 800338c:	4313      	orrs	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <ETH_MACAddressConfig+0x6c>)
 800339a:	4413      	add	r3, r2
 800339c:	461a      	mov	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	6013      	str	r3, [r2, #0]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40028040 	.word	0x40028040
 80033b4:	40028044 	.word	0x40028044

080033b8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e03e      	b.n	8003444 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68d9      	ldr	r1, [r3, #12]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	440b      	add	r3, r1
 80033d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	3206      	adds	r2, #6
 80033f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d80c      	bhi.n	8003428 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68d9      	ldr	r1, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	440b      	add	r3, r1
 8003420:	461a      	mov	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	e004      	b.n	8003432 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3301      	adds	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d9bd      	bls.n	80033c6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800345c:	611a      	str	r2, [r3, #16]
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e046      	b.n	8003506 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6919      	ldr	r1, [r3, #16]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2200      	movs	r2, #0
 80034a6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034b4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80034bc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	3212      	adds	r2, #18
 80034d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d80c      	bhi.n	80034f6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6919      	ldr	r1, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	e004      	b.n	8003500 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	461a      	mov	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3301      	adds	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d9b5      	bls.n	8003478 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003536:	60da      	str	r2, [r3, #12]
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003544:	b480      	push	{r7}
 8003546:	b08d      	sub	sp, #52	; 0x34
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3318      	adds	r3, #24
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800356a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003586:	d007      	beq.n	8003598 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	3304      	adds	r3, #4
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003598:	2302      	movs	r3, #2
 800359a:	e0ff      	b.n	800379c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	3301      	adds	r3, #1
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	4b7d      	ldr	r3, [pc, #500]	; (80037a8 <ETH_Prepare_Tx_Descriptors+0x264>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	6852      	ldr	r2, [r2, #4]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800361e:	f3bf 8f5f 	dmb	sy
}
 8003622:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003630:	e082      	b.n	8003738 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e005      	b.n	800365e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	3301      	adds	r3, #1
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b03      	cmp	r3, #3
 8003668:	d902      	bls.n	8003670 <ETH_Prepare_Tx_Descriptors+0x12c>
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	3b04      	subs	r3, #4
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003678:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800368e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003692:	d007      	beq.n	80036a4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	3304      	adds	r3, #4
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d029      	beq.n	80036f8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b6:	e019      	b.n	80036ec <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80036b8:	f3bf 8f5f 	dmb	sy
}
 80036bc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	3301      	adds	r3, #1
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d902      	bls.n	80036dc <ETH_Prepare_Tx_Descriptors+0x198>
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	3b04      	subs	r3, #4
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	3301      	adds	r3, #1
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d3e1      	bcc.n	80036b8 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80036f4:	2302      	movs	r3, #2
 80036f6:	e051      	b.n	800379c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	3301      	adds	r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003714:	4013      	ands	r3, r2
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	6852      	ldr	r2, [r2, #4]
 800371a:	431a      	orrs	r2, r3
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	3301      	adds	r3, #1
 8003724:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003726:	f3bf 8f5f 	dmb	sy
}
 800372a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f47f af78 	bne.w	8003632 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d006      	beq.n	8003756 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e005      	b.n	8003762 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003772:	6979      	ldr	r1, [r7, #20]
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	3304      	adds	r3, #4
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003782:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003784:	b672      	cpsid	i
}
 8003786:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	4413      	add	r3, r2
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003796:	b662      	cpsie	i
}
 8003798:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3734      	adds	r7, #52	; 0x34
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	ffffe000 	.word	0xffffe000

080037ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e175      	b.n	8003ab8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037cc:	2201      	movs	r2, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f040 8164 	bne.w	8003ab2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d005      	beq.n	8003802 <HAL_GPIO_Init+0x56>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d130      	bne.n	8003864 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	2203      	movs	r2, #3
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003838:	2201      	movs	r2, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 0201 	and.w	r2, r3, #1
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b03      	cmp	r3, #3
 800386e:	d017      	beq.n	80038a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d123      	bne.n	80038f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	08da      	lsrs	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3208      	adds	r2, #8
 80038b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	08da      	lsrs	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3208      	adds	r2, #8
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80be 	beq.w	8003ab2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003936:	4b66      	ldr	r3, [pc, #408]	; (8003ad0 <HAL_GPIO_Init+0x324>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	4a65      	ldr	r2, [pc, #404]	; (8003ad0 <HAL_GPIO_Init+0x324>)
 800393c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003940:	6453      	str	r3, [r2, #68]	; 0x44
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_GPIO_Init+0x324>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800394e:	4a61      	ldr	r2, [pc, #388]	; (8003ad4 <HAL_GPIO_Init+0x328>)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	3302      	adds	r3, #2
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	220f      	movs	r2, #15
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_GPIO_Init+0x32c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d037      	beq.n	80039ea <HAL_GPIO_Init+0x23e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a57      	ldr	r2, [pc, #348]	; (8003adc <HAL_GPIO_Init+0x330>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d031      	beq.n	80039e6 <HAL_GPIO_Init+0x23a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a56      	ldr	r2, [pc, #344]	; (8003ae0 <HAL_GPIO_Init+0x334>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02b      	beq.n	80039e2 <HAL_GPIO_Init+0x236>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a55      	ldr	r2, [pc, #340]	; (8003ae4 <HAL_GPIO_Init+0x338>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d025      	beq.n	80039de <HAL_GPIO_Init+0x232>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a54      	ldr	r2, [pc, #336]	; (8003ae8 <HAL_GPIO_Init+0x33c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01f      	beq.n	80039da <HAL_GPIO_Init+0x22e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a53      	ldr	r2, [pc, #332]	; (8003aec <HAL_GPIO_Init+0x340>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d019      	beq.n	80039d6 <HAL_GPIO_Init+0x22a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a52      	ldr	r2, [pc, #328]	; (8003af0 <HAL_GPIO_Init+0x344>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_GPIO_Init+0x226>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a51      	ldr	r2, [pc, #324]	; (8003af4 <HAL_GPIO_Init+0x348>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00d      	beq.n	80039ce <HAL_GPIO_Init+0x222>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a50      	ldr	r2, [pc, #320]	; (8003af8 <HAL_GPIO_Init+0x34c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <HAL_GPIO_Init+0x21e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4f      	ldr	r2, [pc, #316]	; (8003afc <HAL_GPIO_Init+0x350>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_GPIO_Init+0x21a>
 80039c2:	2309      	movs	r3, #9
 80039c4:	e012      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039c6:	230a      	movs	r3, #10
 80039c8:	e010      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039ca:	2308      	movs	r3, #8
 80039cc:	e00e      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039ce:	2307      	movs	r3, #7
 80039d0:	e00c      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039d2:	2306      	movs	r3, #6
 80039d4:	e00a      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039d6:	2305      	movs	r3, #5
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039da:	2304      	movs	r3, #4
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x240>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80039fc:	4935      	ldr	r1, [pc, #212]	; (8003ad4 <HAL_GPIO_Init+0x328>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0a:	4b3d      	ldr	r3, [pc, #244]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2e:	4a34      	ldr	r2, [pc, #208]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a58:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a82:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <HAL_GPIO_Init+0x354>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f ae86 	bls.w	80037cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40021400 	.word	0x40021400
 8003af0:	40021800 	.word	0x40021800
 8003af4:	40021c00 	.word	0x40021c00
 8003af8:	40022000 	.word	0x40022000
 8003afc:	40022400 	.word	0x40022400
 8003b00:	40013c00 	.word	0x40013c00

08003b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
 8003b10:	4613      	mov	r3, r2
 8003b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b14:	787b      	ldrb	r3, [r7, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b20:	e003      	b.n	8003b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	041a      	lsls	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	619a      	str	r2, [r3, #24]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b48:	887a      	ldrh	r2, [r7, #2]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	041a      	lsls	r2, r3, #16
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43d9      	mvns	r1, r3
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	400b      	ands	r3, r1
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	619a      	str	r2, [r3, #24]
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6c:	b08f      	sub	sp, #60	; 0x3c
 8003b6e:	af0a      	add	r7, sp, #40	; 0x28
 8003b70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e116      	b.n	8003daa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fc ff70 	bl	8000a7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f002 ff90 	bl	8006ae0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	687e      	ldr	r6, [r7, #4]
 8003bc8:	466d      	mov	r5, sp
 8003bca:	f106 0410 	add.w	r4, r6, #16
 8003bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bda:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bde:	1d33      	adds	r3, r6, #4
 8003be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be2:	6838      	ldr	r0, [r7, #0]
 8003be4:	f002 ff24 	bl	8006a30 <USB_CoreInit>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0d7      	b.n	8003daa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f002 ff7e 	bl	8006b02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	e04a      	b.n	8003ca2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	333d      	adds	r3, #61	; 0x3d
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	333c      	adds	r3, #60	; 0x3c
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	b298      	uxth	r0, r3
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	3344      	adds	r3, #68	; 0x44
 8003c48:	4602      	mov	r2, r0
 8003c4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3340      	adds	r3, #64	; 0x40
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c60:	7bfa      	ldrb	r2, [r7, #15]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3348      	adds	r3, #72	; 0x48
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	334c      	adds	r3, #76	; 0x4c
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	3354      	adds	r3, #84	; 0x54
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d3af      	bcc.n	8003c0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e044      	b.n	8003d3c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cf4:	7bfa      	ldrb	r2, [r7, #15]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d20:	7bfa      	ldrb	r2, [r7, #15]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d3b5      	bcc.n	8003cb2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	687e      	ldr	r6, [r7, #4]
 8003d4e:	466d      	mov	r5, sp
 8003d50:	f106 0410 	add.w	r4, r6, #16
 8003d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d60:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d64:	1d33      	adds	r3, r6, #4
 8003d66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d68:	6838      	ldr	r0, [r7, #0]
 8003d6a:	f002 ff17 	bl	8006b9c <USB_DevInit>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e014      	b.n	8003daa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d102      	bne.n	8003d9e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f80b 	bl	8003db4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f003 f8d5 	bl	8006f52 <USB_DevDisconnect>

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003db4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	10000003 	.word	0x10000003

08003dfc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0a:	6013      	str	r3, [r2, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40007000 	.word	0x40007000

08003e1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e291      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8087 	beq.w	8003f4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e40:	4b96      	ldr	r3, [pc, #600]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d00c      	beq.n	8003e66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e4c:	4b93      	ldr	r3, [pc, #588]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d112      	bne.n	8003e7e <HAL_RCC_OscConfig+0x62>
 8003e58:	4b90      	ldr	r3, [pc, #576]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e64:	d10b      	bne.n	8003e7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e66:	4b8d      	ldr	r3, [pc, #564]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d06c      	beq.n	8003f4c <HAL_RCC_OscConfig+0x130>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d168      	bne.n	8003f4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e26b      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e86:	d106      	bne.n	8003e96 <HAL_RCC_OscConfig+0x7a>
 8003e88:	4b84      	ldr	r3, [pc, #528]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a83      	ldr	r2, [pc, #524]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	e02e      	b.n	8003ef4 <HAL_RCC_OscConfig+0xd8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x9c>
 8003e9e:	4b7f      	ldr	r3, [pc, #508]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7e      	ldr	r2, [pc, #504]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	4b7c      	ldr	r3, [pc, #496]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7b      	ldr	r2, [pc, #492]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e01d      	b.n	8003ef4 <HAL_RCC_OscConfig+0xd8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0xc0>
 8003ec2:	4b76      	ldr	r3, [pc, #472]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a75      	ldr	r2, [pc, #468]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b73      	ldr	r3, [pc, #460]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a72      	ldr	r2, [pc, #456]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0xd8>
 8003edc:	4b6f      	ldr	r3, [pc, #444]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6e      	ldr	r2, [pc, #440]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	4b6c      	ldr	r3, [pc, #432]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a6b      	ldr	r2, [pc, #428]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d013      	beq.n	8003f24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f804 	bl	8001f08 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fe f800 	bl	8001f08 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e21f      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	4b61      	ldr	r3, [pc, #388]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0xe8>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd fff0 	bl	8001f08 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fd ffec 	bl	8001f08 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e20b      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	4b57      	ldr	r3, [pc, #348]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x110>
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d069      	beq.n	800402e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f5a:	4b50      	ldr	r3, [pc, #320]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f66:	4b4d      	ldr	r3, [pc, #308]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d11c      	bne.n	8003fac <HAL_RCC_OscConfig+0x190>
 8003f72:	4b4a      	ldr	r3, [pc, #296]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d116      	bne.n	8003fac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7e:	4b47      	ldr	r3, [pc, #284]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_RCC_OscConfig+0x17a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e1df      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f96:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	493d      	ldr	r1, [pc, #244]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003faa:	e040      	b.n	800402e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d023      	beq.n	8003ffc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a38      	ldr	r2, [pc, #224]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fd ffa2 	bl	8001f08 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc8:	f7fd ff9e 	bl	8001f08 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e1bd      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fda:	4b30      	ldr	r3, [pc, #192]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe6:	4b2d      	ldr	r3, [pc, #180]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4929      	ldr	r1, [pc, #164]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]
 8003ffa:	e018      	b.n	800402e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ffc:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a26      	ldr	r2, [pc, #152]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd ff7e 	bl	8001f08 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004010:	f7fd ff7a 	bl	8001f08 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e199      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d038      	beq.n	80040ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d019      	beq.n	8004076 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b16      	ldr	r3, [pc, #88]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8004044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404e:	f7fd ff5b 	bl	8001f08 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004056:	f7fd ff57 	bl	8001f08 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e176      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_RCC_OscConfig+0x280>)
 800406a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x23a>
 8004074:	e01a      	b.n	80040ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_OscConfig+0x280>)
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	4a08      	ldr	r2, [pc, #32]	; (800409c <HAL_RCC_OscConfig+0x280>)
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fd ff41 	bl	8001f08 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408a:	f7fd ff3d 	bl	8001f08 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d903      	bls.n	80040a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e15c      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
 800409c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a0:	4b91      	ldr	r3, [pc, #580]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80040a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ee      	bne.n	800408a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80a4 	beq.w	8004202 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b8b      	ldr	r3, [pc, #556]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10d      	bne.n	80040e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	4b88      	ldr	r3, [pc, #544]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a87      	ldr	r2, [pc, #540]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
 80040d2:	4b85      	ldr	r3, [pc, #532]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e2:	4b82      	ldr	r3, [pc, #520]	; (80042ec <HAL_RCC_OscConfig+0x4d0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d118      	bne.n	8004120 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80040ee:	4b7f      	ldr	r3, [pc, #508]	; (80042ec <HAL_RCC_OscConfig+0x4d0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a7e      	ldr	r2, [pc, #504]	; (80042ec <HAL_RCC_OscConfig+0x4d0>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fa:	f7fd ff05 	bl	8001f08 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004102:	f7fd ff01 	bl	8001f08 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b64      	cmp	r3, #100	; 0x64
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e120      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	4b75      	ldr	r3, [pc, #468]	; (80042ec <HAL_RCC_OscConfig+0x4d0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d106      	bne.n	8004136 <HAL_RCC_OscConfig+0x31a>
 8004128:	4b6f      	ldr	r3, [pc, #444]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412c:	4a6e      	ldr	r2, [pc, #440]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	6713      	str	r3, [r2, #112]	; 0x70
 8004134:	e02d      	b.n	8004192 <HAL_RCC_OscConfig+0x376>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0x33c>
 800413e:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	4a69      	ldr	r2, [pc, #420]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	6713      	str	r3, [r2, #112]	; 0x70
 800414a:	4b67      	ldr	r3, [pc, #412]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	4a66      	ldr	r2, [pc, #408]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004150:	f023 0304 	bic.w	r3, r3, #4
 8004154:	6713      	str	r3, [r2, #112]	; 0x70
 8004156:	e01c      	b.n	8004192 <HAL_RCC_OscConfig+0x376>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b05      	cmp	r3, #5
 800415e:	d10c      	bne.n	800417a <HAL_RCC_OscConfig+0x35e>
 8004160:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	4a60      	ldr	r2, [pc, #384]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004166:	f043 0304 	orr.w	r3, r3, #4
 800416a:	6713      	str	r3, [r2, #112]	; 0x70
 800416c:	4b5e      	ldr	r3, [pc, #376]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4a5d      	ldr	r2, [pc, #372]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	6713      	str	r3, [r2, #112]	; 0x70
 8004178:	e00b      	b.n	8004192 <HAL_RCC_OscConfig+0x376>
 800417a:	4b5b      	ldr	r3, [pc, #364]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	4a5a      	ldr	r2, [pc, #360]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6713      	str	r3, [r2, #112]	; 0x70
 8004186:	4b58      	ldr	r3, [pc, #352]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a57      	ldr	r2, [pc, #348]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d015      	beq.n	80041c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419a:	f7fd feb5 	bl	8001f08 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f7fd feb1 	bl	8001f08 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e0ce      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ee      	beq.n	80041a2 <HAL_RCC_OscConfig+0x386>
 80041c4:	e014      	b.n	80041f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c6:	f7fd fe9f 	bl	8001f08 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041cc:	e00a      	b.n	80041e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ce:	f7fd fe9b 	bl	8001f08 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e0b8      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e4:	4b40      	ldr	r3, [pc, #256]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ee      	bne.n	80041ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d105      	bne.n	8004202 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f6:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a3b      	ldr	r2, [pc, #236]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80041fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 80a4 	beq.w	8004354 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800420c:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b08      	cmp	r3, #8
 8004216:	d06b      	beq.n	80042f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d149      	bne.n	80042b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004220:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a30      	ldr	r2, [pc, #192]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd fe6c 	bl	8001f08 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004234:	f7fd fe68 	bl	8001f08 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e087      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	4b28      	ldr	r3, [pc, #160]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	3b01      	subs	r3, #1
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	061b      	lsls	r3, r3, #24
 8004276:	4313      	orrs	r3, r2
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 800427a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800427e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 8004286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fe3c 	bl	8001f08 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd fe38 	bl	8001f08 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e057      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x478>
 80042b2:	e04f      	b.n	8004354 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0b      	ldr	r2, [pc, #44]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80042ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd fe22 	bl	8001f08 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fd fe1e 	bl	8001f08 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e03d      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042da:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_RCC_OscConfig+0x4cc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4ac>
 80042e6:	e035      	b.n	8004354 <HAL_RCC_OscConfig+0x538>
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_RCC_OscConfig+0x544>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d028      	beq.n	8004350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d121      	bne.n	8004350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d11a      	bne.n	8004350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004320:	4013      	ands	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004326:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004328:	4293      	cmp	r3, r2
 800432a:	d111      	bne.n	8004350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	085b      	lsrs	r3, r3, #1
 8004338:	3b01      	subs	r3, #1
 800433a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d107      	bne.n	8004350 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800

08004364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0d0      	b.n	800451e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800437c:	4b6a      	ldr	r3, [pc, #424]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d910      	bls.n	80043ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b67      	ldr	r3, [pc, #412]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 020f 	bic.w	r2, r3, #15
 8004392:	4965      	ldr	r1, [pc, #404]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b63      	ldr	r3, [pc, #396]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0b8      	b.n	800451e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d020      	beq.n	80043fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c4:	4b59      	ldr	r3, [pc, #356]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	4a58      	ldr	r2, [pc, #352]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80043ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043dc:	4b53      	ldr	r3, [pc, #332]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a52      	ldr	r2, [pc, #328]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80043e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e8:	4b50      	ldr	r3, [pc, #320]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	494d      	ldr	r1, [pc, #308]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d040      	beq.n	8004488 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d107      	bne.n	800441e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b47      	ldr	r3, [pc, #284]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d115      	bne.n	8004446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e07f      	b.n	800451e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d107      	bne.n	8004436 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004426:	4b41      	ldr	r3, [pc, #260]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e073      	b.n	800451e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004436:	4b3d      	ldr	r3, [pc, #244]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e06b      	b.n	800451e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004446:	4b39      	ldr	r3, [pc, #228]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4936      	ldr	r1, [pc, #216]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	4313      	orrs	r3, r2
 8004456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004458:	f7fd fd56 	bl	8001f08 <HAL_GetTick>
 800445c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	e00a      	b.n	8004476 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004460:	f7fd fd52 	bl	8001f08 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	; 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e053      	b.n	800451e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	4b2d      	ldr	r3, [pc, #180]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 020c 	and.w	r2, r3, #12
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	429a      	cmp	r2, r3
 8004486:	d1eb      	bne.n	8004460 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d210      	bcs.n	80044b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 020f 	bic.w	r2, r3, #15
 800449e:	4922      	ldr	r1, [pc, #136]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b20      	ldr	r3, [pc, #128]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e032      	b.n	800451e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c4:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4916      	ldr	r1, [pc, #88]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	490e      	ldr	r1, [pc, #56]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044f6:	f000 f821 	bl	800453c <HAL_RCC_GetSysClockFreq>
 80044fa:	4602      	mov	r2, r0
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	490a      	ldr	r1, [pc, #40]	; (8004530 <HAL_RCC_ClockConfig+0x1cc>)
 8004508:	5ccb      	ldrb	r3, [r1, r3]
 800450a:	fa22 f303 	lsr.w	r3, r2, r3
 800450e:	4a09      	ldr	r2, [pc, #36]	; (8004534 <HAL_RCC_ClockConfig+0x1d0>)
 8004510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <HAL_RCC_ClockConfig+0x1d4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fc fb2a 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40023c00 	.word	0x40023c00
 800452c:	40023800 	.word	0x40023800
 8004530:	0801a618 	.word	0x0801a618
 8004534:	20000000 	.word	0x20000000
 8004538:	20000008 	.word	0x20000008

0800453c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800453c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004540:	b094      	sub	sp, #80	; 0x50
 8004542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	647b      	str	r3, [r7, #68]	; 0x44
 8004548:	2300      	movs	r3, #0
 800454a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800454c:	2300      	movs	r3, #0
 800454e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004554:	4b79      	ldr	r3, [pc, #484]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b08      	cmp	r3, #8
 800455e:	d00d      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x40>
 8004560:	2b08      	cmp	r3, #8
 8004562:	f200 80e1 	bhi.w	8004728 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <HAL_RCC_GetSysClockFreq+0x34>
 800456a:	2b04      	cmp	r3, #4
 800456c:	d003      	beq.n	8004576 <HAL_RCC_GetSysClockFreq+0x3a>
 800456e:	e0db      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004570:	4b73      	ldr	r3, [pc, #460]	; (8004740 <HAL_RCC_GetSysClockFreq+0x204>)
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004574:	e0db      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004576:	4b73      	ldr	r3, [pc, #460]	; (8004744 <HAL_RCC_GetSysClockFreq+0x208>)
 8004578:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800457a:	e0d8      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800457c:	4b6f      	ldr	r3, [pc, #444]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004584:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004586:	4b6d      	ldr	r3, [pc, #436]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d063      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004592:	4b6a      	ldr	r3, [pc, #424]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	099b      	lsrs	r3, r3, #6
 8004598:	2200      	movs	r2, #0
 800459a:	63bb      	str	r3, [r7, #56]	; 0x38
 800459c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30
 80045a6:	2300      	movs	r3, #0
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
 80045aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045ae:	4622      	mov	r2, r4
 80045b0:	462b      	mov	r3, r5
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f04f 0100 	mov.w	r1, #0
 80045ba:	0159      	lsls	r1, r3, #5
 80045bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c0:	0150      	lsls	r0, r2, #5
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4621      	mov	r1, r4
 80045c8:	1a51      	subs	r1, r2, r1
 80045ca:	6139      	str	r1, [r7, #16]
 80045cc:	4629      	mov	r1, r5
 80045ce:	eb63 0301 	sbc.w	r3, r3, r1
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045e0:	4659      	mov	r1, fp
 80045e2:	018b      	lsls	r3, r1, #6
 80045e4:	4651      	mov	r1, sl
 80045e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ea:	4651      	mov	r1, sl
 80045ec:	018a      	lsls	r2, r1, #6
 80045ee:	4651      	mov	r1, sl
 80045f0:	ebb2 0801 	subs.w	r8, r2, r1
 80045f4:	4659      	mov	r1, fp
 80045f6:	eb63 0901 	sbc.w	r9, r3, r1
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800460a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800460e:	4690      	mov	r8, r2
 8004610:	4699      	mov	r9, r3
 8004612:	4623      	mov	r3, r4
 8004614:	eb18 0303 	adds.w	r3, r8, r3
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	462b      	mov	r3, r5
 800461c:	eb49 0303 	adc.w	r3, r9, r3
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800462e:	4629      	mov	r1, r5
 8004630:	024b      	lsls	r3, r1, #9
 8004632:	4621      	mov	r1, r4
 8004634:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004638:	4621      	mov	r1, r4
 800463a:	024a      	lsls	r2, r1, #9
 800463c:	4610      	mov	r0, r2
 800463e:	4619      	mov	r1, r3
 8004640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004642:	2200      	movs	r2, #0
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
 8004646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800464c:	f7fb fe38 	bl	80002c0 <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4613      	mov	r3, r2
 8004656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004658:	e058      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465a:	4b38      	ldr	r3, [pc, #224]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	099b      	lsrs	r3, r3, #6
 8004660:	2200      	movs	r2, #0
 8004662:	4618      	mov	r0, r3
 8004664:	4611      	mov	r1, r2
 8004666:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	2300      	movs	r3, #0
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004674:	4642      	mov	r2, r8
 8004676:	464b      	mov	r3, r9
 8004678:	f04f 0000 	mov.w	r0, #0
 800467c:	f04f 0100 	mov.w	r1, #0
 8004680:	0159      	lsls	r1, r3, #5
 8004682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004686:	0150      	lsls	r0, r2, #5
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4641      	mov	r1, r8
 800468e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004692:	4649      	mov	r1, r9
 8004694:	eb63 0b01 	sbc.w	fp, r3, r1
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046ac:	ebb2 040a 	subs.w	r4, r2, sl
 80046b0:	eb63 050b 	sbc.w	r5, r3, fp
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	00eb      	lsls	r3, r5, #3
 80046be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046c2:	00e2      	lsls	r2, r4, #3
 80046c4:	4614      	mov	r4, r2
 80046c6:	461d      	mov	r5, r3
 80046c8:	4643      	mov	r3, r8
 80046ca:	18e3      	adds	r3, r4, r3
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	464b      	mov	r3, r9
 80046d0:	eb45 0303 	adc.w	r3, r5, r3
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046e2:	4629      	mov	r1, r5
 80046e4:	028b      	lsls	r3, r1, #10
 80046e6:	4621      	mov	r1, r4
 80046e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046ec:	4621      	mov	r1, r4
 80046ee:	028a      	lsls	r2, r1, #10
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f6:	2200      	movs	r2, #0
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	61fa      	str	r2, [r7, #28]
 80046fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004700:	f7fb fdde 	bl	80002c0 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4613      	mov	r3, r2
 800470a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCC_GetSysClockFreq+0x200>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	3301      	adds	r3, #1
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800471c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800471e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004726:	e002      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <HAL_RCC_GetSysClockFreq+0x204>)
 800472a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800472c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004730:	4618      	mov	r0, r3
 8004732:	3750      	adds	r7, #80	; 0x50
 8004734:	46bd      	mov	sp, r7
 8004736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800
 8004740:	00f42400 	.word	0x00f42400
 8004744:	007a1200 	.word	0x007a1200

08004748 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800474c:	4b03      	ldr	r3, [pc, #12]	; (800475c <HAL_RCC_GetHCLKFreq+0x14>)
 800474e:	681b      	ldr	r3, [r3, #0]
}
 8004750:	4618      	mov	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000000 	.word	0x20000000

08004760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004764:	f7ff fff0 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 8004768:	4602      	mov	r2, r0
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	0a9b      	lsrs	r3, r3, #10
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	4903      	ldr	r1, [pc, #12]	; (8004784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004776:	5ccb      	ldrb	r3, [r1, r3]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800477c:	4618      	mov	r0, r3
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40023800 	.word	0x40023800
 8004784:	0801a628 	.word	0x0801a628

08004788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800478c:	f7ff ffdc 	bl	8004748 <HAL_RCC_GetHCLKFreq>
 8004790:	4602      	mov	r2, r0
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	0b5b      	lsrs	r3, r3, #13
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	4903      	ldr	r1, [pc, #12]	; (80047ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800479e:	5ccb      	ldrb	r3, [r1, r3]
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40023800 	.word	0x40023800
 80047ac:	0801a628 	.word	0x0801a628

080047b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	220f      	movs	r2, #15
 80047be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047c0:	4b12      	ldr	r3, [pc, #72]	; (800480c <HAL_RCC_GetClockConfig+0x5c>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0203 	and.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <HAL_RCC_GetClockConfig+0x5c>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <HAL_RCC_GetClockConfig+0x5c>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <HAL_RCC_GetClockConfig+0x5c>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	08db      	lsrs	r3, r3, #3
 80047ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047f2:	4b07      	ldr	r3, [pc, #28]	; (8004810 <HAL_RCC_GetClockConfig+0x60>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 020f 	and.w	r2, r3, #15
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	601a      	str	r2, [r3, #0]
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
 8004810:	40023c00 	.word	0x40023c00

08004814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d012      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800483c:	4b69      	ldr	r3, [pc, #420]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4a68      	ldr	r2, [pc, #416]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004842:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004846:	6093      	str	r3, [r2, #8]
 8004848:	4b66      	ldr	r3, [pc, #408]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004850:	4964      	ldr	r1, [pc, #400]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d017      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800486e:	4b5d      	ldr	r3, [pc, #372]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	4959      	ldr	r1, [pc, #356]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800488c:	d101      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800488e:	2301      	movs	r3, #1
 8004890:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800489a:	2301      	movs	r3, #1
 800489c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d017      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048aa:	4b4e      	ldr	r3, [pc, #312]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	494a      	ldr	r1, [pc, #296]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c8:	d101      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 808b 	beq.w	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b3a      	ldr	r3, [pc, #232]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	4a39      	ldr	r2, [pc, #228]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	6413      	str	r3, [r2, #64]	; 0x40
 8004904:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004910:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a34      	ldr	r2, [pc, #208]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491c:	f7fd faf4 	bl	8001f08 <HAL_GetTick>
 8004920:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004924:	f7fd faf0 	bl	8001f08 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	; 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e357      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004936:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004942:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d035      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	429a      	cmp	r2, r3
 800495e:	d02e      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004960:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004968:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004976:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004982:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004988:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d114      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fd fab8 	bl	8001f08 <HAL_GetTick>
 8004998:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499a:	e00a      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800499c:	f7fd fab4 	bl	8001f08 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e319      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b2:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0ee      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ca:	d111      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049da:	400b      	ands	r3, r1
 80049dc:	4901      	ldr	r1, [pc, #4]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
 80049e2:	e00b      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049e4:	40023800 	.word	0x40023800
 80049e8:	40007000 	.word	0x40007000
 80049ec:	0ffffcff 	.word	0x0ffffcff
 80049f0:	4baa      	ldr	r3, [pc, #680]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4aa9      	ldr	r2, [pc, #676]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049fa:	6093      	str	r3, [r2, #8]
 80049fc:	4ba7      	ldr	r3, [pc, #668]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a08:	49a4      	ldr	r1, [pc, #656]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d010      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a1a:	4ba0      	ldr	r3, [pc, #640]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a20:	4a9e      	ldr	r2, [pc, #632]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a2a:	4b9c      	ldr	r3, [pc, #624]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	4999      	ldr	r1, [pc, #612]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a48:	4b94      	ldr	r3, [pc, #592]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a56:	4991      	ldr	r1, [pc, #580]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a6a:	4b8c      	ldr	r3, [pc, #560]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a78:	4988      	ldr	r1, [pc, #544]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a8c:	4b83      	ldr	r3, [pc, #524]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9a:	4980      	ldr	r1, [pc, #512]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aae:	4b7b      	ldr	r3, [pc, #492]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	4977      	ldr	r1, [pc, #476]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ad0:	4b72      	ldr	r3, [pc, #456]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	496f      	ldr	r1, [pc, #444]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004af2:	4b6a      	ldr	r3, [pc, #424]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f023 020c 	bic.w	r2, r3, #12
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b00:	4966      	ldr	r1, [pc, #408]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b14:	4b61      	ldr	r3, [pc, #388]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	495e      	ldr	r1, [pc, #376]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b36:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b44:	4955      	ldr	r1, [pc, #340]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b58:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	494d      	ldr	r1, [pc, #308]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b7a:	4b48      	ldr	r3, [pc, #288]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b88:	4944      	ldr	r1, [pc, #272]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b9c:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	493c      	ldr	r1, [pc, #240]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004bbe:	4b37      	ldr	r3, [pc, #220]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bcc:	4933      	ldr	r1, [pc, #204]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004be0:	4b2e      	ldr	r3, [pc, #184]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bee:	492b      	ldr	r1, [pc, #172]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d011      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c02:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c10:	4922      	ldr	r1, [pc, #136]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c20:	d101      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c32:	2301      	movs	r3, #1
 8004c34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c42:	4b16      	ldr	r3, [pc, #88]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c50:	4912      	ldr	r1, [pc, #72]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00b      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c74:	4909      	ldr	r1, [pc, #36]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d006      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 80d9 	beq.w	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c90:	4b02      	ldr	r3, [pc, #8]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a01      	ldr	r2, [pc, #4]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c9a:	e001      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca2:	f7fd f931 	bl	8001f08 <HAL_GetTick>
 8004ca6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004caa:	f7fd f92d 	bl	8001f08 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b64      	cmp	r3, #100	; 0x64
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e194      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cbc:	4b6c      	ldr	r3, [pc, #432]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d021      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11d      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cdc:	4b64      	ldr	r3, [pc, #400]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce2:	0c1b      	lsrs	r3, r3, #16
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cea:	4b61      	ldr	r3, [pc, #388]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf0:	0e1b      	lsrs	r3, r3, #24
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	019a      	lsls	r2, r3, #6
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	041b      	lsls	r3, r3, #16
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	061b      	lsls	r3, r3, #24
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	071b      	lsls	r3, r3, #28
 8004d10:	4957      	ldr	r1, [pc, #348]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d02e      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d42:	d129      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d44:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d52:	4b47      	ldr	r3, [pc, #284]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d58:	0f1b      	lsrs	r3, r3, #28
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	019a      	lsls	r2, r3, #6
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	431a      	orrs	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	071b      	lsls	r3, r3, #28
 8004d78:	493d      	ldr	r1, [pc, #244]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d80:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d86:	f023 021f 	bic.w	r2, r3, #31
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	4937      	ldr	r1, [pc, #220]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01d      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004da4:	4b32      	ldr	r3, [pc, #200]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004daa:	0e1b      	lsrs	r3, r3, #24
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004db2:	4b2f      	ldr	r3, [pc, #188]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db8:	0f1b      	lsrs	r3, r3, #28
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	019a      	lsls	r2, r3, #6
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	071b      	lsls	r3, r3, #28
 8004dd8:	4925      	ldr	r1, [pc, #148]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d011      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	019a      	lsls	r2, r3, #6
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	041b      	lsls	r3, r3, #16
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	061b      	lsls	r3, r3, #24
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	071b      	lsls	r3, r3, #28
 8004e08:	4919      	ldr	r1, [pc, #100]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e10:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1c:	f7fd f874 	bl	8001f08 <HAL_GetTick>
 8004e20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e24:	f7fd f870 	bl	8001f08 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	; 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e0d7      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e36:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	f040 80cd 	bne.w	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a08      	ldr	r2, [pc, #32]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e56:	f7fd f857 	bl	8001f08 <HAL_GetTick>
 8004e5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e5e:	f7fd f853 	bl	8001f08 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b64      	cmp	r3, #100	; 0x64
 8004e6a:	d903      	bls.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0ba      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004e70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e74:	4b5e      	ldr	r3, [pc, #376]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e80:	d0ed      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d02e      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d12a      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004eaa:	4b51      	ldr	r3, [pc, #324]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	0c1b      	lsrs	r3, r3, #16
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eb8:	4b4d      	ldr	r3, [pc, #308]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebe:	0f1b      	lsrs	r3, r3, #28
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	019a      	lsls	r2, r3, #6
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	041b      	lsls	r3, r3, #16
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	071b      	lsls	r3, r3, #28
 8004ede:	4944      	ldr	r1, [pc, #272]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ee6:	4b42      	ldr	r3, [pc, #264]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	493d      	ldr	r1, [pc, #244]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d022      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f14:	d11d      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f16:	4b36      	ldr	r3, [pc, #216]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	0e1b      	lsrs	r3, r3, #24
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f24:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	0f1b      	lsrs	r3, r3, #28
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	019a      	lsls	r2, r3, #6
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	041b      	lsls	r3, r3, #16
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	061b      	lsls	r3, r3, #24
 8004f44:	431a      	orrs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	071b      	lsls	r3, r3, #28
 8004f4a:	4929      	ldr	r1, [pc, #164]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d028      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	0e1b      	lsrs	r3, r3, #24
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f6c:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	0c1b      	lsrs	r3, r3, #16
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	019a      	lsls	r2, r3, #6
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	431a      	orrs	r2, r3
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	4917      	ldr	r1, [pc, #92]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f9a:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	4911      	ldr	r1, [pc, #68]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0e      	ldr	r2, [pc, #56]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fbc:	f7fc ffa4 	bl	8001f08 <HAL_GetTick>
 8004fc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fc4:	f7fc ffa0 	bl	8001f08 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	; 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e007      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fe2:	d1ef      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800

08004ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e049      	b.n	800509a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f841 	bl	80050a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3304      	adds	r3, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f000 fa00 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d001      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e054      	b.n	800517a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a26      	ldr	r2, [pc, #152]	; (8005188 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d022      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fa:	d01d      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a22      	ldr	r2, [pc, #136]	; (800518c <HAL_TIM_Base_Start_IT+0xd4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d018      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a21      	ldr	r2, [pc, #132]	; (8005190 <HAL_TIM_Base_Start_IT+0xd8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <HAL_TIM_Base_Start_IT+0xdc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <HAL_TIM_Base_Start_IT+0xe0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1c      	ldr	r2, [pc, #112]	; (800519c <HAL_TIM_Base_Start_IT+0xe4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d115      	bne.n	8005164 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_TIM_Base_Start_IT+0xec>)
 8005140:	4013      	ands	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b06      	cmp	r3, #6
 8005148:	d015      	beq.n	8005176 <HAL_TIM_Base_Start_IT+0xbe>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	d011      	beq.n	8005176 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0201 	orr.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005162:	e008      	b.n	8005176 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e000      	b.n	8005178 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005176:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40010400 	.word	0x40010400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40001800 	.word	0x40001800
 80051a4:	00010007 	.word	0x00010007

080051a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d122      	bne.n	8005204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d11b      	bne.n	8005204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0202 	mvn.w	r2, #2
 80051d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f905 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 80051f0:	e005      	b.n	80051fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f8f7 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f908 	bl	800540e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b04      	cmp	r3, #4
 8005210:	d122      	bne.n	8005258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b04      	cmp	r3, #4
 800521e:	d11b      	bne.n	8005258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0204 	mvn.w	r2, #4
 8005228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f8db 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 8005244:	e005      	b.n	8005252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8cd 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f8de 	bl	800540e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b08      	cmp	r3, #8
 8005264:	d122      	bne.n	80052ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b08      	cmp	r3, #8
 8005272:	d11b      	bne.n	80052ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0208 	mvn.w	r2, #8
 800527c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2204      	movs	r2, #4
 8005282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f8b1 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 8005298:	e005      	b.n	80052a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8a3 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f8b4 	bl	800540e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d122      	bne.n	8005300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d11b      	bne.n	8005300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0210 	mvn.w	r2, #16
 80052d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2208      	movs	r2, #8
 80052d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f887 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 80052ec:	e005      	b.n	80052fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f879 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f88a 	bl	800540e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d10e      	bne.n	800532c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d107      	bne.n	800532c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0201 	mvn.w	r2, #1
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fb fb00 	bl	800092c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b80      	cmp	r3, #128	; 0x80
 8005338:	d10e      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	2b80      	cmp	r3, #128	; 0x80
 8005346:	d107      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f91a 	bl	800558c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005366:	d10e      	bne.n	8005386 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d107      	bne.n	8005386 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f90d 	bl	80055a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d10e      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d107      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f838 	bl	8005422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d10e      	bne.n	80053de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d107      	bne.n	80053de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f06f 0220 	mvn.w	r2, #32
 80053d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8cd 	bl	8005578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a40      	ldr	r2, [pc, #256]	; (800554c <TIM_Base_SetConfig+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d00f      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a3d      	ldr	r2, [pc, #244]	; (8005550 <TIM_Base_SetConfig+0x118>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00b      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a3c      	ldr	r2, [pc, #240]	; (8005554 <TIM_Base_SetConfig+0x11c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a3b      	ldr	r2, [pc, #236]	; (8005558 <TIM_Base_SetConfig+0x120>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a3a      	ldr	r2, [pc, #232]	; (800555c <TIM_Base_SetConfig+0x124>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d108      	bne.n	800548a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2f      	ldr	r2, [pc, #188]	; (800554c <TIM_Base_SetConfig+0x114>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d02b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d027      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2c      	ldr	r2, [pc, #176]	; (8005550 <TIM_Base_SetConfig+0x118>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d023      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2b      	ldr	r2, [pc, #172]	; (8005554 <TIM_Base_SetConfig+0x11c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01f      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <TIM_Base_SetConfig+0x120>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a29      	ldr	r2, [pc, #164]	; (800555c <TIM_Base_SetConfig+0x124>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d017      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a28      	ldr	r2, [pc, #160]	; (8005560 <TIM_Base_SetConfig+0x128>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a27      	ldr	r2, [pc, #156]	; (8005564 <TIM_Base_SetConfig+0x12c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_Base_SetConfig+0x130>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a25      	ldr	r2, [pc, #148]	; (800556c <TIM_Base_SetConfig+0x134>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a24      	ldr	r2, [pc, #144]	; (8005570 <TIM_Base_SetConfig+0x138>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a23      	ldr	r2, [pc, #140]	; (8005574 <TIM_Base_SetConfig+0x13c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d108      	bne.n	80054fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <TIM_Base_SetConfig+0x114>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_Base_SetConfig+0xf8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a0c      	ldr	r2, [pc, #48]	; (800555c <TIM_Base_SetConfig+0x124>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d103      	bne.n	8005538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	615a      	str	r2, [r3, #20]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40010400 	.word	0x40010400
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400
 8005568:	40014800 	.word	0x40014800
 800556c:	40001800 	.word	0x40001800
 8005570:	40001c00 	.word	0x40001c00
 8005574:	40002000 	.word	0x40002000

08005578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e040      	b.n	8005648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fb f9e8 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2224      	movs	r2, #36	; 0x24
 80055e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fcba 	bl	8005f6c <UART_SetConfig>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e022      	b.n	8005648 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 ff12 	bl	8006434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800561e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800562e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 ff99 	bl	8006578 <UART_CheckIdleState>
 8005646:	4603      	mov	r3, r0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	; 0x28
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005664:	2b20      	cmp	r3, #32
 8005666:	d171      	bne.n	800574c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_UART_Transmit+0x24>
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e06a      	b.n	800574e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2221      	movs	r2, #33	; 0x21
 8005684:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005686:	f7fc fc3f 	bl	8001f08 <HAL_GetTick>
 800568a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	88fa      	ldrh	r2, [r7, #6]
 8005690:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a4:	d108      	bne.n	80056b8 <HAL_UART_Transmit+0x68>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	e003      	b.n	80056c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056c0:	e02c      	b.n	800571c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	2180      	movs	r1, #128	; 0x80
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 ff8a 	bl	80065e6 <UART_WaitOnFlagUntilTimeout>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e038      	b.n	800574e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10b      	bne.n	80056fa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	3302      	adds	r3, #2
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	e007      	b.n	800570a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	3301      	adds	r3, #1
 8005708:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1cc      	bne.n	80056c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2200      	movs	r2, #0
 8005730:	2140      	movs	r1, #64	; 0x40
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 ff57 	bl	80065e6 <UART_WaitOnFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e005      	b.n	800574e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e000      	b.n	800574e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b08a      	sub	sp, #40	; 0x28
 800575a:	af02      	add	r7, sp, #8
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800576c:	2b20      	cmp	r3, #32
 800576e:	f040 80b1 	bne.w	80058d4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_UART_Receive+0x28>
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0a9      	b.n	80058d6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2222      	movs	r2, #34	; 0x22
 800578e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005798:	f7fc fbb6 	bl	8001f08 <HAL_GetTick>
 800579c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	88fa      	ldrh	r2, [r7, #6]
 80057a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b6:	d10e      	bne.n	80057d6 <HAL_UART_Receive+0x80>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <HAL_UART_Receive+0x76>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ca:	e02d      	b.n	8005828 <HAL_UART_Receive+0xd2>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	22ff      	movs	r2, #255	; 0xff
 80057d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057d4:	e028      	b.n	8005828 <HAL_UART_Receive+0xd2>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10d      	bne.n	80057fa <HAL_UART_Receive+0xa4>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d104      	bne.n	80057f0 <HAL_UART_Receive+0x9a>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	22ff      	movs	r2, #255	; 0xff
 80057ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ee:	e01b      	b.n	8005828 <HAL_UART_Receive+0xd2>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	227f      	movs	r2, #127	; 0x7f
 80057f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057f8:	e016      	b.n	8005828 <HAL_UART_Receive+0xd2>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005802:	d10d      	bne.n	8005820 <HAL_UART_Receive+0xca>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <HAL_UART_Receive+0xc0>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	227f      	movs	r2, #127	; 0x7f
 8005810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005814:	e008      	b.n	8005828 <HAL_UART_Receive+0xd2>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	223f      	movs	r2, #63	; 0x3f
 800581a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800581e:	e003      	b.n	8005828 <HAL_UART_Receive+0xd2>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800582e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005838:	d108      	bne.n	800584c <HAL_UART_Receive+0xf6>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	e003      	b.n	8005854 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005854:	e032      	b.n	80058bc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	2120      	movs	r1, #32
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fec0 	bl	80065e6 <UART_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e032      	b.n	80058d6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10c      	bne.n	8005890 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	b29a      	uxth	r2, r3
 800587e:	8a7b      	ldrh	r3, [r7, #18]
 8005880:	4013      	ands	r3, r2
 8005882:	b29a      	uxth	r2, r3
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	3302      	adds	r3, #2
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	e00c      	b.n	80058aa <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	b2da      	uxtb	r2, r3
 8005898:	8a7b      	ldrh	r3, [r7, #18]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	4013      	ands	r3, r2
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	3301      	adds	r3, #1
 80058a8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1c6      	bne.n	8005856 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e000      	b.n	80058d6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b08b      	sub	sp, #44	; 0x2c
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d147      	bne.n	8005986 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_UART_Transmit_IT+0x22>
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e040      	b.n	8005988 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2221      	movs	r2, #33	; 0x21
 800592e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005938:	d107      	bne.n	800594a <HAL_UART_Transmit_IT+0x6a>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d103      	bne.n	800594a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4a13      	ldr	r2, [pc, #76]	; (8005994 <HAL_UART_Transmit_IT+0xb4>)
 8005946:	66da      	str	r2, [r3, #108]	; 0x6c
 8005948:	e002      	b.n	8005950 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a12      	ldr	r2, [pc, #72]	; (8005998 <HAL_UART_Transmit_IT+0xb8>)
 800594e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	613b      	str	r3, [r7, #16]
   return(result);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	623b      	str	r3, [r7, #32]
 8005970:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	69f9      	ldr	r1, [r7, #28]
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	61bb      	str	r3, [r7, #24]
   return(result);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e6      	bne.n	8005950 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	e000      	b.n	8005988 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005986:	2302      	movs	r3, #2
  }
}
 8005988:	4618      	mov	r0, r3
 800598a:	372c      	adds	r7, #44	; 0x2c
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	0800691d 	.word	0x0800691d
 8005998:	08006867 	.word	0x08006867

0800599c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b0ba      	sub	sp, #232	; 0xe8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80059ca:	4013      	ands	r3, r2
 80059cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d115      	bne.n	8005a04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00f      	beq.n	8005a04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d009      	beq.n	8005a04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8297 	beq.w	8005f28 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
      }
      return;
 8005a02:	e291      	b.n	8005f28 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8117 	beq.w	8005c3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a1e:	4b85      	ldr	r3, [pc, #532]	; (8005c34 <HAL_UART_IRQHandler+0x298>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 810a 	beq.w	8005c3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d011      	beq.n	8005a58 <HAL_UART_IRQHandler+0xbc>
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2201      	movs	r2, #1
 8005a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4e:	f043 0201 	orr.w	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d011      	beq.n	8005a88 <HAL_UART_IRQHandler+0xec>
 8005a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2202      	movs	r2, #2
 8005a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7e:	f043 0204 	orr.w	r2, r3, #4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x11c>
 8005a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aae:	f043 0202 	orr.w	r2, r3, #2
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d017      	beq.n	8005af4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aea:	f043 0208 	orr.w	r2, r3, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d012      	beq.n	8005b26 <HAL_UART_IRQHandler+0x18a>
 8005b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00c      	beq.n	8005b26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1c:	f043 0220 	orr.w	r2, r3, #32
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 81fd 	beq.w	8005f2c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00d      	beq.n	8005b5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d005      	beq.n	8005b7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d04f      	beq.n	8005c1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fdf7 	bl	8006772 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d141      	bne.n	8005c16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3308      	adds	r3, #8
 8005b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1d9      	bne.n	8005b92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d013      	beq.n	8005c0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bea:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <HAL_UART_IRQHandler+0x29c>)
 8005bec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fc fb0a 	bl	800220c <HAL_DMA_Abort_IT>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d017      	beq.n	8005c2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	e00f      	b.n	8005c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f996 	bl	8005f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	e00b      	b.n	8005c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f992 	bl	8005f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1c:	e007      	b.n	8005c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f98e 	bl	8005f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005c2c:	e17e      	b.n	8005f2c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2e:	bf00      	nop
    return;
 8005c30:	e17c      	b.n	8005f2c <HAL_UART_IRQHandler+0x590>
 8005c32:	bf00      	nop
 8005c34:	04000120 	.word	0x04000120
 8005c38:	0800683b 	.word	0x0800683b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	f040 814c 	bne.w	8005ede <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 0310 	and.w	r3, r3, #16
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8145 	beq.w	8005ede <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 813e 	beq.w	8005ede <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2210      	movs	r2, #16
 8005c68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	f040 80b6 	bne.w	8005de6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8150 	beq.w	8005f30 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	f080 8148 	bcs.w	8005f30 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb4:	f000 8086 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ce6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1da      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e1      	bne.n	8005d02 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3308      	adds	r3, #8
 8005d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e3      	bne.n	8005d3e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d94:	f023 0310 	bic.w	r3, r3, #16
 8005d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005da8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e4      	bne.n	8005d84 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fc f9b4 	bl	800212c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f8b8 	bl	8005f54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005de4:	e0a4      	b.n	8005f30 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8096 	beq.w	8005f34 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8091 	beq.w	8005f34 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e34:	647b      	str	r3, [r7, #68]	; 0x44
 8005e36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e4      	bne.n	8005e12 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	623b      	str	r3, [r7, #32]
   return(result);
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e3      	bne.n	8005e48 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f023 0310 	bic.w	r3, r3, #16
 8005ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	69b9      	ldr	r1, [r7, #24]
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e4      	bne.n	8005e94 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f83c 	bl	8005f54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005edc:	e02a      	b.n	8005f34 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d008      	beq.n	8005f08 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01c      	beq.n	8005f38 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
    }
    return;
 8005f06:	e017      	b.n	8005f38 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d012      	beq.n	8005f3a <HAL_UART_IRQHandler+0x59e>
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fd5b 	bl	80069dc <UART_EndTransmit_IT>
    return;
 8005f26:	e008      	b.n	8005f3a <HAL_UART_IRQHandler+0x59e>
      return;
 8005f28:	bf00      	nop
 8005f2a:	e006      	b.n	8005f3a <HAL_UART_IRQHandler+0x59e>
    return;
 8005f2c:	bf00      	nop
 8005f2e:	e004      	b.n	8005f3a <HAL_UART_IRQHandler+0x59e>
      return;
 8005f30:	bf00      	nop
 8005f32:	e002      	b.n	8005f3a <HAL_UART_IRQHandler+0x59e>
      return;
 8005f34:	bf00      	nop
 8005f36:	e000      	b.n	8005f3a <HAL_UART_IRQHandler+0x59e>
    return;
 8005f38:	bf00      	nop
  }

}
 8005f3a:	37e8      	adds	r7, #232	; 0xe8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4ba6      	ldr	r3, [pc, #664]	; (8006230 <UART_SetConfig+0x2c4>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	6979      	ldr	r1, [r7, #20]
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a94      	ldr	r2, [pc, #592]	; (8006234 <UART_SetConfig+0x2c8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d120      	bne.n	800602a <UART_SetConfig+0xbe>
 8005fe8:	4b93      	ldr	r3, [pc, #588]	; (8006238 <UART_SetConfig+0x2cc>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d816      	bhi.n	8006024 <UART_SetConfig+0xb8>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <UART_SetConfig+0x90>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	0800600d 	.word	0x0800600d
 8006000:	08006019 	.word	0x08006019
 8006004:	08006013 	.word	0x08006013
 8006008:	0800601f 	.word	0x0800601f
 800600c:	2301      	movs	r3, #1
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e150      	b.n	80062b4 <UART_SetConfig+0x348>
 8006012:	2302      	movs	r3, #2
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e14d      	b.n	80062b4 <UART_SetConfig+0x348>
 8006018:	2304      	movs	r3, #4
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e14a      	b.n	80062b4 <UART_SetConfig+0x348>
 800601e:	2308      	movs	r3, #8
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e147      	b.n	80062b4 <UART_SetConfig+0x348>
 8006024:	2310      	movs	r3, #16
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e144      	b.n	80062b4 <UART_SetConfig+0x348>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a83      	ldr	r2, [pc, #524]	; (800623c <UART_SetConfig+0x2d0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d132      	bne.n	800609a <UART_SetConfig+0x12e>
 8006034:	4b80      	ldr	r3, [pc, #512]	; (8006238 <UART_SetConfig+0x2cc>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603a:	f003 030c 	and.w	r3, r3, #12
 800603e:	2b0c      	cmp	r3, #12
 8006040:	d828      	bhi.n	8006094 <UART_SetConfig+0x128>
 8006042:	a201      	add	r2, pc, #4	; (adr r2, 8006048 <UART_SetConfig+0xdc>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	0800607d 	.word	0x0800607d
 800604c:	08006095 	.word	0x08006095
 8006050:	08006095 	.word	0x08006095
 8006054:	08006095 	.word	0x08006095
 8006058:	08006089 	.word	0x08006089
 800605c:	08006095 	.word	0x08006095
 8006060:	08006095 	.word	0x08006095
 8006064:	08006095 	.word	0x08006095
 8006068:	08006083 	.word	0x08006083
 800606c:	08006095 	.word	0x08006095
 8006070:	08006095 	.word	0x08006095
 8006074:	08006095 	.word	0x08006095
 8006078:	0800608f 	.word	0x0800608f
 800607c:	2300      	movs	r3, #0
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e118      	b.n	80062b4 <UART_SetConfig+0x348>
 8006082:	2302      	movs	r3, #2
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e115      	b.n	80062b4 <UART_SetConfig+0x348>
 8006088:	2304      	movs	r3, #4
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e112      	b.n	80062b4 <UART_SetConfig+0x348>
 800608e:	2308      	movs	r3, #8
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e10f      	b.n	80062b4 <UART_SetConfig+0x348>
 8006094:	2310      	movs	r3, #16
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e10c      	b.n	80062b4 <UART_SetConfig+0x348>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a68      	ldr	r2, [pc, #416]	; (8006240 <UART_SetConfig+0x2d4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d120      	bne.n	80060e6 <UART_SetConfig+0x17a>
 80060a4:	4b64      	ldr	r3, [pc, #400]	; (8006238 <UART_SetConfig+0x2cc>)
 80060a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060ae:	2b30      	cmp	r3, #48	; 0x30
 80060b0:	d013      	beq.n	80060da <UART_SetConfig+0x16e>
 80060b2:	2b30      	cmp	r3, #48	; 0x30
 80060b4:	d814      	bhi.n	80060e0 <UART_SetConfig+0x174>
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d009      	beq.n	80060ce <UART_SetConfig+0x162>
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	d810      	bhi.n	80060e0 <UART_SetConfig+0x174>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <UART_SetConfig+0x15c>
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d006      	beq.n	80060d4 <UART_SetConfig+0x168>
 80060c6:	e00b      	b.n	80060e0 <UART_SetConfig+0x174>
 80060c8:	2300      	movs	r3, #0
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e0f2      	b.n	80062b4 <UART_SetConfig+0x348>
 80060ce:	2302      	movs	r3, #2
 80060d0:	77fb      	strb	r3, [r7, #31]
 80060d2:	e0ef      	b.n	80062b4 <UART_SetConfig+0x348>
 80060d4:	2304      	movs	r3, #4
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e0ec      	b.n	80062b4 <UART_SetConfig+0x348>
 80060da:	2308      	movs	r3, #8
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e0e9      	b.n	80062b4 <UART_SetConfig+0x348>
 80060e0:	2310      	movs	r3, #16
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e0e6      	b.n	80062b4 <UART_SetConfig+0x348>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a56      	ldr	r2, [pc, #344]	; (8006244 <UART_SetConfig+0x2d8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d120      	bne.n	8006132 <UART_SetConfig+0x1c6>
 80060f0:	4b51      	ldr	r3, [pc, #324]	; (8006238 <UART_SetConfig+0x2cc>)
 80060f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060fa:	2bc0      	cmp	r3, #192	; 0xc0
 80060fc:	d013      	beq.n	8006126 <UART_SetConfig+0x1ba>
 80060fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006100:	d814      	bhi.n	800612c <UART_SetConfig+0x1c0>
 8006102:	2b80      	cmp	r3, #128	; 0x80
 8006104:	d009      	beq.n	800611a <UART_SetConfig+0x1ae>
 8006106:	2b80      	cmp	r3, #128	; 0x80
 8006108:	d810      	bhi.n	800612c <UART_SetConfig+0x1c0>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <UART_SetConfig+0x1a8>
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d006      	beq.n	8006120 <UART_SetConfig+0x1b4>
 8006112:	e00b      	b.n	800612c <UART_SetConfig+0x1c0>
 8006114:	2300      	movs	r3, #0
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e0cc      	b.n	80062b4 <UART_SetConfig+0x348>
 800611a:	2302      	movs	r3, #2
 800611c:	77fb      	strb	r3, [r7, #31]
 800611e:	e0c9      	b.n	80062b4 <UART_SetConfig+0x348>
 8006120:	2304      	movs	r3, #4
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e0c6      	b.n	80062b4 <UART_SetConfig+0x348>
 8006126:	2308      	movs	r3, #8
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e0c3      	b.n	80062b4 <UART_SetConfig+0x348>
 800612c:	2310      	movs	r3, #16
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	e0c0      	b.n	80062b4 <UART_SetConfig+0x348>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a44      	ldr	r2, [pc, #272]	; (8006248 <UART_SetConfig+0x2dc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d125      	bne.n	8006188 <UART_SetConfig+0x21c>
 800613c:	4b3e      	ldr	r3, [pc, #248]	; (8006238 <UART_SetConfig+0x2cc>)
 800613e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614a:	d017      	beq.n	800617c <UART_SetConfig+0x210>
 800614c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006150:	d817      	bhi.n	8006182 <UART_SetConfig+0x216>
 8006152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006156:	d00b      	beq.n	8006170 <UART_SetConfig+0x204>
 8006158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800615c:	d811      	bhi.n	8006182 <UART_SetConfig+0x216>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <UART_SetConfig+0x1fe>
 8006162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006166:	d006      	beq.n	8006176 <UART_SetConfig+0x20a>
 8006168:	e00b      	b.n	8006182 <UART_SetConfig+0x216>
 800616a:	2300      	movs	r3, #0
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e0a1      	b.n	80062b4 <UART_SetConfig+0x348>
 8006170:	2302      	movs	r3, #2
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e09e      	b.n	80062b4 <UART_SetConfig+0x348>
 8006176:	2304      	movs	r3, #4
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e09b      	b.n	80062b4 <UART_SetConfig+0x348>
 800617c:	2308      	movs	r3, #8
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e098      	b.n	80062b4 <UART_SetConfig+0x348>
 8006182:	2310      	movs	r3, #16
 8006184:	77fb      	strb	r3, [r7, #31]
 8006186:	e095      	b.n	80062b4 <UART_SetConfig+0x348>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2f      	ldr	r2, [pc, #188]	; (800624c <UART_SetConfig+0x2e0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d125      	bne.n	80061de <UART_SetConfig+0x272>
 8006192:	4b29      	ldr	r3, [pc, #164]	; (8006238 <UART_SetConfig+0x2cc>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800619c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061a0:	d017      	beq.n	80061d2 <UART_SetConfig+0x266>
 80061a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061a6:	d817      	bhi.n	80061d8 <UART_SetConfig+0x26c>
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ac:	d00b      	beq.n	80061c6 <UART_SetConfig+0x25a>
 80061ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b2:	d811      	bhi.n	80061d8 <UART_SetConfig+0x26c>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <UART_SetConfig+0x254>
 80061b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061bc:	d006      	beq.n	80061cc <UART_SetConfig+0x260>
 80061be:	e00b      	b.n	80061d8 <UART_SetConfig+0x26c>
 80061c0:	2301      	movs	r3, #1
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e076      	b.n	80062b4 <UART_SetConfig+0x348>
 80061c6:	2302      	movs	r3, #2
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e073      	b.n	80062b4 <UART_SetConfig+0x348>
 80061cc:	2304      	movs	r3, #4
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e070      	b.n	80062b4 <UART_SetConfig+0x348>
 80061d2:	2308      	movs	r3, #8
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e06d      	b.n	80062b4 <UART_SetConfig+0x348>
 80061d8:	2310      	movs	r3, #16
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e06a      	b.n	80062b4 <UART_SetConfig+0x348>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1b      	ldr	r2, [pc, #108]	; (8006250 <UART_SetConfig+0x2e4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d138      	bne.n	800625a <UART_SetConfig+0x2ee>
 80061e8:	4b13      	ldr	r3, [pc, #76]	; (8006238 <UART_SetConfig+0x2cc>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061f6:	d017      	beq.n	8006228 <UART_SetConfig+0x2bc>
 80061f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061fc:	d82a      	bhi.n	8006254 <UART_SetConfig+0x2e8>
 80061fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006202:	d00b      	beq.n	800621c <UART_SetConfig+0x2b0>
 8006204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006208:	d824      	bhi.n	8006254 <UART_SetConfig+0x2e8>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <UART_SetConfig+0x2aa>
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d006      	beq.n	8006222 <UART_SetConfig+0x2b6>
 8006214:	e01e      	b.n	8006254 <UART_SetConfig+0x2e8>
 8006216:	2300      	movs	r3, #0
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e04b      	b.n	80062b4 <UART_SetConfig+0x348>
 800621c:	2302      	movs	r3, #2
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e048      	b.n	80062b4 <UART_SetConfig+0x348>
 8006222:	2304      	movs	r3, #4
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e045      	b.n	80062b4 <UART_SetConfig+0x348>
 8006228:	2308      	movs	r3, #8
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e042      	b.n	80062b4 <UART_SetConfig+0x348>
 800622e:	bf00      	nop
 8006230:	efff69f3 	.word	0xefff69f3
 8006234:	40011000 	.word	0x40011000
 8006238:	40023800 	.word	0x40023800
 800623c:	40004400 	.word	0x40004400
 8006240:	40004800 	.word	0x40004800
 8006244:	40004c00 	.word	0x40004c00
 8006248:	40005000 	.word	0x40005000
 800624c:	40011400 	.word	0x40011400
 8006250:	40007800 	.word	0x40007800
 8006254:	2310      	movs	r3, #16
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e02c      	b.n	80062b4 <UART_SetConfig+0x348>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a72      	ldr	r2, [pc, #456]	; (8006428 <UART_SetConfig+0x4bc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d125      	bne.n	80062b0 <UART_SetConfig+0x344>
 8006264:	4b71      	ldr	r3, [pc, #452]	; (800642c <UART_SetConfig+0x4c0>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800626e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006272:	d017      	beq.n	80062a4 <UART_SetConfig+0x338>
 8006274:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006278:	d817      	bhi.n	80062aa <UART_SetConfig+0x33e>
 800627a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627e:	d00b      	beq.n	8006298 <UART_SetConfig+0x32c>
 8006280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006284:	d811      	bhi.n	80062aa <UART_SetConfig+0x33e>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <UART_SetConfig+0x326>
 800628a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800628e:	d006      	beq.n	800629e <UART_SetConfig+0x332>
 8006290:	e00b      	b.n	80062aa <UART_SetConfig+0x33e>
 8006292:	2300      	movs	r3, #0
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e00d      	b.n	80062b4 <UART_SetConfig+0x348>
 8006298:	2302      	movs	r3, #2
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e00a      	b.n	80062b4 <UART_SetConfig+0x348>
 800629e:	2304      	movs	r3, #4
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e007      	b.n	80062b4 <UART_SetConfig+0x348>
 80062a4:	2308      	movs	r3, #8
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e004      	b.n	80062b4 <UART_SetConfig+0x348>
 80062aa:	2310      	movs	r3, #16
 80062ac:	77fb      	strb	r3, [r7, #31]
 80062ae:	e001      	b.n	80062b4 <UART_SetConfig+0x348>
 80062b0:	2310      	movs	r3, #16
 80062b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062bc:	d15b      	bne.n	8006376 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062be:	7ffb      	ldrb	r3, [r7, #31]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d828      	bhi.n	8006316 <UART_SetConfig+0x3aa>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0x360>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	08006301 	.word	0x08006301
 80062d8:	08006317 	.word	0x08006317
 80062dc:	08006307 	.word	0x08006307
 80062e0:	08006317 	.word	0x08006317
 80062e4:	08006317 	.word	0x08006317
 80062e8:	08006317 	.word	0x08006317
 80062ec:	0800630f 	.word	0x0800630f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f0:	f7fe fa36 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 80062f4:	61b8      	str	r0, [r7, #24]
        break;
 80062f6:	e013      	b.n	8006320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f8:	f7fe fa46 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 80062fc:	61b8      	str	r0, [r7, #24]
        break;
 80062fe:	e00f      	b.n	8006320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006300:	4b4b      	ldr	r3, [pc, #300]	; (8006430 <UART_SetConfig+0x4c4>)
 8006302:	61bb      	str	r3, [r7, #24]
        break;
 8006304:	e00c      	b.n	8006320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006306:	f7fe f919 	bl	800453c <HAL_RCC_GetSysClockFreq>
 800630a:	61b8      	str	r0, [r7, #24]
        break;
 800630c:	e008      	b.n	8006320 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006312:	61bb      	str	r3, [r7, #24]
        break;
 8006314:	e004      	b.n	8006320 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	77bb      	strb	r3, [r7, #30]
        break;
 800631e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d074      	beq.n	8006410 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	005a      	lsls	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	441a      	add	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	fbb2 f3f3 	udiv	r3, r2, r3
 800633a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b0f      	cmp	r3, #15
 8006340:	d916      	bls.n	8006370 <UART_SetConfig+0x404>
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006348:	d212      	bcs.n	8006370 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f023 030f 	bic.w	r3, r3, #15
 8006352:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	085b      	lsrs	r3, r3, #1
 8006358:	b29b      	uxth	r3, r3
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	b29a      	uxth	r2, r3
 8006360:	89fb      	ldrh	r3, [r7, #14]
 8006362:	4313      	orrs	r3, r2
 8006364:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	89fa      	ldrh	r2, [r7, #14]
 800636c:	60da      	str	r2, [r3, #12]
 800636e:	e04f      	b.n	8006410 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	77bb      	strb	r3, [r7, #30]
 8006374:	e04c      	b.n	8006410 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006376:	7ffb      	ldrb	r3, [r7, #31]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d828      	bhi.n	80063ce <UART_SetConfig+0x462>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <UART_SetConfig+0x418>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	080063cf 	.word	0x080063cf
 8006394:	080063bf 	.word	0x080063bf
 8006398:	080063cf 	.word	0x080063cf
 800639c:	080063cf 	.word	0x080063cf
 80063a0:	080063cf 	.word	0x080063cf
 80063a4:	080063c7 	.word	0x080063c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a8:	f7fe f9da 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 80063ac:	61b8      	str	r0, [r7, #24]
        break;
 80063ae:	e013      	b.n	80063d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063b0:	f7fe f9ea 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 80063b4:	61b8      	str	r0, [r7, #24]
        break;
 80063b6:	e00f      	b.n	80063d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <UART_SetConfig+0x4c4>)
 80063ba:	61bb      	str	r3, [r7, #24]
        break;
 80063bc:	e00c      	b.n	80063d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063be:	f7fe f8bd 	bl	800453c <HAL_RCC_GetSysClockFreq>
 80063c2:	61b8      	str	r0, [r7, #24]
        break;
 80063c4:	e008      	b.n	80063d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ca:	61bb      	str	r3, [r7, #24]
        break;
 80063cc:	e004      	b.n	80063d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	77bb      	strb	r3, [r7, #30]
        break;
 80063d6:	bf00      	nop
    }

    if (pclk != 0U)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d018      	beq.n	8006410 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	085a      	lsrs	r2, r3, #1
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	441a      	add	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b0f      	cmp	r3, #15
 80063f6:	d909      	bls.n	800640c <UART_SetConfig+0x4a0>
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fe:	d205      	bcs.n	800640c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	e001      	b.n	8006410 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800641c:	7fbb      	ldrb	r3, [r7, #30]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3720      	adds	r7, #32
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40007c00 	.word	0x40007c00
 800642c:	40023800 	.word	0x40023800
 8006430:	00f42400 	.word	0x00f42400

08006434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01a      	beq.n	800654a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006532:	d10a      	bne.n	800654a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	605a      	str	r2, [r3, #4]
  }
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af02      	add	r7, sp, #8
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006588:	f7fb fcbe 	bl	8001f08 <HAL_GetTick>
 800658c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b08      	cmp	r3, #8
 800659a:	d10e      	bne.n	80065ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800659c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f81b 	bl	80065e6 <UART_WaitOnFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e011      	b.n	80065de <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2220      	movs	r2, #32
 80065be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b09c      	sub	sp, #112	; 0x70
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	4613      	mov	r3, r2
 80065f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f6:	e0a7      	b.n	8006748 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fe:	f000 80a3 	beq.w	8006748 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006602:	f7fb fc81 	bl	8001f08 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800660e:	429a      	cmp	r2, r3
 8006610:	d302      	bcc.n	8006618 <UART_WaitOnFlagUntilTimeout+0x32>
 8006612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006614:	2b00      	cmp	r3, #0
 8006616:	d13f      	bne.n	8006698 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800662c:	667b      	str	r3, [r7, #100]	; 0x64
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006636:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006638:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800663c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	663b      	str	r3, [r7, #96]	; 0x60
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800666a:	64ba      	str	r2, [r7, #72]	; 0x48
 800666c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e068      	b.n	800676a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d050      	beq.n	8006748 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b4:	d148      	bne.n	8006748 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066de:	637b      	str	r3, [r7, #52]	; 0x34
 80066e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e6      	bne.n	80066c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3308      	adds	r3, #8
 80066f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	613b      	str	r3, [r7, #16]
   return(result);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	66bb      	str	r3, [r7, #104]	; 0x68
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3308      	adds	r3, #8
 8006710:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006712:	623a      	str	r2, [r7, #32]
 8006714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	69f9      	ldr	r1, [r7, #28]
 8006718:	6a3a      	ldr	r2, [r7, #32]
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2220      	movs	r2, #32
 8006738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e010      	b.n	800676a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69da      	ldr	r2, [r3, #28]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4013      	ands	r3, r2
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	429a      	cmp	r2, r3
 8006756:	bf0c      	ite	eq
 8006758:	2301      	moveq	r3, #1
 800675a:	2300      	movne	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	429a      	cmp	r2, r3
 8006764:	f43f af48 	beq.w	80065f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3770      	adds	r7, #112	; 0x70
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006772:	b480      	push	{r7}
 8006774:	b095      	sub	sp, #84	; 0x54
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800678e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006798:	643b      	str	r3, [r7, #64]	; 0x40
 800679a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800679e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e6      	bne.n	800677a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3308      	adds	r3, #8
 80067b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f023 0301 	bic.w	r3, r3, #1
 80067c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3308      	adds	r3, #8
 80067ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e5      	bne.n	80067ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d118      	bne.n	800681a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f023 0310 	bic.w	r3, r3, #16
 80067fc:	647b      	str	r3, [r7, #68]	; 0x44
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6979      	ldr	r1, [r7, #20]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	613b      	str	r3, [r7, #16]
   return(result);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e6      	bne.n	80067e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800682e:	bf00      	nop
 8006830:	3754      	adds	r7, #84	; 0x54
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f7ff fb71 	bl	8005f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006866:	b480      	push	{r7}
 8006868:	b08f      	sub	sp, #60	; 0x3c
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006872:	2b21      	cmp	r3, #33	; 0x21
 8006874:	d14c      	bne.n	8006910 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d132      	bne.n	80068e8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e6      	bne.n	8006882 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c8:	633b      	str	r3, [r7, #48]	; 0x30
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	6979      	ldr	r1, [r7, #20]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	613b      	str	r3, [r7, #16]
   return(result);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e6      	bne.n	80068b4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80068e6:	e013      	b.n	8006910 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006910:	bf00      	nop
 8006912:	373c      	adds	r7, #60	; 0x3c
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b091      	sub	sp, #68	; 0x44
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006928:	2b21      	cmp	r3, #33	; 0x21
 800692a:	d151      	bne.n	80069d0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d132      	bne.n	800699e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	623b      	str	r3, [r7, #32]
   return(result);
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800694c:	63bb      	str	r3, [r7, #56]	; 0x38
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006956:	633b      	str	r3, [r7, #48]	; 0x30
 8006958:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e6      	bne.n	8006938 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	60fb      	str	r3, [r7, #12]
   return(result);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	69b9      	ldr	r1, [r7, #24]
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	617b      	str	r3, [r7, #20]
   return(result);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800699c:	e018      	b.n	80069d0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80069a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b8:	1c9a      	adds	r2, r3, #2
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80069d0:	bf00      	nop
 80069d2:	3744      	adds	r7, #68	; 0x44
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6979      	ldr	r1, [r7, #20]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e6      	bne.n	80069e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fb f87a 	bl	8001b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a28:	bf00      	nop
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a30:	b084      	sub	sp, #16
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	f107 001c 	add.w	r0, r7, #28
 8006a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d120      	bne.n	8006a8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	4b20      	ldr	r3, [pc, #128]	; (8006adc <USB_CoreInit+0xac>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d105      	bne.n	8006a7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa96 	bl	8006fb0 <USB_CoreReset>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
 8006a88:	e010      	b.n	8006aac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa8a 	bl	8006fb0 <USB_CoreReset>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d10b      	bne.n	8006aca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f043 0206 	orr.w	r2, r3, #6
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f043 0220 	orr.w	r2, r3, #32
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ad6:	b004      	add	sp, #16
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	ffbdffbf 	.word	0xffbdffbf

08006ae0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f023 0201 	bic.w	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d115      	bne.n	8006b50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b30:	2001      	movs	r0, #1
 8006b32:	f7fb f9f5 	bl	8001f20 <HAL_Delay>
      ms++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa29 	bl	8006f94 <USB_GetMode>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d01e      	beq.n	8006b86 <USB_SetCurrentMode+0x84>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b31      	cmp	r3, #49	; 0x31
 8006b4c:	d9f0      	bls.n	8006b30 <USB_SetCurrentMode+0x2e>
 8006b4e:	e01a      	b.n	8006b86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d115      	bne.n	8006b82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b62:	2001      	movs	r0, #1
 8006b64:	f7fb f9dc 	bl	8001f20 <HAL_Delay>
      ms++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa10 	bl	8006f94 <USB_GetMode>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <USB_SetCurrentMode+0x84>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b31      	cmp	r3, #49	; 0x31
 8006b7e:	d9f0      	bls.n	8006b62 <USB_SetCurrentMode+0x60>
 8006b80:	e001      	b.n	8006b86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e005      	b.n	8006b92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b32      	cmp	r3, #50	; 0x32
 8006b8a:	d101      	bne.n	8006b90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b086      	sub	sp, #24
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	e009      	b.n	8006bd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	3340      	adds	r3, #64	; 0x40
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2b0e      	cmp	r3, #14
 8006bd4:	d9f2      	bls.n	8006bbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d11c      	bne.n	8006c16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bea:	f043 0302 	orr.w	r3, r3, #2
 8006bee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e005      	b.n	8006c22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c28:	461a      	mov	r2, r3
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c34:	4619      	mov	r1, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	680b      	ldr	r3, [r1, #0]
 8006c40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d10c      	bne.n	8006c62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d104      	bne.n	8006c58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c4e:	2100      	movs	r1, #0
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f965 	bl	8006f20 <USB_SetDevSpeed>
 8006c56:	e008      	b.n	8006c6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c58:	2101      	movs	r1, #1
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f960 	bl	8006f20 <USB_SetDevSpeed>
 8006c60:	e003      	b.n	8006c6a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c62:	2103      	movs	r1, #3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f95b 	bl	8006f20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c6a:	2110      	movs	r1, #16
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f8f3 	bl	8006e58 <USB_FlushTxFifo>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f91f 	bl	8006ec0 <USB_FlushRxFifo>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c92:	461a      	mov	r2, r3
 8006c94:	2300      	movs	r3, #0
 8006c96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006caa:	461a      	mov	r2, r3
 8006cac:	2300      	movs	r3, #0
 8006cae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	e043      	b.n	8006d3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ccc:	d118      	bne.n	8006d00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	e013      	b.n	8006d12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cfc:	6013      	str	r3, [r2, #0]
 8006cfe:	e008      	b.n	8006d12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1e:	461a      	mov	r2, r3
 8006d20:	2300      	movs	r3, #0
 8006d22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d30:	461a      	mov	r2, r3
 8006d32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d3b7      	bcc.n	8006cb6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d46:	2300      	movs	r3, #0
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	e043      	b.n	8006dd4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d62:	d118      	bne.n	8006d96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d76:	461a      	mov	r2, r3
 8006d78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	e013      	b.n	8006da8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	e008      	b.n	8006da8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da2:	461a      	mov	r2, r3
 8006da4:	2300      	movs	r3, #0
 8006da6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db4:	461a      	mov	r2, r3
 8006db6:	2300      	movs	r3, #0
 8006db8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	613b      	str	r3, [r7, #16]
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d3b7      	bcc.n	8006d4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006dfc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	f043 0210 	orr.w	r2, r3, #16
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699a      	ldr	r2, [r3, #24]
 8006e14:	4b0e      	ldr	r3, [pc, #56]	; (8006e50 <USB_DevInit+0x2b4>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f043 0208 	orr.w	r2, r3, #8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d105      	bne.n	8006e40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699a      	ldr	r2, [r3, #24]
 8006e38:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <USB_DevInit+0x2b8>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e4c:	b004      	add	sp, #16
 8006e4e:	4770      	bx	lr
 8006e50:	803c3800 	.word	0x803c3800
 8006e54:	40000004 	.word	0x40000004

08006e58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <USB_FlushTxFifo+0x64>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d901      	bls.n	8006e78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e01b      	b.n	8006eb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	daf2      	bge.n	8006e66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	019b      	lsls	r3, r3, #6
 8006e88:	f043 0220 	orr.w	r2, r3, #32
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4a08      	ldr	r2, [pc, #32]	; (8006ebc <USB_FlushTxFifo+0x64>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d901      	bls.n	8006ea2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e006      	b.n	8006eb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d0f0      	beq.n	8006e90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	00030d40 	.word	0x00030d40

08006ec0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4a11      	ldr	r2, [pc, #68]	; (8006f1c <USB_FlushRxFifo+0x5c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d901      	bls.n	8006ede <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e018      	b.n	8006f10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	daf2      	bge.n	8006ecc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2210      	movs	r2, #16
 8006eee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <USB_FlushRxFifo+0x5c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d901      	bls.n	8006f02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e006      	b.n	8006f10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b10      	cmp	r3, #16
 8006f0c:	d0f0      	beq.n	8006ef0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	00030d40 	.word	0x00030d40

08006f20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f6c:	f023 0303 	bic.w	r3, r3, #3
 8006f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f80:	f043 0302 	orr.w	r3, r3, #2
 8006f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	f003 0301 	and.w	r3, r3, #1
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4a13      	ldr	r2, [pc, #76]	; (8007014 <USB_CoreReset+0x64>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d901      	bls.n	8006fce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e01b      	b.n	8007006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	daf2      	bge.n	8006fbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f043 0201 	orr.w	r2, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4a09      	ldr	r2, [pc, #36]	; (8007014 <USB_CoreReset+0x64>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d901      	bls.n	8006ff8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e006      	b.n	8007006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b01      	cmp	r3, #1
 8007002:	d0f0      	beq.n	8006fe6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	00030d40 	.word	0x00030d40

08007018 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007018:	b5b0      	push	{r4, r5, r7, lr}
 800701a:	b08c      	sub	sp, #48	; 0x30
 800701c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800701e:	4b96      	ldr	r3, [pc, #600]	; (8007278 <MX_LWIP_Init+0x260>)
 8007020:	22c0      	movs	r2, #192	; 0xc0
 8007022:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007024:	4b94      	ldr	r3, [pc, #592]	; (8007278 <MX_LWIP_Init+0x260>)
 8007026:	22a8      	movs	r2, #168	; 0xa8
 8007028:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 7;
 800702a:	4b93      	ldr	r3, [pc, #588]	; (8007278 <MX_LWIP_Init+0x260>)
 800702c:	2207      	movs	r2, #7
 800702e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8007030:	4b91      	ldr	r3, [pc, #580]	; (8007278 <MX_LWIP_Init+0x260>)
 8007032:	2202      	movs	r2, #2
 8007034:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007036:	4b91      	ldr	r3, [pc, #580]	; (800727c <MX_LWIP_Init+0x264>)
 8007038:	22ff      	movs	r2, #255	; 0xff
 800703a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800703c:	4b8f      	ldr	r3, [pc, #572]	; (800727c <MX_LWIP_Init+0x264>)
 800703e:	22ff      	movs	r2, #255	; 0xff
 8007040:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007042:	4b8e      	ldr	r3, [pc, #568]	; (800727c <MX_LWIP_Init+0x264>)
 8007044:	22ff      	movs	r2, #255	; 0xff
 8007046:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007048:	4b8c      	ldr	r3, [pc, #560]	; (800727c <MX_LWIP_Init+0x264>)
 800704a:	2200      	movs	r2, #0
 800704c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800704e:	4b8c      	ldr	r3, [pc, #560]	; (8007280 <MX_LWIP_Init+0x268>)
 8007050:	2200      	movs	r2, #0
 8007052:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007054:	4b8a      	ldr	r3, [pc, #552]	; (8007280 <MX_LWIP_Init+0x268>)
 8007056:	2200      	movs	r2, #0
 8007058:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800705a:	4b89      	ldr	r3, [pc, #548]	; (8007280 <MX_LWIP_Init+0x268>)
 800705c:	2200      	movs	r2, #0
 800705e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007060:	4b87      	ldr	r3, [pc, #540]	; (8007280 <MX_LWIP_Init+0x268>)
 8007062:	2200      	movs	r2, #0
 8007064:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007066:	2100      	movs	r1, #0
 8007068:	2000      	movs	r0, #0
 800706a:	f003 ff51 	bl	800af10 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800706e:	4b82      	ldr	r3, [pc, #520]	; (8007278 <MX_LWIP_Init+0x260>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	061a      	lsls	r2, r3, #24
 8007074:	4b80      	ldr	r3, [pc, #512]	; (8007278 <MX_LWIP_Init+0x260>)
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	431a      	orrs	r2, r3
 800707c:	4b7e      	ldr	r3, [pc, #504]	; (8007278 <MX_LWIP_Init+0x260>)
 800707e:	789b      	ldrb	r3, [r3, #2]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	4313      	orrs	r3, r2
 8007084:	4a7c      	ldr	r2, [pc, #496]	; (8007278 <MX_LWIP_Init+0x260>)
 8007086:	78d2      	ldrb	r2, [r2, #3]
 8007088:	4313      	orrs	r3, r2
 800708a:	061a      	lsls	r2, r3, #24
 800708c:	4b7a      	ldr	r3, [pc, #488]	; (8007278 <MX_LWIP_Init+0x260>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	0619      	lsls	r1, r3, #24
 8007092:	4b79      	ldr	r3, [pc, #484]	; (8007278 <MX_LWIP_Init+0x260>)
 8007094:	785b      	ldrb	r3, [r3, #1]
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	4319      	orrs	r1, r3
 800709a:	4b77      	ldr	r3, [pc, #476]	; (8007278 <MX_LWIP_Init+0x260>)
 800709c:	789b      	ldrb	r3, [r3, #2]
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	430b      	orrs	r3, r1
 80070a2:	4975      	ldr	r1, [pc, #468]	; (8007278 <MX_LWIP_Init+0x260>)
 80070a4:	78c9      	ldrb	r1, [r1, #3]
 80070a6:	430b      	orrs	r3, r1
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070ae:	431a      	orrs	r2, r3
 80070b0:	4b71      	ldr	r3, [pc, #452]	; (8007278 <MX_LWIP_Init+0x260>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	0619      	lsls	r1, r3, #24
 80070b6:	4b70      	ldr	r3, [pc, #448]	; (8007278 <MX_LWIP_Init+0x260>)
 80070b8:	785b      	ldrb	r3, [r3, #1]
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	4319      	orrs	r1, r3
 80070be:	4b6e      	ldr	r3, [pc, #440]	; (8007278 <MX_LWIP_Init+0x260>)
 80070c0:	789b      	ldrb	r3, [r3, #2]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	430b      	orrs	r3, r1
 80070c6:	496c      	ldr	r1, [pc, #432]	; (8007278 <MX_LWIP_Init+0x260>)
 80070c8:	78c9      	ldrb	r1, [r1, #3]
 80070ca:	430b      	orrs	r3, r1
 80070cc:	0a1b      	lsrs	r3, r3, #8
 80070ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070d2:	431a      	orrs	r2, r3
 80070d4:	4b68      	ldr	r3, [pc, #416]	; (8007278 <MX_LWIP_Init+0x260>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	0619      	lsls	r1, r3, #24
 80070da:	4b67      	ldr	r3, [pc, #412]	; (8007278 <MX_LWIP_Init+0x260>)
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	4319      	orrs	r1, r3
 80070e2:	4b65      	ldr	r3, [pc, #404]	; (8007278 <MX_LWIP_Init+0x260>)
 80070e4:	789b      	ldrb	r3, [r3, #2]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	430b      	orrs	r3, r1
 80070ea:	4963      	ldr	r1, [pc, #396]	; (8007278 <MX_LWIP_Init+0x260>)
 80070ec:	78c9      	ldrb	r1, [r1, #3]
 80070ee:	430b      	orrs	r3, r1
 80070f0:	0e1b      	lsrs	r3, r3, #24
 80070f2:	4313      	orrs	r3, r2
 80070f4:	4a63      	ldr	r2, [pc, #396]	; (8007284 <MX_LWIP_Init+0x26c>)
 80070f6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80070f8:	4b60      	ldr	r3, [pc, #384]	; (800727c <MX_LWIP_Init+0x264>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	061a      	lsls	r2, r3, #24
 80070fe:	4b5f      	ldr	r3, [pc, #380]	; (800727c <MX_LWIP_Init+0x264>)
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	431a      	orrs	r2, r3
 8007106:	4b5d      	ldr	r3, [pc, #372]	; (800727c <MX_LWIP_Init+0x264>)
 8007108:	789b      	ldrb	r3, [r3, #2]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	4313      	orrs	r3, r2
 800710e:	4a5b      	ldr	r2, [pc, #364]	; (800727c <MX_LWIP_Init+0x264>)
 8007110:	78d2      	ldrb	r2, [r2, #3]
 8007112:	4313      	orrs	r3, r2
 8007114:	061a      	lsls	r2, r3, #24
 8007116:	4b59      	ldr	r3, [pc, #356]	; (800727c <MX_LWIP_Init+0x264>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	0619      	lsls	r1, r3, #24
 800711c:	4b57      	ldr	r3, [pc, #348]	; (800727c <MX_LWIP_Init+0x264>)
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	4319      	orrs	r1, r3
 8007124:	4b55      	ldr	r3, [pc, #340]	; (800727c <MX_LWIP_Init+0x264>)
 8007126:	789b      	ldrb	r3, [r3, #2]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	430b      	orrs	r3, r1
 800712c:	4953      	ldr	r1, [pc, #332]	; (800727c <MX_LWIP_Init+0x264>)
 800712e:	78c9      	ldrb	r1, [r1, #3]
 8007130:	430b      	orrs	r3, r1
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007138:	431a      	orrs	r2, r3
 800713a:	4b50      	ldr	r3, [pc, #320]	; (800727c <MX_LWIP_Init+0x264>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	0619      	lsls	r1, r3, #24
 8007140:	4b4e      	ldr	r3, [pc, #312]	; (800727c <MX_LWIP_Init+0x264>)
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	041b      	lsls	r3, r3, #16
 8007146:	4319      	orrs	r1, r3
 8007148:	4b4c      	ldr	r3, [pc, #304]	; (800727c <MX_LWIP_Init+0x264>)
 800714a:	789b      	ldrb	r3, [r3, #2]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	430b      	orrs	r3, r1
 8007150:	494a      	ldr	r1, [pc, #296]	; (800727c <MX_LWIP_Init+0x264>)
 8007152:	78c9      	ldrb	r1, [r1, #3]
 8007154:	430b      	orrs	r3, r1
 8007156:	0a1b      	lsrs	r3, r3, #8
 8007158:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800715c:	431a      	orrs	r2, r3
 800715e:	4b47      	ldr	r3, [pc, #284]	; (800727c <MX_LWIP_Init+0x264>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	0619      	lsls	r1, r3, #24
 8007164:	4b45      	ldr	r3, [pc, #276]	; (800727c <MX_LWIP_Init+0x264>)
 8007166:	785b      	ldrb	r3, [r3, #1]
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	4319      	orrs	r1, r3
 800716c:	4b43      	ldr	r3, [pc, #268]	; (800727c <MX_LWIP_Init+0x264>)
 800716e:	789b      	ldrb	r3, [r3, #2]
 8007170:	021b      	lsls	r3, r3, #8
 8007172:	430b      	orrs	r3, r1
 8007174:	4941      	ldr	r1, [pc, #260]	; (800727c <MX_LWIP_Init+0x264>)
 8007176:	78c9      	ldrb	r1, [r1, #3]
 8007178:	430b      	orrs	r3, r1
 800717a:	0e1b      	lsrs	r3, r3, #24
 800717c:	4313      	orrs	r3, r2
 800717e:	4a42      	ldr	r2, [pc, #264]	; (8007288 <MX_LWIP_Init+0x270>)
 8007180:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007182:	4b3f      	ldr	r3, [pc, #252]	; (8007280 <MX_LWIP_Init+0x268>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	061a      	lsls	r2, r3, #24
 8007188:	4b3d      	ldr	r3, [pc, #244]	; (8007280 <MX_LWIP_Init+0x268>)
 800718a:	785b      	ldrb	r3, [r3, #1]
 800718c:	041b      	lsls	r3, r3, #16
 800718e:	431a      	orrs	r2, r3
 8007190:	4b3b      	ldr	r3, [pc, #236]	; (8007280 <MX_LWIP_Init+0x268>)
 8007192:	789b      	ldrb	r3, [r3, #2]
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	4313      	orrs	r3, r2
 8007198:	4a39      	ldr	r2, [pc, #228]	; (8007280 <MX_LWIP_Init+0x268>)
 800719a:	78d2      	ldrb	r2, [r2, #3]
 800719c:	4313      	orrs	r3, r2
 800719e:	061a      	lsls	r2, r3, #24
 80071a0:	4b37      	ldr	r3, [pc, #220]	; (8007280 <MX_LWIP_Init+0x268>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	0619      	lsls	r1, r3, #24
 80071a6:	4b36      	ldr	r3, [pc, #216]	; (8007280 <MX_LWIP_Init+0x268>)
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	041b      	lsls	r3, r3, #16
 80071ac:	4319      	orrs	r1, r3
 80071ae:	4b34      	ldr	r3, [pc, #208]	; (8007280 <MX_LWIP_Init+0x268>)
 80071b0:	789b      	ldrb	r3, [r3, #2]
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	430b      	orrs	r3, r1
 80071b6:	4932      	ldr	r1, [pc, #200]	; (8007280 <MX_LWIP_Init+0x268>)
 80071b8:	78c9      	ldrb	r1, [r1, #3]
 80071ba:	430b      	orrs	r3, r1
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071c2:	431a      	orrs	r2, r3
 80071c4:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <MX_LWIP_Init+0x268>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	0619      	lsls	r1, r3, #24
 80071ca:	4b2d      	ldr	r3, [pc, #180]	; (8007280 <MX_LWIP_Init+0x268>)
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	4319      	orrs	r1, r3
 80071d2:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <MX_LWIP_Init+0x268>)
 80071d4:	789b      	ldrb	r3, [r3, #2]
 80071d6:	021b      	lsls	r3, r3, #8
 80071d8:	430b      	orrs	r3, r1
 80071da:	4929      	ldr	r1, [pc, #164]	; (8007280 <MX_LWIP_Init+0x268>)
 80071dc:	78c9      	ldrb	r1, [r1, #3]
 80071de:	430b      	orrs	r3, r1
 80071e0:	0a1b      	lsrs	r3, r3, #8
 80071e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071e6:	431a      	orrs	r2, r3
 80071e8:	4b25      	ldr	r3, [pc, #148]	; (8007280 <MX_LWIP_Init+0x268>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	0619      	lsls	r1, r3, #24
 80071ee:	4b24      	ldr	r3, [pc, #144]	; (8007280 <MX_LWIP_Init+0x268>)
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	041b      	lsls	r3, r3, #16
 80071f4:	4319      	orrs	r1, r3
 80071f6:	4b22      	ldr	r3, [pc, #136]	; (8007280 <MX_LWIP_Init+0x268>)
 80071f8:	789b      	ldrb	r3, [r3, #2]
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	430b      	orrs	r3, r1
 80071fe:	4920      	ldr	r1, [pc, #128]	; (8007280 <MX_LWIP_Init+0x268>)
 8007200:	78c9      	ldrb	r1, [r1, #3]
 8007202:	430b      	orrs	r3, r1
 8007204:	0e1b      	lsrs	r3, r3, #24
 8007206:	4313      	orrs	r3, r2
 8007208:	4a20      	ldr	r2, [pc, #128]	; (800728c <MX_LWIP_Init+0x274>)
 800720a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800720c:	4b20      	ldr	r3, [pc, #128]	; (8007290 <MX_LWIP_Init+0x278>)
 800720e:	9302      	str	r3, [sp, #8]
 8007210:	4b20      	ldr	r3, [pc, #128]	; (8007294 <MX_LWIP_Init+0x27c>)
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	2300      	movs	r3, #0
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	4b1c      	ldr	r3, [pc, #112]	; (800728c <MX_LWIP_Init+0x274>)
 800721a:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <MX_LWIP_Init+0x270>)
 800721c:	4919      	ldr	r1, [pc, #100]	; (8007284 <MX_LWIP_Init+0x26c>)
 800721e:	481e      	ldr	r0, [pc, #120]	; (8007298 <MX_LWIP_Init+0x280>)
 8007220:	f005 f8bc 	bl	800c39c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007224:	481c      	ldr	r0, [pc, #112]	; (8007298 <MX_LWIP_Init+0x280>)
 8007226:	f005 fa6b 	bl	800c700 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800722a:	4b1b      	ldr	r3, [pc, #108]	; (8007298 <MX_LWIP_Init+0x280>)
 800722c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007230:	089b      	lsrs	r3, r3, #2
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800723c:	4816      	ldr	r0, [pc, #88]	; (8007298 <MX_LWIP_Init+0x280>)
 800723e:	f005 fa6f 	bl	800c720 <netif_set_up>
 8007242:	e002      	b.n	800724a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007244:	4814      	ldr	r0, [pc, #80]	; (8007298 <MX_LWIP_Init+0x280>)
 8007246:	f005 fad7 	bl	800c7f8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800724a:	4914      	ldr	r1, [pc, #80]	; (800729c <MX_LWIP_Init+0x284>)
 800724c:	4812      	ldr	r0, [pc, #72]	; (8007298 <MX_LWIP_Init+0x280>)
 800724e:	f005 fb69 	bl	800c924 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8007252:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <MX_LWIP_Init+0x288>)
 8007254:	1d3c      	adds	r4, r7, #4
 8007256:	461d      	mov	r5, r3
 8007258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800725a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800725c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007260:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007264:	1d3b      	adds	r3, r7, #4
 8007266:	490c      	ldr	r1, [pc, #48]	; (8007298 <MX_LWIP_Init+0x280>)
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fd47 	bl	8007cfc <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800726e:	bf00      	nop
 8007270:	3720      	adds	r7, #32
 8007272:	46bd      	mov	sp, r7
 8007274:	bdb0      	pop	{r4, r5, r7, pc}
 8007276:	bf00      	nop
 8007278:	20000e44 	.word	0x20000e44
 800727c:	20000e48 	.word	0x20000e48
 8007280:	20000e4c 	.word	0x20000e4c
 8007284:	20000e38 	.word	0x20000e38
 8007288:	20000e3c 	.word	0x20000e3c
 800728c:	20000e40 	.word	0x20000e40
 8007290:	0800ae4d 	.word	0x0800ae4d
 8007294:	0800779d 	.word	0x0800779d
 8007298:	20000e04 	.word	0x20000e04
 800729c:	080072a5 	.word	0x080072a5
 80072a0:	0801792c 	.word	0x0801792c

080072a4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80072ca:	2320      	movs	r3, #32
 80072cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80072ce:	f3bf 8f4f 	dsb	sy
}
 80072d2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80072d4:	e00b      	b.n	80072ee <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80072d6:	4a0d      	ldr	r2, [pc, #52]	; (800730c <SCB_InvalidateDCache_by_Addr+0x54>)
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4413      	add	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dcf0      	bgt.n	80072d6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80072f4:	f3bf 8f4f 	dsb	sy
}
 80072f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80072fa:	f3bf 8f6f 	isb	sy
}
 80072fe:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007300:	bf00      	nop
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	e000ed00 	.word	0xe000ed00

08007310 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007318:	4b04      	ldr	r3, [pc, #16]	; (800732c <HAL_ETH_RxCpltCallback+0x1c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fe37 	bl	8007f90 <osSemaphoreRelease>
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	200057dc 	.word	0x200057dc

08007330 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <HAL_ETH_TxCpltCallback+0x1c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f000 fe27 	bl	8007f90 <osSemaphoreRelease>
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	200057e0 	.word	0x200057e0

08007350 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7fb fe17 	bl	8002f8c <HAL_ETH_GetDMAError>
 800735e:	4603      	mov	r3, r0
 8007360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007364:	2b80      	cmp	r3, #128	; 0x80
 8007366:	d104      	bne.n	8007372 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007368:	4b04      	ldr	r3, [pc, #16]	; (800737c <HAL_ETH_ErrorCallback+0x2c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fe0f 	bl	8007f90 <osSemaphoreRelease>
  }
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200057dc 	.word	0x200057dc

08007380 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007380:	b5b0      	push	{r4, r5, r7, lr}
 8007382:	b0a8      	sub	sp, #160	; 0xa0
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800739a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800739e:	2264      	movs	r2, #100	; 0x64
 80073a0:	2100      	movs	r1, #0
 80073a2:	4618      	mov	r0, r3
 80073a4:	f00e ff0f 	bl	80161c6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80073a8:	4b85      	ldr	r3, [pc, #532]	; (80075c0 <low_level_init+0x240>)
 80073aa:	4a86      	ldr	r2, [pc, #536]	; (80075c4 <low_level_init+0x244>)
 80073ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80073ae:	2300      	movs	r3, #0
 80073b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 80073b4:	2380      	movs	r3, #128	; 0x80
 80073b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 80073ba:	23e1      	movs	r3, #225	; 0xe1
 80073bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 80073c0:	2300      	movs	r3, #0
 80073c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 80073c6:	2300      	movs	r3, #0
 80073c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80073d2:	4a7b      	ldr	r2, [pc, #492]	; (80075c0 <low_level_init+0x240>)
 80073d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073d8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80073da:	4b79      	ldr	r3, [pc, #484]	; (80075c0 <low_level_init+0x240>)
 80073dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80073e0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80073e2:	4b77      	ldr	r3, [pc, #476]	; (80075c0 <low_level_init+0x240>)
 80073e4:	4a78      	ldr	r2, [pc, #480]	; (80075c8 <low_level_init+0x248>)
 80073e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80073e8:	4b75      	ldr	r3, [pc, #468]	; (80075c0 <low_level_init+0x240>)
 80073ea:	4a78      	ldr	r2, [pc, #480]	; (80075cc <low_level_init+0x24c>)
 80073ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80073ee:	4b74      	ldr	r3, [pc, #464]	; (80075c0 <low_level_init+0x240>)
 80073f0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80073f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80073f6:	4872      	ldr	r0, [pc, #456]	; (80075c0 <low_level_init+0x240>)
 80073f8:	f7fa ff2a 	bl	8002250 <HAL_ETH_Init>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007402:	2238      	movs	r2, #56	; 0x38
 8007404:	2100      	movs	r1, #0
 8007406:	4872      	ldr	r0, [pc, #456]	; (80075d0 <low_level_init+0x250>)
 8007408:	f00e fedd 	bl	80161c6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800740c:	4b70      	ldr	r3, [pc, #448]	; (80075d0 <low_level_init+0x250>)
 800740e:	2221      	movs	r2, #33	; 0x21
 8007410:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007412:	4b6f      	ldr	r3, [pc, #444]	; (80075d0 <low_level_init+0x250>)
 8007414:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007418:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800741a:	4b6d      	ldr	r3, [pc, #436]	; (80075d0 <low_level_init+0x250>)
 800741c:	2200      	movs	r2, #0
 800741e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007420:	486c      	ldr	r0, [pc, #432]	; (80075d4 <low_level_init+0x254>)
 8007422:	f004 fe75 	bl	800c110 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2206      	movs	r2, #6
 800742a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800742e:	4b64      	ldr	r3, [pc, #400]	; (80075c0 <low_level_init+0x240>)
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	781a      	ldrb	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800743a:	4b61      	ldr	r3, [pc, #388]	; (80075c0 <low_level_init+0x240>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	785a      	ldrb	r2, [r3, #1]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007446:	4b5e      	ldr	r3, [pc, #376]	; (80075c0 <low_level_init+0x240>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	789a      	ldrb	r2, [r3, #2]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007452:	4b5b      	ldr	r3, [pc, #364]	; (80075c0 <low_level_init+0x240>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	78da      	ldrb	r2, [r3, #3]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800745e:	4b58      	ldr	r3, [pc, #352]	; (80075c0 <low_level_init+0x240>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	791a      	ldrb	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800746a:	4b55      	ldr	r3, [pc, #340]	; (80075c0 <low_level_init+0x240>)
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	795a      	ldrb	r2, [r3, #5]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800747c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007484:	f043 030a 	orr.w	r3, r3, #10
 8007488:	b2da      	uxtb	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8007490:	2203      	movs	r2, #3
 8007492:	2100      	movs	r1, #0
 8007494:	2001      	movs	r0, #1
 8007496:	f001 f82d 	bl	80084f4 <xQueueGenericCreate>
 800749a:	4603      	mov	r3, r0
 800749c:	4a4e      	ldr	r2, [pc, #312]	; (80075d8 <low_level_init+0x258>)
 800749e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80074a0:	2203      	movs	r2, #3
 80074a2:	2100      	movs	r1, #0
 80074a4:	2001      	movs	r0, #1
 80074a6:	f001 f825 	bl	80084f4 <xQueueGenericCreate>
 80074aa:	4603      	mov	r3, r0
 80074ac:	4a4b      	ldr	r2, [pc, #300]	; (80075dc <low_level_init+0x25c>)
 80074ae:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80074b0:	4b4b      	ldr	r3, [pc, #300]	; (80075e0 <low_level_init+0x260>)
 80074b2:	f107 0408 	add.w	r4, r7, #8
 80074b6:	461d      	mov	r5, r3
 80074b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80074c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80074c4:	f107 0308 	add.w	r3, r7, #8
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fc16 	bl	8007cfc <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80074d0:	4944      	ldr	r1, [pc, #272]	; (80075e4 <low_level_init+0x264>)
 80074d2:	4845      	ldr	r0, [pc, #276]	; (80075e8 <low_level_init+0x268>)
 80074d4:	f7fa fb96 	bl	8001c04 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80074d8:	4843      	ldr	r0, [pc, #268]	; (80075e8 <low_level_init+0x268>)
 80074da:	f7fa fbc5 	bl	8001c68 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80074de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d165      	bne.n	80075b2 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80074e6:	4840      	ldr	r0, [pc, #256]	; (80075e8 <low_level_init+0x268>)
 80074e8:	f7fa fc66 	bl	8001db8 <LAN8742_GetLinkState>
 80074ec:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80074f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	dc06      	bgt.n	8007506 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f005 f9e3 	bl	800c8c4 <netif_set_link_down>
      netif_set_down(netif);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f005 f97a 	bl	800c7f8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007504:	e057      	b.n	80075b6 <low_level_init+0x236>
      switch (PHYLinkState)
 8007506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800750a:	3b02      	subs	r3, #2
 800750c:	2b03      	cmp	r3, #3
 800750e:	d82b      	bhi.n	8007568 <low_level_init+0x1e8>
 8007510:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <low_level_init+0x198>)
 8007512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007516:	bf00      	nop
 8007518:	08007529 	.word	0x08007529
 800751c:	0800753b 	.word	0x0800753b
 8007520:	0800754b 	.word	0x0800754b
 8007524:	0800755b 	.word	0x0800755b
        duplex = ETH_FULLDUPLEX_MODE;
 8007528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800752c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8007530:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007538:	e01f      	b.n	800757a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800753a:	2300      	movs	r3, #0
 800753c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8007540:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007548:	e017      	b.n	800757a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800754a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800754e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8007552:	2300      	movs	r3, #0
 8007554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007558:	e00f      	b.n	800757a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800755a:	2300      	movs	r3, #0
 800755c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8007560:	2300      	movs	r3, #0
 8007562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007566:	e008      	b.n	800757a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007568:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800756c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8007570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007578:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800757a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800757e:	4619      	mov	r1, r3
 8007580:	480f      	ldr	r0, [pc, #60]	; (80075c0 <low_level_init+0x240>)
 8007582:	f7fb fba9 	bl	8002cd8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8007586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800758a:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800758c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007590:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007596:	4619      	mov	r1, r3
 8007598:	4809      	ldr	r0, [pc, #36]	; (80075c0 <low_level_init+0x240>)
 800759a:	f7fb fc87 	bl	8002eac <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800759e:	4808      	ldr	r0, [pc, #32]	; (80075c0 <low_level_init+0x240>)
 80075a0:	f7fa ff32 	bl	8002408 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f005 f8bb 	bl	800c720 <netif_set_up>
    netif_set_link_up(netif);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f005 f956 	bl	800c85c <netif_set_link_up>
}
 80075b0:	e001      	b.n	80075b6 <low_level_init+0x236>
    Error_Handler();
 80075b2:	f7f9 f9cd 	bl	8000950 <Error_Handler>
}
 80075b6:	bf00      	nop
 80075b8:	37a0      	adds	r7, #160	; 0xa0
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bdb0      	pop	{r4, r5, r7, pc}
 80075be:	bf00      	nop
 80075c0:	200057e4 	.word	0x200057e4
 80075c4:	40028000 	.word	0x40028000
 80075c8:	20000138 	.word	0x20000138
 80075cc:	20000098 	.word	0x20000098
 80075d0:	20005894 	.word	0x20005894
 80075d4:	0801a630 	.word	0x0801a630
 80075d8:	200057dc 	.word	0x200057dc
 80075dc:	200057e0 	.word	0x200057e0
 80075e0:	08017950 	.word	0x08017950
 80075e4:	20000010 	.word	0x20000010
 80075e8:	200058cc 	.word	0x200058cc

080075ec <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b092      	sub	sp, #72	; 0x48
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007604:	f107 030c 	add.w	r3, r7, #12
 8007608:	2230      	movs	r2, #48	; 0x30
 800760a:	2100      	movs	r1, #0
 800760c:	4618      	mov	r0, r3
 800760e:	f00e fdda 	bl	80161c6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	2230      	movs	r2, #48	; 0x30
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f00e fdd3 	bl	80161c6 <memset>

  for(q = p; q != NULL; q = q->next)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	643b      	str	r3, [r7, #64]	; 0x40
 8007624:	e045      	b.n	80076b2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007628:	2b03      	cmp	r3, #3
 800762a:	d902      	bls.n	8007632 <low_level_output+0x46>
      return ERR_IF;
 800762c:	f06f 030b 	mvn.w	r3, #11
 8007630:	e065      	b.n	80076fe <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8007632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007634:	6859      	ldr	r1, [r3, #4]
 8007636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007638:	4613      	mov	r3, r2
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	3348      	adds	r3, #72	; 0x48
 8007642:	443b      	add	r3, r7
 8007644:	3b3c      	subs	r3, #60	; 0x3c
 8007646:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800764a:	895b      	ldrh	r3, [r3, #10]
 800764c:	4619      	mov	r1, r3
 800764e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007650:	4613      	mov	r3, r2
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	3348      	adds	r3, #72	; 0x48
 800765a:	443b      	add	r3, r7
 800765c:	3b38      	subs	r3, #56	; 0x38
 800765e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007662:	2b00      	cmp	r3, #0
 8007664:	d011      	beq.n	800768a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007668:	1e5a      	subs	r2, r3, #1
 800766a:	f107 000c 	add.w	r0, r7, #12
 800766e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007670:	460b      	mov	r3, r1
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	440b      	add	r3, r1
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	18c1      	adds	r1, r0, r3
 800767a:	4613      	mov	r3, r2
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	4413      	add	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	3348      	adds	r3, #72	; 0x48
 8007684:	443b      	add	r3, r7
 8007686:	3b34      	subs	r3, #52	; 0x34
 8007688:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800768a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d109      	bne.n	80076a6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007694:	4613      	mov	r3, r2
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	3348      	adds	r3, #72	; 0x48
 800769e:	443b      	add	r3, r7
 80076a0:	3b34      	subs	r3, #52	; 0x34
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80076a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a8:	3301      	adds	r3, #1
 80076aa:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80076ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	643b      	str	r3, [r7, #64]	; 0x40
 80076b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1b6      	bne.n	8007626 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	891b      	ldrh	r3, [r3, #8]
 80076bc:	461a      	mov	r2, r3
 80076be:	4b12      	ldr	r3, [pc, #72]	; (8007708 <low_level_output+0x11c>)
 80076c0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80076c2:	4a11      	ldr	r2, [pc, #68]	; (8007708 <low_level_output+0x11c>)
 80076c4:	f107 030c 	add.w	r3, r7, #12
 80076c8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80076ca:	4a0f      	ldr	r2, [pc, #60]	; (8007708 <low_level_output+0x11c>)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80076d0:	6838      	ldr	r0, [r7, #0]
 80076d2:	f005 fd7b 	bl	800d1cc <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80076d6:	490c      	ldr	r1, [pc, #48]	; (8007708 <low_level_output+0x11c>)
 80076d8:	480c      	ldr	r0, [pc, #48]	; (800770c <low_level_output+0x120>)
 80076da:	f7fa ffa3 	bl	8002624 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80076de:	bf00      	nop
 80076e0:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <low_level_output+0x124>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fc03 	bl	8007ef4 <osSemaphoreWait>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1f5      	bne.n	80076e0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80076f4:	4805      	ldr	r0, [pc, #20]	; (800770c <low_level_output+0x120>)
 80076f6:	f7fb f929 	bl	800294c <HAL_ETH_ReleaseTxPacket>

  return errval;
 80076fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3748      	adds	r7, #72	; 0x48
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20005894 	.word	0x20005894
 800770c:	200057e4 	.word	0x200057e4
 8007710:	200057e0 	.word	0x200057e0

08007714 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <low_level_input+0x2c>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d105      	bne.n	8007734 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007728:	f107 030c 	add.w	r3, r7, #12
 800772c:	4619      	mov	r1, r3
 800772e:	4805      	ldr	r0, [pc, #20]	; (8007744 <low_level_input+0x30>)
 8007730:	f7fa ffd4 	bl	80026dc <HAL_ETH_ReadData>
  }

  return p;
 8007734:	68fb      	ldr	r3, [r7, #12]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	200057d8 	.word	0x200057d8
 8007744:	200057e4 	.word	0x200057e4

08007748 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007758:	4b0f      	ldr	r3, [pc, #60]	; (8007798 <ethernetif_input+0x50>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fbc7 	bl	8007ef4 <osSemaphoreWait>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f5      	bne.n	8007758 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800776c:	68b8      	ldr	r0, [r7, #8]
 800776e:	f7ff ffd1 	bl	8007714 <low_level_input>
 8007772:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	4798      	blx	r3
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f005 fc78 	bl	800d080 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1ea      	bne.n	800776c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007796:	e7df      	b.n	8007758 <ethernetif_input+0x10>
 8007798:	200057dc 	.word	0x200057dc

0800779c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <ethernetif_init+0x1c>
 80077aa:	4b0e      	ldr	r3, [pc, #56]	; (80077e4 <ethernetif_init+0x48>)
 80077ac:	f240 12ef 	movw	r2, #495	; 0x1ef
 80077b0:	490d      	ldr	r1, [pc, #52]	; (80077e8 <ethernetif_init+0x4c>)
 80077b2:	480e      	ldr	r0, [pc, #56]	; (80077ec <ethernetif_init+0x50>)
 80077b4:	f00e fda4 	bl	8016300 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2273      	movs	r2, #115	; 0x73
 80077bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2274      	movs	r2, #116	; 0x74
 80077c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <ethernetif_init+0x54>)
 80077cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a08      	ldr	r2, [pc, #32]	; (80077f4 <ethernetif_init+0x58>)
 80077d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff fdd3 	bl	8007380 <low_level_init>

  return ERR_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	0801796c 	.word	0x0801796c
 80077e8:	08017988 	.word	0x08017988
 80077ec:	08017998 	.word	0x08017998
 80077f0:	08013fd5 	.word	0x08013fd5
 80077f4:	080075ed 	.word	0x080075ed

080077f8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007804:	68f9      	ldr	r1, [r7, #12]
 8007806:	4809      	ldr	r0, [pc, #36]	; (800782c <pbuf_free_custom+0x34>)
 8007808:	f004 fd72 	bl	800c2f0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800780c:	4b08      	ldr	r3, [pc, #32]	; (8007830 <pbuf_free_custom+0x38>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d107      	bne.n	8007824 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <pbuf_free_custom+0x38>)
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800781a:	4b06      	ldr	r3, [pc, #24]	; (8007834 <pbuf_free_custom+0x3c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fbb6 	bl	8007f90 <osSemaphoreRelease>
  }
}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	0801a630 	.word	0x0801a630
 8007830:	200057d8 	.word	0x200057d8
 8007834:	200057dc 	.word	0x200057dc

08007838 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800783c:	f7fa fb64 	bl	8001f08 <HAL_GetTick>
 8007840:	4603      	mov	r3, r0
}
 8007842:	4618      	mov	r0, r3
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08e      	sub	sp, #56	; 0x38
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	605a      	str	r2, [r3, #4]
 800785a:	609a      	str	r2, [r3, #8]
 800785c:	60da      	str	r2, [r3, #12]
 800785e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a52      	ldr	r2, [pc, #328]	; (80079b0 <HAL_ETH_MspInit+0x168>)
 8007866:	4293      	cmp	r3, r2
 8007868:	f040 809e 	bne.w	80079a8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800786c:	4b51      	ldr	r3, [pc, #324]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	4a50      	ldr	r2, [pc, #320]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 8007872:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007876:	6313      	str	r3, [r2, #48]	; 0x30
 8007878:	4b4e      	ldr	r3, [pc, #312]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007880:	623b      	str	r3, [r7, #32]
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	4b4b      	ldr	r3, [pc, #300]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	4a4a      	ldr	r2, [pc, #296]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 800788a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800788e:	6313      	str	r3, [r2, #48]	; 0x30
 8007890:	4b48      	ldr	r3, [pc, #288]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4b45      	ldr	r3, [pc, #276]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a0:	4a44      	ldr	r2, [pc, #272]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078a6:	6313      	str	r3, [r2, #48]	; 0x30
 80078a8:	4b42      	ldr	r3, [pc, #264]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078b0:	61bb      	str	r3, [r7, #24]
 80078b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078b4:	4b3f      	ldr	r3, [pc, #252]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	4a3e      	ldr	r2, [pc, #248]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078ba:	f043 0304 	orr.w	r3, r3, #4
 80078be:	6313      	str	r3, [r2, #48]	; 0x30
 80078c0:	4b3c      	ldr	r3, [pc, #240]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078cc:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	4a38      	ldr	r2, [pc, #224]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078d2:	f043 0301 	orr.w	r3, r3, #1
 80078d6:	6313      	str	r3, [r2, #48]	; 0x30
 80078d8:	4b36      	ldr	r3, [pc, #216]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	613b      	str	r3, [r7, #16]
 80078e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078e4:	4b33      	ldr	r3, [pc, #204]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e8:	4a32      	ldr	r2, [pc, #200]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078ea:	f043 0302 	orr.w	r3, r3, #2
 80078ee:	6313      	str	r3, [r2, #48]	; 0x30
 80078f0:	4b30      	ldr	r3, [pc, #192]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80078fc:	4b2d      	ldr	r3, [pc, #180]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 80078fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007900:	4a2c      	ldr	r2, [pc, #176]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 8007902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007906:	6313      	str	r3, [r2, #48]	; 0x30
 8007908:	4b2a      	ldr	r3, [pc, #168]	; (80079b4 <HAL_ETH_MspInit+0x16c>)
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007910:	60bb      	str	r3, [r7, #8]
 8007912:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007914:	2332      	movs	r3, #50	; 0x32
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007918:	2302      	movs	r3, #2
 800791a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800791c:	2300      	movs	r3, #0
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007920:	2303      	movs	r3, #3
 8007922:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007924:	230b      	movs	r3, #11
 8007926:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800792c:	4619      	mov	r1, r3
 800792e:	4822      	ldr	r0, [pc, #136]	; (80079b8 <HAL_ETH_MspInit+0x170>)
 8007930:	f7fb ff3c 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007934:	2386      	movs	r3, #134	; 0x86
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007938:	2302      	movs	r3, #2
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800793c:	2300      	movs	r3, #0
 800793e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007940:	2303      	movs	r3, #3
 8007942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007944:	230b      	movs	r3, #11
 8007946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800794c:	4619      	mov	r1, r3
 800794e:	481b      	ldr	r0, [pc, #108]	; (80079bc <HAL_ETH_MspInit+0x174>)
 8007950:	f7fb ff2c 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800795a:	2302      	movs	r3, #2
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800795e:	2300      	movs	r3, #0
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007962:	2303      	movs	r3, #3
 8007964:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007966:	230b      	movs	r3, #11
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800796a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800796e:	4619      	mov	r1, r3
 8007970:	4813      	ldr	r0, [pc, #76]	; (80079c0 <HAL_ETH_MspInit+0x178>)
 8007972:	f7fb ff1b 	bl	80037ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007976:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800797c:	2302      	movs	r3, #2
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007980:	2300      	movs	r3, #0
 8007982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007984:	2303      	movs	r3, #3
 8007986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007988:	230b      	movs	r3, #11
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800798c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007990:	4619      	mov	r1, r3
 8007992:	480c      	ldr	r0, [pc, #48]	; (80079c4 <HAL_ETH_MspInit+0x17c>)
 8007994:	f7fb ff0a 	bl	80037ac <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007998:	2200      	movs	r2, #0
 800799a:	2105      	movs	r1, #5
 800799c:	203d      	movs	r0, #61	; 0x3d
 800799e:	f7fa fb9b 	bl	80020d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80079a2:	203d      	movs	r0, #61	; 0x3d
 80079a4:	f7fa fbb4 	bl	8002110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80079a8:	bf00      	nop
 80079aa:	3738      	adds	r7, #56	; 0x38
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40028000 	.word	0x40028000
 80079b4:	40023800 	.word	0x40023800
 80079b8:	40020800 	.word	0x40020800
 80079bc:	40020000 	.word	0x40020000
 80079c0:	40020400 	.word	0x40020400
 80079c4:	40021800 	.word	0x40021800

080079c8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80079cc:	4802      	ldr	r0, [pc, #8]	; (80079d8 <ETH_PHY_IO_Init+0x10>)
 80079ce:	f7fb fa87 	bl	8002ee0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	200057e4 	.word	0x200057e4

080079dc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80079dc:	b480      	push	{r7}
 80079de:	af00      	add	r7, sp, #0
  return 0;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	68f9      	ldr	r1, [r7, #12]
 80079fe:	4807      	ldr	r0, [pc, #28]	; (8007a1c <ETH_PHY_IO_ReadReg+0x30>)
 8007a00:	f7fb f8d6 	bl	8002bb0 <HAL_ETH_ReadPHYRegister>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a0e:	e000      	b.n	8007a12 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200057e4 	.word	0x200057e4

08007a20 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	68f9      	ldr	r1, [r7, #12]
 8007a32:	4807      	ldr	r0, [pc, #28]	; (8007a50 <ETH_PHY_IO_WriteReg+0x30>)
 8007a34:	f7fb f907 	bl	8002c46 <HAL_ETH_WritePHYRegister>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a42:	e000      	b.n	8007a46 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	200057e4 	.word	0x200057e4

08007a54 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007a58:	f7fa fa56 	bl	8001f08 <HAL_GetTick>
 8007a5c:	4603      	mov	r3, r0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b0a0      	sub	sp, #128	; 0x80
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007a6c:	f107 0308 	add.w	r3, r7, #8
 8007a70:	2264      	movs	r2, #100	; 0x64
 8007a72:	2100      	movs	r1, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f00e fba6 	bl	80161c6 <memset>
  int32_t PHYLinkState = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a82:	2300      	movs	r3, #0
 8007a84:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a86:	2300      	movs	r3, #0
 8007a88:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007a8e:	483a      	ldr	r0, [pc, #232]	; (8007b78 <ethernet_link_thread+0x114>)
 8007a90:	f7fa f992 	bl	8001db8 <LAN8742_GetLinkState>
 8007a94:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a9c:	089b      	lsrs	r3, r3, #2
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00c      	beq.n	8007ac2 <ethernet_link_thread+0x5e>
 8007aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	dc09      	bgt.n	8007ac2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8007aae:	4833      	ldr	r0, [pc, #204]	; (8007b7c <ethernet_link_thread+0x118>)
 8007ab0:	f7fa fd38 	bl	8002524 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007ab4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ab6:	f004 fe9f 	bl	800c7f8 <netif_set_down>
    netif_set_link_down(netif);
 8007aba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007abc:	f004 ff02 	bl	800c8c4 <netif_set_link_down>
 8007ac0:	e055      	b.n	8007b6e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d14e      	bne.n	8007b6e <ethernet_link_thread+0x10a>
 8007ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	dd4b      	ble.n	8007b6e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ad8:	3b02      	subs	r3, #2
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d82a      	bhi.n	8007b34 <ethernet_link_thread+0xd0>
 8007ade:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <ethernet_link_thread+0x80>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007af5 	.word	0x08007af5
 8007ae8:	08007b07 	.word	0x08007b07
 8007aec:	08007b17 	.word	0x08007b17
 8007af0:	08007b27 	.word	0x08007b27
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007af8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007afa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007afe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b00:	2301      	movs	r3, #1
 8007b02:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007b04:	e017      	b.n	8007b36 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007b0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b0e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b10:	2301      	movs	r3, #1
 8007b12:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007b14:	e00f      	b.n	8007b36 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007b16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b1a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b20:	2301      	movs	r3, #1
 8007b22:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007b24:	e007      	b.n	8007b36 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007b32:	e000      	b.n	8007b36 <ethernet_link_thread+0xd2>
    default:
      break;
 8007b34:	bf00      	nop
    }

    if(linkchanged)
 8007b36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d018      	beq.n	8007b6e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007b3c:	f107 0308 	add.w	r3, r7, #8
 8007b40:	4619      	mov	r1, r3
 8007b42:	480e      	ldr	r0, [pc, #56]	; (8007b7c <ethernet_link_thread+0x118>)
 8007b44:	f7fb f8c8 	bl	8002cd8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b4a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b4e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007b50:	f107 0308 	add.w	r3, r7, #8
 8007b54:	4619      	mov	r1, r3
 8007b56:	4809      	ldr	r0, [pc, #36]	; (8007b7c <ethernet_link_thread+0x118>)
 8007b58:	f7fb f9a8 	bl	8002eac <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007b5c:	4807      	ldr	r0, [pc, #28]	; (8007b7c <ethernet_link_thread+0x118>)
 8007b5e:	f7fa fbf3 	bl	8002348 <HAL_ETH_Start>
      netif_set_up(netif);
 8007b62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b64:	f004 fddc 	bl	800c720 <netif_set_up>
      netif_set_link_up(netif);
 8007b68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b6a:	f004 fe77 	bl	800c85c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007b6e:	2064      	movs	r0, #100	; 0x64
 8007b70:	f000 f910 	bl	8007d94 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007b74:	e78b      	b.n	8007a8e <ethernet_link_thread+0x2a>
 8007b76:	bf00      	nop
 8007b78:	200058cc 	.word	0x200058cc
 8007b7c:	200057e4 	.word	0x200057e4

08007b80 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007b88:	4812      	ldr	r0, [pc, #72]	; (8007bd4 <HAL_ETH_RxAllocateCallback+0x54>)
 8007b8a:	f004 fb3d 	bl	800c208 <memp_malloc_pool>
 8007b8e:	60f8      	str	r0, [r7, #12]
  if (p)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d014      	beq.n	8007bc0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f103 0220 	add.w	r2, r3, #32
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a0d      	ldr	r2, [pc, #52]	; (8007bd8 <HAL_ETH_RxAllocateCallback+0x58>)
 8007ba4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007bae:	9201      	str	r2, [sp, #4]
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2241      	movs	r2, #65	; 0x41
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f005 f8a7 	bl	800cd0c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007bbe:	e005      	b.n	8007bcc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007bc0:	4b06      	ldr	r3, [pc, #24]	; (8007bdc <HAL_ETH_RxAllocateCallback+0x5c>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
}
 8007bcc:	bf00      	nop
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	0801a630 	.word	0x0801a630
 8007bd8:	080077f9 	.word	0x080077f9
 8007bdc:	200057d8 	.word	0x200057d8

08007be0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3b20      	subs	r3, #32
 8007bfe:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	887a      	ldrh	r2, [r7, #2]
 8007c10:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d103      	bne.n	8007c22 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	69fa      	ldr	r2, [r7, #28]
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	e003      	b.n	8007c2a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	61fb      	str	r3, [r7, #28]
 8007c36:	e009      	b.n	8007c4c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	891a      	ldrh	r2, [r3, #8]
 8007c3c:	887b      	ldrh	r3, [r7, #2]
 8007c3e:	4413      	add	r3, r2
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1f2      	bne.n	8007c38 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007c52:	887b      	ldrh	r3, [r7, #2]
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7ff fb2e 	bl	80072b8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007c5c:	bf00      	nop
 8007c5e:	3720      	adds	r7, #32
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f005 fa07 	bl	800d080 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	4603      	mov	r3, r0
 8007c82:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c84:	2300      	movs	r3, #0
 8007c86:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c8c:	2b84      	cmp	r3, #132	; 0x84
 8007c8e:	d005      	beq.n	8007c9c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	3303      	adds	r3, #3
 8007c9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cb0:	f3ef 8305 	mrs	r3, IPSR
 8007cb4:	607b      	str	r3, [r7, #4]
  return(result);
 8007cb6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bf14      	ite	ne
 8007cbc:	2301      	movne	r3, #1
 8007cbe:	2300      	moveq	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007cd2:	f001 fd1b 	bl	800970c <vTaskStartScheduler>
  
  return osOK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007ce0:	f7ff ffe3 	bl	8007caa <inHandlerMode>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007cea:	f001 fe39 	bl	8009960 <xTaskGetTickCountFromISR>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	e002      	b.n	8007cf8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007cf2:	f001 fe25 	bl	8009940 <xTaskGetTickCount>
 8007cf6:	4603      	mov	r3, r0
  }
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cfe:	b089      	sub	sp, #36	; 0x24
 8007d00:	af04      	add	r7, sp, #16
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d020      	beq.n	8007d50 <osThreadCreate+0x54>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d01c      	beq.n	8007d50 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685c      	ldr	r4, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681d      	ldr	r5, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691e      	ldr	r6, [r3, #16]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff ffa6 	bl	8007c7a <makeFreeRtosPriority>
 8007d2e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d38:	9202      	str	r2, [sp, #8]
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	9100      	str	r1, [sp, #0]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	4632      	mov	r2, r6
 8007d42:	4629      	mov	r1, r5
 8007d44:	4620      	mov	r0, r4
 8007d46:	f001 fa67 	bl	8009218 <xTaskCreateStatic>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	e01c      	b.n	8007d8a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685c      	ldr	r4, [r3, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d5c:	b29e      	uxth	r6, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff ff88 	bl	8007c7a <makeFreeRtosPriority>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	f107 030c 	add.w	r3, r7, #12
 8007d70:	9301      	str	r3, [sp, #4]
 8007d72:	9200      	str	r2, [sp, #0]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	4632      	mov	r2, r6
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f001 faaf 	bl	80092de <xTaskCreate>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d001      	beq.n	8007d8a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d86:	2300      	movs	r3, #0
 8007d88:	e000      	b.n	8007d8c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <osDelay+0x16>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	e000      	b.n	8007dac <osDelay+0x18>
 8007daa:	2301      	movs	r3, #1
 8007dac:	4618      	mov	r0, r3
 8007dae:	f001 fc77 	bl	80096a0 <vTaskDelay>
  
  return osOK;
 8007db2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d007      	beq.n	8007ddc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	f000 fc21 	bl	800861a <xQueueCreateMutexStatic>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	e003      	b.n	8007de4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007ddc:	2001      	movs	r0, #1
 8007dde:	f000 fc04 	bl	80085ea <xQueueCreateMutex>
 8007de2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007df6:	2300      	movs	r3, #0
 8007df8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <osMutexWait+0x18>
    return osErrorParameter;
 8007e00:	2380      	movs	r3, #128	; 0x80
 8007e02:	e03a      	b.n	8007e7a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e0e:	d103      	bne.n	8007e18 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	e009      	b.n	8007e2c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d006      	beq.n	8007e2c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <osMutexWait+0x40>
      ticks = 1;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007e2c:	f7ff ff3d 	bl	8007caa <inHandlerMode>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d017      	beq.n	8007e66 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007e36:	f107 0308 	add.w	r3, r7, #8
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 f83c 	bl	8008ebc <xQueueReceiveFromISR>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d001      	beq.n	8007e4e <osMutexWait+0x62>
      return osErrorOS;
 8007e4a:	23ff      	movs	r3, #255	; 0xff
 8007e4c:	e015      	b.n	8007e7a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d011      	beq.n	8007e78 <osMutexWait+0x8c>
 8007e54:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <osMutexWait+0x98>)
 8007e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	e008      	b.n	8007e78 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007e66:	68f9      	ldr	r1, [r7, #12]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 ff13 	bl	8008c94 <xQueueSemaphoreTake>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d001      	beq.n	8007e78 <osMutexWait+0x8c>
    return osErrorOS;
 8007e74:	23ff      	movs	r3, #255	; 0xff
 8007e76:	e000      	b.n	8007e7a <osMutexWait+0x8e>
  }
  
  return osOK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007e98:	f7ff ff07 	bl	8007caa <inHandlerMode>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d016      	beq.n	8007ed0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007ea2:	f107 0308 	add.w	r3, r7, #8
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fd77 	bl	800899c <xQueueGiveFromISR>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d001      	beq.n	8007eb8 <osMutexRelease+0x30>
      return osErrorOS;
 8007eb4:	23ff      	movs	r3, #255	; 0xff
 8007eb6:	e017      	b.n	8007ee8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d013      	beq.n	8007ee6 <osMutexRelease+0x5e>
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <osMutexRelease+0x68>)
 8007ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	e00a      	b.n	8007ee6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fbba 	bl	8008650 <xQueueGenericSend>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d001      	beq.n	8007ee6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007ee2:	23ff      	movs	r3, #255	; 0xff
 8007ee4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007efe:	2300      	movs	r3, #0
 8007f00:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007f08:	2380      	movs	r3, #128	; 0x80
 8007f0a:	e03a      	b.n	8007f82 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f16:	d103      	bne.n	8007f20 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	e009      	b.n	8007f34 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d006      	beq.n	8007f34 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <osSemaphoreWait+0x40>
      ticks = 1;
 8007f30:	2301      	movs	r3, #1
 8007f32:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007f34:	f7ff feb9 	bl	8007caa <inHandlerMode>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d017      	beq.n	8007f6e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007f3e:	f107 0308 	add.w	r3, r7, #8
 8007f42:	461a      	mov	r2, r3
 8007f44:	2100      	movs	r1, #0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 ffb8 	bl	8008ebc <xQueueReceiveFromISR>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d001      	beq.n	8007f56 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007f52:	23ff      	movs	r3, #255	; 0xff
 8007f54:	e015      	b.n	8007f82 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d011      	beq.n	8007f80 <osSemaphoreWait+0x8c>
 8007f5c:	4b0b      	ldr	r3, [pc, #44]	; (8007f8c <osSemaphoreWait+0x98>)
 8007f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	e008      	b.n	8007f80 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007f6e:	68f9      	ldr	r1, [r7, #12]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fe8f 	bl	8008c94 <xQueueSemaphoreTake>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d001      	beq.n	8007f80 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007f7c:	23ff      	movs	r3, #255	; 0xff
 8007f7e:	e000      	b.n	8007f82 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	e000ed04 	.word	0xe000ed04

08007f90 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007fa0:	f7ff fe83 	bl	8007caa <inHandlerMode>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007faa:	f107 0308 	add.w	r3, r7, #8
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fcf3 	bl	800899c <xQueueGiveFromISR>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d001      	beq.n	8007fc0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007fbc:	23ff      	movs	r3, #255	; 0xff
 8007fbe:	e017      	b.n	8007ff0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d013      	beq.n	8007fee <osSemaphoreRelease+0x5e>
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <osSemaphoreRelease+0x68>)
 8007fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	e00a      	b.n	8007fee <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fb36 	bl	8008650 <xQueueGenericSend>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d001      	beq.n	8007fee <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007fea:	23ff      	movs	r3, #255	; 0xff
 8007fec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007fee:	68fb      	ldr	r3, [r7, #12]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	e000ed04 	.word	0xe000ed04

08007ffc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af02      	add	r7, sp, #8
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d011      	beq.n	8008032 <osMessageCreate+0x36>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00d      	beq.n	8008032 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6818      	ldr	r0, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6859      	ldr	r1, [r3, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	2400      	movs	r4, #0
 8008028:	9400      	str	r4, [sp, #0]
 800802a:	f000 f9e1 	bl	80083f0 <xQueueGenericCreateStatic>
 800802e:	4603      	mov	r3, r0
 8008030:	e008      	b.n	8008044 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	4619      	mov	r1, r3
 800803e:	f000 fa59 	bl	80084f4 <xQueueGenericCreate>
 8008042:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	bd90      	pop	{r4, r7, pc}

0800804c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <osMessagePut+0x1e>
    ticks = 1;
 8008066:	2301      	movs	r3, #1
 8008068:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800806a:	f7ff fe1e 	bl	8007caa <inHandlerMode>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d018      	beq.n	80080a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008074:	f107 0210 	add.w	r2, r7, #16
 8008078:	f107 0108 	add.w	r1, r7, #8
 800807c:	2300      	movs	r3, #0
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fbec 	bl	800885c <xQueueGenericSendFromISR>
 8008084:	4603      	mov	r3, r0
 8008086:	2b01      	cmp	r3, #1
 8008088:	d001      	beq.n	800808e <osMessagePut+0x42>
      return osErrorOS;
 800808a:	23ff      	movs	r3, #255	; 0xff
 800808c:	e018      	b.n	80080c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d014      	beq.n	80080be <osMessagePut+0x72>
 8008094:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <osMessagePut+0x7c>)
 8008096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	e00b      	b.n	80080be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80080a6:	f107 0108 	add.w	r1, r7, #8
 80080aa:	2300      	movs	r3, #0
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 face 	bl	8008650 <xQueueGenericSend>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d001      	beq.n	80080be <osMessagePut+0x72>
      return osErrorOS;
 80080ba:	23ff      	movs	r3, #255	; 0xff
 80080bc:	e000      	b.n	80080c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b08b      	sub	sp, #44	; 0x2c
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80080e6:	2380      	movs	r3, #128	; 0x80
 80080e8:	617b      	str	r3, [r7, #20]
    return event;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	461c      	mov	r4, r3
 80080ee:	f107 0314 	add.w	r3, r7, #20
 80080f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80080f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080fa:	e054      	b.n	80081a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80080fc:	2300      	movs	r3, #0
 80080fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800810a:	d103      	bne.n	8008114 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800810c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
 8008112:	e009      	b.n	8008128 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d006      	beq.n	8008128 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <osMessageGet+0x5c>
      ticks = 1;
 8008124:	2301      	movs	r3, #1
 8008126:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008128:	f7ff fdbf 	bl	8007caa <inHandlerMode>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d01c      	beq.n	800816c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008132:	f107 0220 	add.w	r2, r7, #32
 8008136:	f107 0314 	add.w	r3, r7, #20
 800813a:	3304      	adds	r3, #4
 800813c:	4619      	mov	r1, r3
 800813e:	68b8      	ldr	r0, [r7, #8]
 8008140:	f000 febc 	bl	8008ebc <xQueueReceiveFromISR>
 8008144:	4603      	mov	r3, r0
 8008146:	2b01      	cmp	r3, #1
 8008148:	d102      	bne.n	8008150 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800814a:	2310      	movs	r3, #16
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	e001      	b.n	8008154 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01d      	beq.n	8008196 <osMessageGet+0xca>
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <osMessageGet+0xe4>)
 800815c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	e014      	b.n	8008196 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800816c:	f107 0314 	add.w	r3, r7, #20
 8008170:	3304      	adds	r3, #4
 8008172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008174:	4619      	mov	r1, r3
 8008176:	68b8      	ldr	r0, [r7, #8]
 8008178:	f000 fca6 	bl	8008ac8 <xQueueReceive>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d102      	bne.n	8008188 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008182:	2310      	movs	r3, #16
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	e006      	b.n	8008196 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <osMessageGet+0xc6>
 800818e:	2300      	movs	r3, #0
 8008190:	e000      	b.n	8008194 <osMessageGet+0xc8>
 8008192:	2340      	movs	r3, #64	; 0x40
 8008194:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	461c      	mov	r4, r3
 800819a:	f107 0314 	add.w	r3, r7, #20
 800819e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	372c      	adds	r7, #44	; 0x2c
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd90      	pop	{r4, r7, pc}
 80081ae:	bf00      	nop
 80081b0:	e000ed04 	.word	0xe000ed04

080081b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f103 0208 	add.w	r2, r3, #8
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f103 0208 	add.w	r2, r3, #8
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f103 0208 	add.w	r2, r3, #8
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	601a      	str	r2, [r3, #0]
}
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800826c:	d103      	bne.n	8008276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e00c      	b.n	8008290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3308      	adds	r3, #8
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e002      	b.n	8008284 <vListInsert+0x2e>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	429a      	cmp	r2, r3
 800828e:	d2f6      	bcs.n	800827e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	601a      	str	r2, [r3, #0]
}
 80082bc:	bf00      	nop
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6892      	ldr	r2, [r2, #8]
 80082de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6852      	ldr	r2, [r2, #4]
 80082e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d103      	bne.n	80082fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	1e5a      	subs	r2, r3, #1
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10c      	bne.n	800834a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	b672      	cpsid	i
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	b662      	cpsie	i
 8008344:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800834a:	f002 f977 	bl	800a63c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008356:	68f9      	ldr	r1, [r7, #12]
 8008358:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800835a:	fb01 f303 	mul.w	r3, r1, r3
 800835e:	441a      	add	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837a:	3b01      	subs	r3, #1
 800837c:	68f9      	ldr	r1, [r7, #12]
 800837e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008380:	fb01 f303 	mul.w	r3, r1, r3
 8008384:	441a      	add	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	22ff      	movs	r2, #255	; 0xff
 800838e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	22ff      	movs	r2, #255	; 0xff
 8008396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d114      	bne.n	80083ca <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01a      	beq.n	80083de <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3310      	adds	r3, #16
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 fc2d 	bl	8009c0c <xTaskRemoveFromEventList>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d012      	beq.n	80083de <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083b8:	4b0c      	ldr	r3, [pc, #48]	; (80083ec <xQueueGenericReset+0xd0>)
 80083ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	e009      	b.n	80083de <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3310      	adds	r3, #16
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fef0 	bl	80081b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3324      	adds	r3, #36	; 0x24
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff feeb 	bl	80081b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083de:	f002 f961 	bl	800a6a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083e2:	2301      	movs	r3, #1
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	e000ed04 	.word	0xe000ed04

080083f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08e      	sub	sp, #56	; 0x38
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10c      	bne.n	800841e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	b672      	cpsid	i
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	b662      	cpsie	i
 8008418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800841a:	bf00      	nop
 800841c:	e7fe      	b.n	800841c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10c      	bne.n	800843e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	b672      	cpsid	i
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	b662      	cpsie	i
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
}
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <xQueueGenericCreateStatic+0x5a>
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <xQueueGenericCreateStatic+0x5e>
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <xQueueGenericCreateStatic+0x60>
 800844e:	2300      	movs	r3, #0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10c      	bne.n	800846e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	b672      	cpsid	i
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	b662      	cpsie	i
 8008468:	623b      	str	r3, [r7, #32]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d102      	bne.n	800847a <xQueueGenericCreateStatic+0x8a>
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <xQueueGenericCreateStatic+0x8e>
 800847a:	2301      	movs	r3, #1
 800847c:	e000      	b.n	8008480 <xQueueGenericCreateStatic+0x90>
 800847e:	2300      	movs	r3, #0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10c      	bne.n	800849e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	b672      	cpsid	i
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	b662      	cpsie	i
 8008498:	61fb      	str	r3, [r7, #28]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800849e:	2348      	movs	r3, #72	; 0x48
 80084a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b48      	cmp	r3, #72	; 0x48
 80084a6:	d00c      	beq.n	80084c2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	b672      	cpsid	i
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	b662      	cpsie	i
 80084bc:	61bb      	str	r3, [r7, #24]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00d      	beq.n	80084ea <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	4613      	mov	r3, r2
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 f847 	bl	8008578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3730      	adds	r7, #48	; 0x30
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08a      	sub	sp, #40	; 0x28
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	4613      	mov	r3, r2
 8008500:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10c      	bne.n	8008522 <xQueueGenericCreate+0x2e>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	b672      	cpsid	i
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	b662      	cpsie	i
 800851c:	613b      	str	r3, [r7, #16]
}
 800851e:	bf00      	nop
 8008520:	e7fe      	b.n	8008520 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008528:	2300      	movs	r3, #0
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e004      	b.n	8008538 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	fb02 f303 	mul.w	r3, r2, r3
 8008536:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	3348      	adds	r3, #72	; 0x48
 800853c:	4618      	mov	r0, r3
 800853e:	f002 f9a9 	bl	800a894 <pvPortMalloc>
 8008542:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d011      	beq.n	800856e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	3348      	adds	r3, #72	; 0x48
 8008552:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800855c:	79fa      	ldrb	r2, [r7, #7]
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	4613      	mov	r3, r2
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	68b9      	ldr	r1, [r7, #8]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 f805 	bl	8008578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800856e:	69bb      	ldr	r3, [r7, #24]
	}
 8008570:	4618      	mov	r0, r3
 8008572:	3720      	adds	r7, #32
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d103      	bne.n	8008594 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	e002      	b.n	800859a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085a6:	2101      	movs	r1, #1
 80085a8:	69b8      	ldr	r0, [r7, #24]
 80085aa:	f7ff feb7 	bl	800831c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00e      	beq.n	80085e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80085d6:	2300      	movs	r3, #0
 80085d8:	2200      	movs	r2, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f837 	bl	8008650 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80085e2:	bf00      	nop
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b086      	sub	sp, #24
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	4603      	mov	r3, r0
 80085f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80085f4:	2301      	movs	r3, #1
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	2300      	movs	r3, #0
 80085fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	461a      	mov	r2, r3
 8008600:	6939      	ldr	r1, [r7, #16]
 8008602:	6978      	ldr	r0, [r7, #20]
 8008604:	f7ff ff76 	bl	80084f4 <xQueueGenericCreate>
 8008608:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7ff ffd3 	bl	80085b6 <prvInitialiseMutex>

		return xNewQueue;
 8008610:	68fb      	ldr	r3, [r7, #12]
	}
 8008612:	4618      	mov	r0, r3
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800861a:	b580      	push	{r7, lr}
 800861c:	b088      	sub	sp, #32
 800861e:	af02      	add	r7, sp, #8
 8008620:	4603      	mov	r3, r0
 8008622:	6039      	str	r1, [r7, #0]
 8008624:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008626:	2301      	movs	r3, #1
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	2300      	movs	r3, #0
 800862c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2200      	movs	r2, #0
 8008636:	6939      	ldr	r1, [r7, #16]
 8008638:	6978      	ldr	r0, [r7, #20]
 800863a:	f7ff fed9 	bl	80083f0 <xQueueGenericCreateStatic>
 800863e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff ffb8 	bl	80085b6 <prvInitialiseMutex>

		return xNewQueue;
 8008646:	68fb      	ldr	r3, [r7, #12]
	}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08e      	sub	sp, #56	; 0x38
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800865e:	2300      	movs	r3, #0
 8008660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10c      	bne.n	8008686 <xQueueGenericSend+0x36>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	b672      	cpsid	i
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	b662      	cpsie	i
 8008680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d103      	bne.n	8008694 <xQueueGenericSend+0x44>
 800868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <xQueueGenericSend+0x48>
 8008694:	2301      	movs	r3, #1
 8008696:	e000      	b.n	800869a <xQueueGenericSend+0x4a>
 8008698:	2300      	movs	r3, #0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10c      	bne.n	80086b8 <xQueueGenericSend+0x68>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	b672      	cpsid	i
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	b662      	cpsie	i
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d103      	bne.n	80086c6 <xQueueGenericSend+0x76>
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d101      	bne.n	80086ca <xQueueGenericSend+0x7a>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e000      	b.n	80086cc <xQueueGenericSend+0x7c>
 80086ca:	2300      	movs	r3, #0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10c      	bne.n	80086ea <xQueueGenericSend+0x9a>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	b672      	cpsid	i
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	b662      	cpsie	i
 80086e4:	623b      	str	r3, [r7, #32]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ea:	f001 fc57 	bl	8009f9c <xTaskGetSchedulerState>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d102      	bne.n	80086fa <xQueueGenericSend+0xaa>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <xQueueGenericSend+0xae>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <xQueueGenericSend+0xb0>
 80086fe:	2300      	movs	r3, #0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10c      	bne.n	800871e <xQueueGenericSend+0xce>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	b672      	cpsid	i
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	b662      	cpsie	i
 8008718:	61fb      	str	r3, [r7, #28]
}
 800871a:	bf00      	nop
 800871c:	e7fe      	b.n	800871c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800871e:	f001 ff8d 	bl	800a63c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872a:	429a      	cmp	r2, r3
 800872c:	d302      	bcc.n	8008734 <xQueueGenericSend+0xe4>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d129      	bne.n	8008788 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800873a:	f000 fc5d 	bl	8008ff8 <prvCopyDataToQueue>
 800873e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d010      	beq.n	800876a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	3324      	adds	r3, #36	; 0x24
 800874c:	4618      	mov	r0, r3
 800874e:	f001 fa5d 	bl	8009c0c <xTaskRemoveFromEventList>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d013      	beq.n	8008780 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008758:	4b3f      	ldr	r3, [pc, #252]	; (8008858 <xQueueGenericSend+0x208>)
 800875a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	e00a      	b.n	8008780 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d007      	beq.n	8008780 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008770:	4b39      	ldr	r3, [pc, #228]	; (8008858 <xQueueGenericSend+0x208>)
 8008772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008780:	f001 ff90 	bl	800a6a4 <vPortExitCritical>
				return pdPASS;
 8008784:	2301      	movs	r3, #1
 8008786:	e063      	b.n	8008850 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800878e:	f001 ff89 	bl	800a6a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008792:	2300      	movs	r3, #0
 8008794:	e05c      	b.n	8008850 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800879c:	f107 0314 	add.w	r3, r7, #20
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 fa97 	bl	8009cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087a6:	2301      	movs	r3, #1
 80087a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087aa:	f001 ff7b 	bl	800a6a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087ae:	f001 f81b 	bl	80097e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087b2:	f001 ff43 	bl	800a63c <vPortEnterCritical>
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087bc:	b25b      	sxtb	r3, r3
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087c2:	d103      	bne.n	80087cc <xQueueGenericSend+0x17c>
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087d2:	b25b      	sxtb	r3, r3
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087d8:	d103      	bne.n	80087e2 <xQueueGenericSend+0x192>
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087e2:	f001 ff5f 	bl	800a6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087e6:	1d3a      	adds	r2, r7, #4
 80087e8:	f107 0314 	add.w	r3, r7, #20
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f001 fa86 	bl	8009d00 <xTaskCheckForTimeOut>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d124      	bne.n	8008844 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087fc:	f000 fcf4 	bl	80091e8 <prvIsQueueFull>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d018      	beq.n	8008838 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	3310      	adds	r3, #16
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f001 f9d6 	bl	8009bc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008816:	f000 fc7f 	bl	8009118 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800881a:	f000 fff3 	bl	8009804 <xTaskResumeAll>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	f47f af7c 	bne.w	800871e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008826:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <xQueueGenericSend+0x208>)
 8008828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	e772      	b.n	800871e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800883a:	f000 fc6d 	bl	8009118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800883e:	f000 ffe1 	bl	8009804 <xTaskResumeAll>
 8008842:	e76c      	b.n	800871e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008846:	f000 fc67 	bl	8009118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800884a:	f000 ffdb 	bl	8009804 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800884e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008850:	4618      	mov	r0, r3
 8008852:	3738      	adds	r7, #56	; 0x38
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08e      	sub	sp, #56	; 0x38
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10c      	bne.n	800888e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	b672      	cpsid	i
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	b662      	cpsie	i
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
}
 800888a:	bf00      	nop
 800888c:	e7fe      	b.n	800888c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d103      	bne.n	800889c <xQueueGenericSendFromISR+0x40>
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <xQueueGenericSendFromISR+0x44>
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <xQueueGenericSendFromISR+0x46>
 80088a0:	2300      	movs	r3, #0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10c      	bne.n	80088c0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088aa:	b672      	cpsid	i
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	b662      	cpsie	i
 80088ba:	623b      	str	r3, [r7, #32]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d103      	bne.n	80088ce <xQueueGenericSendFromISR+0x72>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d101      	bne.n	80088d2 <xQueueGenericSendFromISR+0x76>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <xQueueGenericSendFromISR+0x78>
 80088d2:	2300      	movs	r3, #0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10c      	bne.n	80088f2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	b672      	cpsid	i
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	b662      	cpsie	i
 80088ec:	61fb      	str	r3, [r7, #28]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088f2:	f001 ff8b 	bl	800a80c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088f6:	f3ef 8211 	mrs	r2, BASEPRI
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	b672      	cpsid	i
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	b662      	cpsie	i
 800890e:	61ba      	str	r2, [r7, #24]
 8008910:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008912:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008914:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891e:	429a      	cmp	r2, r3
 8008920:	d302      	bcc.n	8008928 <xQueueGenericSendFromISR+0xcc>
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d12c      	bne.n	8008982 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800892e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	68b9      	ldr	r1, [r7, #8]
 8008936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008938:	f000 fb5e 	bl	8008ff8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800893c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008944:	d112      	bne.n	800896c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	2b00      	cmp	r3, #0
 800894c:	d016      	beq.n	800897c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	3324      	adds	r3, #36	; 0x24
 8008952:	4618      	mov	r0, r3
 8008954:	f001 f95a 	bl	8009c0c <xTaskRemoveFromEventList>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00e      	beq.n	800897c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	e007      	b.n	800897c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800896c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008970:	3301      	adds	r3, #1
 8008972:	b2db      	uxtb	r3, r3
 8008974:	b25a      	sxtb	r2, r3
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800897c:	2301      	movs	r3, #1
 800897e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008980:	e001      	b.n	8008986 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008982:	2300      	movs	r3, #0
 8008984:	637b      	str	r3, [r7, #52]	; 0x34
 8008986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008988:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008990:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008994:	4618      	mov	r0, r3
 8008996:	3738      	adds	r7, #56	; 0x38
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08e      	sub	sp, #56	; 0x38
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10c      	bne.n	80089ca <xQueueGiveFromISR+0x2e>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	b672      	cpsid	i
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	b662      	cpsie	i
 80089c4:	623b      	str	r3, [r7, #32]
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00c      	beq.n	80089ec <xQueueGiveFromISR+0x50>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	b672      	cpsid	i
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	b662      	cpsie	i
 80089e6:	61fb      	str	r3, [r7, #28]
}
 80089e8:	bf00      	nop
 80089ea:	e7fe      	b.n	80089ea <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d103      	bne.n	80089fc <xQueueGiveFromISR+0x60>
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <xQueueGiveFromISR+0x64>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e000      	b.n	8008a02 <xQueueGiveFromISR+0x66>
 8008a00:	2300      	movs	r3, #0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10c      	bne.n	8008a20 <xQueueGiveFromISR+0x84>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	b672      	cpsid	i
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	b662      	cpsie	i
 8008a1a:	61bb      	str	r3, [r7, #24]
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a20:	f001 fef4 	bl	800a80c <vPortValidateInterruptPriority>
	__asm volatile
 8008a24:	f3ef 8211 	mrs	r2, BASEPRI
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
 8008a3c:	617a      	str	r2, [r7, #20]
 8008a3e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008a40:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a48:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d22b      	bcs.n	8008aac <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a6e:	d112      	bne.n	8008a96 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d016      	beq.n	8008aa6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	3324      	adds	r3, #36	; 0x24
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f001 f8c5 	bl	8009c0c <xTaskRemoveFromEventList>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00e      	beq.n	8008aa6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2201      	movs	r2, #1
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	e007      	b.n	8008aa6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	b25a      	sxtb	r2, r3
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aaa:	e001      	b.n	8008ab0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	637b      	str	r3, [r7, #52]	; 0x34
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f383 8811 	msr	BASEPRI, r3
}
 8008aba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3738      	adds	r7, #56	; 0x38
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08c      	sub	sp, #48	; 0x30
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10c      	bne.n	8008afc <xQueueReceive+0x34>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	b672      	cpsid	i
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	b662      	cpsie	i
 8008af6:	623b      	str	r3, [r7, #32]
}
 8008af8:	bf00      	nop
 8008afa:	e7fe      	b.n	8008afa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <xQueueReceive+0x42>
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <xQueueReceive+0x46>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <xQueueReceive+0x48>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10c      	bne.n	8008b2e <xQueueReceive+0x66>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	b672      	cpsid	i
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	b662      	cpsie	i
 8008b28:	61fb      	str	r3, [r7, #28]
}
 8008b2a:	bf00      	nop
 8008b2c:	e7fe      	b.n	8008b2c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b2e:	f001 fa35 	bl	8009f9c <xTaskGetSchedulerState>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <xQueueReceive+0x76>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <xQueueReceive+0x7a>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e000      	b.n	8008b44 <xQueueReceive+0x7c>
 8008b42:	2300      	movs	r3, #0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10c      	bne.n	8008b62 <xQueueReceive+0x9a>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	b672      	cpsid	i
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	b662      	cpsie	i
 8008b5c:	61bb      	str	r3, [r7, #24]
}
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b62:	f001 fd6b 	bl	800a63c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d01f      	beq.n	8008bb2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b72:	68b9      	ldr	r1, [r7, #8]
 8008b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b76:	f000 faa9 	bl	80090cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	1e5a      	subs	r2, r3, #1
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00f      	beq.n	8008baa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	3310      	adds	r3, #16
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 f83c 	bl	8009c0c <xTaskRemoveFromEventList>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d007      	beq.n	8008baa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b9a:	4b3d      	ldr	r3, [pc, #244]	; (8008c90 <xQueueReceive+0x1c8>)
 8008b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008baa:	f001 fd7b 	bl	800a6a4 <vPortExitCritical>
				return pdPASS;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e069      	b.n	8008c86 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bb8:	f001 fd74 	bl	800a6a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e062      	b.n	8008c86 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d106      	bne.n	8008bd4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bc6:	f107 0310 	add.w	r3, r7, #16
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f001 f882 	bl	8009cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bd4:	f001 fd66 	bl	800a6a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bd8:	f000 fe06 	bl	80097e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bdc:	f001 fd2e 	bl	800a63c <vPortEnterCritical>
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008be6:	b25b      	sxtb	r3, r3
 8008be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bec:	d103      	bne.n	8008bf6 <xQueueReceive+0x12e>
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bfc:	b25b      	sxtb	r3, r3
 8008bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c02:	d103      	bne.n	8008c0c <xQueueReceive+0x144>
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c0c:	f001 fd4a 	bl	800a6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c10:	1d3a      	adds	r2, r7, #4
 8008c12:	f107 0310 	add.w	r3, r7, #16
 8008c16:	4611      	mov	r1, r2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f001 f871 	bl	8009d00 <xTaskCheckForTimeOut>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d123      	bne.n	8008c6c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c26:	f000 fac9 	bl	80091bc <prvIsQueueEmpty>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d017      	beq.n	8008c60 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	3324      	adds	r3, #36	; 0x24
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	4611      	mov	r1, r2
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 ffc1 	bl	8009bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c40:	f000 fa6a 	bl	8009118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c44:	f000 fdde 	bl	8009804 <xTaskResumeAll>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d189      	bne.n	8008b62 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008c4e:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <xQueueReceive+0x1c8>)
 8008c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	e780      	b.n	8008b62 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c62:	f000 fa59 	bl	8009118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c66:	f000 fdcd 	bl	8009804 <xTaskResumeAll>
 8008c6a:	e77a      	b.n	8008b62 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c6e:	f000 fa53 	bl	8009118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c72:	f000 fdc7 	bl	8009804 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c78:	f000 faa0 	bl	80091bc <prvIsQueueEmpty>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f43f af6f 	beq.w	8008b62 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3730      	adds	r7, #48	; 0x30
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	e000ed04 	.word	0xe000ed04

08008c94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08e      	sub	sp, #56	; 0x38
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10c      	bne.n	8008cca <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	b672      	cpsid	i
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	b662      	cpsie	i
 8008cc4:	623b      	str	r3, [r7, #32]
}
 8008cc6:	bf00      	nop
 8008cc8:	e7fe      	b.n	8008cc8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00c      	beq.n	8008cec <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	b672      	cpsid	i
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	b662      	cpsie	i
 8008ce6:	61fb      	str	r3, [r7, #28]
}
 8008ce8:	bf00      	nop
 8008cea:	e7fe      	b.n	8008cea <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cec:	f001 f956 	bl	8009f9c <xTaskGetSchedulerState>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d102      	bne.n	8008cfc <xQueueSemaphoreTake+0x68>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <xQueueSemaphoreTake+0x6c>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e000      	b.n	8008d02 <xQueueSemaphoreTake+0x6e>
 8008d00:	2300      	movs	r3, #0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10c      	bne.n	8008d20 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	b672      	cpsid	i
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	b662      	cpsie	i
 8008d1a:	61bb      	str	r3, [r7, #24]
}
 8008d1c:	bf00      	nop
 8008d1e:	e7fe      	b.n	8008d1e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d20:	f001 fc8c 	bl	800a63c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d024      	beq.n	8008d7a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	1e5a      	subs	r2, r3, #1
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008d40:	f001 faf2 	bl	800a328 <pvTaskIncrementMutexHeldCount>
 8008d44:	4602      	mov	r2, r0
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00f      	beq.n	8008d72 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d54:	3310      	adds	r3, #16
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 ff58 	bl	8009c0c <xTaskRemoveFromEventList>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d62:	4b55      	ldr	r3, [pc, #340]	; (8008eb8 <xQueueSemaphoreTake+0x224>)
 8008d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d72:	f001 fc97 	bl	800a6a4 <vPortExitCritical>
				return pdPASS;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e099      	b.n	8008eae <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d113      	bne.n	8008da8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00c      	beq.n	8008da0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	b672      	cpsid	i
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	b662      	cpsie	i
 8008d9a:	617b      	str	r3, [r7, #20]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008da0:	f001 fc80 	bl	800a6a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008da4:	2300      	movs	r3, #0
 8008da6:	e082      	b.n	8008eae <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dae:	f107 030c 	add.w	r3, r7, #12
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 ff8e 	bl	8009cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008db8:	2301      	movs	r3, #1
 8008dba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dbc:	f001 fc72 	bl	800a6a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dc0:	f000 fd12 	bl	80097e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dc4:	f001 fc3a 	bl	800a63c <vPortEnterCritical>
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dce:	b25b      	sxtb	r3, r3
 8008dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dd4:	d103      	bne.n	8008dde <xQueueSemaphoreTake+0x14a>
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008de4:	b25b      	sxtb	r3, r3
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dea:	d103      	bne.n	8008df4 <xQueueSemaphoreTake+0x160>
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008df4:	f001 fc56 	bl	800a6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008df8:	463a      	mov	r2, r7
 8008dfa:	f107 030c 	add.w	r3, r7, #12
 8008dfe:	4611      	mov	r1, r2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 ff7d 	bl	8009d00 <xTaskCheckForTimeOut>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d132      	bne.n	8008e72 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e0e:	f000 f9d5 	bl	80091bc <prvIsQueueEmpty>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d026      	beq.n	8008e66 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d109      	bne.n	8008e34 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008e20:	f001 fc0c 	bl	800a63c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 f8d5 	bl	8009fd8 <xTaskPriorityInherit>
 8008e2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008e30:	f001 fc38 	bl	800a6a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e36:	3324      	adds	r3, #36	; 0x24
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 febf 	bl	8009bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e44:	f000 f968 	bl	8009118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e48:	f000 fcdc 	bl	8009804 <xTaskResumeAll>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f47f af66 	bne.w	8008d20 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008e54:	4b18      	ldr	r3, [pc, #96]	; (8008eb8 <xQueueSemaphoreTake+0x224>)
 8008e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	e75c      	b.n	8008d20 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e68:	f000 f956 	bl	8009118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e6c:	f000 fcca 	bl	8009804 <xTaskResumeAll>
 8008e70:	e756      	b.n	8008d20 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e74:	f000 f950 	bl	8009118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e78:	f000 fcc4 	bl	8009804 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e7e:	f000 f99d 	bl	80091bc <prvIsQueueEmpty>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f43f af4b 	beq.w	8008d20 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00d      	beq.n	8008eac <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008e90:	f001 fbd4 	bl	800a63c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e96:	f000 f897 	bl	8008fc8 <prvGetDisinheritPriorityAfterTimeout>
 8008e9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f001 f9a2 	bl	800a1ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008ea8:	f001 fbfc 	bl	800a6a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008eac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3738      	adds	r7, #56	; 0x38
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08e      	sub	sp, #56	; 0x38
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10c      	bne.n	8008eec <xQueueReceiveFromISR+0x30>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	b672      	cpsid	i
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	b662      	cpsie	i
 8008ee6:	623b      	str	r3, [r7, #32]
}
 8008ee8:	bf00      	nop
 8008eea:	e7fe      	b.n	8008eea <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d103      	bne.n	8008efa <xQueueReceiveFromISR+0x3e>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <xQueueReceiveFromISR+0x42>
 8008efa:	2301      	movs	r3, #1
 8008efc:	e000      	b.n	8008f00 <xQueueReceiveFromISR+0x44>
 8008efe:	2300      	movs	r3, #0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10c      	bne.n	8008f1e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	b672      	cpsid	i
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	b662      	cpsie	i
 8008f18:	61fb      	str	r3, [r7, #28]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f1e:	f001 fc75 	bl	800a80c <vPortValidateInterruptPriority>
	__asm volatile
 8008f22:	f3ef 8211 	mrs	r2, BASEPRI
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	b672      	cpsid	i
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	b662      	cpsie	i
 8008f3a:	61ba      	str	r2, [r7, #24]
 8008f3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d02f      	beq.n	8008fae <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f5c:	f000 f8b6 	bl	80090cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	1e5a      	subs	r2, r3, #1
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008f68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f70:	d112      	bne.n	8008f98 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d016      	beq.n	8008fa8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	3310      	adds	r3, #16
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fe44 	bl	8009c0c <xTaskRemoveFromEventList>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00e      	beq.n	8008fa8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	e007      	b.n	8008fa8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	b25a      	sxtb	r2, r3
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	637b      	str	r3, [r7, #52]	; 0x34
 8008fac:	e001      	b.n	8008fb2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f383 8811 	msr	BASEPRI, r3
}
 8008fbc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3738      	adds	r7, #56	; 0x38
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d006      	beq.n	8008fe6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f1c3 0307 	rsb	r3, r3, #7
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	e001      	b.n	8008fea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008fea:	68fb      	ldr	r3, [r7, #12]
	}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009004:	2300      	movs	r3, #0
 8009006:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10d      	bne.n	8009032 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d14d      	bne.n	80090ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	4618      	mov	r0, r3
 8009024:	f001 f858 	bl	800a0d8 <xTaskPriorityDisinherit>
 8009028:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	609a      	str	r2, [r3, #8]
 8009030:	e043      	b.n	80090ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d119      	bne.n	800906c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6858      	ldr	r0, [r3, #4]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	461a      	mov	r2, r3
 8009042:	68b9      	ldr	r1, [r7, #8]
 8009044:	f00d f897 	bl	8016176 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009050:	441a      	add	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	429a      	cmp	r2, r3
 8009060:	d32b      	bcc.n	80090ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	605a      	str	r2, [r3, #4]
 800906a:	e026      	b.n	80090ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	68d8      	ldr	r0, [r3, #12]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009074:	461a      	mov	r2, r3
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	f00d f87d 	bl	8016176 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009084:	425b      	negs	r3, r3
 8009086:	441a      	add	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d207      	bcs.n	80090a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a0:	425b      	negs	r3, r3
 80090a2:	441a      	add	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d105      	bne.n	80090ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	1c5a      	adds	r2, r3, #1
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80090c2:	697b      	ldr	r3, [r7, #20]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d018      	beq.n	8009110 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68da      	ldr	r2, [r3, #12]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	441a      	add	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d303      	bcc.n	8009100 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68d9      	ldr	r1, [r3, #12]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009108:	461a      	mov	r2, r3
 800910a:	6838      	ldr	r0, [r7, #0]
 800910c:	f00d f833 	bl	8016176 <memcpy>
	}
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009120:	f001 fa8c 	bl	800a63c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800912a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800912c:	e011      	b.n	8009152 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b00      	cmp	r3, #0
 8009134:	d012      	beq.n	800915c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3324      	adds	r3, #36	; 0x24
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fd66 	bl	8009c0c <xTaskRemoveFromEventList>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009146:	f000 fe41 	bl	8009dcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	3b01      	subs	r3, #1
 800914e:	b2db      	uxtb	r3, r3
 8009150:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009156:	2b00      	cmp	r3, #0
 8009158:	dce9      	bgt.n	800912e <prvUnlockQueue+0x16>
 800915a:	e000      	b.n	800915e <prvUnlockQueue+0x46>
					break;
 800915c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	22ff      	movs	r2, #255	; 0xff
 8009162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009166:	f001 fa9d 	bl	800a6a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800916a:	f001 fa67 	bl	800a63c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009174:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009176:	e011      	b.n	800919c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d012      	beq.n	80091a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	3310      	adds	r3, #16
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fd41 	bl	8009c0c <xTaskRemoveFromEventList>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009190:	f000 fe1c 	bl	8009dcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	3b01      	subs	r3, #1
 8009198:	b2db      	uxtb	r3, r3
 800919a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800919c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	dce9      	bgt.n	8009178 <prvUnlockQueue+0x60>
 80091a4:	e000      	b.n	80091a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	22ff      	movs	r2, #255	; 0xff
 80091ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80091b0:	f001 fa78 	bl	800a6a4 <vPortExitCritical>
}
 80091b4:	bf00      	nop
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091c4:	f001 fa3a 	bl	800a63c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091d0:	2301      	movs	r3, #1
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	e001      	b.n	80091da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091da:	f001 fa63 	bl	800a6a4 <vPortExitCritical>

	return xReturn;
 80091de:	68fb      	ldr	r3, [r7, #12]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091f0:	f001 fa24 	bl	800a63c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d102      	bne.n	8009206 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	e001      	b.n	800920a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800920a:	f001 fa4b 	bl	800a6a4 <vPortExitCritical>

	return xReturn;
 800920e:	68fb      	ldr	r3, [r7, #12]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08e      	sub	sp, #56	; 0x38
 800921c:	af04      	add	r7, sp, #16
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10c      	bne.n	8009246 <xTaskCreateStatic+0x2e>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	b672      	cpsid	i
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	b662      	cpsie	i
 8009240:	623b      	str	r3, [r7, #32]
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10c      	bne.n	8009266 <xTaskCreateStatic+0x4e>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	b672      	cpsid	i
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	b662      	cpsie	i
 8009260:	61fb      	str	r3, [r7, #28]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009266:	23b4      	movs	r3, #180	; 0xb4
 8009268:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2bb4      	cmp	r3, #180	; 0xb4
 800926e:	d00c      	beq.n	800928a <xTaskCreateStatic+0x72>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	b672      	cpsid	i
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	b662      	cpsie	i
 8009284:	61bb      	str	r3, [r7, #24]
}
 8009286:	bf00      	nop
 8009288:	e7fe      	b.n	8009288 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800928a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800928c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928e:	2b00      	cmp	r3, #0
 8009290:	d01e      	beq.n	80092d0 <xTaskCreateStatic+0xb8>
 8009292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009294:	2b00      	cmp	r3, #0
 8009296:	d01b      	beq.n	80092d0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	2202      	movs	r2, #2
 80092a6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092aa:	2300      	movs	r3, #0
 80092ac:	9303      	str	r3, [sp, #12]
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	f107 0314 	add.w	r3, r7, #20
 80092b6:	9301      	str	r3, [sp, #4]
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	68b9      	ldr	r1, [r7, #8]
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 f850 	bl	8009368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092ca:	f000 f8ed 	bl	80094a8 <prvAddNewTaskToReadyList>
 80092ce:	e001      	b.n	80092d4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80092d0:	2300      	movs	r3, #0
 80092d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092d4:	697b      	ldr	r3, [r7, #20]
	}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3728      	adds	r7, #40	; 0x28
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b08c      	sub	sp, #48	; 0x30
 80092e2:	af04      	add	r7, sp, #16
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	603b      	str	r3, [r7, #0]
 80092ea:	4613      	mov	r3, r2
 80092ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092ee:	88fb      	ldrh	r3, [r7, #6]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 face 	bl	800a894 <pvPortMalloc>
 80092f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00e      	beq.n	800931e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009300:	20b4      	movs	r0, #180	; 0xb4
 8009302:	f001 fac7 	bl	800a894 <pvPortMalloc>
 8009306:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	631a      	str	r2, [r3, #48]	; 0x30
 8009314:	e005      	b.n	8009322 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009316:	6978      	ldr	r0, [r7, #20]
 8009318:	f001 fb86 	bl	800aa28 <vPortFree>
 800931c:	e001      	b.n	8009322 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800931e:	2300      	movs	r3, #0
 8009320:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d017      	beq.n	8009358 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009330:	88fa      	ldrh	r2, [r7, #6]
 8009332:	2300      	movs	r3, #0
 8009334:	9303      	str	r3, [sp, #12]
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	9302      	str	r3, [sp, #8]
 800933a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f80e 	bl	8009368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800934c:	69f8      	ldr	r0, [r7, #28]
 800934e:	f000 f8ab 	bl	80094a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009352:	2301      	movs	r3, #1
 8009354:	61bb      	str	r3, [r7, #24]
 8009356:	e002      	b.n	800935e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800935c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800935e:	69bb      	ldr	r3, [r7, #24]
	}
 8009360:	4618      	mov	r0, r3
 8009362:	3720      	adds	r7, #32
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009380:	440b      	add	r3, r1
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	f023 0307 	bic.w	r3, r3, #7
 800938e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00c      	beq.n	80093b4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	b672      	cpsid	i
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	b662      	cpsie	i
 80093ae:	617b      	str	r3, [r7, #20]
}
 80093b0:	bf00      	nop
 80093b2:	e7fe      	b.n	80093b2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d01f      	beq.n	80093fa <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093ba:	2300      	movs	r3, #0
 80093bc:	61fb      	str	r3, [r7, #28]
 80093be:	e012      	b.n	80093e6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	4413      	add	r3, r2
 80093c6:	7819      	ldrb	r1, [r3, #0]
 80093c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	4413      	add	r3, r2
 80093ce:	3334      	adds	r3, #52	; 0x34
 80093d0:	460a      	mov	r2, r1
 80093d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	4413      	add	r3, r2
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d006      	beq.n	80093ee <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	3301      	adds	r3, #1
 80093e4:	61fb      	str	r3, [r7, #28]
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	2b0f      	cmp	r3, #15
 80093ea:	d9e9      	bls.n	80093c0 <prvInitialiseNewTask+0x58>
 80093ec:	e000      	b.n	80093f0 <prvInitialiseNewTask+0x88>
			{
				break;
 80093ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093f8:	e003      	b.n	8009402 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	2b06      	cmp	r3, #6
 8009406:	d901      	bls.n	800940c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009408:	2306      	movs	r3, #6
 800940a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009410:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009416:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	2200      	movs	r2, #0
 800941c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	3304      	adds	r3, #4
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fee6 	bl	80081f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	3318      	adds	r3, #24
 800942c:	4618      	mov	r0, r3
 800942e:	f7fe fee1 	bl	80081f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009436:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	f1c3 0207 	rsb	r2, r3, #7
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009446:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	2200      	movs	r2, #0
 8009454:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	334c      	adds	r3, #76	; 0x4c
 800945c:	2260      	movs	r2, #96	; 0x60
 800945e:	2100      	movs	r1, #0
 8009460:	4618      	mov	r0, r3
 8009462:	f00c feb0 	bl	80161c6 <memset>
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	4a0c      	ldr	r2, [pc, #48]	; (800949c <prvInitialiseNewTask+0x134>)
 800946a:	651a      	str	r2, [r3, #80]	; 0x50
 800946c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946e:	4a0c      	ldr	r2, [pc, #48]	; (80094a0 <prvInitialiseNewTask+0x138>)
 8009470:	655a      	str	r2, [r3, #84]	; 0x54
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	4a0b      	ldr	r2, [pc, #44]	; (80094a4 <prvInitialiseNewTask+0x13c>)
 8009476:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	68f9      	ldr	r1, [r7, #12]
 800947c:	69b8      	ldr	r0, [r7, #24]
 800947e:	f000 ffcd 	bl	800a41c <pxPortInitialiseStack>
 8009482:	4602      	mov	r2, r0
 8009484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009486:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009492:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009494:	bf00      	nop
 8009496:	3720      	adds	r7, #32
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	0801a788 	.word	0x0801a788
 80094a0:	0801a7a8 	.word	0x0801a7a8
 80094a4:	0801a768 	.word	0x0801a768

080094a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094b0:	f001 f8c4 	bl	800a63c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094b4:	4b2a      	ldr	r3, [pc, #168]	; (8009560 <prvAddNewTaskToReadyList+0xb8>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3301      	adds	r3, #1
 80094ba:	4a29      	ldr	r2, [pc, #164]	; (8009560 <prvAddNewTaskToReadyList+0xb8>)
 80094bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094be:	4b29      	ldr	r3, [pc, #164]	; (8009564 <prvAddNewTaskToReadyList+0xbc>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d109      	bne.n	80094da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094c6:	4a27      	ldr	r2, [pc, #156]	; (8009564 <prvAddNewTaskToReadyList+0xbc>)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094cc:	4b24      	ldr	r3, [pc, #144]	; (8009560 <prvAddNewTaskToReadyList+0xb8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d110      	bne.n	80094f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094d4:	f000 fc9e 	bl	8009e14 <prvInitialiseTaskLists>
 80094d8:	e00d      	b.n	80094f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094da:	4b23      	ldr	r3, [pc, #140]	; (8009568 <prvAddNewTaskToReadyList+0xc0>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d109      	bne.n	80094f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094e2:	4b20      	ldr	r3, [pc, #128]	; (8009564 <prvAddNewTaskToReadyList+0xbc>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d802      	bhi.n	80094f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094f0:	4a1c      	ldr	r2, [pc, #112]	; (8009564 <prvAddNewTaskToReadyList+0xbc>)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094f6:	4b1d      	ldr	r3, [pc, #116]	; (800956c <prvAddNewTaskToReadyList+0xc4>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3301      	adds	r3, #1
 80094fc:	4a1b      	ldr	r2, [pc, #108]	; (800956c <prvAddNewTaskToReadyList+0xc4>)
 80094fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	2201      	movs	r2, #1
 8009506:	409a      	lsls	r2, r3
 8009508:	4b19      	ldr	r3, [pc, #100]	; (8009570 <prvAddNewTaskToReadyList+0xc8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4313      	orrs	r3, r2
 800950e:	4a18      	ldr	r2, [pc, #96]	; (8009570 <prvAddNewTaskToReadyList+0xc8>)
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4a15      	ldr	r2, [pc, #84]	; (8009574 <prvAddNewTaskToReadyList+0xcc>)
 8009520:	441a      	add	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3304      	adds	r3, #4
 8009526:	4619      	mov	r1, r3
 8009528:	4610      	mov	r0, r2
 800952a:	f7fe fe70 	bl	800820e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800952e:	f001 f8b9 	bl	800a6a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009532:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <prvAddNewTaskToReadyList+0xc0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00e      	beq.n	8009558 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800953a:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <prvAddNewTaskToReadyList+0xbc>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009544:	429a      	cmp	r2, r3
 8009546:	d207      	bcs.n	8009558 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009548:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <prvAddNewTaskToReadyList+0xd0>)
 800954a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800954e:	601a      	str	r2, [r3, #0]
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	200059ec 	.word	0x200059ec
 8009564:	200058ec 	.word	0x200058ec
 8009568:	200059f8 	.word	0x200059f8
 800956c:	20005a08 	.word	0x20005a08
 8009570:	200059f4 	.word	0x200059f4
 8009574:	200058f0 	.word	0x200058f0
 8009578:	e000ed04 	.word	0xe000ed04

0800957c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009584:	f001 f85a 	bl	800a63c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d102      	bne.n	8009594 <vTaskDelete+0x18>
 800958e:	4b3a      	ldr	r3, [pc, #232]	; (8009678 <vTaskDelete+0xfc>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	e000      	b.n	8009596 <vTaskDelete+0x1a>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	3304      	adds	r3, #4
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe fe93 	bl	80082c8 <uxListRemove>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d115      	bne.n	80095d4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ac:	4933      	ldr	r1, [pc, #204]	; (800967c <vTaskDelete+0x100>)
 80095ae:	4613      	mov	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	440b      	add	r3, r1
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10a      	bne.n	80095d4 <vTaskDelete+0x58>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	2201      	movs	r2, #1
 80095c4:	fa02 f303 	lsl.w	r3, r2, r3
 80095c8:	43da      	mvns	r2, r3
 80095ca:	4b2d      	ldr	r3, [pc, #180]	; (8009680 <vTaskDelete+0x104>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4013      	ands	r3, r2
 80095d0:	4a2b      	ldr	r2, [pc, #172]	; (8009680 <vTaskDelete+0x104>)
 80095d2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d004      	beq.n	80095e6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3318      	adds	r3, #24
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fe71 	bl	80082c8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80095e6:	4b27      	ldr	r3, [pc, #156]	; (8009684 <vTaskDelete+0x108>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3301      	adds	r3, #1
 80095ec:	4a25      	ldr	r2, [pc, #148]	; (8009684 <vTaskDelete+0x108>)
 80095ee:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80095f0:	4b21      	ldr	r3, [pc, #132]	; (8009678 <vTaskDelete+0xfc>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d10b      	bne.n	8009612 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	3304      	adds	r3, #4
 80095fe:	4619      	mov	r1, r3
 8009600:	4821      	ldr	r0, [pc, #132]	; (8009688 <vTaskDelete+0x10c>)
 8009602:	f7fe fe04 	bl	800820e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009606:	4b21      	ldr	r3, [pc, #132]	; (800968c <vTaskDelete+0x110>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3301      	adds	r3, #1
 800960c:	4a1f      	ldr	r2, [pc, #124]	; (800968c <vTaskDelete+0x110>)
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	e009      	b.n	8009626 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009612:	4b1f      	ldr	r3, [pc, #124]	; (8009690 <vTaskDelete+0x114>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3b01      	subs	r3, #1
 8009618:	4a1d      	ldr	r2, [pc, #116]	; (8009690 <vTaskDelete+0x114>)
 800961a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fc67 	bl	8009ef0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009622:	f000 fc9b 	bl	8009f5c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8009626:	f001 f83d 	bl	800a6a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800962a:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <vTaskDelete+0x118>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d01d      	beq.n	800966e <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8009632:	4b11      	ldr	r3, [pc, #68]	; (8009678 <vTaskDelete+0xfc>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	429a      	cmp	r2, r3
 800963a:	d118      	bne.n	800966e <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800963c:	4b16      	ldr	r3, [pc, #88]	; (8009698 <vTaskDelete+0x11c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00c      	beq.n	800965e <vTaskDelete+0xe2>
	__asm volatile
 8009644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009648:	b672      	cpsid	i
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	b662      	cpsie	i
 8009658:	60bb      	str	r3, [r7, #8]
}
 800965a:	bf00      	nop
 800965c:	e7fe      	b.n	800965c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800965e:	4b0f      	ldr	r3, [pc, #60]	; (800969c <vTaskDelete+0x120>)
 8009660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	200058ec 	.word	0x200058ec
 800967c:	200058f0 	.word	0x200058f0
 8009680:	200059f4 	.word	0x200059f4
 8009684:	20005a08 	.word	0x20005a08
 8009688:	200059c0 	.word	0x200059c0
 800968c:	200059d4 	.word	0x200059d4
 8009690:	200059ec 	.word	0x200059ec
 8009694:	200059f8 	.word	0x200059f8
 8009698:	20005a14 	.word	0x20005a14
 800969c:	e000ed04 	.word	0xe000ed04

080096a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096a8:	2300      	movs	r3, #0
 80096aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d019      	beq.n	80096e6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096b2:	4b14      	ldr	r3, [pc, #80]	; (8009704 <vTaskDelay+0x64>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00c      	beq.n	80096d4 <vTaskDelay+0x34>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	b672      	cpsid	i
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	b662      	cpsie	i
 80096ce:	60bb      	str	r3, [r7, #8]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80096d4:	f000 f888 	bl	80097e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096d8:	2100      	movs	r1, #0
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fe38 	bl	800a350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096e0:	f000 f890 	bl	8009804 <xTaskResumeAll>
 80096e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d107      	bne.n	80096fc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80096ec:	4b06      	ldr	r3, [pc, #24]	; (8009708 <vTaskDelay+0x68>)
 80096ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096fc:	bf00      	nop
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20005a14 	.word	0x20005a14
 8009708:	e000ed04 	.word	0xe000ed04

0800970c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08a      	sub	sp, #40	; 0x28
 8009710:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800971a:	463a      	mov	r2, r7
 800971c:	1d39      	adds	r1, r7, #4
 800971e:	f107 0308 	add.w	r3, r7, #8
 8009722:	4618      	mov	r0, r3
 8009724:	f7f6 ff4e 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	9202      	str	r2, [sp, #8]
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	2300      	movs	r3, #0
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	2300      	movs	r3, #0
 8009738:	460a      	mov	r2, r1
 800973a:	4923      	ldr	r1, [pc, #140]	; (80097c8 <vTaskStartScheduler+0xbc>)
 800973c:	4823      	ldr	r0, [pc, #140]	; (80097cc <vTaskStartScheduler+0xc0>)
 800973e:	f7ff fd6b 	bl	8009218 <xTaskCreateStatic>
 8009742:	4603      	mov	r3, r0
 8009744:	4a22      	ldr	r2, [pc, #136]	; (80097d0 <vTaskStartScheduler+0xc4>)
 8009746:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009748:	4b21      	ldr	r3, [pc, #132]	; (80097d0 <vTaskStartScheduler+0xc4>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009750:	2301      	movs	r3, #1
 8009752:	617b      	str	r3, [r7, #20]
 8009754:	e001      	b.n	800975a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009756:	2300      	movs	r3, #0
 8009758:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d11d      	bne.n	800979c <vTaskStartScheduler+0x90>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	b672      	cpsid	i
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	b662      	cpsie	i
 8009774:	613b      	str	r3, [r7, #16]
}
 8009776:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009778:	4b16      	ldr	r3, [pc, #88]	; (80097d4 <vTaskStartScheduler+0xc8>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	334c      	adds	r3, #76	; 0x4c
 800977e:	4a16      	ldr	r2, [pc, #88]	; (80097d8 <vTaskStartScheduler+0xcc>)
 8009780:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009782:	4b16      	ldr	r3, [pc, #88]	; (80097dc <vTaskStartScheduler+0xd0>)
 8009784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009788:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800978a:	4b15      	ldr	r3, [pc, #84]	; (80097e0 <vTaskStartScheduler+0xd4>)
 800978c:	2201      	movs	r2, #1
 800978e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009790:	4b14      	ldr	r3, [pc, #80]	; (80097e4 <vTaskStartScheduler+0xd8>)
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009796:	f000 fed3 	bl	800a540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800979a:	e010      	b.n	80097be <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097a2:	d10c      	bne.n	80097be <vTaskStartScheduler+0xb2>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	b672      	cpsid	i
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	b662      	cpsie	i
 80097b8:	60fb      	str	r3, [r7, #12]
}
 80097ba:	bf00      	nop
 80097bc:	e7fe      	b.n	80097bc <vTaskStartScheduler+0xb0>
}
 80097be:	bf00      	nop
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	080179c0 	.word	0x080179c0
 80097cc:	08009de5 	.word	0x08009de5
 80097d0:	20005a10 	.word	0x20005a10
 80097d4:	200058ec 	.word	0x200058ec
 80097d8:	20000034 	.word	0x20000034
 80097dc:	20005a0c 	.word	0x20005a0c
 80097e0:	200059f8 	.word	0x200059f8
 80097e4:	200059f0 	.word	0x200059f0

080097e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097e8:	b480      	push	{r7}
 80097ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80097ec:	4b04      	ldr	r3, [pc, #16]	; (8009800 <vTaskSuspendAll+0x18>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3301      	adds	r3, #1
 80097f2:	4a03      	ldr	r2, [pc, #12]	; (8009800 <vTaskSuspendAll+0x18>)
 80097f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80097f6:	bf00      	nop
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	20005a14 	.word	0x20005a14

08009804 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800980a:	2300      	movs	r3, #0
 800980c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800980e:	2300      	movs	r3, #0
 8009810:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009812:	4b42      	ldr	r3, [pc, #264]	; (800991c <xTaskResumeAll+0x118>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10c      	bne.n	8009834 <xTaskResumeAll+0x30>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	b672      	cpsid	i
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	b662      	cpsie	i
 800982e:	603b      	str	r3, [r7, #0]
}
 8009830:	bf00      	nop
 8009832:	e7fe      	b.n	8009832 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009834:	f000 ff02 	bl	800a63c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009838:	4b38      	ldr	r3, [pc, #224]	; (800991c <xTaskResumeAll+0x118>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3b01      	subs	r3, #1
 800983e:	4a37      	ldr	r2, [pc, #220]	; (800991c <xTaskResumeAll+0x118>)
 8009840:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009842:	4b36      	ldr	r3, [pc, #216]	; (800991c <xTaskResumeAll+0x118>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d161      	bne.n	800990e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800984a:	4b35      	ldr	r3, [pc, #212]	; (8009920 <xTaskResumeAll+0x11c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d05d      	beq.n	800990e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009852:	e02e      	b.n	80098b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009854:	4b33      	ldr	r3, [pc, #204]	; (8009924 <xTaskResumeAll+0x120>)
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3318      	adds	r3, #24
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe fd31 	bl	80082c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3304      	adds	r3, #4
 800986a:	4618      	mov	r0, r3
 800986c:	f7fe fd2c 	bl	80082c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009874:	2201      	movs	r2, #1
 8009876:	409a      	lsls	r2, r3
 8009878:	4b2b      	ldr	r3, [pc, #172]	; (8009928 <xTaskResumeAll+0x124>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4313      	orrs	r3, r2
 800987e:	4a2a      	ldr	r2, [pc, #168]	; (8009928 <xTaskResumeAll+0x124>)
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4a27      	ldr	r2, [pc, #156]	; (800992c <xTaskResumeAll+0x128>)
 8009890:	441a      	add	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3304      	adds	r3, #4
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f7fe fcb8 	bl	800820e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a2:	4b23      	ldr	r3, [pc, #140]	; (8009930 <xTaskResumeAll+0x12c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80098ac:	4b21      	ldr	r3, [pc, #132]	; (8009934 <xTaskResumeAll+0x130>)
 80098ae:	2201      	movs	r2, #1
 80098b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098b2:	4b1c      	ldr	r3, [pc, #112]	; (8009924 <xTaskResumeAll+0x120>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1cc      	bne.n	8009854 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098c0:	f000 fb4c 	bl	8009f5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80098c4:	4b1c      	ldr	r3, [pc, #112]	; (8009938 <xTaskResumeAll+0x134>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d010      	beq.n	80098f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098d0:	f000 f858 	bl	8009984 <xTaskIncrementTick>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80098da:	4b16      	ldr	r3, [pc, #88]	; (8009934 <xTaskResumeAll+0x130>)
 80098dc:	2201      	movs	r2, #1
 80098de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f1      	bne.n	80098d0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80098ec:	4b12      	ldr	r3, [pc, #72]	; (8009938 <xTaskResumeAll+0x134>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098f2:	4b10      	ldr	r3, [pc, #64]	; (8009934 <xTaskResumeAll+0x130>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098fa:	2301      	movs	r3, #1
 80098fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098fe:	4b0f      	ldr	r3, [pc, #60]	; (800993c <xTaskResumeAll+0x138>)
 8009900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800990e:	f000 fec9 	bl	800a6a4 <vPortExitCritical>

	return xAlreadyYielded;
 8009912:	68bb      	ldr	r3, [r7, #8]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20005a14 	.word	0x20005a14
 8009920:	200059ec 	.word	0x200059ec
 8009924:	200059ac 	.word	0x200059ac
 8009928:	200059f4 	.word	0x200059f4
 800992c:	200058f0 	.word	0x200058f0
 8009930:	200058ec 	.word	0x200058ec
 8009934:	20005a00 	.word	0x20005a00
 8009938:	200059fc 	.word	0x200059fc
 800993c:	e000ed04 	.word	0xe000ed04

08009940 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009946:	4b05      	ldr	r3, [pc, #20]	; (800995c <xTaskGetTickCount+0x1c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800994c:	687b      	ldr	r3, [r7, #4]
}
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	200059f0 	.word	0x200059f0

08009960 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009966:	f000 ff51 	bl	800a80c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800996a:	2300      	movs	r3, #0
 800996c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800996e:	4b04      	ldr	r3, [pc, #16]	; (8009980 <xTaskGetTickCountFromISR+0x20>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009974:	683b      	ldr	r3, [r7, #0]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	200059f0 	.word	0x200059f0

08009984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800998e:	4b4f      	ldr	r3, [pc, #316]	; (8009acc <xTaskIncrementTick+0x148>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	f040 808a 	bne.w	8009aac <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009998:	4b4d      	ldr	r3, [pc, #308]	; (8009ad0 <xTaskIncrementTick+0x14c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099a0:	4a4b      	ldr	r2, [pc, #300]	; (8009ad0 <xTaskIncrementTick+0x14c>)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d122      	bne.n	80099f2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80099ac:	4b49      	ldr	r3, [pc, #292]	; (8009ad4 <xTaskIncrementTick+0x150>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00c      	beq.n	80099d0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ba:	b672      	cpsid	i
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	b662      	cpsie	i
 80099ca:	603b      	str	r3, [r7, #0]
}
 80099cc:	bf00      	nop
 80099ce:	e7fe      	b.n	80099ce <xTaskIncrementTick+0x4a>
 80099d0:	4b40      	ldr	r3, [pc, #256]	; (8009ad4 <xTaskIncrementTick+0x150>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	4b40      	ldr	r3, [pc, #256]	; (8009ad8 <xTaskIncrementTick+0x154>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a3e      	ldr	r2, [pc, #248]	; (8009ad4 <xTaskIncrementTick+0x150>)
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	4a3e      	ldr	r2, [pc, #248]	; (8009ad8 <xTaskIncrementTick+0x154>)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6013      	str	r3, [r2, #0]
 80099e4:	4b3d      	ldr	r3, [pc, #244]	; (8009adc <xTaskIncrementTick+0x158>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3301      	adds	r3, #1
 80099ea:	4a3c      	ldr	r2, [pc, #240]	; (8009adc <xTaskIncrementTick+0x158>)
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	f000 fab5 	bl	8009f5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099f2:	4b3b      	ldr	r3, [pc, #236]	; (8009ae0 <xTaskIncrementTick+0x15c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d348      	bcc.n	8009a8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099fc:	4b35      	ldr	r3, [pc, #212]	; (8009ad4 <xTaskIncrementTick+0x150>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d104      	bne.n	8009a10 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a06:	4b36      	ldr	r3, [pc, #216]	; (8009ae0 <xTaskIncrementTick+0x15c>)
 8009a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a0c:	601a      	str	r2, [r3, #0]
					break;
 8009a0e:	e03e      	b.n	8009a8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a10:	4b30      	ldr	r3, [pc, #192]	; (8009ad4 <xTaskIncrementTick+0x150>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d203      	bcs.n	8009a30 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a28:	4a2d      	ldr	r2, [pc, #180]	; (8009ae0 <xTaskIncrementTick+0x15c>)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a2e:	e02e      	b.n	8009a8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	3304      	adds	r3, #4
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fe fc47 	bl	80082c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d004      	beq.n	8009a4c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	3318      	adds	r3, #24
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe fc3e 	bl	80082c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	2201      	movs	r2, #1
 8009a52:	409a      	lsls	r2, r3
 8009a54:	4b23      	ldr	r3, [pc, #140]	; (8009ae4 <xTaskIncrementTick+0x160>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	4a22      	ldr	r2, [pc, #136]	; (8009ae4 <xTaskIncrementTick+0x160>)
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4a1f      	ldr	r2, [pc, #124]	; (8009ae8 <xTaskIncrementTick+0x164>)
 8009a6c:	441a      	add	r2, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	3304      	adds	r3, #4
 8009a72:	4619      	mov	r1, r3
 8009a74:	4610      	mov	r0, r2
 8009a76:	f7fe fbca 	bl	800820e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7e:	4b1b      	ldr	r3, [pc, #108]	; (8009aec <xTaskIncrementTick+0x168>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d3b9      	bcc.n	80099fc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a8c:	e7b6      	b.n	80099fc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a8e:	4b17      	ldr	r3, [pc, #92]	; (8009aec <xTaskIncrementTick+0x168>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a94:	4914      	ldr	r1, [pc, #80]	; (8009ae8 <xTaskIncrementTick+0x164>)
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	440b      	add	r3, r1
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d907      	bls.n	8009ab6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	e004      	b.n	8009ab6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <xTaskIncrementTick+0x16c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <xTaskIncrementTick+0x16c>)
 8009ab4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ab6:	4b0f      	ldr	r3, [pc, #60]	; (8009af4 <xTaskIncrementTick+0x170>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ac2:	697b      	ldr	r3, [r7, #20]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	20005a14 	.word	0x20005a14
 8009ad0:	200059f0 	.word	0x200059f0
 8009ad4:	200059a4 	.word	0x200059a4
 8009ad8:	200059a8 	.word	0x200059a8
 8009adc:	20005a04 	.word	0x20005a04
 8009ae0:	20005a0c 	.word	0x20005a0c
 8009ae4:	200059f4 	.word	0x200059f4
 8009ae8:	200058f0 	.word	0x200058f0
 8009aec:	200058ec 	.word	0x200058ec
 8009af0:	200059fc 	.word	0x200059fc
 8009af4:	20005a00 	.word	0x20005a00

08009af8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009af8:	b480      	push	{r7}
 8009afa:	b087      	sub	sp, #28
 8009afc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009afe:	4b2a      	ldr	r3, [pc, #168]	; (8009ba8 <vTaskSwitchContext+0xb0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b06:	4b29      	ldr	r3, [pc, #164]	; (8009bac <vTaskSwitchContext+0xb4>)
 8009b08:	2201      	movs	r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b0c:	e046      	b.n	8009b9c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009b0e:	4b27      	ldr	r3, [pc, #156]	; (8009bac <vTaskSwitchContext+0xb4>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b14:	4b26      	ldr	r3, [pc, #152]	; (8009bb0 <vTaskSwitchContext+0xb8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	fab3 f383 	clz	r3, r3
 8009b20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b22:	7afb      	ldrb	r3, [r7, #11]
 8009b24:	f1c3 031f 	rsb	r3, r3, #31
 8009b28:	617b      	str	r3, [r7, #20]
 8009b2a:	4922      	ldr	r1, [pc, #136]	; (8009bb4 <vTaskSwitchContext+0xbc>)
 8009b2c:	697a      	ldr	r2, [r7, #20]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	440b      	add	r3, r1
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10c      	bne.n	8009b58 <vTaskSwitchContext+0x60>
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	b672      	cpsid	i
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	b662      	cpsie	i
 8009b52:	607b      	str	r3, [r7, #4]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <vTaskSwitchContext+0x5e>
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4a14      	ldr	r2, [pc, #80]	; (8009bb4 <vTaskSwitchContext+0xbc>)
 8009b64:	4413      	add	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	605a      	str	r2, [r3, #4]
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	3308      	adds	r3, #8
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d104      	bne.n	8009b88 <vTaskSwitchContext+0x90>
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	605a      	str	r2, [r3, #4]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	4a0a      	ldr	r2, [pc, #40]	; (8009bb8 <vTaskSwitchContext+0xc0>)
 8009b90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b92:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <vTaskSwitchContext+0xc0>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	334c      	adds	r3, #76	; 0x4c
 8009b98:	4a08      	ldr	r2, [pc, #32]	; (8009bbc <vTaskSwitchContext+0xc4>)
 8009b9a:	6013      	str	r3, [r2, #0]
}
 8009b9c:	bf00      	nop
 8009b9e:	371c      	adds	r7, #28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	20005a14 	.word	0x20005a14
 8009bac:	20005a00 	.word	0x20005a00
 8009bb0:	200059f4 	.word	0x200059f4
 8009bb4:	200058f0 	.word	0x200058f0
 8009bb8:	200058ec 	.word	0x200058ec
 8009bbc:	20000034 	.word	0x20000034

08009bc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10c      	bne.n	8009bea <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd4:	b672      	cpsid	i
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	b662      	cpsie	i
 8009be4:	60fb      	str	r3, [r7, #12]
}
 8009be6:	bf00      	nop
 8009be8:	e7fe      	b.n	8009be8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bea:	4b07      	ldr	r3, [pc, #28]	; (8009c08 <vTaskPlaceOnEventList+0x48>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3318      	adds	r3, #24
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7fe fb2f 	bl	8008256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	6838      	ldr	r0, [r7, #0]
 8009bfc:	f000 fba8 	bl	800a350 <prvAddCurrentTaskToDelayedList>
}
 8009c00:	bf00      	nop
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	200058ec 	.word	0x200058ec

08009c0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10c      	bne.n	8009c3c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	b672      	cpsid	i
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	b662      	cpsie	i
 8009c36:	60fb      	str	r3, [r7, #12]
}
 8009c38:	bf00      	nop
 8009c3a:	e7fe      	b.n	8009c3a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	3318      	adds	r3, #24
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fe fb41 	bl	80082c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c46:	4b1d      	ldr	r3, [pc, #116]	; (8009cbc <xTaskRemoveFromEventList+0xb0>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d11c      	bne.n	8009c88 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	3304      	adds	r3, #4
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fb38 	bl	80082c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	409a      	lsls	r2, r3
 8009c60:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <xTaskRemoveFromEventList+0xb4>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	4a16      	ldr	r2, [pc, #88]	; (8009cc0 <xTaskRemoveFromEventList+0xb4>)
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6e:	4613      	mov	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4a13      	ldr	r2, [pc, #76]	; (8009cc4 <xTaskRemoveFromEventList+0xb8>)
 8009c78:	441a      	add	r2, r3
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f7fe fac4 	bl	800820e <vListInsertEnd>
 8009c86:	e005      	b.n	8009c94 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	3318      	adds	r3, #24
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	480e      	ldr	r0, [pc, #56]	; (8009cc8 <xTaskRemoveFromEventList+0xbc>)
 8009c90:	f7fe fabd 	bl	800820e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c98:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <xTaskRemoveFromEventList+0xc0>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d905      	bls.n	8009cae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ca6:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <xTaskRemoveFromEventList+0xc4>)
 8009ca8:	2201      	movs	r2, #1
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	e001      	b.n	8009cb2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cb2:	697b      	ldr	r3, [r7, #20]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	20005a14 	.word	0x20005a14
 8009cc0:	200059f4 	.word	0x200059f4
 8009cc4:	200058f0 	.word	0x200058f0
 8009cc8:	200059ac 	.word	0x200059ac
 8009ccc:	200058ec 	.word	0x200058ec
 8009cd0:	20005a00 	.word	0x20005a00

08009cd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009cdc:	4b06      	ldr	r3, [pc, #24]	; (8009cf8 <vTaskInternalSetTimeOutState+0x24>)
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ce4:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <vTaskInternalSetTimeOutState+0x28>)
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	605a      	str	r2, [r3, #4]
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	20005a04 	.word	0x20005a04
 8009cfc:	200059f0 	.word	0x200059f0

08009d00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10c      	bne.n	8009d2a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	b672      	cpsid	i
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	b662      	cpsie	i
 8009d24:	613b      	str	r3, [r7, #16]
}
 8009d26:	bf00      	nop
 8009d28:	e7fe      	b.n	8009d28 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10c      	bne.n	8009d4a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	b672      	cpsid	i
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	b662      	cpsie	i
 8009d44:	60fb      	str	r3, [r7, #12]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009d4a:	f000 fc77 	bl	800a63c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d4e:	4b1d      	ldr	r3, [pc, #116]	; (8009dc4 <xTaskCheckForTimeOut+0xc4>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d66:	d102      	bne.n	8009d6e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	61fb      	str	r3, [r7, #28]
 8009d6c:	e023      	b.n	8009db6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	4b15      	ldr	r3, [pc, #84]	; (8009dc8 <xTaskCheckForTimeOut+0xc8>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d007      	beq.n	8009d8a <xTaskCheckForTimeOut+0x8a>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	69ba      	ldr	r2, [r7, #24]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d302      	bcc.n	8009d8a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d84:	2301      	movs	r3, #1
 8009d86:	61fb      	str	r3, [r7, #28]
 8009d88:	e015      	b.n	8009db6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d20b      	bcs.n	8009dac <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	1ad2      	subs	r2, r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7ff ff97 	bl	8009cd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009da6:	2300      	movs	r3, #0
 8009da8:	61fb      	str	r3, [r7, #28]
 8009daa:	e004      	b.n	8009db6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2200      	movs	r2, #0
 8009db0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009db2:	2301      	movs	r3, #1
 8009db4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009db6:	f000 fc75 	bl	800a6a4 <vPortExitCritical>

	return xReturn;
 8009dba:	69fb      	ldr	r3, [r7, #28]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3720      	adds	r7, #32
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	200059f0 	.word	0x200059f0
 8009dc8:	20005a04 	.word	0x20005a04

08009dcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009dd0:	4b03      	ldr	r3, [pc, #12]	; (8009de0 <vTaskMissedYield+0x14>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]
}
 8009dd6:	bf00      	nop
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	20005a00 	.word	0x20005a00

08009de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009dec:	f000 f852 	bl	8009e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009df0:	4b06      	ldr	r3, [pc, #24]	; (8009e0c <prvIdleTask+0x28>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d9f9      	bls.n	8009dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8009df8:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <prvIdleTask+0x2c>)
 8009dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfe:	601a      	str	r2, [r3, #0]
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e08:	e7f0      	b.n	8009dec <prvIdleTask+0x8>
 8009e0a:	bf00      	nop
 8009e0c:	200058f0 	.word	0x200058f0
 8009e10:	e000ed04 	.word	0xe000ed04

08009e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	607b      	str	r3, [r7, #4]
 8009e1e:	e00c      	b.n	8009e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4a12      	ldr	r2, [pc, #72]	; (8009e74 <prvInitialiseTaskLists+0x60>)
 8009e2c:	4413      	add	r3, r2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fe f9c0 	bl	80081b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3301      	adds	r3, #1
 8009e38:	607b      	str	r3, [r7, #4]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b06      	cmp	r3, #6
 8009e3e:	d9ef      	bls.n	8009e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e40:	480d      	ldr	r0, [pc, #52]	; (8009e78 <prvInitialiseTaskLists+0x64>)
 8009e42:	f7fe f9b7 	bl	80081b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e46:	480d      	ldr	r0, [pc, #52]	; (8009e7c <prvInitialiseTaskLists+0x68>)
 8009e48:	f7fe f9b4 	bl	80081b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e4c:	480c      	ldr	r0, [pc, #48]	; (8009e80 <prvInitialiseTaskLists+0x6c>)
 8009e4e:	f7fe f9b1 	bl	80081b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e52:	480c      	ldr	r0, [pc, #48]	; (8009e84 <prvInitialiseTaskLists+0x70>)
 8009e54:	f7fe f9ae 	bl	80081b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e58:	480b      	ldr	r0, [pc, #44]	; (8009e88 <prvInitialiseTaskLists+0x74>)
 8009e5a:	f7fe f9ab 	bl	80081b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e5e:	4b0b      	ldr	r3, [pc, #44]	; (8009e8c <prvInitialiseTaskLists+0x78>)
 8009e60:	4a05      	ldr	r2, [pc, #20]	; (8009e78 <prvInitialiseTaskLists+0x64>)
 8009e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e64:	4b0a      	ldr	r3, [pc, #40]	; (8009e90 <prvInitialiseTaskLists+0x7c>)
 8009e66:	4a05      	ldr	r2, [pc, #20]	; (8009e7c <prvInitialiseTaskLists+0x68>)
 8009e68:	601a      	str	r2, [r3, #0]
}
 8009e6a:	bf00      	nop
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	200058f0 	.word	0x200058f0
 8009e78:	2000597c 	.word	0x2000597c
 8009e7c:	20005990 	.word	0x20005990
 8009e80:	200059ac 	.word	0x200059ac
 8009e84:	200059c0 	.word	0x200059c0
 8009e88:	200059d8 	.word	0x200059d8
 8009e8c:	200059a4 	.word	0x200059a4
 8009e90:	200059a8 	.word	0x200059a8

08009e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e9a:	e019      	b.n	8009ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e9c:	f000 fbce 	bl	800a63c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea0:	4b10      	ldr	r3, [pc, #64]	; (8009ee4 <prvCheckTasksWaitingTermination+0x50>)
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe fa0b 	bl	80082c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <prvCheckTasksWaitingTermination+0x54>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	4a0b      	ldr	r2, [pc, #44]	; (8009ee8 <prvCheckTasksWaitingTermination+0x54>)
 8009eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ebc:	4b0b      	ldr	r3, [pc, #44]	; (8009eec <prvCheckTasksWaitingTermination+0x58>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	4a0a      	ldr	r2, [pc, #40]	; (8009eec <prvCheckTasksWaitingTermination+0x58>)
 8009ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ec6:	f000 fbed 	bl	800a6a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f810 	bl	8009ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ed0:	4b06      	ldr	r3, [pc, #24]	; (8009eec <prvCheckTasksWaitingTermination+0x58>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1e1      	bne.n	8009e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ed8:	bf00      	nop
 8009eda:	bf00      	nop
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	200059c0 	.word	0x200059c0
 8009ee8:	200059ec 	.word	0x200059ec
 8009eec:	200059d4 	.word	0x200059d4

08009ef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	334c      	adds	r3, #76	; 0x4c
 8009efc:	4618      	mov	r0, r3
 8009efe:	f00c fad9 	bl	80164b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d108      	bne.n	8009f1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	4618      	mov	r0, r3
 8009f12:	f000 fd89 	bl	800aa28 <vPortFree>
				vPortFree( pxTCB );
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fd86 	bl	800aa28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f1c:	e01a      	b.n	8009f54 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d103      	bne.n	8009f30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fd7d 	bl	800aa28 <vPortFree>
	}
 8009f2e:	e011      	b.n	8009f54 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d00c      	beq.n	8009f54 <prvDeleteTCB+0x64>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	b672      	cpsid	i
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	b662      	cpsie	i
 8009f4e:	60fb      	str	r3, [r7, #12]
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <prvDeleteTCB+0x62>
	}
 8009f54:	bf00      	nop
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f62:	4b0c      	ldr	r3, [pc, #48]	; (8009f94 <prvResetNextTaskUnblockTime+0x38>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d104      	bne.n	8009f76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	; (8009f98 <prvResetNextTaskUnblockTime+0x3c>)
 8009f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f74:	e008      	b.n	8009f88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f76:	4b07      	ldr	r3, [pc, #28]	; (8009f94 <prvResetNextTaskUnblockTime+0x38>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	4a04      	ldr	r2, [pc, #16]	; (8009f98 <prvResetNextTaskUnblockTime+0x3c>)
 8009f86:	6013      	str	r3, [r2, #0]
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	200059a4 	.word	0x200059a4
 8009f98:	20005a0c 	.word	0x20005a0c

08009f9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fa2:	4b0b      	ldr	r3, [pc, #44]	; (8009fd0 <xTaskGetSchedulerState+0x34>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009faa:	2301      	movs	r3, #1
 8009fac:	607b      	str	r3, [r7, #4]
 8009fae:	e008      	b.n	8009fc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fb0:	4b08      	ldr	r3, [pc, #32]	; (8009fd4 <xTaskGetSchedulerState+0x38>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	607b      	str	r3, [r7, #4]
 8009fbc:	e001      	b.n	8009fc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fc2:	687b      	ldr	r3, [r7, #4]
	}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	200059f8 	.word	0x200059f8
 8009fd4:	20005a14 	.word	0x20005a14

08009fd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d069      	beq.n	800a0c2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff2:	4b36      	ldr	r3, [pc, #216]	; (800a0cc <xTaskPriorityInherit+0xf4>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d259      	bcs.n	800a0b0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	2b00      	cmp	r3, #0
 800a002:	db06      	blt.n	800a012 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a004:	4b31      	ldr	r3, [pc, #196]	; (800a0cc <xTaskPriorityInherit+0xf4>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	f1c3 0207 	rsb	r2, r3, #7
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	6959      	ldr	r1, [r3, #20]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01a:	4613      	mov	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4a2b      	ldr	r2, [pc, #172]	; (800a0d0 <xTaskPriorityInherit+0xf8>)
 800a024:	4413      	add	r3, r2
 800a026:	4299      	cmp	r1, r3
 800a028:	d13a      	bne.n	800a0a0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	3304      	adds	r3, #4
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe f94a 	bl	80082c8 <uxListRemove>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d115      	bne.n	800a066 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03e:	4924      	ldr	r1, [pc, #144]	; (800a0d0 <xTaskPriorityInherit+0xf8>)
 800a040:	4613      	mov	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	440b      	add	r3, r1
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xTaskPriorityInherit+0x8e>
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	2201      	movs	r2, #1
 800a056:	fa02 f303 	lsl.w	r3, r2, r3
 800a05a:	43da      	mvns	r2, r3
 800a05c:	4b1d      	ldr	r3, [pc, #116]	; (800a0d4 <xTaskPriorityInherit+0xfc>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4013      	ands	r3, r2
 800a062:	4a1c      	ldr	r2, [pc, #112]	; (800a0d4 <xTaskPriorityInherit+0xfc>)
 800a064:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a066:	4b19      	ldr	r3, [pc, #100]	; (800a0cc <xTaskPriorityInherit+0xf4>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	2201      	movs	r2, #1
 800a076:	409a      	lsls	r2, r3
 800a078:	4b16      	ldr	r3, [pc, #88]	; (800a0d4 <xTaskPriorityInherit+0xfc>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	4a15      	ldr	r2, [pc, #84]	; (800a0d4 <xTaskPriorityInherit+0xfc>)
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a086:	4613      	mov	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4a10      	ldr	r2, [pc, #64]	; (800a0d0 <xTaskPriorityInherit+0xf8>)
 800a090:	441a      	add	r2, r3
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	3304      	adds	r3, #4
 800a096:	4619      	mov	r1, r3
 800a098:	4610      	mov	r0, r2
 800a09a:	f7fe f8b8 	bl	800820e <vListInsertEnd>
 800a09e:	e004      	b.n	800a0aa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <xTaskPriorityInherit+0xf4>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	60fb      	str	r3, [r7, #12]
 800a0ae:	e008      	b.n	800a0c2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0b4:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <xTaskPriorityInherit+0xf4>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d201      	bcs.n	800a0c2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
	}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	200058ec 	.word	0x200058ec
 800a0d0:	200058f0 	.word	0x200058f0
 800a0d4:	200059f4 	.word	0x200059f4

0800a0d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d072      	beq.n	800a1d4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a0ee:	4b3c      	ldr	r3, [pc, #240]	; (800a1e0 <xTaskPriorityDisinherit+0x108>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d00c      	beq.n	800a112 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fc:	b672      	cpsid	i
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	b662      	cpsie	i
 800a10c:	60fb      	str	r3, [r7, #12]
}
 800a10e:	bf00      	nop
 800a110:	e7fe      	b.n	800a110 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10c      	bne.n	800a134 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	b672      	cpsid	i
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	b662      	cpsie	i
 800a12e:	60bb      	str	r3, [r7, #8]
}
 800a130:	bf00      	nop
 800a132:	e7fe      	b.n	800a132 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a138:	1e5a      	subs	r2, r3, #1
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a146:	429a      	cmp	r2, r3
 800a148:	d044      	beq.n	800a1d4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d140      	bne.n	800a1d4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	3304      	adds	r3, #4
 800a156:	4618      	mov	r0, r3
 800a158:	f7fe f8b6 	bl	80082c8 <uxListRemove>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d115      	bne.n	800a18e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a166:	491f      	ldr	r1, [pc, #124]	; (800a1e4 <xTaskPriorityDisinherit+0x10c>)
 800a168:	4613      	mov	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	440b      	add	r3, r1
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10a      	bne.n	800a18e <xTaskPriorityDisinherit+0xb6>
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	2201      	movs	r2, #1
 800a17e:	fa02 f303 	lsl.w	r3, r2, r3
 800a182:	43da      	mvns	r2, r3
 800a184:	4b18      	ldr	r3, [pc, #96]	; (800a1e8 <xTaskPriorityDisinherit+0x110>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4013      	ands	r3, r2
 800a18a:	4a17      	ldr	r2, [pc, #92]	; (800a1e8 <xTaskPriorityDisinherit+0x110>)
 800a18c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19a:	f1c3 0207 	rsb	r2, r3, #7
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	409a      	lsls	r2, r3
 800a1aa:	4b0f      	ldr	r3, [pc, #60]	; (800a1e8 <xTaskPriorityDisinherit+0x110>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	4a0d      	ldr	r2, [pc, #52]	; (800a1e8 <xTaskPriorityDisinherit+0x110>)
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4a08      	ldr	r2, [pc, #32]	; (800a1e4 <xTaskPriorityDisinherit+0x10c>)
 800a1c2:	441a      	add	r2, r3
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	f7fe f81f 	bl	800820e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1d4:	697b      	ldr	r3, [r7, #20]
	}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	200058ec 	.word	0x200058ec
 800a1e4:	200058f0 	.word	0x200058f0
 800a1e8:	200059f4 	.word	0x200059f4

0800a1ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b088      	sub	sp, #32
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 8087 	beq.w	800a314 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10c      	bne.n	800a228 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	b672      	cpsid	i
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	b662      	cpsie	i
 800a222:	60fb      	str	r3, [r7, #12]
}
 800a224:	bf00      	nop
 800a226:	e7fe      	b.n	800a226 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d902      	bls.n	800a238 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	61fb      	str	r3, [r7, #28]
 800a236:	e002      	b.n	800a23e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a23c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a242:	69fa      	ldr	r2, [r7, #28]
 800a244:	429a      	cmp	r2, r3
 800a246:	d065      	beq.n	800a314 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d160      	bne.n	800a314 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a252:	4b32      	ldr	r3, [pc, #200]	; (800a31c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d10c      	bne.n	800a276 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	b672      	cpsid	i
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	b662      	cpsie	i
 800a270:	60bb      	str	r3, [r7, #8]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	db04      	blt.n	800a294 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	f1c3 0207 	rsb	r2, r3, #7
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	6959      	ldr	r1, [r3, #20]
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	4613      	mov	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4a1f      	ldr	r2, [pc, #124]	; (800a320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a2a4:	4413      	add	r3, r2
 800a2a6:	4299      	cmp	r1, r3
 800a2a8:	d134      	bne.n	800a314 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe f80a 	bl	80082c8 <uxListRemove>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d115      	bne.n	800a2e6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2be:	4918      	ldr	r1, [pc, #96]	; (800a320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	440b      	add	r3, r1
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10a      	bne.n	800a2e6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2da:	43da      	mvns	r2, r3
 800a2dc:	4b11      	ldr	r3, [pc, #68]	; (800a324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	4a10      	ldr	r2, [pc, #64]	; (800a324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a2e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	409a      	lsls	r2, r3
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	4a0b      	ldr	r2, [pc, #44]	; (800a324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4a06      	ldr	r2, [pc, #24]	; (800a320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a306:	441a      	add	r2, r3
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	3304      	adds	r3, #4
 800a30c:	4619      	mov	r1, r3
 800a30e:	4610      	mov	r0, r2
 800a310:	f7fd ff7d 	bl	800820e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a314:	bf00      	nop
 800a316:	3720      	adds	r7, #32
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	200058ec 	.word	0x200058ec
 800a320:	200058f0 	.word	0x200058f0
 800a324:	200059f4 	.word	0x200059f4

0800a328 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a328:	b480      	push	{r7}
 800a32a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a32c:	4b07      	ldr	r3, [pc, #28]	; (800a34c <pvTaskIncrementMutexHeldCount+0x24>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a334:	4b05      	ldr	r3, [pc, #20]	; (800a34c <pvTaskIncrementMutexHeldCount+0x24>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a33a:	3201      	adds	r2, #1
 800a33c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a33e:	4b03      	ldr	r3, [pc, #12]	; (800a34c <pvTaskIncrementMutexHeldCount+0x24>)
 800a340:	681b      	ldr	r3, [r3, #0]
	}
 800a342:	4618      	mov	r0, r3
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	200058ec 	.word	0x200058ec

0800a350 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a35a:	4b29      	ldr	r3, [pc, #164]	; (800a400 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a360:	4b28      	ldr	r3, [pc, #160]	; (800a404 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3304      	adds	r3, #4
 800a366:	4618      	mov	r0, r3
 800a368:	f7fd ffae 	bl	80082c8 <uxListRemove>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10b      	bne.n	800a38a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a372:	4b24      	ldr	r3, [pc, #144]	; (800a404 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a378:	2201      	movs	r2, #1
 800a37a:	fa02 f303 	lsl.w	r3, r2, r3
 800a37e:	43da      	mvns	r2, r3
 800a380:	4b21      	ldr	r3, [pc, #132]	; (800a408 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4013      	ands	r3, r2
 800a386:	4a20      	ldr	r2, [pc, #128]	; (800a408 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a388:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a390:	d10a      	bne.n	800a3a8 <prvAddCurrentTaskToDelayedList+0x58>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d007      	beq.n	800a3a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a398:	4b1a      	ldr	r3, [pc, #104]	; (800a404 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3304      	adds	r3, #4
 800a39e:	4619      	mov	r1, r3
 800a3a0:	481a      	ldr	r0, [pc, #104]	; (800a40c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3a2:	f7fd ff34 	bl	800820e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3a6:	e026      	b.n	800a3f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3b0:	4b14      	ldr	r3, [pc, #80]	; (800a404 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d209      	bcs.n	800a3d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3c0:	4b13      	ldr	r3, [pc, #76]	; (800a410 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	4b0f      	ldr	r3, [pc, #60]	; (800a404 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	f7fd ff42 	bl	8008256 <vListInsert>
}
 800a3d2:	e010      	b.n	800a3f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3d4:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	f7fd ff38 	bl	8008256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3e6:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d202      	bcs.n	800a3f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a3f0:	4a09      	ldr	r2, [pc, #36]	; (800a418 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	6013      	str	r3, [r2, #0]
}
 800a3f6:	bf00      	nop
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	200059f0 	.word	0x200059f0
 800a404:	200058ec 	.word	0x200058ec
 800a408:	200059f4 	.word	0x200059f4
 800a40c:	200059d8 	.word	0x200059d8
 800a410:	200059a8 	.word	0x200059a8
 800a414:	200059a4 	.word	0x200059a4
 800a418:	20005a0c 	.word	0x20005a0c

0800a41c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3b04      	subs	r3, #4
 800a42c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	3b04      	subs	r3, #4
 800a43a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	f023 0201 	bic.w	r2, r3, #1
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3b04      	subs	r3, #4
 800a44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a44c:	4a0c      	ldr	r2, [pc, #48]	; (800a480 <pxPortInitialiseStack+0x64>)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	3b14      	subs	r3, #20
 800a456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3b04      	subs	r3, #4
 800a462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f06f 0202 	mvn.w	r2, #2
 800a46a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	3b20      	subs	r3, #32
 800a470:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a472:	68fb      	ldr	r3, [r7, #12]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	0800a485 	.word	0x0800a485

0800a484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a48e:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <prvTaskExitError+0x5c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a496:	d00c      	beq.n	800a4b2 <prvTaskExitError+0x2e>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	b672      	cpsid	i
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	b662      	cpsie	i
 800a4ac:	60fb      	str	r3, [r7, #12]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <prvTaskExitError+0x2c>
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b6:	b672      	cpsid	i
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	b662      	cpsie	i
 800a4c6:	60bb      	str	r3, [r7, #8]
}
 800a4c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4ca:	bf00      	nop
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0fc      	beq.n	800a4cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4d2:	bf00      	nop
 800a4d4:	bf00      	nop
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	20000024 	.word	0x20000024
	...

0800a4f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4f0:	4b07      	ldr	r3, [pc, #28]	; (800a510 <pxCurrentTCBConst2>)
 800a4f2:	6819      	ldr	r1, [r3, #0]
 800a4f4:	6808      	ldr	r0, [r1, #0]
 800a4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fa:	f380 8809 	msr	PSP, r0
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f04f 0000 	mov.w	r0, #0
 800a506:	f380 8811 	msr	BASEPRI, r0
 800a50a:	4770      	bx	lr
 800a50c:	f3af 8000 	nop.w

0800a510 <pxCurrentTCBConst2>:
 800a510:	200058ec 	.word	0x200058ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop

0800a518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a518:	4808      	ldr	r0, [pc, #32]	; (800a53c <prvPortStartFirstTask+0x24>)
 800a51a:	6800      	ldr	r0, [r0, #0]
 800a51c:	6800      	ldr	r0, [r0, #0]
 800a51e:	f380 8808 	msr	MSP, r0
 800a522:	f04f 0000 	mov.w	r0, #0
 800a526:	f380 8814 	msr	CONTROL, r0
 800a52a:	b662      	cpsie	i
 800a52c:	b661      	cpsie	f
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	df00      	svc	0
 800a538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a53a:	bf00      	nop
 800a53c:	e000ed08 	.word	0xe000ed08

0800a540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a546:	4b37      	ldr	r3, [pc, #220]	; (800a624 <xPortStartScheduler+0xe4>)
 800a548:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	22ff      	movs	r2, #255	; 0xff
 800a556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a560:	78fb      	ldrb	r3, [r7, #3]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	4b2f      	ldr	r3, [pc, #188]	; (800a628 <xPortStartScheduler+0xe8>)
 800a56c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a56e:	4b2f      	ldr	r3, [pc, #188]	; (800a62c <xPortStartScheduler+0xec>)
 800a570:	2207      	movs	r2, #7
 800a572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a574:	e009      	b.n	800a58a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a576:	4b2d      	ldr	r3, [pc, #180]	; (800a62c <xPortStartScheduler+0xec>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3b01      	subs	r3, #1
 800a57c:	4a2b      	ldr	r2, [pc, #172]	; (800a62c <xPortStartScheduler+0xec>)
 800a57e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a580:	78fb      	ldrb	r3, [r7, #3]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	b2db      	uxtb	r3, r3
 800a588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a592:	2b80      	cmp	r3, #128	; 0x80
 800a594:	d0ef      	beq.n	800a576 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a596:	4b25      	ldr	r3, [pc, #148]	; (800a62c <xPortStartScheduler+0xec>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f1c3 0307 	rsb	r3, r3, #7
 800a59e:	2b04      	cmp	r3, #4
 800a5a0:	d00c      	beq.n	800a5bc <xPortStartScheduler+0x7c>
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a6:	b672      	cpsid	i
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	b662      	cpsie	i
 800a5b6:	60bb      	str	r3, [r7, #8]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5bc:	4b1b      	ldr	r3, [pc, #108]	; (800a62c <xPortStartScheduler+0xec>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	021b      	lsls	r3, r3, #8
 800a5c2:	4a1a      	ldr	r2, [pc, #104]	; (800a62c <xPortStartScheduler+0xec>)
 800a5c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5c6:	4b19      	ldr	r3, [pc, #100]	; (800a62c <xPortStartScheduler+0xec>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5ce:	4a17      	ldr	r2, [pc, #92]	; (800a62c <xPortStartScheduler+0xec>)
 800a5d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5da:	4b15      	ldr	r3, [pc, #84]	; (800a630 <xPortStartScheduler+0xf0>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a14      	ldr	r2, [pc, #80]	; (800a630 <xPortStartScheduler+0xf0>)
 800a5e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5e6:	4b12      	ldr	r3, [pc, #72]	; (800a630 <xPortStartScheduler+0xf0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a11      	ldr	r2, [pc, #68]	; (800a630 <xPortStartScheduler+0xf0>)
 800a5ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a5f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5f2:	f000 f8dd 	bl	800a7b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5f6:	4b0f      	ldr	r3, [pc, #60]	; (800a634 <xPortStartScheduler+0xf4>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5fc:	f000 f8fc 	bl	800a7f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a600:	4b0d      	ldr	r3, [pc, #52]	; (800a638 <xPortStartScheduler+0xf8>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a0c      	ldr	r2, [pc, #48]	; (800a638 <xPortStartScheduler+0xf8>)
 800a606:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a60a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a60c:	f7ff ff84 	bl	800a518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a610:	f7ff fa72 	bl	8009af8 <vTaskSwitchContext>
	prvTaskExitError();
 800a614:	f7ff ff36 	bl	800a484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	e000e400 	.word	0xe000e400
 800a628:	20005a18 	.word	0x20005a18
 800a62c:	20005a1c 	.word	0x20005a1c
 800a630:	e000ed20 	.word	0xe000ed20
 800a634:	20000024 	.word	0x20000024
 800a638:	e000ef34 	.word	0xe000ef34

0800a63c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	b672      	cpsid	i
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	b662      	cpsie	i
 800a656:	607b      	str	r3, [r7, #4]
}
 800a658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a65a:	4b10      	ldr	r3, [pc, #64]	; (800a69c <vPortEnterCritical+0x60>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3301      	adds	r3, #1
 800a660:	4a0e      	ldr	r2, [pc, #56]	; (800a69c <vPortEnterCritical+0x60>)
 800a662:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a664:	4b0d      	ldr	r3, [pc, #52]	; (800a69c <vPortEnterCritical+0x60>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d111      	bne.n	800a690 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a66c:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <vPortEnterCritical+0x64>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00c      	beq.n	800a690 <vPortEnterCritical+0x54>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	b672      	cpsid	i
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	b662      	cpsie	i
 800a68a:	603b      	str	r3, [r7, #0]
}
 800a68c:	bf00      	nop
 800a68e:	e7fe      	b.n	800a68e <vPortEnterCritical+0x52>
	}
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	20000024 	.word	0x20000024
 800a6a0:	e000ed04 	.word	0xe000ed04

0800a6a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6aa:	4b13      	ldr	r3, [pc, #76]	; (800a6f8 <vPortExitCritical+0x54>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10c      	bne.n	800a6cc <vPortExitCritical+0x28>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	b672      	cpsid	i
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	b662      	cpsie	i
 800a6c6:	607b      	str	r3, [r7, #4]
}
 800a6c8:	bf00      	nop
 800a6ca:	e7fe      	b.n	800a6ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a6cc:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <vPortExitCritical+0x54>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	4a09      	ldr	r2, [pc, #36]	; (800a6f8 <vPortExitCritical+0x54>)
 800a6d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6d6:	4b08      	ldr	r3, [pc, #32]	; (800a6f8 <vPortExitCritical+0x54>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d105      	bne.n	800a6ea <vPortExitCritical+0x46>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	f383 8811 	msr	BASEPRI, r3
}
 800a6e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a6ea:	bf00      	nop
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	20000024 	.word	0x20000024
 800a6fc:	00000000 	.word	0x00000000

0800a700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a700:	f3ef 8009 	mrs	r0, PSP
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	4b15      	ldr	r3, [pc, #84]	; (800a760 <pxCurrentTCBConst>)
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	f01e 0f10 	tst.w	lr, #16
 800a710:	bf08      	it	eq
 800a712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71a:	6010      	str	r0, [r2, #0]
 800a71c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a720:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a724:	b672      	cpsid	i
 800a726:	f380 8811 	msr	BASEPRI, r0
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	b662      	cpsie	i
 800a734:	f7ff f9e0 	bl	8009af8 <vTaskSwitchContext>
 800a738:	f04f 0000 	mov.w	r0, #0
 800a73c:	f380 8811 	msr	BASEPRI, r0
 800a740:	bc09      	pop	{r0, r3}
 800a742:	6819      	ldr	r1, [r3, #0]
 800a744:	6808      	ldr	r0, [r1, #0]
 800a746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74a:	f01e 0f10 	tst.w	lr, #16
 800a74e:	bf08      	it	eq
 800a750:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a754:	f380 8809 	msr	PSP, r0
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop

0800a760 <pxCurrentTCBConst>:
 800a760:	200058ec 	.word	0x200058ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a764:	bf00      	nop
 800a766:	bf00      	nop

0800a768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	b672      	cpsid	i
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	b662      	cpsie	i
 800a782:	607b      	str	r3, [r7, #4]
}
 800a784:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a786:	f7ff f8fd 	bl	8009984 <xTaskIncrementTick>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a790:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <SysTick_Handler+0x44>)
 800a792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	2300      	movs	r3, #0
 800a79a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	f383 8811 	msr	BASEPRI, r3
}
 800a7a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	e000ed04 	.word	0xe000ed04

0800a7b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7b4:	4b0b      	ldr	r3, [pc, #44]	; (800a7e4 <vPortSetupTimerInterrupt+0x34>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7ba:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <vPortSetupTimerInterrupt+0x38>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <vPortSetupTimerInterrupt+0x3c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a0a      	ldr	r2, [pc, #40]	; (800a7f0 <vPortSetupTimerInterrupt+0x40>)
 800a7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ca:	099b      	lsrs	r3, r3, #6
 800a7cc:	4a09      	ldr	r2, [pc, #36]	; (800a7f4 <vPortSetupTimerInterrupt+0x44>)
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7d2:	4b04      	ldr	r3, [pc, #16]	; (800a7e4 <vPortSetupTimerInterrupt+0x34>)
 800a7d4:	2207      	movs	r2, #7
 800a7d6:	601a      	str	r2, [r3, #0]
}
 800a7d8:	bf00      	nop
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	e000e010 	.word	0xe000e010
 800a7e8:	e000e018 	.word	0xe000e018
 800a7ec:	20000000 	.word	0x20000000
 800a7f0:	10624dd3 	.word	0x10624dd3
 800a7f4:	e000e014 	.word	0xe000e014

0800a7f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a808 <vPortEnableVFP+0x10>
 800a7fc:	6801      	ldr	r1, [r0, #0]
 800a7fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a802:	6001      	str	r1, [r0, #0]
 800a804:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a806:	bf00      	nop
 800a808:	e000ed88 	.word	0xe000ed88

0800a80c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a812:	f3ef 8305 	mrs	r3, IPSR
 800a816:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b0f      	cmp	r3, #15
 800a81c:	d916      	bls.n	800a84c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a81e:	4a19      	ldr	r2, [pc, #100]	; (800a884 <vPortValidateInterruptPriority+0x78>)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4413      	add	r3, r2
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a828:	4b17      	ldr	r3, [pc, #92]	; (800a888 <vPortValidateInterruptPriority+0x7c>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	7afa      	ldrb	r2, [r7, #11]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d20c      	bcs.n	800a84c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	b672      	cpsid	i
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	b662      	cpsie	i
 800a846:	607b      	str	r3, [r7, #4]
}
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a84c:	4b0f      	ldr	r3, [pc, #60]	; (800a88c <vPortValidateInterruptPriority+0x80>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a854:	4b0e      	ldr	r3, [pc, #56]	; (800a890 <vPortValidateInterruptPriority+0x84>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d90c      	bls.n	800a876 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	b672      	cpsid	i
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	b662      	cpsie	i
 800a870:	603b      	str	r3, [r7, #0]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <vPortValidateInterruptPriority+0x68>
	}
 800a876:	bf00      	nop
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	e000e3f0 	.word	0xe000e3f0
 800a888:	20005a18 	.word	0x20005a18
 800a88c:	e000ed0c 	.word	0xe000ed0c
 800a890:	20005a1c 	.word	0x20005a1c

0800a894 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b08a      	sub	sp, #40	; 0x28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a89c:	2300      	movs	r3, #0
 800a89e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8a0:	f7fe ffa2 	bl	80097e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8a4:	4b5b      	ldr	r3, [pc, #364]	; (800aa14 <pvPortMalloc+0x180>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8ac:	f000 f91a 	bl	800aae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8b0:	4b59      	ldr	r3, [pc, #356]	; (800aa18 <pvPortMalloc+0x184>)
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f040 8092 	bne.w	800a9e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d01f      	beq.n	800a904 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a8c4:	2208      	movs	r2, #8
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f003 0307 	and.w	r3, r3, #7
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d016      	beq.n	800a904 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f023 0307 	bic.w	r3, r3, #7
 800a8dc:	3308      	adds	r3, #8
 800a8de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f003 0307 	and.w	r3, r3, #7
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00c      	beq.n	800a904 <pvPortMalloc+0x70>
	__asm volatile
 800a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ee:	b672      	cpsid	i
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	b662      	cpsie	i
 800a8fe:	617b      	str	r3, [r7, #20]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d06b      	beq.n	800a9e2 <pvPortMalloc+0x14e>
 800a90a:	4b44      	ldr	r3, [pc, #272]	; (800aa1c <pvPortMalloc+0x188>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	429a      	cmp	r2, r3
 800a912:	d866      	bhi.n	800a9e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a914:	4b42      	ldr	r3, [pc, #264]	; (800aa20 <pvPortMalloc+0x18c>)
 800a916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a918:	4b41      	ldr	r3, [pc, #260]	; (800aa20 <pvPortMalloc+0x18c>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a91e:	e004      	b.n	800a92a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	429a      	cmp	r2, r3
 800a932:	d903      	bls.n	800a93c <pvPortMalloc+0xa8>
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1f1      	bne.n	800a920 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a93c:	4b35      	ldr	r3, [pc, #212]	; (800aa14 <pvPortMalloc+0x180>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a942:	429a      	cmp	r2, r3
 800a944:	d04d      	beq.n	800a9e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2208      	movs	r2, #8
 800a94c:	4413      	add	r3, r2
 800a94e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	1ad2      	subs	r2, r2, r3
 800a960:	2308      	movs	r3, #8
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	429a      	cmp	r2, r3
 800a966:	d921      	bls.n	800a9ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4413      	add	r3, r2
 800a96e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	f003 0307 	and.w	r3, r3, #7
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00c      	beq.n	800a994 <pvPortMalloc+0x100>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	b672      	cpsid	i
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	b662      	cpsie	i
 800a98e:	613b      	str	r3, [r7, #16]
}
 800a990:	bf00      	nop
 800a992:	e7fe      	b.n	800a992 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	1ad2      	subs	r2, r2, r3
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9a6:	69b8      	ldr	r0, [r7, #24]
 800a9a8:	f000 f900 	bl	800abac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9ac:	4b1b      	ldr	r3, [pc, #108]	; (800aa1c <pvPortMalloc+0x188>)
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	4a19      	ldr	r2, [pc, #100]	; (800aa1c <pvPortMalloc+0x188>)
 800a9b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9ba:	4b18      	ldr	r3, [pc, #96]	; (800aa1c <pvPortMalloc+0x188>)
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	4b19      	ldr	r3, [pc, #100]	; (800aa24 <pvPortMalloc+0x190>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d203      	bcs.n	800a9ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9c6:	4b15      	ldr	r3, [pc, #84]	; (800aa1c <pvPortMalloc+0x188>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a16      	ldr	r2, [pc, #88]	; (800aa24 <pvPortMalloc+0x190>)
 800a9cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	685a      	ldr	r2, [r3, #4]
 800a9d2:	4b11      	ldr	r3, [pc, #68]	; (800aa18 <pvPortMalloc+0x184>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	431a      	orrs	r2, r3
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	2200      	movs	r2, #0
 800a9e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9e2:	f7fe ff0f 	bl	8009804 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	f003 0307 	and.w	r3, r3, #7
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00c      	beq.n	800aa0a <pvPortMalloc+0x176>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f4:	b672      	cpsid	i
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	b662      	cpsie	i
 800aa04:	60fb      	str	r3, [r7, #12]
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <pvPortMalloc+0x174>
	return pvReturn;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3728      	adds	r7, #40	; 0x28
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	2002bcb4 	.word	0x2002bcb4
 800aa18:	2002bcc0 	.word	0x2002bcc0
 800aa1c:	2002bcb8 	.word	0x2002bcb8
 800aa20:	2002bcac 	.word	0x2002bcac
 800aa24:	2002bcbc 	.word	0x2002bcbc

0800aa28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d04c      	beq.n	800aad4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa3a:	2308      	movs	r3, #8
 800aa3c:	425b      	negs	r3, r3
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	4413      	add	r3, r2
 800aa42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	4b23      	ldr	r3, [pc, #140]	; (800aadc <vPortFree+0xb4>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4013      	ands	r3, r2
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10c      	bne.n	800aa70 <vPortFree+0x48>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5a:	b672      	cpsid	i
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	b662      	cpsie	i
 800aa6a:	60fb      	str	r3, [r7, #12]
}
 800aa6c:	bf00      	nop
 800aa6e:	e7fe      	b.n	800aa6e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00c      	beq.n	800aa92 <vPortFree+0x6a>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	b672      	cpsid	i
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	b662      	cpsie	i
 800aa8c:	60bb      	str	r3, [r7, #8]
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	4b11      	ldr	r3, [pc, #68]	; (800aadc <vPortFree+0xb4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d019      	beq.n	800aad4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d115      	bne.n	800aad4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	4b0b      	ldr	r3, [pc, #44]	; (800aadc <vPortFree+0xb4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	43db      	mvns	r3, r3
 800aab2:	401a      	ands	r2, r3
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aab8:	f7fe fe96 	bl	80097e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <vPortFree+0xb8>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4413      	add	r3, r2
 800aac6:	4a06      	ldr	r2, [pc, #24]	; (800aae0 <vPortFree+0xb8>)
 800aac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aaca:	6938      	ldr	r0, [r7, #16]
 800aacc:	f000 f86e 	bl	800abac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aad0:	f7fe fe98 	bl	8009804 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aad4:	bf00      	nop
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	2002bcc0 	.word	0x2002bcc0
 800aae0:	2002bcb8 	.word	0x2002bcb8

0800aae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aaea:	4b29      	ldr	r3, [pc, #164]	; (800ab90 <prvHeapInit+0xac>)
 800aaec:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aaee:	4b29      	ldr	r3, [pc, #164]	; (800ab94 <prvHeapInit+0xb0>)
 800aaf0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f003 0307 	and.w	r3, r3, #7
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00c      	beq.n	800ab16 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	3307      	adds	r3, #7
 800ab00:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f023 0307 	bic.w	r3, r3, #7
 800ab08:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	4a20      	ldr	r2, [pc, #128]	; (800ab94 <prvHeapInit+0xb0>)
 800ab12:	4413      	add	r3, r2
 800ab14:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab1a:	4a1f      	ldr	r2, [pc, #124]	; (800ab98 <prvHeapInit+0xb4>)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab20:	4b1d      	ldr	r3, [pc, #116]	; (800ab98 <prvHeapInit+0xb4>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab2e:	2208      	movs	r2, #8
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	1a9b      	subs	r3, r3, r2
 800ab34:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f023 0307 	bic.w	r3, r3, #7
 800ab3c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	4a16      	ldr	r2, [pc, #88]	; (800ab9c <prvHeapInit+0xb8>)
 800ab42:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab44:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <prvHeapInit+0xb8>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab4c:	4b13      	ldr	r3, [pc, #76]	; (800ab9c <prvHeapInit+0xb8>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2200      	movs	r2, #0
 800ab52:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	1ad2      	subs	r2, r2, r3
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab62:	4b0e      	ldr	r3, [pc, #56]	; (800ab9c <prvHeapInit+0xb8>)
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	4a0c      	ldr	r2, [pc, #48]	; (800aba0 <prvHeapInit+0xbc>)
 800ab70:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	4a0b      	ldr	r2, [pc, #44]	; (800aba4 <prvHeapInit+0xc0>)
 800ab78:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab7a:	4b0b      	ldr	r3, [pc, #44]	; (800aba8 <prvHeapInit+0xc4>)
 800ab7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab80:	601a      	str	r2, [r3, #0]
}
 800ab82:	bf00      	nop
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	0002628c 	.word	0x0002628c
 800ab94:	20005a20 	.word	0x20005a20
 800ab98:	2002bcac 	.word	0x2002bcac
 800ab9c:	2002bcb4 	.word	0x2002bcb4
 800aba0:	2002bcbc 	.word	0x2002bcbc
 800aba4:	2002bcb8 	.word	0x2002bcb8
 800aba8:	2002bcc0 	.word	0x2002bcc0

0800abac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abb4:	4b28      	ldr	r3, [pc, #160]	; (800ac58 <prvInsertBlockIntoFreeList+0xac>)
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	e002      	b.n	800abc0 <prvInsertBlockIntoFreeList+0x14>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d8f7      	bhi.n	800abba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	4413      	add	r3, r2
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d108      	bne.n	800abee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	441a      	add	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	441a      	add	r2, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d118      	bne.n	800ac34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	4b15      	ldr	r3, [pc, #84]	; (800ac5c <prvInsertBlockIntoFreeList+0xb0>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d00d      	beq.n	800ac2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	441a      	add	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	601a      	str	r2, [r3, #0]
 800ac28:	e008      	b.n	800ac3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac2a:	4b0c      	ldr	r3, [pc, #48]	; (800ac5c <prvInsertBlockIntoFreeList+0xb0>)
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	e003      	b.n	800ac3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d002      	beq.n	800ac4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac4a:	bf00      	nop
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	2002bcac 	.word	0x2002bcac
 800ac5c:	2002bcb4 	.word	0x2002bcb4

0800ac60 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ac6a:	f008 f879 	bl	8012d60 <sys_timeouts_sleeptime>
 800ac6e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac76:	d10b      	bne.n	800ac90 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ac78:	4813      	ldr	r0, [pc, #76]	; (800acc8 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac7a:	f00b f8ea 	bl	8015e52 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ac7e:	2200      	movs	r2, #0
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f00b f85c 	bl	8015d40 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ac88:	480f      	ldr	r0, [pc, #60]	; (800acc8 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac8a:	f00b f8d3 	bl	8015e34 <sys_mutex_lock>
    return;
 800ac8e:	e018      	b.n	800acc2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d102      	bne.n	800ac9c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ac96:	f008 f829 	bl	8012cec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ac9a:	e7e6      	b.n	800ac6a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ac9c:	480a      	ldr	r0, [pc, #40]	; (800acc8 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac9e:	f00b f8d8 	bl	8015e52 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f00b f84a 	bl	8015d40 <sys_arch_mbox_fetch>
 800acac:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800acae:	4806      	ldr	r0, [pc, #24]	; (800acc8 <tcpip_timeouts_mbox_fetch+0x68>)
 800acb0:	f00b f8c0 	bl	8015e34 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acba:	d102      	bne.n	800acc2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800acbc:	f008 f816 	bl	8012cec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800acc0:	e7d3      	b.n	800ac6a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	2002bcd0 	.word	0x2002bcd0

0800accc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800acd4:	4810      	ldr	r0, [pc, #64]	; (800ad18 <tcpip_thread+0x4c>)
 800acd6:	f00b f8ad 	bl	8015e34 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800acda:	4b10      	ldr	r3, [pc, #64]	; (800ad1c <tcpip_thread+0x50>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d005      	beq.n	800acee <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ace2:	4b0e      	ldr	r3, [pc, #56]	; (800ad1c <tcpip_thread+0x50>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a0e      	ldr	r2, [pc, #56]	; (800ad20 <tcpip_thread+0x54>)
 800ace8:	6812      	ldr	r2, [r2, #0]
 800acea:	4610      	mov	r0, r2
 800acec:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800acee:	f107 030c 	add.w	r3, r7, #12
 800acf2:	4619      	mov	r1, r3
 800acf4:	480b      	ldr	r0, [pc, #44]	; (800ad24 <tcpip_thread+0x58>)
 800acf6:	f7ff ffb3 	bl	800ac60 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d106      	bne.n	800ad0e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ad00:	4b09      	ldr	r3, [pc, #36]	; (800ad28 <tcpip_thread+0x5c>)
 800ad02:	2291      	movs	r2, #145	; 0x91
 800ad04:	4909      	ldr	r1, [pc, #36]	; (800ad2c <tcpip_thread+0x60>)
 800ad06:	480a      	ldr	r0, [pc, #40]	; (800ad30 <tcpip_thread+0x64>)
 800ad08:	f00b fafa 	bl	8016300 <iprintf>
      continue;
 800ad0c:	e003      	b.n	800ad16 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 f80f 	bl	800ad34 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ad16:	e7ea      	b.n	800acee <tcpip_thread+0x22>
 800ad18:	2002bcd0 	.word	0x2002bcd0
 800ad1c:	2002bcc4 	.word	0x2002bcc4
 800ad20:	2002bcc8 	.word	0x2002bcc8
 800ad24:	2002bccc 	.word	0x2002bccc
 800ad28:	080179c8 	.word	0x080179c8
 800ad2c:	080179f8 	.word	0x080179f8
 800ad30:	08017a18 	.word	0x08017a18

0800ad34 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d026      	beq.n	800ad92 <tcpip_thread_handle_msg+0x5e>
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	dc2b      	bgt.n	800ada0 <tcpip_thread_handle_msg+0x6c>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d002      	beq.n	800ad52 <tcpip_thread_handle_msg+0x1e>
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d015      	beq.n	800ad7c <tcpip_thread_handle_msg+0x48>
 800ad50:	e026      	b.n	800ada0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	6850      	ldr	r0, [r2, #4]
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	6892      	ldr	r2, [r2, #8]
 800ad5e:	4611      	mov	r1, r2
 800ad60:	4798      	blx	r3
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d004      	beq.n	800ad72 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f002 f987 	bl	800d080 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ad72:	6879      	ldr	r1, [r7, #4]
 800ad74:	2009      	movs	r0, #9
 800ad76:	f001 fadf 	bl	800c338 <memp_free>
      break;
 800ad7a:	e018      	b.n	800adae <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	6892      	ldr	r2, [r2, #8]
 800ad84:	4610      	mov	r0, r2
 800ad86:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	2008      	movs	r0, #8
 800ad8c:	f001 fad4 	bl	800c338 <memp_free>
      break;
 800ad90:	e00d      	b.n	800adae <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6892      	ldr	r2, [r2, #8]
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	4798      	blx	r3
      break;
 800ad9e:	e006      	b.n	800adae <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ada0:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <tcpip_thread_handle_msg+0x84>)
 800ada2:	22cf      	movs	r2, #207	; 0xcf
 800ada4:	4905      	ldr	r1, [pc, #20]	; (800adbc <tcpip_thread_handle_msg+0x88>)
 800ada6:	4806      	ldr	r0, [pc, #24]	; (800adc0 <tcpip_thread_handle_msg+0x8c>)
 800ada8:	f00b faaa 	bl	8016300 <iprintf>
      break;
 800adac:	bf00      	nop
  }
}
 800adae:	bf00      	nop
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	080179c8 	.word	0x080179c8
 800adbc:	080179f8 	.word	0x080179f8
 800adc0:	08017a18 	.word	0x08017a18

0800adc4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800add0:	481a      	ldr	r0, [pc, #104]	; (800ae3c <tcpip_inpkt+0x78>)
 800add2:	f00a fff4 	bl	8015dbe <sys_mbox_valid>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d105      	bne.n	800ade8 <tcpip_inpkt+0x24>
 800addc:	4b18      	ldr	r3, [pc, #96]	; (800ae40 <tcpip_inpkt+0x7c>)
 800adde:	22fc      	movs	r2, #252	; 0xfc
 800ade0:	4918      	ldr	r1, [pc, #96]	; (800ae44 <tcpip_inpkt+0x80>)
 800ade2:	4819      	ldr	r0, [pc, #100]	; (800ae48 <tcpip_inpkt+0x84>)
 800ade4:	f00b fa8c 	bl	8016300 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ade8:	2009      	movs	r0, #9
 800adea:	f001 fa2f 	bl	800c24c <memp_malloc>
 800adee:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d102      	bne.n	800adfc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800adf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adfa:	e01a      	b.n	800ae32 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	2200      	movs	r2, #0
 800ae00:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ae14:	6979      	ldr	r1, [r7, #20]
 800ae16:	4809      	ldr	r0, [pc, #36]	; (800ae3c <tcpip_inpkt+0x78>)
 800ae18:	f00a ff78 	bl	8015d0c <sys_mbox_trypost>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d006      	beq.n	800ae30 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ae22:	6979      	ldr	r1, [r7, #20]
 800ae24:	2009      	movs	r0, #9
 800ae26:	f001 fa87 	bl	800c338 <memp_free>
    return ERR_MEM;
 800ae2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae2e:	e000      	b.n	800ae32 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ae30:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3718      	adds	r7, #24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	2002bccc 	.word	0x2002bccc
 800ae40:	080179c8 	.word	0x080179c8
 800ae44:	08017a40 	.word	0x08017a40
 800ae48:	08017a18 	.word	0x08017a18

0800ae4c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae5c:	f003 0318 	and.w	r3, r3, #24
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d006      	beq.n	800ae72 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ae64:	4a08      	ldr	r2, [pc, #32]	; (800ae88 <tcpip_input+0x3c>)
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff ffab 	bl	800adc4 <tcpip_inpkt>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	e005      	b.n	800ae7e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ae72:	4a06      	ldr	r2, [pc, #24]	; (800ae8c <tcpip_input+0x40>)
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff ffa4 	bl	800adc4 <tcpip_inpkt>
 800ae7c:	4603      	mov	r3, r0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	08015b1d 	.word	0x08015b1d
 800ae8c:	08014a25 	.word	0x08014a25

0800ae90 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ae9a:	4819      	ldr	r0, [pc, #100]	; (800af00 <tcpip_try_callback+0x70>)
 800ae9c:	f00a ff8f 	bl	8015dbe <sys_mbox_valid>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d106      	bne.n	800aeb4 <tcpip_try_callback+0x24>
 800aea6:	4b17      	ldr	r3, [pc, #92]	; (800af04 <tcpip_try_callback+0x74>)
 800aea8:	f240 125d 	movw	r2, #349	; 0x15d
 800aeac:	4916      	ldr	r1, [pc, #88]	; (800af08 <tcpip_try_callback+0x78>)
 800aeae:	4817      	ldr	r0, [pc, #92]	; (800af0c <tcpip_try_callback+0x7c>)
 800aeb0:	f00b fa26 	bl	8016300 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800aeb4:	2008      	movs	r0, #8
 800aeb6:	f001 f9c9 	bl	800c24c <memp_malloc>
 800aeba:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800aec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aec6:	e017      	b.n	800aef8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2201      	movs	r2, #1
 800aecc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aeda:	68f9      	ldr	r1, [r7, #12]
 800aedc:	4808      	ldr	r0, [pc, #32]	; (800af00 <tcpip_try_callback+0x70>)
 800aede:	f00a ff15 	bl	8015d0c <sys_mbox_trypost>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d006      	beq.n	800aef6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800aee8:	68f9      	ldr	r1, [r7, #12]
 800aeea:	2008      	movs	r0, #8
 800aeec:	f001 fa24 	bl	800c338 <memp_free>
    return ERR_MEM;
 800aef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aef4:	e000      	b.n	800aef8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	2002bccc 	.word	0x2002bccc
 800af04:	080179c8 	.word	0x080179c8
 800af08:	08017a40 	.word	0x08017a40
 800af0c:	08017a18 	.word	0x08017a18

0800af10 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af02      	add	r7, sp, #8
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  lwip_init();
 800af1a:	f000 fced 	bl	800b8f8 <lwip_init>

  tcpip_init_done = initfunc;
 800af1e:	4a17      	ldr	r2, [pc, #92]	; (800af7c <tcpip_init+0x6c>)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800af24:	4a16      	ldr	r2, [pc, #88]	; (800af80 <tcpip_init+0x70>)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800af2a:	2106      	movs	r1, #6
 800af2c:	4815      	ldr	r0, [pc, #84]	; (800af84 <tcpip_init+0x74>)
 800af2e:	f00a fecb 	bl	8015cc8 <sys_mbox_new>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d006      	beq.n	800af46 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800af38:	4b13      	ldr	r3, [pc, #76]	; (800af88 <tcpip_init+0x78>)
 800af3a:	f240 2261 	movw	r2, #609	; 0x261
 800af3e:	4913      	ldr	r1, [pc, #76]	; (800af8c <tcpip_init+0x7c>)
 800af40:	4813      	ldr	r0, [pc, #76]	; (800af90 <tcpip_init+0x80>)
 800af42:	f00b f9dd 	bl	8016300 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800af46:	4813      	ldr	r0, [pc, #76]	; (800af94 <tcpip_init+0x84>)
 800af48:	f00a ff58 	bl	8015dfc <sys_mutex_new>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d006      	beq.n	800af60 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800af52:	4b0d      	ldr	r3, [pc, #52]	; (800af88 <tcpip_init+0x78>)
 800af54:	f240 2265 	movw	r2, #613	; 0x265
 800af58:	490f      	ldr	r1, [pc, #60]	; (800af98 <tcpip_init+0x88>)
 800af5a:	480d      	ldr	r0, [pc, #52]	; (800af90 <tcpip_init+0x80>)
 800af5c:	f00b f9d0 	bl	8016300 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800af60:	2300      	movs	r3, #0
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af68:	2200      	movs	r2, #0
 800af6a:	490c      	ldr	r1, [pc, #48]	; (800af9c <tcpip_init+0x8c>)
 800af6c:	480c      	ldr	r0, [pc, #48]	; (800afa0 <tcpip_init+0x90>)
 800af6e:	f00a ff7d 	bl	8015e6c <sys_thread_new>
}
 800af72:	bf00      	nop
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	2002bcc4 	.word	0x2002bcc4
 800af80:	2002bcc8 	.word	0x2002bcc8
 800af84:	2002bccc 	.word	0x2002bccc
 800af88:	080179c8 	.word	0x080179c8
 800af8c:	08017a50 	.word	0x08017a50
 800af90:	08017a18 	.word	0x08017a18
 800af94:	2002bcd0 	.word	0x2002bcd0
 800af98:	08017a74 	.word	0x08017a74
 800af9c:	0800accd 	.word	0x0800accd
 800afa0:	08017a98 	.word	0x08017a98

0800afa4 <close_handle>:

static void tftp_tmr(void *arg);

static void
close_handle(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	af00      	add	r7, sp, #0
  tftp_state.port = 0;
 800afa8:	4b0f      	ldr	r3, [pc, #60]	; (800afe8 <close_handle+0x44>)
 800afaa:	2200      	movs	r2, #0
 800afac:	829a      	strh	r2, [r3, #20]
  ip_addr_set_any(0, &tftp_state.addr);
 800afae:	4b0e      	ldr	r3, [pc, #56]	; (800afe8 <close_handle+0x44>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	611a      	str	r2, [r3, #16]

  if (tftp_state.last_data != NULL) {
 800afb4:	4b0c      	ldr	r3, [pc, #48]	; (800afe8 <close_handle+0x44>)
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d007      	beq.n	800afcc <close_handle+0x28>
    pbuf_free(tftp_state.last_data);
 800afbc:	4b0a      	ldr	r3, [pc, #40]	; (800afe8 <close_handle+0x44>)
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	4618      	mov	r0, r3
 800afc2:	f002 f85d 	bl	800d080 <pbuf_free>
    tftp_state.last_data = NULL;
 800afc6:	4b08      	ldr	r3, [pc, #32]	; (800afe8 <close_handle+0x44>)
 800afc8:	2200      	movs	r2, #0
 800afca:	609a      	str	r2, [r3, #8]
  }

  sys_untimeout(tftp_tmr, NULL);
 800afcc:	2100      	movs	r1, #0
 800afce:	4807      	ldr	r0, [pc, #28]	; (800afec <close_handle+0x48>)
 800afd0:	f007 fe52 	bl	8012c78 <sys_untimeout>

  if (tftp_state.handle) {
 800afd4:	4b04      	ldr	r3, [pc, #16]	; (800afe8 <close_handle+0x44>)
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <close_handle+0x3e>
    //tftp_state.ctx->close(tftp_state.handle);
    tftp_state.handle = NULL;
 800afdc:	4b02      	ldr	r3, [pc, #8]	; (800afe8 <close_handle+0x44>)
 800afde:	2200      	movs	r2, #0
 800afe0:	605a      	str	r2, [r3, #4]
    LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: closing\n"));
  }
}
 800afe2:	bf00      	nop
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	2002ccd8 	.word	0x2002ccd8
 800afec:	0800b7a5 	.word	0x0800b7a5

0800aff0 <send_error>:

static void
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
{
 800aff0:	b590      	push	{r4, r7, lr}
 800aff2:	b089      	sub	sp, #36	; 0x24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	607b      	str	r3, [r7, #4]
 800affa:	460b      	mov	r3, r1
 800affc:	817b      	strh	r3, [r7, #10]
 800affe:	4613      	mov	r3, r2
 800b000:	727b      	strb	r3, [r7, #9]
  int str_length = strlen(str);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7f5 f904 	bl	8000210 <strlen>
 800b008:	4603      	mov	r3, r0
 800b00a:	61fb      	str	r3, [r7, #28]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + str_length + 1), PBUF_RAM);
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	b29b      	uxth	r3, r3
 800b010:	3305      	adds	r3, #5
 800b012:	b29b      	uxth	r3, r3
 800b014:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b018:	4619      	mov	r1, r3
 800b01a:	2036      	movs	r0, #54	; 0x36
 800b01c:	f001 fd4c 	bl	800cab8 <pbuf_alloc>
 800b020:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d022      	beq.n	800b06e <send_error+0x7e>
    return;
  }

  payload = (u16_t *) p->payload;
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	617b      	str	r3, [r7, #20]
  payload[0] = PP_HTONS(TFTP_ERROR);
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b034:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(code);
 800b036:	7a7b      	ldrb	r3, [r7, #9]
 800b038:	b29a      	uxth	r2, r3
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	1c9c      	adds	r4, r3, #2
 800b03e:	4610      	mov	r0, r2
 800b040:	f000 fc2c 	bl	800b89c <lwip_htons>
 800b044:	4603      	mov	r3, r0
 800b046:	8023      	strh	r3, [r4, #0]
  MEMCPY(&payload[2], str, str_length + 1);
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	1d18      	adds	r0, r3, #4
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	3301      	adds	r3, #1
 800b050:	461a      	mov	r2, r3
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	f00b f88f 	bl	8016176 <memcpy>

  udp_sendto(tftp_state.upcb, p, addr, port);
 800b058:	4b07      	ldr	r3, [pc, #28]	; (800b078 <send_error+0x88>)
 800b05a:	68d8      	ldr	r0, [r3, #12]
 800b05c:	897b      	ldrh	r3, [r7, #10]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	69b9      	ldr	r1, [r7, #24]
 800b062:	f008 f877 	bl	8013154 <udp_sendto>
  pbuf_free(p);
 800b066:	69b8      	ldr	r0, [r7, #24]
 800b068:	f002 f80a 	bl	800d080 <pbuf_free>
 800b06c:	e000      	b.n	800b070 <send_error+0x80>
    return;
 800b06e:	bf00      	nop
}
 800b070:	3724      	adds	r7, #36	; 0x24
 800b072:	46bd      	mov	sp, r7
 800b074:	bd90      	pop	{r4, r7, pc}
 800b076:	bf00      	nop
 800b078:	2002ccd8 	.word	0x2002ccd8

0800b07c <send_ack>:

static void
send_ack(u16_t blknum)
{
 800b07c:	b590      	push	{r4, r7, lr}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	4603      	mov	r3, r0
 800b084:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH, PBUF_RAM);
 800b086:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b08a:	2104      	movs	r1, #4
 800b08c:	2036      	movs	r0, #54	; 0x36
 800b08e:	f001 fd13 	bl	800cab8 <pbuf_alloc>
 800b092:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d01a      	beq.n	800b0d0 <send_ack+0x54>
    return;
  }
  payload = (u16_t *) p->payload;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	60bb      	str	r3, [r7, #8]

  payload[0] = PP_HTONS(TFTP_ACK);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0a6:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(blknum);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	1c9c      	adds	r4, r3, #2
 800b0ac:	88fb      	ldrh	r3, [r7, #6]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 fbf4 	bl	800b89c <lwip_htons>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	8023      	strh	r3, [r4, #0]
  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 800b0b8:	4b07      	ldr	r3, [pc, #28]	; (800b0d8 <send_ack+0x5c>)
 800b0ba:	68d8      	ldr	r0, [r3, #12]
 800b0bc:	4b06      	ldr	r3, [pc, #24]	; (800b0d8 <send_ack+0x5c>)
 800b0be:	8a9b      	ldrh	r3, [r3, #20]
 800b0c0:	4a06      	ldr	r2, [pc, #24]	; (800b0dc <send_ack+0x60>)
 800b0c2:	68f9      	ldr	r1, [r7, #12]
 800b0c4:	f008 f846 	bl	8013154 <udp_sendto>
  pbuf_free(p);
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f001 ffd9 	bl	800d080 <pbuf_free>
 800b0ce:	e000      	b.n	800b0d2 <send_ack+0x56>
    return;
 800b0d0:	bf00      	nop
}
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd90      	pop	{r4, r7, pc}
 800b0d8:	2002ccd8 	.word	0x2002ccd8
 800b0dc:	2002cce8 	.word	0x2002cce8

0800b0e0 <resend_data>:

static void
resend_data(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 800b0e6:	4b15      	ldr	r3, [pc, #84]	; (800b13c <resend_data+0x5c>)
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	895b      	ldrh	r3, [r3, #10]
 800b0ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	2036      	movs	r0, #54	; 0x36
 800b0f4:	f001 fce0 	bl	800cab8 <pbuf_alloc>
 800b0f8:	6078      	str	r0, [r7, #4]
  if (p == NULL) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d018      	beq.n	800b132 <resend_data+0x52>
    return;
  }

  if (pbuf_copy(p, tftp_state.last_data) != ERR_OK) {
 800b100:	4b0e      	ldr	r3, [pc, #56]	; (800b13c <resend_data+0x5c>)
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f002 f8ee 	bl	800d2e8 <pbuf_copy>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <resend_data+0x3a>
    pbuf_free(p);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 ffb4 	bl	800d080 <pbuf_free>
    return;
 800b118:	e00c      	b.n	800b134 <resend_data+0x54>
  }

  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 800b11a:	4b08      	ldr	r3, [pc, #32]	; (800b13c <resend_data+0x5c>)
 800b11c:	68d8      	ldr	r0, [r3, #12]
 800b11e:	4b07      	ldr	r3, [pc, #28]	; (800b13c <resend_data+0x5c>)
 800b120:	8a9b      	ldrh	r3, [r3, #20]
 800b122:	4a07      	ldr	r2, [pc, #28]	; (800b140 <resend_data+0x60>)
 800b124:	6879      	ldr	r1, [r7, #4]
 800b126:	f008 f815 	bl	8013154 <udp_sendto>
  pbuf_free(p);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 ffa8 	bl	800d080 <pbuf_free>
 800b130:	e000      	b.n	800b134 <resend_data+0x54>
    return;
 800b132:	bf00      	nop
}
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	2002ccd8 	.word	0x2002ccd8
 800b140:	2002cce8 	.word	0x2002cce8

0800b144 <send_data>:

static void
send_data(void)
{
 800b144:	b590      	push	{r4, r7, lr}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
  u16_t *payload;
  int ret;

  if (tftp_state.last_data != NULL) {
 800b14a:	4b28      	ldr	r3, [pc, #160]	; (800b1ec <send_data+0xa8>)
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d004      	beq.n	800b15c <send_data+0x18>
    pbuf_free(tftp_state.last_data);
 800b152:	4b26      	ldr	r3, [pc, #152]	; (800b1ec <send_data+0xa8>)
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	4618      	mov	r0, r3
 800b158:	f001 ff92 	bl	800d080 <pbuf_free>
  }

  tftp_state.last_data = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH + TFTP_MAX_PAYLOAD_SIZE, PBUF_RAM);
 800b15c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b160:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b164:	2036      	movs	r0, #54	; 0x36
 800b166:	f001 fca7 	bl	800cab8 <pbuf_alloc>
 800b16a:	4603      	mov	r3, r0
 800b16c:	4a1f      	ldr	r2, [pc, #124]	; (800b1ec <send_data+0xa8>)
 800b16e:	6093      	str	r3, [r2, #8]
  if (tftp_state.last_data == NULL) {
 800b170:	4b1e      	ldr	r3, [pc, #120]	; (800b1ec <send_data+0xa8>)
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d035      	beq.n	800b1e4 <send_data+0xa0>
    return;
  }

  payload = (u16_t *) tftp_state.last_data->payload;
 800b178:	4b1c      	ldr	r3, [pc, #112]	; (800b1ec <send_data+0xa8>)
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	607b      	str	r3, [r7, #4]
  payload[0] = PP_HTONS(TFTP_DATA);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b186:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(tftp_state.blknum);
 800b188:	4b18      	ldr	r3, [pc, #96]	; (800b1ec <send_data+0xa8>)
 800b18a:	8c1a      	ldrh	r2, [r3, #32]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	1c9c      	adds	r4, r3, #2
 800b190:	4610      	mov	r0, r2
 800b192:	f000 fb83 	bl	800b89c <lwip_htons>
 800b196:	4603      	mov	r3, r0
 800b198:	8023      	strh	r3, [r4, #0]

  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 800b19a:	4b14      	ldr	r3, [pc, #80]	; (800b1ec <send_data+0xa8>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	4a12      	ldr	r2, [pc, #72]	; (800b1ec <send_data+0xa8>)
 800b1a2:	6850      	ldr	r0, [r2, #4]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	1d11      	adds	r1, r2, #4
 800b1a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1ac:	4798      	blx	r3
 800b1ae:	6038      	str	r0, [r7, #0]
  if (ret < 0) {
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	da09      	bge.n	800b1ca <send_data+0x86>
    send_error(&tftp_state.addr, tftp_state.port, TFTP_ERROR_ACCESS_VIOLATION, "Error occured while reading the file.");
 800b1b6:	4b0d      	ldr	r3, [pc, #52]	; (800b1ec <send_data+0xa8>)
 800b1b8:	8a99      	ldrh	r1, [r3, #20]
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <send_data+0xac>)
 800b1bc:	2202      	movs	r2, #2
 800b1be:	480d      	ldr	r0, [pc, #52]	; (800b1f4 <send_data+0xb0>)
 800b1c0:	f7ff ff16 	bl	800aff0 <send_error>
    close_handle();
 800b1c4:	f7ff feee 	bl	800afa4 <close_handle>
    return;
 800b1c8:	e00d      	b.n	800b1e6 <send_data+0xa2>
  }

  pbuf_realloc(tftp_state.last_data, (u16_t)(TFTP_HEADER_LENGTH + ret));
 800b1ca:	4b08      	ldr	r3, [pc, #32]	; (800b1ec <send_data+0xa8>)
 800b1cc:	689a      	ldr	r2, [r3, #8]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4610      	mov	r0, r2
 800b1da:	f001 fdcb 	bl	800cd74 <pbuf_realloc>
  resend_data();
 800b1de:	f7ff ff7f 	bl	800b0e0 <resend_data>
 800b1e2:	e000      	b.n	800b1e6 <send_data+0xa2>
    return;
 800b1e4:	bf00      	nop
}
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd90      	pop	{r4, r7, pc}
 800b1ec:	2002ccd8 	.word	0x2002ccd8
 800b1f0:	08017aa8 	.word	0x08017aa8
 800b1f4:	2002cce8 	.word	0x2002cce8

0800b1f8 <recv>:

static void
recv(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b094      	sub	sp, #80	; 0x50
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
 800b204:	603b      	str	r3, [r7, #0]
  u16_t *sbuf = (u16_t *) p->payload;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	64bb      	str	r3, [r7, #72]	; 0x48
  int opcode;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(upcb);

  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 800b20c:	4b72      	ldr	r3, [pc, #456]	; (800b3d8 <recv+0x1e0>)
 800b20e:	8a9b      	ldrh	r3, [r3, #20]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <recv+0x28>
 800b214:	4b70      	ldr	r3, [pc, #448]	; (800b3d8 <recv+0x1e0>)
 800b216:	8a9b      	ldrh	r3, [r3, #20]
 800b218:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d109      	bne.n	800b234 <recv+0x3c>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 800b220:	4b6d      	ldr	r3, [pc, #436]	; (800b3d8 <recv+0x1e0>)
 800b222:	691b      	ldr	r3, [r3, #16]
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 800b224:	2b00      	cmp	r3, #0
 800b226:	d010      	beq.n	800b24a <recv+0x52>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 800b228:	4b6b      	ldr	r3, [pc, #428]	; (800b3d8 <recv+0x1e0>)
 800b22a:	691a      	ldr	r2, [r3, #16]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	429a      	cmp	r2, r3
 800b232:	d00a      	beq.n	800b24a <recv+0x52>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 800b234:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b238:	4b68      	ldr	r3, [pc, #416]	; (800b3dc <recv+0x1e4>)
 800b23a:	2202      	movs	r2, #2
 800b23c:	6838      	ldr	r0, [r7, #0]
 800b23e:	f7ff fed7 	bl	800aff0 <send_error>
    pbuf_free(p);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f001 ff1c 	bl	800d080 <pbuf_free>
    return;
 800b248:	e2a4      	b.n	800b794 <recv+0x59c>
  }

  opcode = sbuf[0];
 800b24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b24c:	881b      	ldrh	r3, [r3, #0]
 800b24e:	647b      	str	r3, [r7, #68]	; 0x44

  tftp_state.last_pkt = tftp_state.timer;
 800b250:	4b61      	ldr	r3, [pc, #388]	; (800b3d8 <recv+0x1e0>)
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	4a60      	ldr	r2, [pc, #384]	; (800b3d8 <recv+0x1e0>)
 800b256:	61d3      	str	r3, [r2, #28]
  tftp_state.retries = 0;
 800b258:	4b5f      	ldr	r3, [pc, #380]	; (800b3d8 <recv+0x1e0>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  switch (opcode) {
 800b260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b266:	f000 822e 	beq.w	800b6c6 <recv+0x4ce>
 800b26a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b26c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b270:	f300 8285 	bgt.w	800b77e <recv+0x586>
 800b274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b27a:	f000 8094 	beq.w	800b3a6 <recv+0x1ae>
 800b27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b284:	f300 827b 	bgt.w	800b77e <recv+0x586>
 800b288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b28e:	d004      	beq.n	800b29a <recv+0xa2>
 800b290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b296:	f040 8272 	bne.w	800b77e <recv+0x586>
    case PP_HTONS(TFTP_RRQ): /* fall through */
    case PP_HTONS(TFTP_WRQ): {
      const char tftp_null = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      char filename[TFTP_MAX_FILENAME_LEN + 1];
      char mode[TFTP_MAX_MODE_LEN + 1];
      u16_t filename_end_offset;
      u16_t mode_end_offset;

      if (tftp_state.handle != NULL) {
 800b2a0:	4b4d      	ldr	r3, [pc, #308]	; (800b3d8 <recv+0x1e0>)
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d007      	beq.n	800b2b8 <recv+0xc0>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 800b2a8:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b2ac:	4b4b      	ldr	r3, [pc, #300]	; (800b3dc <recv+0x1e4>)
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	6838      	ldr	r0, [r7, #0]
 800b2b2:	f7ff fe9d 	bl	800aff0 <send_error>
        break;
 800b2b6:	e26a      	b.n	800b78e <recv+0x596>
      }

      sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4949      	ldr	r1, [pc, #292]	; (800b3e0 <recv+0x1e8>)
 800b2bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b2c0:	f007 fcb4 	bl	8012c2c <sys_timeout>

      /* find \0 in pbuf -> end of filename string */
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 800b2c4:	f107 0137 	add.w	r1, r7, #55	; 0x37
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f002 fa39 	bl	800d744 <pbuf_memfind>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 800b2d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	2b15      	cmp	r3, #21
 800b2de:	d907      	bls.n	800b2f0 <recv+0xf8>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Filename too long/not NULL terminated");
 800b2e0:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b2e4:	4b3f      	ldr	r3, [pc, #252]	; (800b3e4 <recv+0x1ec>)
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	6838      	ldr	r0, [r7, #0]
 800b2ea:	f7ff fe81 	bl	800aff0 <send_error>
        break;
 800b2ee:	e24e      	b.n	800b78e <recv+0x596>
      }
      pbuf_copy_partial(p, filename, filename_end_offset - 1, 2);
 800b2f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	f107 0120 	add.w	r1, r7, #32
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f002 f8c5 	bl	800d48c <pbuf_copy_partial>

      /* find \0 in pbuf -> end of mode string */
      mode_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), filename_end_offset + 1);
 800b302:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b304:	3301      	adds	r3, #1
 800b306:	b29b      	uxth	r3, r3
 800b308:	f107 0137 	add.w	r1, r7, #55	; 0x37
 800b30c:	2201      	movs	r2, #1
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f002 fa18 	bl	800d744 <pbuf_memfind>
 800b314:	4603      	mov	r3, r0
 800b316:	873b      	strh	r3, [r7, #56]	; 0x38
      if ((u16_t)(mode_end_offset - filename_end_offset) > sizeof(mode)) {
 800b318:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b31a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	b29b      	uxth	r3, r3
 800b320:	2b09      	cmp	r3, #9
 800b322:	d907      	bls.n	800b334 <recv+0x13c>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Mode too long/not NULL terminated");
 800b324:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b328:	4b2f      	ldr	r3, [pc, #188]	; (800b3e8 <recv+0x1f0>)
 800b32a:	2202      	movs	r2, #2
 800b32c:	6838      	ldr	r0, [r7, #0]
 800b32e:	f7ff fe5f 	bl	800aff0 <send_error>
        break;
 800b332:	e22c      	b.n	800b78e <recv+0x596>
      }
      pbuf_copy_partial(p, mode, mode_end_offset - filename_end_offset, filename_end_offset + 1);
 800b334:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b336:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b33e:	3301      	adds	r3, #1
 800b340:	b29b      	uxth	r3, r3
 800b342:	f107 0114 	add.w	r1, r7, #20
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f002 f8a0 	bl	800d48c <pbuf_copy_partial>

     // tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
      tftp_state.handle = (void *) 1;
 800b34c:	4b22      	ldr	r3, [pc, #136]	; (800b3d8 <recv+0x1e0>)
 800b34e:	2201      	movs	r2, #1
 800b350:	605a      	str	r2, [r3, #4]
      tftp_state.blknum = 1;
 800b352:	4b21      	ldr	r3, [pc, #132]	; (800b3d8 <recv+0x1e0>)
 800b354:	2201      	movs	r2, #1
 800b356:	841a      	strh	r2, [r3, #32]

      if (!tftp_state.handle) {
 800b358:	4b1f      	ldr	r3, [pc, #124]	; (800b3d8 <recv+0x1e0>)
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d107      	bne.n	800b370 <recv+0x178>
        send_error(addr, port, TFTP_ERROR_FILE_NOT_FOUND, "Unable to open requested file.");
 800b360:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b364:	4b21      	ldr	r3, [pc, #132]	; (800b3ec <recv+0x1f4>)
 800b366:	2201      	movs	r2, #1
 800b368:	6838      	ldr	r0, [r7, #0]
 800b36a:	f7ff fe41 	bl	800aff0 <send_error>
        break;
 800b36e:	e20e      	b.n	800b78e <recv+0x596>

      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: %s request from ", (opcode == PP_HTONS(TFTP_WRQ)) ? "write" : "read"));
      ip_addr_debug_print(TFTP_DEBUG | LWIP_DBG_STATE, addr);
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, (" for '%s' mode '%s'\n", filename, mode));

      ip_addr_copy(tftp_state.addr, *addr);
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a18      	ldr	r2, [pc, #96]	; (800b3d8 <recv+0x1e0>)
 800b376:	6113      	str	r3, [r2, #16]
      tftp_state.port = port;
 800b378:	4a17      	ldr	r2, [pc, #92]	; (800b3d8 <recv+0x1e0>)
 800b37a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800b37e:	8293      	strh	r3, [r2, #20]

      if (opcode == PP_HTONS(TFTP_WRQ)) {
 800b380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b386:	d107      	bne.n	800b398 <recv+0x1a0>
        tftp_state.mode_write = 1;
 800b388:	4b13      	ldr	r3, [pc, #76]	; (800b3d8 <recv+0x1e0>)
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        send_ack(0);
 800b390:	2000      	movs	r0, #0
 800b392:	f7ff fe73 	bl	800b07c <send_ack>
      } else {
        tftp_state.mode_write = 0;
        send_data();
      }

      break;
 800b396:	e1fa      	b.n	800b78e <recv+0x596>
        tftp_state.mode_write = 0;
 800b398:	4b0f      	ldr	r3, [pc, #60]	; (800b3d8 <recv+0x1e0>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        send_data();
 800b3a0:	f7ff fed0 	bl	800b144 <send_data>
      break;
 800b3a4:	e1f3      	b.n	800b78e <recv+0x596>

    case PP_HTONS(TFTP_DATA): {
      int ret;
      u16_t blknum;

      if (tftp_state.handle == NULL) {
 800b3a6:	4b0c      	ldr	r3, [pc, #48]	; (800b3d8 <recv+0x1e0>)
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d107      	bne.n	800b3be <recv+0x1c6>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 800b3ae:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b3b2:	4b0f      	ldr	r3, [pc, #60]	; (800b3f0 <recv+0x1f8>)
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	6838      	ldr	r0, [r7, #0]
 800b3b8:	f7ff fe1a 	bl	800aff0 <send_error>
        break;
 800b3bc:	e1e7      	b.n	800b78e <recv+0x596>
      }

      if (tftp_state.mode_write != 1) {
 800b3be:	4b06      	ldr	r3, [pc, #24]	; (800b3d8 <recv+0x1e0>)
 800b3c0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d017      	beq.n	800b3f8 <recv+0x200>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a write connection");
 800b3c8:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b3cc:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <recv+0x1fc>)
 800b3ce:	2202      	movs	r2, #2
 800b3d0:	6838      	ldr	r0, [r7, #0]
 800b3d2:	f7ff fe0d 	bl	800aff0 <send_error>
        break;
 800b3d6:	e1da      	b.n	800b78e <recv+0x596>
 800b3d8:	2002ccd8 	.word	0x2002ccd8
 800b3dc:	08017ad0 	.word	0x08017ad0
 800b3e0:	0800b7a5 	.word	0x0800b7a5
 800b3e4:	08017afc 	.word	0x08017afc
 800b3e8:	08017b24 	.word	0x08017b24
 800b3ec:	08017b48 	.word	0x08017b48
 800b3f0:	08017b68 	.word	0x08017b68
 800b3f4:	08017b78 	.word	0x08017b78
      }
      blknum = lwip_ntohs(sbuf[1]);
 800b3f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3fa:	3302      	adds	r3, #2
 800b3fc:	881b      	ldrh	r3, [r3, #0]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 fa4c 	bl	800b89c <lwip_htons>
 800b404:	4603      	mov	r3, r0
 800b406:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
      if (blknum == tftp_state.blknum) {
 800b40a:	4bc7      	ldr	r3, [pc, #796]	; (800b728 <recv+0x530>)
 800b40c:	8c1b      	ldrh	r3, [r3, #32]
 800b40e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b412:	429a      	cmp	r2, r3
 800b414:	f040 8141 	bne.w	800b69a <recv+0x4a2>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 800b418:	2104      	movs	r1, #4
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f001 fdaa 	bl	800cf74 <pbuf_remove_header>

        events[0+(blknum-1)*5].handlingDepartment = *(uint8_t *)(p->payload + 0);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6859      	ldr	r1, [r3, #4]
 800b424:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b428:	1e5a      	subs	r2, r3, #1
 800b42a:	4613      	mov	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	7808      	ldrb	r0, [r1, #0]
 800b432:	4abe      	ldr	r2, [pc, #760]	; (800b72c <recv+0x534>)
 800b434:	2152      	movs	r1, #82	; 0x52
 800b436:	fb01 f303 	mul.w	r3, r1, r3
 800b43a:	4413      	add	r3, r2
 800b43c:	4602      	mov	r2, r0
 800b43e:	701a      	strb	r2, [r3, #0]
        events[0+(blknum-1)*5].eventSeverity = *(uint8_t *)(p->payload + 1);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6859      	ldr	r1, [r3, #4]
 800b444:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b448:	1e5a      	subs	r2, r3, #1
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	7848      	ldrb	r0, [r1, #1]
 800b452:	4ab6      	ldr	r2, [pc, #728]	; (800b72c <recv+0x534>)
 800b454:	2152      	movs	r1, #82	; 0x52
 800b456:	fb01 f303 	mul.w	r3, r1, r3
 800b45a:	4413      	add	r3, r2
 800b45c:	3301      	adds	r3, #1
 800b45e:	4602      	mov	r2, r0
 800b460:	701a      	strb	r2, [r3, #0]
        memcpy (events[0+(blknum-1)*5].eventAddress, p->payload +2, 79);
 800b462:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b466:	1e5a      	subs	r2, r3, #1
 800b468:	4613      	mov	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4413      	add	r3, r2
 800b46e:	2252      	movs	r2, #82	; 0x52
 800b470:	fb02 f303 	mul.w	r3, r2, r3
 800b474:	4aad      	ldr	r2, [pc, #692]	; (800b72c <recv+0x534>)
 800b476:	4413      	add	r3, r2
 800b478:	1c98      	adds	r0, r3, #2
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	3302      	adds	r3, #2
 800b480:	224f      	movs	r2, #79	; 0x4f
 800b482:	4619      	mov	r1, r3
 800b484:	f00a fe77 	bl	8016176 <memcpy>

        events[1+(blknum-1)*5].handlingDepartment = *(uint8_t *)(p->payload + 102);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6859      	ldr	r1, [r3, #4]
 800b48c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b490:	1e5a      	subs	r2, r3, #1
 800b492:	4613      	mov	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4413      	add	r3, r2
 800b498:	3301      	adds	r3, #1
 800b49a:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
 800b49e:	4aa3      	ldr	r2, [pc, #652]	; (800b72c <recv+0x534>)
 800b4a0:	2152      	movs	r1, #82	; 0x52
 800b4a2:	fb01 f303 	mul.w	r3, r1, r3
 800b4a6:	4413      	add	r3, r2
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	701a      	strb	r2, [r3, #0]
        events[1+(blknum-1)*5].eventSeverity = *(uint8_t *)(p->payload + 103);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6859      	ldr	r1, [r3, #4]
 800b4b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b4b4:	1e5a      	subs	r2, r3, #1
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4413      	add	r3, r2
 800b4bc:	3301      	adds	r3, #1
 800b4be:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
 800b4c2:	4a9a      	ldr	r2, [pc, #616]	; (800b72c <recv+0x534>)
 800b4c4:	2152      	movs	r1, #82	; 0x52
 800b4c6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ca:	4413      	add	r3, r2
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	701a      	strb	r2, [r3, #0]
		memcpy (events[1+(blknum-1)*5].eventAddress, p->payload +104, 79);
 800b4d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b4d6:	1e5a      	subs	r2, r3, #1
 800b4d8:	4613      	mov	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	3301      	adds	r3, #1
 800b4e0:	2252      	movs	r2, #82	; 0x52
 800b4e2:	fb02 f303 	mul.w	r3, r2, r3
 800b4e6:	4a91      	ldr	r2, [pc, #580]	; (800b72c <recv+0x534>)
 800b4e8:	4413      	add	r3, r2
 800b4ea:	1c98      	adds	r0, r3, #2
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	3368      	adds	r3, #104	; 0x68
 800b4f2:	224f      	movs	r2, #79	; 0x4f
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	f00a fe3e 	bl	8016176 <memcpy>

		events[2+(blknum-1)*5].handlingDepartment = *(uint8_t *)(p->payload + 204);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6859      	ldr	r1, [r3, #4]
 800b4fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b502:	1e5a      	subs	r2, r3, #1
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	3302      	adds	r3, #2
 800b50c:	f891 00cc 	ldrb.w	r0, [r1, #204]	; 0xcc
 800b510:	4a86      	ldr	r2, [pc, #536]	; (800b72c <recv+0x534>)
 800b512:	2152      	movs	r1, #82	; 0x52
 800b514:	fb01 f303 	mul.w	r3, r1, r3
 800b518:	4413      	add	r3, r2
 800b51a:	4602      	mov	r2, r0
 800b51c:	701a      	strb	r2, [r3, #0]
		events[2+(blknum-1)*5].eventSeverity = *(uint8_t *)(p->payload + 205);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6859      	ldr	r1, [r3, #4]
 800b522:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b526:	1e5a      	subs	r2, r3, #1
 800b528:	4613      	mov	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4413      	add	r3, r2
 800b52e:	3302      	adds	r3, #2
 800b530:	f891 00cd 	ldrb.w	r0, [r1, #205]	; 0xcd
 800b534:	4a7d      	ldr	r2, [pc, #500]	; (800b72c <recv+0x534>)
 800b536:	2152      	movs	r1, #82	; 0x52
 800b538:	fb01 f303 	mul.w	r3, r1, r3
 800b53c:	4413      	add	r3, r2
 800b53e:	3301      	adds	r3, #1
 800b540:	4602      	mov	r2, r0
 800b542:	701a      	strb	r2, [r3, #0]
		memcpy (events[2+(blknum-1)*5].eventAddress, p->payload +206, 79);
 800b544:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b548:	1e5a      	subs	r2, r3, #1
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	3302      	adds	r3, #2
 800b552:	2252      	movs	r2, #82	; 0x52
 800b554:	fb02 f303 	mul.w	r3, r2, r3
 800b558:	4a74      	ldr	r2, [pc, #464]	; (800b72c <recv+0x534>)
 800b55a:	4413      	add	r3, r2
 800b55c:	1c98      	adds	r0, r3, #2
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	33ce      	adds	r3, #206	; 0xce
 800b564:	224f      	movs	r2, #79	; 0x4f
 800b566:	4619      	mov	r1, r3
 800b568:	f00a fe05 	bl	8016176 <memcpy>

		events[3+(blknum-1)*5].handlingDepartment = *(uint8_t *)(p->payload + 306);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6859      	ldr	r1, [r3, #4]
 800b570:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b574:	1e5a      	subs	r2, r3, #1
 800b576:	4613      	mov	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	3303      	adds	r3, #3
 800b57e:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
 800b582:	4a6a      	ldr	r2, [pc, #424]	; (800b72c <recv+0x534>)
 800b584:	2152      	movs	r1, #82	; 0x52
 800b586:	fb01 f303 	mul.w	r3, r1, r3
 800b58a:	4413      	add	r3, r2
 800b58c:	4602      	mov	r2, r0
 800b58e:	701a      	strb	r2, [r3, #0]
		events[3+(blknum-1)*5].eventSeverity = *(uint8_t *)(p->payload + 307);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6859      	ldr	r1, [r3, #4]
 800b594:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b598:	1e5a      	subs	r2, r3, #1
 800b59a:	4613      	mov	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	3303      	adds	r3, #3
 800b5a2:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
 800b5a6:	4a61      	ldr	r2, [pc, #388]	; (800b72c <recv+0x534>)
 800b5a8:	2152      	movs	r1, #82	; 0x52
 800b5aa:	fb01 f303 	mul.w	r3, r1, r3
 800b5ae:	4413      	add	r3, r2
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	701a      	strb	r2, [r3, #0]
		memcpy (events[3+(blknum-1)*5].eventAddress, p->payload +308, 79);
 800b5b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b5ba:	1e5a      	subs	r2, r3, #1
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	3303      	adds	r3, #3
 800b5c4:	2252      	movs	r2, #82	; 0x52
 800b5c6:	fb02 f303 	mul.w	r3, r2, r3
 800b5ca:	4a58      	ldr	r2, [pc, #352]	; (800b72c <recv+0x534>)
 800b5cc:	4413      	add	r3, r2
 800b5ce:	1c98      	adds	r0, r3, #2
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800b5d8:	224f      	movs	r2, #79	; 0x4f
 800b5da:	4619      	mov	r1, r3
 800b5dc:	f00a fdcb 	bl	8016176 <memcpy>

		events[4+(blknum-1)*5].handlingDepartment = *(uint8_t *)(p->payload + 408);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6859      	ldr	r1, [r3, #4]
 800b5e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b5e8:	1e5a      	subs	r2, r3, #1
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4413      	add	r3, r2
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	f891 0198 	ldrb.w	r0, [r1, #408]	; 0x198
 800b5f6:	4a4d      	ldr	r2, [pc, #308]	; (800b72c <recv+0x534>)
 800b5f8:	2152      	movs	r1, #82	; 0x52
 800b5fa:	fb01 f303 	mul.w	r3, r1, r3
 800b5fe:	4413      	add	r3, r2
 800b600:	4602      	mov	r2, r0
 800b602:	701a      	strb	r2, [r3, #0]
		events[4+(blknum-1)*5].eventSeverity = *(uint8_t *)(p->payload + 409);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6859      	ldr	r1, [r3, #4]
 800b608:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b60c:	1e5a      	subs	r2, r3, #1
 800b60e:	4613      	mov	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4413      	add	r3, r2
 800b614:	3304      	adds	r3, #4
 800b616:	f891 0199 	ldrb.w	r0, [r1, #409]	; 0x199
 800b61a:	4a44      	ldr	r2, [pc, #272]	; (800b72c <recv+0x534>)
 800b61c:	2152      	movs	r1, #82	; 0x52
 800b61e:	fb01 f303 	mul.w	r3, r1, r3
 800b622:	4413      	add	r3, r2
 800b624:	3301      	adds	r3, #1
 800b626:	4602      	mov	r2, r0
 800b628:	701a      	strb	r2, [r3, #0]
		memcpy (events[4+(blknum-1)*5].eventAddress, p->payload +410, 79);
 800b62a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b62e:	1e5a      	subs	r2, r3, #1
 800b630:	4613      	mov	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4413      	add	r3, r2
 800b636:	3304      	adds	r3, #4
 800b638:	2252      	movs	r2, #82	; 0x52
 800b63a:	fb02 f303 	mul.w	r3, r2, r3
 800b63e:	4a3b      	ldr	r2, [pc, #236]	; (800b72c <recv+0x534>)
 800b640:	4413      	add	r3, r2
 800b642:	1c98      	adds	r0, r3, #2
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	f503 73cd 	add.w	r3, r3, #410	; 0x19a
 800b64c:	224f      	movs	r2, #79	; 0x4f
 800b64e:	4619      	mov	r1, r3
 800b650:	f00a fd91 	bl	8016176 <memcpy>

        ret=0;
 800b654:	2300      	movs	r3, #0
 800b656:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (ret < 0) {
 800b658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	da09      	bge.n	800b672 <recv+0x47a>
          send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "error writing file");
 800b65e:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b662:	4b33      	ldr	r3, [pc, #204]	; (800b730 <recv+0x538>)
 800b664:	2202      	movs	r2, #2
 800b666:	6838      	ldr	r0, [r7, #0]
 800b668:	f7ff fcc2 	bl	800aff0 <send_error>
          close_handle();
 800b66c:	f7ff fc9a 	bl	800afa4 <close_handle>
 800b670:	e004      	b.n	800b67c <recv+0x484>
        } else {
          send_ack(blknum);
 800b672:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff fd00 	bl	800b07c <send_ack>
        }

        if (p->tot_len < TFTP_MAX_PAYLOAD_SIZE) {
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	891b      	ldrh	r3, [r3, #8]
 800b680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b684:	d202      	bcs.n	800b68c <recv+0x494>
          close_handle();
 800b686:	f7ff fc8d 	bl	800afa4 <close_handle>
        /* retransmit of previous block, ack again (casting to u16_t to care for overflow) */
        send_ack(blknum);
      } else {
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
      }
      break;
 800b68a:	e080      	b.n	800b78e <recv+0x596>
          tftp_state.blknum++;
 800b68c:	4b26      	ldr	r3, [pc, #152]	; (800b728 <recv+0x530>)
 800b68e:	8c1b      	ldrh	r3, [r3, #32]
 800b690:	3301      	adds	r3, #1
 800b692:	b29a      	uxth	r2, r3
 800b694:	4b24      	ldr	r3, [pc, #144]	; (800b728 <recv+0x530>)
 800b696:	841a      	strh	r2, [r3, #32]
      break;
 800b698:	e079      	b.n	800b78e <recv+0x596>
      } else if ((u16_t)(blknum + 1) == tftp_state.blknum) {
 800b69a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b69e:	3301      	adds	r3, #1
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	4b21      	ldr	r3, [pc, #132]	; (800b728 <recv+0x530>)
 800b6a4:	8c1b      	ldrh	r3, [r3, #32]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d105      	bne.n	800b6b6 <recv+0x4be>
        send_ack(blknum);
 800b6aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff fce4 	bl	800b07c <send_ack>
      break;
 800b6b4:	e06b      	b.n	800b78e <recv+0x596>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 800b6b6:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b6ba:	4b1e      	ldr	r3, [pc, #120]	; (800b734 <recv+0x53c>)
 800b6bc:	2205      	movs	r2, #5
 800b6be:	6838      	ldr	r0, [r7, #0]
 800b6c0:	f7ff fc96 	bl	800aff0 <send_error>
      break;
 800b6c4:	e063      	b.n	800b78e <recv+0x596>

    case PP_HTONS(TFTP_ACK): {
      u16_t blknum;
      int lastpkt;

      if (tftp_state.handle == NULL) {
 800b6c6:	4b18      	ldr	r3, [pc, #96]	; (800b728 <recv+0x530>)
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d107      	bne.n	800b6de <recv+0x4e6>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 800b6ce:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b6d2:	4b19      	ldr	r3, [pc, #100]	; (800b738 <recv+0x540>)
 800b6d4:	2202      	movs	r2, #2
 800b6d6:	6838      	ldr	r0, [r7, #0]
 800b6d8:	f7ff fc8a 	bl	800aff0 <send_error>
        break;
 800b6dc:	e057      	b.n	800b78e <recv+0x596>
      }

      if (tftp_state.mode_write != 0) {
 800b6de:	4b12      	ldr	r3, [pc, #72]	; (800b728 <recv+0x530>)
 800b6e0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d007      	beq.n	800b6f8 <recv+0x500>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a read connection");
 800b6e8:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b6ec:	4b13      	ldr	r3, [pc, #76]	; (800b73c <recv+0x544>)
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	6838      	ldr	r0, [r7, #0]
 800b6f2:	f7ff fc7d 	bl	800aff0 <send_error>
        break;
 800b6f6:	e04a      	b.n	800b78e <recv+0x596>
      }

      blknum = lwip_ntohs(sbuf[1]);
 800b6f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6fa:	3302      	adds	r3, #2
 800b6fc:	881b      	ldrh	r3, [r3, #0]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 f8cc 	bl	800b89c <lwip_htons>
 800b704:	4603      	mov	r3, r0
 800b706:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      if (blknum != tftp_state.blknum) {
 800b70a:	4b07      	ldr	r3, [pc, #28]	; (800b728 <recv+0x530>)
 800b70c:	8c1b      	ldrh	r3, [r3, #32]
 800b70e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b712:	429a      	cmp	r2, r3
 800b714:	d014      	beq.n	800b740 <recv+0x548>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 800b716:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b71a:	4b06      	ldr	r3, [pc, #24]	; (800b734 <recv+0x53c>)
 800b71c:	2205      	movs	r2, #5
 800b71e:	6838      	ldr	r0, [r7, #0]
 800b720:	f7ff fc66 	bl	800aff0 <send_error>
        break;
 800b724:	e033      	b.n	800b78e <recv+0x596>
 800b726:	bf00      	nop
 800b728:	2002ccd8 	.word	0x2002ccd8
 800b72c:	2002bcd4 	.word	0x2002bcd4
 800b730:	08017b90 	.word	0x08017b90
 800b734:	08017ba4 	.word	0x08017ba4
 800b738:	08017b68 	.word	0x08017b68
 800b73c:	08017bb8 	.word	0x08017bb8
      }

      lastpkt = 0;
 800b740:	2300      	movs	r3, #0
 800b742:	64fb      	str	r3, [r7, #76]	; 0x4c

      if (tftp_state.last_data != NULL) {
 800b744:	4b15      	ldr	r3, [pc, #84]	; (800b79c <recv+0x5a4>)
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d009      	beq.n	800b760 <recv+0x568>
        lastpkt = tftp_state.last_data->tot_len != (TFTP_MAX_PAYLOAD_SIZE + TFTP_HEADER_LENGTH);
 800b74c:	4b13      	ldr	r3, [pc, #76]	; (800b79c <recv+0x5a4>)
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	891b      	ldrh	r3, [r3, #8]
 800b752:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800b756:	bf14      	ite	ne
 800b758:	2301      	movne	r3, #1
 800b75a:	2300      	moveq	r3, #0
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      if (!lastpkt) {
 800b760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b762:	2b00      	cmp	r3, #0
 800b764:	d108      	bne.n	800b778 <recv+0x580>
        tftp_state.blknum++;
 800b766:	4b0d      	ldr	r3, [pc, #52]	; (800b79c <recv+0x5a4>)
 800b768:	8c1b      	ldrh	r3, [r3, #32]
 800b76a:	3301      	adds	r3, #1
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	4b0b      	ldr	r3, [pc, #44]	; (800b79c <recv+0x5a4>)
 800b770:	841a      	strh	r2, [r3, #32]
        send_data();
 800b772:	f7ff fce7 	bl	800b144 <send_data>
      } else {
        close_handle();
      }

      break;
 800b776:	e00a      	b.n	800b78e <recv+0x596>
        close_handle();
 800b778:	f7ff fc14 	bl	800afa4 <close_handle>
      break;
 800b77c:	e007      	b.n	800b78e <recv+0x596>
    }

    default:
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 800b77e:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 800b782:	4b07      	ldr	r3, [pc, #28]	; (800b7a0 <recv+0x5a8>)
 800b784:	2204      	movs	r2, #4
 800b786:	6838      	ldr	r0, [r7, #0]
 800b788:	f7ff fc32 	bl	800aff0 <send_error>
      break;
 800b78c:	bf00      	nop
  }

  pbuf_free(p);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 fc76 	bl	800d080 <pbuf_free>
}
 800b794:	3750      	adds	r7, #80	; 0x50
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	2002ccd8 	.word	0x2002ccd8
 800b7a0:	08017bd0 	.word	0x08017bd0

0800b7a4 <tftp_tmr>:

static void
tftp_tmr(void *arg)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  tftp_state.timer++;
 800b7ac:	4b18      	ldr	r3, [pc, #96]	; (800b810 <tftp_tmr+0x6c>)
 800b7ae:	699b      	ldr	r3, [r3, #24]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	4a17      	ldr	r2, [pc, #92]	; (800b810 <tftp_tmr+0x6c>)
 800b7b4:	6193      	str	r3, [r2, #24]

  if (tftp_state.handle == NULL) {
 800b7b6:	4b16      	ldr	r3, [pc, #88]	; (800b810 <tftp_tmr+0x6c>)
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d023      	beq.n	800b806 <tftp_tmr+0x62>
    return;
  }

  sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 800b7be:	2200      	movs	r2, #0
 800b7c0:	4914      	ldr	r1, [pc, #80]	; (800b814 <tftp_tmr+0x70>)
 800b7c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b7c6:	f007 fa31 	bl	8012c2c <sys_timeout>

  if ((tftp_state.timer - tftp_state.last_pkt) > (TFTP_TIMEOUT_MSECS / TFTP_TIMER_MSECS)) {
 800b7ca:	4b11      	ldr	r3, [pc, #68]	; (800b810 <tftp_tmr+0x6c>)
 800b7cc:	699a      	ldr	r2, [r3, #24]
 800b7ce:	4b10      	ldr	r3, [pc, #64]	; (800b810 <tftp_tmr+0x6c>)
 800b7d0:	69db      	ldr	r3, [r3, #28]
 800b7d2:	1ad3      	subs	r3, r2, r3
 800b7d4:	2b0a      	cmp	r3, #10
 800b7d6:	dd17      	ble.n	800b808 <tftp_tmr+0x64>
    if ((tftp_state.last_data != NULL) && (tftp_state.retries < TFTP_MAX_RETRIES)) {
 800b7d8:	4b0d      	ldr	r3, [pc, #52]	; (800b810 <tftp_tmr+0x6c>)
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00f      	beq.n	800b800 <tftp_tmr+0x5c>
 800b7e0:	4b0b      	ldr	r3, [pc, #44]	; (800b810 <tftp_tmr+0x6c>)
 800b7e2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b7e6:	2b04      	cmp	r3, #4
 800b7e8:	d80a      	bhi.n	800b800 <tftp_tmr+0x5c>
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout, retrying\n"));
      resend_data();
 800b7ea:	f7ff fc79 	bl	800b0e0 <resend_data>
      tftp_state.retries++;
 800b7ee:	4b08      	ldr	r3, [pc, #32]	; (800b810 <tftp_tmr+0x6c>)
 800b7f0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	4b05      	ldr	r3, [pc, #20]	; (800b810 <tftp_tmr+0x6c>)
 800b7fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800b7fe:	e003      	b.n	800b808 <tftp_tmr+0x64>
    } else {
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout\n"));
      close_handle();
 800b800:	f7ff fbd0 	bl	800afa4 <close_handle>
 800b804:	e000      	b.n	800b808 <tftp_tmr+0x64>
    return;
 800b806:	bf00      	nop
    }
  }
}
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	2002ccd8 	.word	0x2002ccd8
 800b814:	0800b7a5 	.word	0x0800b7a5

0800b818 <tftp_init>:
 * Initialize TFTP server.
 * @param ctx TFTP callback struct
 */
err_t
tftp_init(const struct tftp_context *ctx)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  err_t ret;

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800b820:	202e      	movs	r0, #46	; 0x2e
 800b822:	f007 ff4e 	bl	80136c2 <udp_new_ip_type>
 800b826:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d102      	bne.n	800b834 <tftp_init+0x1c>
    return ERR_MEM;
 800b82e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b832:	e028      	b.n	800b886 <tftp_init+0x6e>
  }

  ret = udp_bind(pcb, IP_ANY_TYPE, TFTP_PORT);
 800b834:	2245      	movs	r2, #69	; 0x45
 800b836:	4916      	ldr	r1, [pc, #88]	; (800b890 <tftp_init+0x78>)
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f007 fe41 	bl	80134c0 <udp_bind>
 800b83e:	4603      	mov	r3, r0
 800b840:	72fb      	strb	r3, [r7, #11]
  if (ret != ERR_OK) {
 800b842:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d005      	beq.n	800b856 <tftp_init+0x3e>
    udp_remove(pcb);
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f007 fee0 	bl	8013610 <udp_remove>
    return ret;
 800b850:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b854:	e017      	b.n	800b886 <tftp_init+0x6e>
  }

  tftp_state.handle    = NULL;
 800b856:	4b0f      	ldr	r3, [pc, #60]	; (800b894 <tftp_init+0x7c>)
 800b858:	2200      	movs	r2, #0
 800b85a:	605a      	str	r2, [r3, #4]
  tftp_state.port      = 0;
 800b85c:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <tftp_init+0x7c>)
 800b85e:	2200      	movs	r2, #0
 800b860:	829a      	strh	r2, [r3, #20]
  tftp_state.ctx       = ctx;
 800b862:	4a0c      	ldr	r2, [pc, #48]	; (800b894 <tftp_init+0x7c>)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6013      	str	r3, [r2, #0]
  tftp_state.timer     = 0;
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <tftp_init+0x7c>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	619a      	str	r2, [r3, #24]
  tftp_state.last_data = NULL;
 800b86e:	4b09      	ldr	r3, [pc, #36]	; (800b894 <tftp_init+0x7c>)
 800b870:	2200      	movs	r2, #0
 800b872:	609a      	str	r2, [r3, #8]
  tftp_state.upcb      = pcb;
 800b874:	4a07      	ldr	r2, [pc, #28]	; (800b894 <tftp_init+0x7c>)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	60d3      	str	r3, [r2, #12]

  udp_recv(pcb, recv, NULL);
 800b87a:	2200      	movs	r2, #0
 800b87c:	4906      	ldr	r1, [pc, #24]	; (800b898 <tftp_init+0x80>)
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f007 fea6 	bl	80135d0 <udp_recv>

  return ERR_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	0801a74c 	.word	0x0801a74c
 800b894:	2002ccd8 	.word	0x2002ccd8
 800b898:	0800b1f9 	.word	0x0800b1f9

0800b89c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b8a6:	88fb      	ldrh	r3, [r7, #6]
 800b8a8:	021b      	lsls	r3, r3, #8
 800b8aa:	b21a      	sxth	r2, r3
 800b8ac:	88fb      	ldrh	r3, [r7, #6]
 800b8ae:	0a1b      	lsrs	r3, r3, #8
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	b21b      	sxth	r3, r3
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	b21b      	sxth	r3, r3
 800b8b8:	b29b      	uxth	r3, r3
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	061a      	lsls	r2, r3, #24
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	021b      	lsls	r3, r3, #8
 800b8d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b8da:	431a      	orrs	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	0a1b      	lsrs	r3, r3, #8
 800b8e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	0e1b      	lsrs	r3, r3, #24
 800b8ea:	4313      	orrs	r3, r2
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b902:	f00a fa6d 	bl	8015de0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b906:	f000 f8d5 	bl	800bab4 <mem_init>
  memp_init();
 800b90a:	f000 fc31 	bl	800c170 <memp_init>
  pbuf_init();
  netif_init();
 800b90e:	f000 fd3d 	bl	800c38c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b912:	f007 fa5d 	bl	8012dd0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b916:	f001 ff4b 	bl	800d7b0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b91a:	f007 f965 	bl	8012be8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b91e:	bf00      	nop
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	4603      	mov	r3, r0
 800b930:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b932:	4b05      	ldr	r3, [pc, #20]	; (800b948 <ptr_to_mem+0x20>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	88fb      	ldrh	r3, [r7, #6]
 800b938:	4413      	add	r3, r2
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	2002d368 	.word	0x2002d368

0800b94c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b954:	4b05      	ldr	r3, [pc, #20]	; (800b96c <mem_to_ptr+0x20>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	b29b      	uxth	r3, r3
}
 800b95e:	4618      	mov	r0, r3
 800b960:	370c      	adds	r7, #12
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	2002d368 	.word	0x2002d368

0800b970 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b970:	b590      	push	{r4, r7, lr}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b978:	4b45      	ldr	r3, [pc, #276]	; (800ba90 <plug_holes+0x120>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d206      	bcs.n	800b990 <plug_holes+0x20>
 800b982:	4b44      	ldr	r3, [pc, #272]	; (800ba94 <plug_holes+0x124>)
 800b984:	f240 12df 	movw	r2, #479	; 0x1df
 800b988:	4943      	ldr	r1, [pc, #268]	; (800ba98 <plug_holes+0x128>)
 800b98a:	4844      	ldr	r0, [pc, #272]	; (800ba9c <plug_holes+0x12c>)
 800b98c:	f00a fcb8 	bl	8016300 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b990:	4b43      	ldr	r3, [pc, #268]	; (800baa0 <plug_holes+0x130>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	429a      	cmp	r2, r3
 800b998:	d306      	bcc.n	800b9a8 <plug_holes+0x38>
 800b99a:	4b3e      	ldr	r3, [pc, #248]	; (800ba94 <plug_holes+0x124>)
 800b99c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b9a0:	4940      	ldr	r1, [pc, #256]	; (800baa4 <plug_holes+0x134>)
 800b9a2:	483e      	ldr	r0, [pc, #248]	; (800ba9c <plug_holes+0x12c>)
 800b9a4:	f00a fcac 	bl	8016300 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	791b      	ldrb	r3, [r3, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d006      	beq.n	800b9be <plug_holes+0x4e>
 800b9b0:	4b38      	ldr	r3, [pc, #224]	; (800ba94 <plug_holes+0x124>)
 800b9b2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b9b6:	493c      	ldr	r1, [pc, #240]	; (800baa8 <plug_holes+0x138>)
 800b9b8:	4838      	ldr	r0, [pc, #224]	; (800ba9c <plug_holes+0x12c>)
 800b9ba:	f00a fca1 	bl	8016300 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9c6:	d906      	bls.n	800b9d6 <plug_holes+0x66>
 800b9c8:	4b32      	ldr	r3, [pc, #200]	; (800ba94 <plug_holes+0x124>)
 800b9ca:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b9ce:	4937      	ldr	r1, [pc, #220]	; (800baac <plug_holes+0x13c>)
 800b9d0:	4832      	ldr	r0, [pc, #200]	; (800ba9c <plug_holes+0x12c>)
 800b9d2:	f00a fc95 	bl	8016300 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	881b      	ldrh	r3, [r3, #0]
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7ff ffa4 	bl	800b928 <ptr_to_mem>
 800b9e0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d024      	beq.n	800ba34 <plug_holes+0xc4>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	791b      	ldrb	r3, [r3, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d120      	bne.n	800ba34 <plug_holes+0xc4>
 800b9f2:	4b2b      	ldr	r3, [pc, #172]	; (800baa0 <plug_holes+0x130>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d01b      	beq.n	800ba34 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b9fc:	4b2c      	ldr	r3, [pc, #176]	; (800bab0 <plug_holes+0x140>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d102      	bne.n	800ba0c <plug_holes+0x9c>
      lfree = mem;
 800ba06:	4a2a      	ldr	r2, [pc, #168]	; (800bab0 <plug_holes+0x140>)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	881a      	ldrh	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	881b      	ldrh	r3, [r3, #0]
 800ba18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba1c:	d00a      	beq.n	800ba34 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	881b      	ldrh	r3, [r3, #0]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7ff ff80 	bl	800b928 <ptr_to_mem>
 800ba28:	4604      	mov	r4, r0
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7ff ff8e 	bl	800b94c <mem_to_ptr>
 800ba30:	4603      	mov	r3, r0
 800ba32:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	885b      	ldrh	r3, [r3, #2]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7ff ff75 	bl	800b928 <ptr_to_mem>
 800ba3e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d01f      	beq.n	800ba88 <plug_holes+0x118>
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	791b      	ldrb	r3, [r3, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d11b      	bne.n	800ba88 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ba50:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <plug_holes+0x140>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d102      	bne.n	800ba60 <plug_holes+0xf0>
      lfree = pmem;
 800ba5a:	4a15      	ldr	r2, [pc, #84]	; (800bab0 <plug_holes+0x140>)
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	881a      	ldrh	r2, [r3, #0]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba70:	d00a      	beq.n	800ba88 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7ff ff56 	bl	800b928 <ptr_to_mem>
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	68b8      	ldr	r0, [r7, #8]
 800ba80:	f7ff ff64 	bl	800b94c <mem_to_ptr>
 800ba84:	4603      	mov	r3, r0
 800ba86:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ba88:	bf00      	nop
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd90      	pop	{r4, r7, pc}
 800ba90:	2002d368 	.word	0x2002d368
 800ba94:	08017c70 	.word	0x08017c70
 800ba98:	08017ca0 	.word	0x08017ca0
 800ba9c:	08017cb8 	.word	0x08017cb8
 800baa0:	2002d36c 	.word	0x2002d36c
 800baa4:	08017ce0 	.word	0x08017ce0
 800baa8:	08017cfc 	.word	0x08017cfc
 800baac:	08017d18 	.word	0x08017d18
 800bab0:	2002d374 	.word	0x2002d374

0800bab4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800baba:	4b1f      	ldr	r3, [pc, #124]	; (800bb38 <mem_init+0x84>)
 800babc:	3303      	adds	r3, #3
 800babe:	f023 0303 	bic.w	r3, r3, #3
 800bac2:	461a      	mov	r2, r3
 800bac4:	4b1d      	ldr	r3, [pc, #116]	; (800bb3c <mem_init+0x88>)
 800bac6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bac8:	4b1c      	ldr	r3, [pc, #112]	; (800bb3c <mem_init+0x88>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bad4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bae2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800bae6:	f7ff ff1f 	bl	800b928 <ptr_to_mem>
 800baea:	4603      	mov	r3, r0
 800baec:	4a14      	ldr	r2, [pc, #80]	; (800bb40 <mem_init+0x8c>)
 800baee:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800baf0:	4b13      	ldr	r3, [pc, #76]	; (800bb40 <mem_init+0x8c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2201      	movs	r2, #1
 800baf6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800baf8:	4b11      	ldr	r3, [pc, #68]	; (800bb40 <mem_init+0x8c>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bb00:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bb02:	4b0f      	ldr	r3, [pc, #60]	; (800bb40 <mem_init+0x8c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bb0a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bb0c:	4b0b      	ldr	r3, [pc, #44]	; (800bb3c <mem_init+0x88>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a0c      	ldr	r2, [pc, #48]	; (800bb44 <mem_init+0x90>)
 800bb12:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bb14:	480c      	ldr	r0, [pc, #48]	; (800bb48 <mem_init+0x94>)
 800bb16:	f00a f971 	bl	8015dfc <sys_mutex_new>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d006      	beq.n	800bb2e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bb20:	4b0a      	ldr	r3, [pc, #40]	; (800bb4c <mem_init+0x98>)
 800bb22:	f240 221f 	movw	r2, #543	; 0x21f
 800bb26:	490a      	ldr	r1, [pc, #40]	; (800bb50 <mem_init+0x9c>)
 800bb28:	480a      	ldr	r0, [pc, #40]	; (800bb54 <mem_init+0xa0>)
 800bb2a:	f00a fbe9 	bl	8016300 <iprintf>
  }
}
 800bb2e:	bf00      	nop
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	2002cd14 	.word	0x2002cd14
 800bb3c:	2002d368 	.word	0x2002d368
 800bb40:	2002d36c 	.word	0x2002d36c
 800bb44:	2002d374 	.word	0x2002d374
 800bb48:	2002d370 	.word	0x2002d370
 800bb4c:	08017c70 	.word	0x08017c70
 800bb50:	08017d44 	.word	0x08017d44
 800bb54:	08017cb8 	.word	0x08017cb8

0800bb58 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff fef3 	bl	800b94c <mem_to_ptr>
 800bb66:	4603      	mov	r3, r0
 800bb68:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	881b      	ldrh	r3, [r3, #0]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff feda 	bl	800b928 <ptr_to_mem>
 800bb74:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	885b      	ldrh	r3, [r3, #2]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7ff fed4 	bl	800b928 <ptr_to_mem>
 800bb80:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb8a:	d818      	bhi.n	800bbbe <mem_link_valid+0x66>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	885b      	ldrh	r3, [r3, #2]
 800bb90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb94:	d813      	bhi.n	800bbbe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb9a:	8afa      	ldrh	r2, [r7, #22]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d004      	beq.n	800bbaa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	8afa      	ldrh	r2, [r7, #22]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d109      	bne.n	800bbbe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bbaa:	4b08      	ldr	r3, [pc, #32]	; (800bbcc <mem_link_valid+0x74>)
 800bbac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bbae:	693a      	ldr	r2, [r7, #16]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d006      	beq.n	800bbc2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	885b      	ldrh	r3, [r3, #2]
 800bbb8:	8afa      	ldrh	r2, [r7, #22]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d001      	beq.n	800bbc2 <mem_link_valid+0x6a>
    return 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	e000      	b.n	800bbc4 <mem_link_valid+0x6c>
  }
  return 1;
 800bbc2:	2301      	movs	r3, #1
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	2002d36c 	.word	0x2002d36c

0800bbd0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b088      	sub	sp, #32
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d070      	beq.n	800bcc0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00d      	beq.n	800bc04 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bbe8:	4b37      	ldr	r3, [pc, #220]	; (800bcc8 <mem_free+0xf8>)
 800bbea:	f240 2273 	movw	r2, #627	; 0x273
 800bbee:	4937      	ldr	r1, [pc, #220]	; (800bccc <mem_free+0xfc>)
 800bbf0:	4837      	ldr	r0, [pc, #220]	; (800bcd0 <mem_free+0x100>)
 800bbf2:	f00a fb85 	bl	8016300 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbf6:	f00a f95f 	bl	8015eb8 <sys_arch_protect>
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f00a f969 	bl	8015ed4 <sys_arch_unprotect>
    return;
 800bc02:	e05e      	b.n	800bcc2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3b08      	subs	r3, #8
 800bc08:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bc0a:	4b32      	ldr	r3, [pc, #200]	; (800bcd4 <mem_free+0x104>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	69fa      	ldr	r2, [r7, #28]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d306      	bcc.n	800bc22 <mem_free+0x52>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f103 020c 	add.w	r2, r3, #12
 800bc1a:	4b2f      	ldr	r3, [pc, #188]	; (800bcd8 <mem_free+0x108>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d90d      	bls.n	800bc3e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bc22:	4b29      	ldr	r3, [pc, #164]	; (800bcc8 <mem_free+0xf8>)
 800bc24:	f240 227f 	movw	r2, #639	; 0x27f
 800bc28:	492c      	ldr	r1, [pc, #176]	; (800bcdc <mem_free+0x10c>)
 800bc2a:	4829      	ldr	r0, [pc, #164]	; (800bcd0 <mem_free+0x100>)
 800bc2c:	f00a fb68 	bl	8016300 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc30:	f00a f942 	bl	8015eb8 <sys_arch_protect>
 800bc34:	6138      	str	r0, [r7, #16]
 800bc36:	6938      	ldr	r0, [r7, #16]
 800bc38:	f00a f94c 	bl	8015ed4 <sys_arch_unprotect>
    return;
 800bc3c:	e041      	b.n	800bcc2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc3e:	4828      	ldr	r0, [pc, #160]	; (800bce0 <mem_free+0x110>)
 800bc40:	f00a f8f8 	bl	8015e34 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	791b      	ldrb	r3, [r3, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d110      	bne.n	800bc6e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bc4c:	4b1e      	ldr	r3, [pc, #120]	; (800bcc8 <mem_free+0xf8>)
 800bc4e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bc52:	4924      	ldr	r1, [pc, #144]	; (800bce4 <mem_free+0x114>)
 800bc54:	481e      	ldr	r0, [pc, #120]	; (800bcd0 <mem_free+0x100>)
 800bc56:	f00a fb53 	bl	8016300 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc5a:	4821      	ldr	r0, [pc, #132]	; (800bce0 <mem_free+0x110>)
 800bc5c:	f00a f8f9 	bl	8015e52 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc60:	f00a f92a 	bl	8015eb8 <sys_arch_protect>
 800bc64:	6178      	str	r0, [r7, #20]
 800bc66:	6978      	ldr	r0, [r7, #20]
 800bc68:	f00a f934 	bl	8015ed4 <sys_arch_unprotect>
    return;
 800bc6c:	e029      	b.n	800bcc2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bc6e:	69f8      	ldr	r0, [r7, #28]
 800bc70:	f7ff ff72 	bl	800bb58 <mem_link_valid>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d110      	bne.n	800bc9c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bc7a:	4b13      	ldr	r3, [pc, #76]	; (800bcc8 <mem_free+0xf8>)
 800bc7c:	f240 2295 	movw	r2, #661	; 0x295
 800bc80:	4919      	ldr	r1, [pc, #100]	; (800bce8 <mem_free+0x118>)
 800bc82:	4813      	ldr	r0, [pc, #76]	; (800bcd0 <mem_free+0x100>)
 800bc84:	f00a fb3c 	bl	8016300 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc88:	4815      	ldr	r0, [pc, #84]	; (800bce0 <mem_free+0x110>)
 800bc8a:	f00a f8e2 	bl	8015e52 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc8e:	f00a f913 	bl	8015eb8 <sys_arch_protect>
 800bc92:	61b8      	str	r0, [r7, #24]
 800bc94:	69b8      	ldr	r0, [r7, #24]
 800bc96:	f00a f91d 	bl	8015ed4 <sys_arch_unprotect>
    return;
 800bc9a:	e012      	b.n	800bcc2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bca2:	4b12      	ldr	r3, [pc, #72]	; (800bcec <mem_free+0x11c>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	69fa      	ldr	r2, [r7, #28]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d202      	bcs.n	800bcb2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bcac:	4a0f      	ldr	r2, [pc, #60]	; (800bcec <mem_free+0x11c>)
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bcb2:	69f8      	ldr	r0, [r7, #28]
 800bcb4:	f7ff fe5c 	bl	800b970 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bcb8:	4809      	ldr	r0, [pc, #36]	; (800bce0 <mem_free+0x110>)
 800bcba:	f00a f8ca 	bl	8015e52 <sys_mutex_unlock>
 800bcbe:	e000      	b.n	800bcc2 <mem_free+0xf2>
    return;
 800bcc0:	bf00      	nop
}
 800bcc2:	3720      	adds	r7, #32
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	08017c70 	.word	0x08017c70
 800bccc:	08017d60 	.word	0x08017d60
 800bcd0:	08017cb8 	.word	0x08017cb8
 800bcd4:	2002d368 	.word	0x2002d368
 800bcd8:	2002d36c 	.word	0x2002d36c
 800bcdc:	08017d84 	.word	0x08017d84
 800bce0:	2002d370 	.word	0x2002d370
 800bce4:	08017da0 	.word	0x08017da0
 800bce8:	08017dc8 	.word	0x08017dc8
 800bcec:	2002d374 	.word	0x2002d374

0800bcf0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b088      	sub	sp, #32
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bcfc:	887b      	ldrh	r3, [r7, #2]
 800bcfe:	3303      	adds	r3, #3
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	f023 0303 	bic.w	r3, r3, #3
 800bd06:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bd08:	8bfb      	ldrh	r3, [r7, #30]
 800bd0a:	2b0b      	cmp	r3, #11
 800bd0c:	d801      	bhi.n	800bd12 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bd0e:	230c      	movs	r3, #12
 800bd10:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bd12:	8bfb      	ldrh	r3, [r7, #30]
 800bd14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd18:	d803      	bhi.n	800bd22 <mem_trim+0x32>
 800bd1a:	8bfa      	ldrh	r2, [r7, #30]
 800bd1c:	887b      	ldrh	r3, [r7, #2]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d201      	bcs.n	800bd26 <mem_trim+0x36>
    return NULL;
 800bd22:	2300      	movs	r3, #0
 800bd24:	e0d8      	b.n	800bed8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bd26:	4b6e      	ldr	r3, [pc, #440]	; (800bee0 <mem_trim+0x1f0>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d304      	bcc.n	800bd3a <mem_trim+0x4a>
 800bd30:	4b6c      	ldr	r3, [pc, #432]	; (800bee4 <mem_trim+0x1f4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d306      	bcc.n	800bd48 <mem_trim+0x58>
 800bd3a:	4b6b      	ldr	r3, [pc, #428]	; (800bee8 <mem_trim+0x1f8>)
 800bd3c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bd40:	496a      	ldr	r1, [pc, #424]	; (800beec <mem_trim+0x1fc>)
 800bd42:	486b      	ldr	r0, [pc, #428]	; (800bef0 <mem_trim+0x200>)
 800bd44:	f00a fadc 	bl	8016300 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bd48:	4b65      	ldr	r3, [pc, #404]	; (800bee0 <mem_trim+0x1f0>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d304      	bcc.n	800bd5c <mem_trim+0x6c>
 800bd52:	4b64      	ldr	r3, [pc, #400]	; (800bee4 <mem_trim+0x1f4>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d307      	bcc.n	800bd6c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd5c:	f00a f8ac 	bl	8015eb8 <sys_arch_protect>
 800bd60:	60b8      	str	r0, [r7, #8]
 800bd62:	68b8      	ldr	r0, [r7, #8]
 800bd64:	f00a f8b6 	bl	8015ed4 <sys_arch_unprotect>
    return rmem;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	e0b5      	b.n	800bed8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	3b08      	subs	r3, #8
 800bd70:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bd72:	69b8      	ldr	r0, [r7, #24]
 800bd74:	f7ff fdea 	bl	800b94c <mem_to_ptr>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	881a      	ldrh	r2, [r3, #0]
 800bd80:	8afb      	ldrh	r3, [r7, #22]
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	3b08      	subs	r3, #8
 800bd88:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bd8a:	8bfa      	ldrh	r2, [r7, #30]
 800bd8c:	8abb      	ldrh	r3, [r7, #20]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d906      	bls.n	800bda0 <mem_trim+0xb0>
 800bd92:	4b55      	ldr	r3, [pc, #340]	; (800bee8 <mem_trim+0x1f8>)
 800bd94:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bd98:	4956      	ldr	r1, [pc, #344]	; (800bef4 <mem_trim+0x204>)
 800bd9a:	4855      	ldr	r0, [pc, #340]	; (800bef0 <mem_trim+0x200>)
 800bd9c:	f00a fab0 	bl	8016300 <iprintf>
  if (newsize > size) {
 800bda0:	8bfa      	ldrh	r2, [r7, #30]
 800bda2:	8abb      	ldrh	r3, [r7, #20]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d901      	bls.n	800bdac <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	e095      	b.n	800bed8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bdac:	8bfa      	ldrh	r2, [r7, #30]
 800bdae:	8abb      	ldrh	r3, [r7, #20]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d101      	bne.n	800bdb8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	e08f      	b.n	800bed8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bdb8:	484f      	ldr	r0, [pc, #316]	; (800bef8 <mem_trim+0x208>)
 800bdba:	f00a f83b 	bl	8015e34 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	881b      	ldrh	r3, [r3, #0]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7ff fdb0 	bl	800b928 <ptr_to_mem>
 800bdc8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	791b      	ldrb	r3, [r3, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d13f      	bne.n	800be52 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdda:	d106      	bne.n	800bdea <mem_trim+0xfa>
 800bddc:	4b42      	ldr	r3, [pc, #264]	; (800bee8 <mem_trim+0x1f8>)
 800bdde:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bde2:	4946      	ldr	r1, [pc, #280]	; (800befc <mem_trim+0x20c>)
 800bde4:	4842      	ldr	r0, [pc, #264]	; (800bef0 <mem_trim+0x200>)
 800bde6:	f00a fa8b 	bl	8016300 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bdf0:	8afa      	ldrh	r2, [r7, #22]
 800bdf2:	8bfb      	ldrh	r3, [r7, #30]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	3308      	adds	r3, #8
 800bdfa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bdfc:	4b40      	ldr	r3, [pc, #256]	; (800bf00 <mem_trim+0x210>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	429a      	cmp	r2, r3
 800be04:	d106      	bne.n	800be14 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800be06:	89fb      	ldrh	r3, [r7, #14]
 800be08:	4618      	mov	r0, r3
 800be0a:	f7ff fd8d 	bl	800b928 <ptr_to_mem>
 800be0e:	4603      	mov	r3, r0
 800be10:	4a3b      	ldr	r2, [pc, #236]	; (800bf00 <mem_trim+0x210>)
 800be12:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800be14:	89fb      	ldrh	r3, [r7, #14]
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff fd86 	bl	800b928 <ptr_to_mem>
 800be1c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	2200      	movs	r2, #0
 800be22:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	89ba      	ldrh	r2, [r7, #12]
 800be28:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	8afa      	ldrh	r2, [r7, #22]
 800be2e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	89fa      	ldrh	r2, [r7, #14]
 800be34:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be3e:	d047      	beq.n	800bed0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	4618      	mov	r0, r3
 800be46:	f7ff fd6f 	bl	800b928 <ptr_to_mem>
 800be4a:	4602      	mov	r2, r0
 800be4c:	89fb      	ldrh	r3, [r7, #14]
 800be4e:	8053      	strh	r3, [r2, #2]
 800be50:	e03e      	b.n	800bed0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800be52:	8bfb      	ldrh	r3, [r7, #30]
 800be54:	f103 0214 	add.w	r2, r3, #20
 800be58:	8abb      	ldrh	r3, [r7, #20]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d838      	bhi.n	800bed0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800be5e:	8afa      	ldrh	r2, [r7, #22]
 800be60:	8bfb      	ldrh	r3, [r7, #30]
 800be62:	4413      	add	r3, r2
 800be64:	b29b      	uxth	r3, r3
 800be66:	3308      	adds	r3, #8
 800be68:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be72:	d106      	bne.n	800be82 <mem_trim+0x192>
 800be74:	4b1c      	ldr	r3, [pc, #112]	; (800bee8 <mem_trim+0x1f8>)
 800be76:	f240 3216 	movw	r2, #790	; 0x316
 800be7a:	4920      	ldr	r1, [pc, #128]	; (800befc <mem_trim+0x20c>)
 800be7c:	481c      	ldr	r0, [pc, #112]	; (800bef0 <mem_trim+0x200>)
 800be7e:	f00a fa3f 	bl	8016300 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800be82:	89fb      	ldrh	r3, [r7, #14]
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff fd4f 	bl	800b928 <ptr_to_mem>
 800be8a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800be8c:	4b1c      	ldr	r3, [pc, #112]	; (800bf00 <mem_trim+0x210>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	429a      	cmp	r2, r3
 800be94:	d202      	bcs.n	800be9c <mem_trim+0x1ac>
      lfree = mem2;
 800be96:	4a1a      	ldr	r2, [pc, #104]	; (800bf00 <mem_trim+0x210>)
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	2200      	movs	r2, #0
 800bea0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	881a      	ldrh	r2, [r3, #0]
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	8afa      	ldrh	r2, [r7, #22]
 800beae:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	89fa      	ldrh	r2, [r7, #14]
 800beb4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bebe:	d007      	beq.n	800bed0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff fd2f 	bl	800b928 <ptr_to_mem>
 800beca:	4602      	mov	r2, r0
 800becc:	89fb      	ldrh	r3, [r7, #14]
 800bece:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bed0:	4809      	ldr	r0, [pc, #36]	; (800bef8 <mem_trim+0x208>)
 800bed2:	f009 ffbe 	bl	8015e52 <sys_mutex_unlock>
  return rmem;
 800bed6:	687b      	ldr	r3, [r7, #4]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3720      	adds	r7, #32
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	2002d368 	.word	0x2002d368
 800bee4:	2002d36c 	.word	0x2002d36c
 800bee8:	08017c70 	.word	0x08017c70
 800beec:	08017dfc 	.word	0x08017dfc
 800bef0:	08017cb8 	.word	0x08017cb8
 800bef4:	08017e14 	.word	0x08017e14
 800bef8:	2002d370 	.word	0x2002d370
 800befc:	08017e34 	.word	0x08017e34
 800bf00:	2002d374 	.word	0x2002d374

0800bf04 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bf0e:	88fb      	ldrh	r3, [r7, #6]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <mem_malloc+0x14>
    return NULL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	e0e2      	b.n	800c0de <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bf18:	88fb      	ldrh	r3, [r7, #6]
 800bf1a:	3303      	adds	r3, #3
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	f023 0303 	bic.w	r3, r3, #3
 800bf22:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bf24:	8bbb      	ldrh	r3, [r7, #28]
 800bf26:	2b0b      	cmp	r3, #11
 800bf28:	d801      	bhi.n	800bf2e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bf2a:	230c      	movs	r3, #12
 800bf2c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bf2e:	8bbb      	ldrh	r3, [r7, #28]
 800bf30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf34:	d803      	bhi.n	800bf3e <mem_malloc+0x3a>
 800bf36:	8bba      	ldrh	r2, [r7, #28]
 800bf38:	88fb      	ldrh	r3, [r7, #6]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d201      	bcs.n	800bf42 <mem_malloc+0x3e>
    return NULL;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	e0cd      	b.n	800c0de <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bf42:	4869      	ldr	r0, [pc, #420]	; (800c0e8 <mem_malloc+0x1e4>)
 800bf44:	f009 ff76 	bl	8015e34 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf48:	4b68      	ldr	r3, [pc, #416]	; (800c0ec <mem_malloc+0x1e8>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7ff fcfd 	bl	800b94c <mem_to_ptr>
 800bf52:	4603      	mov	r3, r0
 800bf54:	83fb      	strh	r3, [r7, #30]
 800bf56:	e0b7      	b.n	800c0c8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bf58:	8bfb      	ldrh	r3, [r7, #30]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff fce4 	bl	800b928 <ptr_to_mem>
 800bf60:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	791b      	ldrb	r3, [r3, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f040 80a7 	bne.w	800c0ba <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	461a      	mov	r2, r3
 800bf72:	8bfb      	ldrh	r3, [r7, #30]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	f1a3 0208 	sub.w	r2, r3, #8
 800bf7a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	f0c0 809c 	bcc.w	800c0ba <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	461a      	mov	r2, r3
 800bf88:	8bfb      	ldrh	r3, [r7, #30]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	f1a3 0208 	sub.w	r2, r3, #8
 800bf90:	8bbb      	ldrh	r3, [r7, #28]
 800bf92:	3314      	adds	r3, #20
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d333      	bcc.n	800c000 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bf98:	8bfa      	ldrh	r2, [r7, #30]
 800bf9a:	8bbb      	ldrh	r3, [r7, #28]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bfa4:	8a7b      	ldrh	r3, [r7, #18]
 800bfa6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfaa:	d106      	bne.n	800bfba <mem_malloc+0xb6>
 800bfac:	4b50      	ldr	r3, [pc, #320]	; (800c0f0 <mem_malloc+0x1ec>)
 800bfae:	f240 3287 	movw	r2, #903	; 0x387
 800bfb2:	4950      	ldr	r1, [pc, #320]	; (800c0f4 <mem_malloc+0x1f0>)
 800bfb4:	4850      	ldr	r0, [pc, #320]	; (800c0f8 <mem_malloc+0x1f4>)
 800bfb6:	f00a f9a3 	bl	8016300 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bfba:	8a7b      	ldrh	r3, [r7, #18]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7ff fcb3 	bl	800b928 <ptr_to_mem>
 800bfc2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	881a      	ldrh	r2, [r3, #0]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	8bfa      	ldrh	r2, [r7, #30]
 800bfd6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	8a7a      	ldrh	r2, [r7, #18]
 800bfdc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfec:	d00b      	beq.n	800c006 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	881b      	ldrh	r3, [r3, #0]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff fc98 	bl	800b928 <ptr_to_mem>
 800bff8:	4602      	mov	r2, r0
 800bffa:	8a7b      	ldrh	r3, [r7, #18]
 800bffc:	8053      	strh	r3, [r2, #2]
 800bffe:	e002      	b.n	800c006 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2201      	movs	r2, #1
 800c004:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c006:	4b39      	ldr	r3, [pc, #228]	; (800c0ec <mem_malloc+0x1e8>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d127      	bne.n	800c060 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c010:	4b36      	ldr	r3, [pc, #216]	; (800c0ec <mem_malloc+0x1e8>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c016:	e005      	b.n	800c024 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	881b      	ldrh	r3, [r3, #0]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff fc83 	bl	800b928 <ptr_to_mem>
 800c022:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	791b      	ldrb	r3, [r3, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d004      	beq.n	800c036 <mem_malloc+0x132>
 800c02c:	4b33      	ldr	r3, [pc, #204]	; (800c0fc <mem_malloc+0x1f8>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	69ba      	ldr	r2, [r7, #24]
 800c032:	429a      	cmp	r2, r3
 800c034:	d1f0      	bne.n	800c018 <mem_malloc+0x114>
          }
          lfree = cur;
 800c036:	4a2d      	ldr	r2, [pc, #180]	; (800c0ec <mem_malloc+0x1e8>)
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c03c:	4b2b      	ldr	r3, [pc, #172]	; (800c0ec <mem_malloc+0x1e8>)
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	4b2e      	ldr	r3, [pc, #184]	; (800c0fc <mem_malloc+0x1f8>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	429a      	cmp	r2, r3
 800c046:	d00b      	beq.n	800c060 <mem_malloc+0x15c>
 800c048:	4b28      	ldr	r3, [pc, #160]	; (800c0ec <mem_malloc+0x1e8>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	791b      	ldrb	r3, [r3, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d006      	beq.n	800c060 <mem_malloc+0x15c>
 800c052:	4b27      	ldr	r3, [pc, #156]	; (800c0f0 <mem_malloc+0x1ec>)
 800c054:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c058:	4929      	ldr	r1, [pc, #164]	; (800c100 <mem_malloc+0x1fc>)
 800c05a:	4827      	ldr	r0, [pc, #156]	; (800c0f8 <mem_malloc+0x1f4>)
 800c05c:	f00a f950 	bl	8016300 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c060:	4821      	ldr	r0, [pc, #132]	; (800c0e8 <mem_malloc+0x1e4>)
 800c062:	f009 fef6 	bl	8015e52 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c066:	8bba      	ldrh	r2, [r7, #28]
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	4413      	add	r3, r2
 800c06c:	3308      	adds	r3, #8
 800c06e:	4a23      	ldr	r2, [pc, #140]	; (800c0fc <mem_malloc+0x1f8>)
 800c070:	6812      	ldr	r2, [r2, #0]
 800c072:	4293      	cmp	r3, r2
 800c074:	d906      	bls.n	800c084 <mem_malloc+0x180>
 800c076:	4b1e      	ldr	r3, [pc, #120]	; (800c0f0 <mem_malloc+0x1ec>)
 800c078:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c07c:	4921      	ldr	r1, [pc, #132]	; (800c104 <mem_malloc+0x200>)
 800c07e:	481e      	ldr	r0, [pc, #120]	; (800c0f8 <mem_malloc+0x1f4>)
 800c080:	f00a f93e 	bl	8016300 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	f003 0303 	and.w	r3, r3, #3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d006      	beq.n	800c09c <mem_malloc+0x198>
 800c08e:	4b18      	ldr	r3, [pc, #96]	; (800c0f0 <mem_malloc+0x1ec>)
 800c090:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c094:	491c      	ldr	r1, [pc, #112]	; (800c108 <mem_malloc+0x204>)
 800c096:	4818      	ldr	r0, [pc, #96]	; (800c0f8 <mem_malloc+0x1f4>)
 800c098:	f00a f932 	bl	8016300 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	f003 0303 	and.w	r3, r3, #3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d006      	beq.n	800c0b4 <mem_malloc+0x1b0>
 800c0a6:	4b12      	ldr	r3, [pc, #72]	; (800c0f0 <mem_malloc+0x1ec>)
 800c0a8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c0ac:	4917      	ldr	r1, [pc, #92]	; (800c10c <mem_malloc+0x208>)
 800c0ae:	4812      	ldr	r0, [pc, #72]	; (800c0f8 <mem_malloc+0x1f4>)
 800c0b0:	f00a f926 	bl	8016300 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	3308      	adds	r3, #8
 800c0b8:	e011      	b.n	800c0de <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c0ba:	8bfb      	ldrh	r3, [r7, #30]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff fc33 	bl	800b928 <ptr_to_mem>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c0c8:	8bfa      	ldrh	r2, [r7, #30]
 800c0ca:	8bbb      	ldrh	r3, [r7, #28]
 800c0cc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	f4ff af41 	bcc.w	800bf58 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c0d6:	4804      	ldr	r0, [pc, #16]	; (800c0e8 <mem_malloc+0x1e4>)
 800c0d8:	f009 febb 	bl	8015e52 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3720      	adds	r7, #32
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	2002d370 	.word	0x2002d370
 800c0ec:	2002d374 	.word	0x2002d374
 800c0f0:	08017c70 	.word	0x08017c70
 800c0f4:	08017e34 	.word	0x08017e34
 800c0f8:	08017cb8 	.word	0x08017cb8
 800c0fc:	2002d36c 	.word	0x2002d36c
 800c100:	08017e48 	.word	0x08017e48
 800c104:	08017e64 	.word	0x08017e64
 800c108:	08017e94 	.word	0x08017e94
 800c10c:	08017ec4 	.word	0x08017ec4

0800c110 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	2200      	movs	r2, #0
 800c11e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	3303      	adds	r3, #3
 800c126:	f023 0303 	bic.w	r3, r3, #3
 800c12a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c12c:	2300      	movs	r3, #0
 800c12e:	60fb      	str	r3, [r7, #12]
 800c130:	e011      	b.n	800c156 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	461a      	mov	r2, r3
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	4413      	add	r3, r2
 800c14e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3301      	adds	r3, #1
 800c154:	60fb      	str	r3, [r7, #12]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	885b      	ldrh	r3, [r3, #2]
 800c15a:	461a      	mov	r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4293      	cmp	r3, r2
 800c160:	dbe7      	blt.n	800c132 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c162:	bf00      	nop
 800c164:	bf00      	nop
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c176:	2300      	movs	r3, #0
 800c178:	80fb      	strh	r3, [r7, #6]
 800c17a:	e009      	b.n	800c190 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c17c:	88fb      	ldrh	r3, [r7, #6]
 800c17e:	4a08      	ldr	r2, [pc, #32]	; (800c1a0 <memp_init+0x30>)
 800c180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c184:	4618      	mov	r0, r3
 800c186:	f7ff ffc3 	bl	800c110 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c18a:	88fb      	ldrh	r3, [r7, #6]
 800c18c:	3301      	adds	r3, #1
 800c18e:	80fb      	strh	r3, [r7, #6]
 800c190:	88fb      	ldrh	r3, [r7, #6]
 800c192:	2b0c      	cmp	r3, #12
 800c194:	d9f2      	bls.n	800c17c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c196:	bf00      	nop
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	0801a6d8 	.word	0x0801a6d8

0800c1a4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c1ac:	f009 fe84 	bl	8015eb8 <sys_arch_protect>
 800c1b0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d015      	beq.n	800c1ec <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	6812      	ldr	r2, [r2, #0]
 800c1c8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	f003 0303 	and.w	r3, r3, #3
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d006      	beq.n	800c1e2 <do_memp_malloc_pool+0x3e>
 800c1d4:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <do_memp_malloc_pool+0x58>)
 800c1d6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c1da:	4909      	ldr	r1, [pc, #36]	; (800c200 <do_memp_malloc_pool+0x5c>)
 800c1dc:	4809      	ldr	r0, [pc, #36]	; (800c204 <do_memp_malloc_pool+0x60>)
 800c1de:	f00a f88f 	bl	8016300 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f009 fe76 	bl	8015ed4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	e003      	b.n	800c1f4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f009 fe71 	bl	8015ed4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	08017ee8 	.word	0x08017ee8
 800c200:	08017f18 	.word	0x08017f18
 800c204:	08017f3c 	.word	0x08017f3c

0800c208 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d106      	bne.n	800c224 <memp_malloc_pool+0x1c>
 800c216:	4b0a      	ldr	r3, [pc, #40]	; (800c240 <memp_malloc_pool+0x38>)
 800c218:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c21c:	4909      	ldr	r1, [pc, #36]	; (800c244 <memp_malloc_pool+0x3c>)
 800c21e:	480a      	ldr	r0, [pc, #40]	; (800c248 <memp_malloc_pool+0x40>)
 800c220:	f00a f86e 	bl	8016300 <iprintf>
  if (desc == NULL) {
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d101      	bne.n	800c22e <memp_malloc_pool+0x26>
    return NULL;
 800c22a:	2300      	movs	r3, #0
 800c22c:	e003      	b.n	800c236 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff ffb8 	bl	800c1a4 <do_memp_malloc_pool>
 800c234:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	08017ee8 	.word	0x08017ee8
 800c244:	08017f64 	.word	0x08017f64
 800c248:	08017f3c 	.word	0x08017f3c

0800c24c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	4603      	mov	r3, r0
 800c254:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c256:	79fb      	ldrb	r3, [r7, #7]
 800c258:	2b0c      	cmp	r3, #12
 800c25a:	d908      	bls.n	800c26e <memp_malloc+0x22>
 800c25c:	4b0a      	ldr	r3, [pc, #40]	; (800c288 <memp_malloc+0x3c>)
 800c25e:	f240 1257 	movw	r2, #343	; 0x157
 800c262:	490a      	ldr	r1, [pc, #40]	; (800c28c <memp_malloc+0x40>)
 800c264:	480a      	ldr	r0, [pc, #40]	; (800c290 <memp_malloc+0x44>)
 800c266:	f00a f84b 	bl	8016300 <iprintf>
 800c26a:	2300      	movs	r3, #0
 800c26c:	e008      	b.n	800c280 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c26e:	79fb      	ldrb	r3, [r7, #7]
 800c270:	4a08      	ldr	r2, [pc, #32]	; (800c294 <memp_malloc+0x48>)
 800c272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c276:	4618      	mov	r0, r3
 800c278:	f7ff ff94 	bl	800c1a4 <do_memp_malloc_pool>
 800c27c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c27e:	68fb      	ldr	r3, [r7, #12]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	08017ee8 	.word	0x08017ee8
 800c28c:	08017f78 	.word	0x08017f78
 800c290:	08017f3c 	.word	0x08017f3c
 800c294:	0801a6d8 	.word	0x0801a6d8

0800c298 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	f003 0303 	and.w	r3, r3, #3
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d006      	beq.n	800c2ba <do_memp_free_pool+0x22>
 800c2ac:	4b0d      	ldr	r3, [pc, #52]	; (800c2e4 <do_memp_free_pool+0x4c>)
 800c2ae:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c2b2:	490d      	ldr	r1, [pc, #52]	; (800c2e8 <do_memp_free_pool+0x50>)
 800c2b4:	480d      	ldr	r0, [pc, #52]	; (800c2ec <do_memp_free_pool+0x54>)
 800c2b6:	f00a f823 	bl	8016300 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c2be:	f009 fdfb 	bl	8015eb8 <sys_arch_protect>
 800c2c2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c2d6:	68b8      	ldr	r0, [r7, #8]
 800c2d8:	f009 fdfc 	bl	8015ed4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c2dc:	bf00      	nop
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	08017ee8 	.word	0x08017ee8
 800c2e8:	08017f98 	.word	0x08017f98
 800c2ec:	08017f3c 	.word	0x08017f3c

0800c2f0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d106      	bne.n	800c30e <memp_free_pool+0x1e>
 800c300:	4b0a      	ldr	r3, [pc, #40]	; (800c32c <memp_free_pool+0x3c>)
 800c302:	f240 1295 	movw	r2, #405	; 0x195
 800c306:	490a      	ldr	r1, [pc, #40]	; (800c330 <memp_free_pool+0x40>)
 800c308:	480a      	ldr	r0, [pc, #40]	; (800c334 <memp_free_pool+0x44>)
 800c30a:	f009 fff9 	bl	8016300 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d007      	beq.n	800c324 <memp_free_pool+0x34>
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d004      	beq.n	800c324 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7ff ffbb 	bl	800c298 <do_memp_free_pool>
 800c322:	e000      	b.n	800c326 <memp_free_pool+0x36>
    return;
 800c324:	bf00      	nop
}
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	08017ee8 	.word	0x08017ee8
 800c330:	08017f64 	.word	0x08017f64
 800c334:	08017f3c 	.word	0x08017f3c

0800c338 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	4603      	mov	r3, r0
 800c340:	6039      	str	r1, [r7, #0]
 800c342:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c344:	79fb      	ldrb	r3, [r7, #7]
 800c346:	2b0c      	cmp	r3, #12
 800c348:	d907      	bls.n	800c35a <memp_free+0x22>
 800c34a:	4b0c      	ldr	r3, [pc, #48]	; (800c37c <memp_free+0x44>)
 800c34c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c350:	490b      	ldr	r1, [pc, #44]	; (800c380 <memp_free+0x48>)
 800c352:	480c      	ldr	r0, [pc, #48]	; (800c384 <memp_free+0x4c>)
 800c354:	f009 ffd4 	bl	8016300 <iprintf>
 800c358:	e00c      	b.n	800c374 <memp_free+0x3c>

  if (mem == NULL) {
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d008      	beq.n	800c372 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	4a09      	ldr	r2, [pc, #36]	; (800c388 <memp_free+0x50>)
 800c364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c368:	6839      	ldr	r1, [r7, #0]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff ff94 	bl	800c298 <do_memp_free_pool>
 800c370:	e000      	b.n	800c374 <memp_free+0x3c>
    return;
 800c372:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	08017ee8 	.word	0x08017ee8
 800c380:	08017fb8 	.word	0x08017fb8
 800c384:	08017f3c 	.word	0x08017f3c
 800c388:	0801a6d8 	.word	0x0801a6d8

0800c38c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c38c:	b480      	push	{r7}
 800c38e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c390:	bf00      	nop
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
	...

0800c39c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b086      	sub	sp, #24
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d108      	bne.n	800c3c2 <netif_add+0x26>
 800c3b0:	4b57      	ldr	r3, [pc, #348]	; (800c510 <netif_add+0x174>)
 800c3b2:	f240 1227 	movw	r2, #295	; 0x127
 800c3b6:	4957      	ldr	r1, [pc, #348]	; (800c514 <netif_add+0x178>)
 800c3b8:	4857      	ldr	r0, [pc, #348]	; (800c518 <netif_add+0x17c>)
 800c3ba:	f009 ffa1 	bl	8016300 <iprintf>
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e0a2      	b.n	800c508 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d108      	bne.n	800c3da <netif_add+0x3e>
 800c3c8:	4b51      	ldr	r3, [pc, #324]	; (800c510 <netif_add+0x174>)
 800c3ca:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c3ce:	4953      	ldr	r1, [pc, #332]	; (800c51c <netif_add+0x180>)
 800c3d0:	4851      	ldr	r0, [pc, #324]	; (800c518 <netif_add+0x17c>)
 800c3d2:	f009 ff95 	bl	8016300 <iprintf>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	e096      	b.n	800c508 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d101      	bne.n	800c3e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c3e0:	4b4f      	ldr	r3, [pc, #316]	; (800c520 <netif_add+0x184>)
 800c3e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c3ea:	4b4d      	ldr	r3, [pc, #308]	; (800c520 <netif_add+0x184>)
 800c3ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d101      	bne.n	800c3f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c3f4:	4b4a      	ldr	r3, [pc, #296]	; (800c520 <netif_add+0x184>)
 800c3f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2200      	movs	r2, #0
 800c402:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	4a45      	ldr	r2, [pc, #276]	; (800c524 <netif_add+0x188>)
 800c40e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6a3a      	ldr	r2, [r7, #32]
 800c428:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c42a:	4b3f      	ldr	r3, [pc, #252]	; (800c528 <netif_add+0x18c>)
 800c42c:	781a      	ldrb	r2, [r3, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c438:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	68b9      	ldr	r1, [r7, #8]
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f000 f913 	bl	800c66c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	4798      	blx	r3
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <netif_add+0xba>
    return NULL;
 800c452:	2300      	movs	r3, #0
 800c454:	e058      	b.n	800c508 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c45c:	2bff      	cmp	r3, #255	; 0xff
 800c45e:	d103      	bne.n	800c468 <netif_add+0xcc>
        netif->num = 0;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c46c:	4b2f      	ldr	r3, [pc, #188]	; (800c52c <netif_add+0x190>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	e02b      	b.n	800c4cc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c474:	697a      	ldr	r2, [r7, #20]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d106      	bne.n	800c48a <netif_add+0xee>
 800c47c:	4b24      	ldr	r3, [pc, #144]	; (800c510 <netif_add+0x174>)
 800c47e:	f240 128b 	movw	r2, #395	; 0x18b
 800c482:	492b      	ldr	r1, [pc, #172]	; (800c530 <netif_add+0x194>)
 800c484:	4824      	ldr	r0, [pc, #144]	; (800c518 <netif_add+0x17c>)
 800c486:	f009 ff3b 	bl	8016300 <iprintf>
        num_netifs++;
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	3301      	adds	r3, #1
 800c48e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	2bff      	cmp	r3, #255	; 0xff
 800c494:	dd06      	ble.n	800c4a4 <netif_add+0x108>
 800c496:	4b1e      	ldr	r3, [pc, #120]	; (800c510 <netif_add+0x174>)
 800c498:	f240 128d 	movw	r2, #397	; 0x18d
 800c49c:	4925      	ldr	r1, [pc, #148]	; (800c534 <netif_add+0x198>)
 800c49e:	481e      	ldr	r0, [pc, #120]	; (800c518 <netif_add+0x17c>)
 800c4a0:	f009 ff2e 	bl	8016300 <iprintf>
        if (netif2->num == netif->num) {
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d108      	bne.n	800c4c6 <netif_add+0x12a>
          netif->num++;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c4c4:	e005      	b.n	800c4d2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	617b      	str	r3, [r7, #20]
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1d0      	bne.n	800c474 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1be      	bne.n	800c456 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c4de:	2bfe      	cmp	r3, #254	; 0xfe
 800c4e0:	d103      	bne.n	800c4ea <netif_add+0x14e>
    netif_num = 0;
 800c4e2:	4b11      	ldr	r3, [pc, #68]	; (800c528 <netif_add+0x18c>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	701a      	strb	r2, [r3, #0]
 800c4e8:	e006      	b.n	800c4f8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	b2da      	uxtb	r2, r3
 800c4f4:	4b0c      	ldr	r3, [pc, #48]	; (800c528 <netif_add+0x18c>)
 800c4f6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c4f8:	4b0c      	ldr	r3, [pc, #48]	; (800c52c <netif_add+0x190>)
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c500:	4a0a      	ldr	r2, [pc, #40]	; (800c52c <netif_add+0x190>)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c506:	68fb      	ldr	r3, [r7, #12]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3718      	adds	r7, #24
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	08017fd4 	.word	0x08017fd4
 800c514:	08018068 	.word	0x08018068
 800c518:	08018024 	.word	0x08018024
 800c51c:	08018084 	.word	0x08018084
 800c520:	0801a74c 	.word	0x0801a74c
 800c524:	0800c947 	.word	0x0800c947
 800c528:	2003044c 	.word	0x2003044c
 800c52c:	20030444 	.word	0x20030444
 800c530:	080180a8 	.word	0x080180a8
 800c534:	080180bc 	.word	0x080180bc

0800c538 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c542:	6839      	ldr	r1, [r7, #0]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f002 fc7b 	bl	800ee40 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f007 f8c5 	bl	80136dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c552:	bf00      	nop
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
	...

0800c55c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b086      	sub	sp, #24
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d106      	bne.n	800c57c <netif_do_set_ipaddr+0x20>
 800c56e:	4b1d      	ldr	r3, [pc, #116]	; (800c5e4 <netif_do_set_ipaddr+0x88>)
 800c570:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c574:	491c      	ldr	r1, [pc, #112]	; (800c5e8 <netif_do_set_ipaddr+0x8c>)
 800c576:	481d      	ldr	r0, [pc, #116]	; (800c5ec <netif_do_set_ipaddr+0x90>)
 800c578:	f009 fec2 	bl	8016300 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d106      	bne.n	800c590 <netif_do_set_ipaddr+0x34>
 800c582:	4b18      	ldr	r3, [pc, #96]	; (800c5e4 <netif_do_set_ipaddr+0x88>)
 800c584:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c588:	4917      	ldr	r1, [pc, #92]	; (800c5e8 <netif_do_set_ipaddr+0x8c>)
 800c58a:	4818      	ldr	r0, [pc, #96]	; (800c5ec <netif_do_set_ipaddr+0x90>)
 800c58c:	f009 feb8 	bl	8016300 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	3304      	adds	r3, #4
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d01c      	beq.n	800c5d8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c5ae:	f107 0314 	add.w	r3, r7, #20
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7ff ffbf 	bl	800c538 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <netif_do_set_ipaddr+0x6a>
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	e000      	b.n	800c5c8 <netif_do_set_ipaddr+0x6c>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f000 f8d2 	bl	800c778 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	e000      	b.n	800c5da <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3718      	adds	r7, #24
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	08017fd4 	.word	0x08017fd4
 800c5e8:	080180ec 	.word	0x080180ec
 800c5ec:	08018024 	.word	0x08018024

0800c5f0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	3308      	adds	r3, #8
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	429a      	cmp	r2, r3
 800c608:	d00a      	beq.n	800c620 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <netif_do_set_netmask+0x26>
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	e000      	b.n	800c618 <netif_do_set_netmask+0x28>
 800c616:	2300      	movs	r3, #0
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c61c:	2301      	movs	r3, #1
 800c61e:	e000      	b.n	800c622 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3714      	adds	r7, #20
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c62e:	b480      	push	{r7}
 800c630:	b085      	sub	sp, #20
 800c632:	af00      	add	r7, sp, #0
 800c634:	60f8      	str	r0, [r7, #12]
 800c636:	60b9      	str	r1, [r7, #8]
 800c638:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	330c      	adds	r3, #12
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	429a      	cmp	r2, r3
 800c646:	d00a      	beq.n	800c65e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d002      	beq.n	800c654 <netif_do_set_gw+0x26>
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	e000      	b.n	800c656 <netif_do_set_gw+0x28>
 800c654:	2300      	movs	r3, #0
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c65a:	2301      	movs	r3, #1
 800c65c:	e000      	b.n	800c660 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3714      	adds	r7, #20
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b088      	sub	sp, #32
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
 800c678:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c67a:	2300      	movs	r3, #0
 800c67c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c67e:	2300      	movs	r3, #0
 800c680:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c688:	4b1c      	ldr	r3, [pc, #112]	; (800c6fc <netif_set_addr+0x90>)
 800c68a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c692:	4b1a      	ldr	r3, [pc, #104]	; (800c6fc <netif_set_addr+0x90>)
 800c694:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d101      	bne.n	800c6a0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c69c:	4b17      	ldr	r3, [pc, #92]	; (800c6fc <netif_set_addr+0x90>)
 800c69e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d003      	beq.n	800c6ae <netif_set_addr+0x42>
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <netif_set_addr+0x46>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e000      	b.n	800c6b4 <netif_set_addr+0x48>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d006      	beq.n	800c6ca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c6bc:	f107 0310 	add.w	r3, r7, #16
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	68b9      	ldr	r1, [r7, #8]
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f7ff ff49 	bl	800c55c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c6ca:	69fa      	ldr	r2, [r7, #28]
 800c6cc:	6879      	ldr	r1, [r7, #4]
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f7ff ff8e 	bl	800c5f0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c6d4:	69ba      	ldr	r2, [r7, #24]
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f7ff ffa8 	bl	800c62e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d106      	bne.n	800c6f2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c6e4:	f107 0310 	add.w	r3, r7, #16
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f7ff ff35 	bl	800c55c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c6f2:	bf00      	nop
 800c6f4:	3720      	adds	r7, #32
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	0801a74c 	.word	0x0801a74c

0800c700 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c708:	4a04      	ldr	r2, [pc, #16]	; (800c71c <netif_set_default+0x1c>)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c70e:	bf00      	nop
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	20030448 	.word	0x20030448

0800c720 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d107      	bne.n	800c73e <netif_set_up+0x1e>
 800c72e:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <netif_set_up+0x4c>)
 800c730:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c734:	490e      	ldr	r1, [pc, #56]	; (800c770 <netif_set_up+0x50>)
 800c736:	480f      	ldr	r0, [pc, #60]	; (800c774 <netif_set_up+0x54>)
 800c738:	f009 fde2 	bl	8016300 <iprintf>
 800c73c:	e013      	b.n	800c766 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10c      	bne.n	800c766 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c752:	f043 0301 	orr.w	r3, r3, #1
 800c756:	b2da      	uxtb	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c75e:	2103      	movs	r1, #3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 f809 	bl	800c778 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	08017fd4 	.word	0x08017fd4
 800c770:	0801815c 	.word	0x0801815c
 800c774:	08018024 	.word	0x08018024

0800c778 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d106      	bne.n	800c798 <netif_issue_reports+0x20>
 800c78a:	4b18      	ldr	r3, [pc, #96]	; (800c7ec <netif_issue_reports+0x74>)
 800c78c:	f240 326d 	movw	r2, #877	; 0x36d
 800c790:	4917      	ldr	r1, [pc, #92]	; (800c7f0 <netif_issue_reports+0x78>)
 800c792:	4818      	ldr	r0, [pc, #96]	; (800c7f4 <netif_issue_reports+0x7c>)
 800c794:	f009 fdb4 	bl	8016300 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c79e:	f003 0304 	and.w	r3, r3, #4
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d01e      	beq.n	800c7e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d017      	beq.n	800c7e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c7b4:	78fb      	ldrb	r3, [r7, #3]
 800c7b6:	f003 0301 	and.w	r3, r3, #1
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d013      	beq.n	800c7e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00e      	beq.n	800c7e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7ce:	f003 0308 	and.w	r3, r3, #8
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d007      	beq.n	800c7e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3304      	adds	r3, #4
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f007 fee7 	bl	80145b0 <etharp_request>
 800c7e2:	e000      	b.n	800c7e6 <netif_issue_reports+0x6e>
    return;
 800c7e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	08017fd4 	.word	0x08017fd4
 800c7f0:	08018178 	.word	0x08018178
 800c7f4:	08018024 	.word	0x08018024

0800c7f8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d107      	bne.n	800c816 <netif_set_down+0x1e>
 800c806:	4b12      	ldr	r3, [pc, #72]	; (800c850 <netif_set_down+0x58>)
 800c808:	f240 329b 	movw	r2, #923	; 0x39b
 800c80c:	4911      	ldr	r1, [pc, #68]	; (800c854 <netif_set_down+0x5c>)
 800c80e:	4812      	ldr	r0, [pc, #72]	; (800c858 <netif_set_down+0x60>)
 800c810:	f009 fd76 	bl	8016300 <iprintf>
 800c814:	e019      	b.n	800c84a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c81c:	f003 0301 	and.w	r3, r3, #1
 800c820:	2b00      	cmp	r3, #0
 800c822:	d012      	beq.n	800c84a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c82a:	f023 0301 	bic.w	r3, r3, #1
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c83c:	f003 0308 	and.w	r3, r3, #8
 800c840:	2b00      	cmp	r3, #0
 800c842:	d002      	beq.n	800c84a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f007 fa71 	bl	8013d2c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	08017fd4 	.word	0x08017fd4
 800c854:	0801819c 	.word	0x0801819c
 800c858:	08018024 	.word	0x08018024

0800c85c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d107      	bne.n	800c87a <netif_set_link_up+0x1e>
 800c86a:	4b13      	ldr	r3, [pc, #76]	; (800c8b8 <netif_set_link_up+0x5c>)
 800c86c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c870:	4912      	ldr	r1, [pc, #72]	; (800c8bc <netif_set_link_up+0x60>)
 800c872:	4813      	ldr	r0, [pc, #76]	; (800c8c0 <netif_set_link_up+0x64>)
 800c874:	f009 fd44 	bl	8016300 <iprintf>
 800c878:	e01b      	b.n	800c8b2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b00      	cmp	r3, #0
 800c886:	d114      	bne.n	800c8b2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c88e:	f043 0304 	orr.w	r3, r3, #4
 800c892:	b2da      	uxtb	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c89a:	2103      	movs	r1, #3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f7ff ff6b 	bl	800c778 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d003      	beq.n	800c8b2 <netif_set_link_up+0x56>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	69db      	ldr	r3, [r3, #28]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	08017fd4 	.word	0x08017fd4
 800c8bc:	080181bc 	.word	0x080181bc
 800c8c0:	08018024 	.word	0x08018024

0800c8c4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d107      	bne.n	800c8e2 <netif_set_link_down+0x1e>
 800c8d2:	4b11      	ldr	r3, [pc, #68]	; (800c918 <netif_set_link_down+0x54>)
 800c8d4:	f240 4206 	movw	r2, #1030	; 0x406
 800c8d8:	4910      	ldr	r1, [pc, #64]	; (800c91c <netif_set_link_down+0x58>)
 800c8da:	4811      	ldr	r0, [pc, #68]	; (800c920 <netif_set_link_down+0x5c>)
 800c8dc:	f009 fd10 	bl	8016300 <iprintf>
 800c8e0:	e017      	b.n	800c912 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c8e8:	f003 0304 	and.w	r3, r3, #4
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d010      	beq.n	800c912 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c8f6:	f023 0304 	bic.w	r3, r3, #4
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	69db      	ldr	r3, [r3, #28]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <netif_set_link_down+0x4e>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	08017fd4 	.word	0x08017fd4
 800c91c:	080181e0 	.word	0x080181e0
 800c920:	08018024 	.word	0x08018024

0800c924 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d002      	beq.n	800c93a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	61da      	str	r2, [r3, #28]
  }
}
 800c93a:	bf00      	nop
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c946:	b480      	push	{r7}
 800c948:	b085      	sub	sp, #20
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	60f8      	str	r0, [r7, #12]
 800c94e:	60b9      	str	r1, [r7, #8]
 800c950:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c952:	f06f 030b 	mvn.w	r3, #11
}
 800c956:	4618      	mov	r0, r3
 800c958:	3714      	adds	r7, #20
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr
	...

0800c964 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	4603      	mov	r3, r0
 800c96c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d013      	beq.n	800c99c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c974:	4b0d      	ldr	r3, [pc, #52]	; (800c9ac <netif_get_by_index+0x48>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	60fb      	str	r3, [r7, #12]
 800c97a:	e00c      	b.n	800c996 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c982:	3301      	adds	r3, #1
 800c984:	b2db      	uxtb	r3, r3
 800c986:	79fa      	ldrb	r2, [r7, #7]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d101      	bne.n	800c990 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	e006      	b.n	800c99e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	60fb      	str	r3, [r7, #12]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1ef      	bne.n	800c97c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	20030444 	.word	0x20030444

0800c9b0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c9b6:	f009 fa7f 	bl	8015eb8 <sys_arch_protect>
 800c9ba:	6038      	str	r0, [r7, #0]
 800c9bc:	4b0d      	ldr	r3, [pc, #52]	; (800c9f4 <pbuf_free_ooseq+0x44>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	6838      	ldr	r0, [r7, #0]
 800c9c4:	f009 fa86 	bl	8015ed4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c9c8:	4b0b      	ldr	r3, [pc, #44]	; (800c9f8 <pbuf_free_ooseq+0x48>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	607b      	str	r3, [r7, #4]
 800c9ce:	e00a      	b.n	800c9e6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d003      	beq.n	800c9e0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f002 fa6f 	bl	800eebc <tcp_free_ooseq>
      return;
 800c9de:	e005      	b.n	800c9ec <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	607b      	str	r3, [r7, #4]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1f1      	bne.n	800c9d0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	2003044d 	.word	0x2003044d
 800c9f8:	2003045c 	.word	0x2003045c

0800c9fc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ca04:	f7ff ffd4 	bl	800c9b0 <pbuf_free_ooseq>
}
 800ca08:	bf00      	nop
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ca16:	f009 fa4f 	bl	8015eb8 <sys_arch_protect>
 800ca1a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ca1c:	4b0f      	ldr	r3, [pc, #60]	; (800ca5c <pbuf_pool_is_empty+0x4c>)
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ca22:	4b0e      	ldr	r3, [pc, #56]	; (800ca5c <pbuf_pool_is_empty+0x4c>)
 800ca24:	2201      	movs	r2, #1
 800ca26:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f009 fa53 	bl	8015ed4 <sys_arch_unprotect>

  if (!queued) {
 800ca2e:	78fb      	ldrb	r3, [r7, #3]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10f      	bne.n	800ca54 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ca34:	2100      	movs	r1, #0
 800ca36:	480a      	ldr	r0, [pc, #40]	; (800ca60 <pbuf_pool_is_empty+0x50>)
 800ca38:	f7fe fa2a 	bl	800ae90 <tcpip_try_callback>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d008      	beq.n	800ca54 <pbuf_pool_is_empty+0x44>
 800ca42:	f009 fa39 	bl	8015eb8 <sys_arch_protect>
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	4b04      	ldr	r3, [pc, #16]	; (800ca5c <pbuf_pool_is_empty+0x4c>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	701a      	strb	r2, [r3, #0]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f009 fa40 	bl	8015ed4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	2003044d 	.word	0x2003044d
 800ca60:	0800c9fd 	.word	0x0800c9fd

0800ca64 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	4611      	mov	r1, r2
 800ca70:	461a      	mov	r2, r3
 800ca72:	460b      	mov	r3, r1
 800ca74:	80fb      	strh	r3, [r7, #6]
 800ca76:	4613      	mov	r3, r2
 800ca78:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	88fa      	ldrh	r2, [r7, #6]
 800ca8a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	88ba      	ldrh	r2, [r7, #4]
 800ca90:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ca92:	8b3b      	ldrh	r3, [r7, #24]
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	7f3a      	ldrb	r2, [r7, #28]
 800ca9e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2201      	movs	r2, #1
 800caa4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2200      	movs	r2, #0
 800caaa:	73da      	strb	r2, [r3, #15]
}
 800caac:	bf00      	nop
 800caae:	3714      	adds	r7, #20
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08c      	sub	sp, #48	; 0x30
 800cabc:	af02      	add	r7, sp, #8
 800cabe:	4603      	mov	r3, r0
 800cac0:	71fb      	strb	r3, [r7, #7]
 800cac2:	460b      	mov	r3, r1
 800cac4:	80bb      	strh	r3, [r7, #4]
 800cac6:	4613      	mov	r3, r2
 800cac8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800caca:	79fb      	ldrb	r3, [r7, #7]
 800cacc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cace:	887b      	ldrh	r3, [r7, #2]
 800cad0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cad4:	d07f      	beq.n	800cbd6 <pbuf_alloc+0x11e>
 800cad6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cada:	f300 80c8 	bgt.w	800cc6e <pbuf_alloc+0x1b6>
 800cade:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cae2:	d010      	beq.n	800cb06 <pbuf_alloc+0x4e>
 800cae4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cae8:	f300 80c1 	bgt.w	800cc6e <pbuf_alloc+0x1b6>
 800caec:	2b01      	cmp	r3, #1
 800caee:	d002      	beq.n	800caf6 <pbuf_alloc+0x3e>
 800caf0:	2b41      	cmp	r3, #65	; 0x41
 800caf2:	f040 80bc 	bne.w	800cc6e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800caf6:	887a      	ldrh	r2, [r7, #2]
 800caf8:	88bb      	ldrh	r3, [r7, #4]
 800cafa:	4619      	mov	r1, r3
 800cafc:	2000      	movs	r0, #0
 800cafe:	f000 f8d1 	bl	800cca4 <pbuf_alloc_reference>
 800cb02:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cb04:	e0bd      	b.n	800cc82 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cb0e:	88bb      	ldrh	r3, [r7, #4]
 800cb10:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cb12:	200c      	movs	r0, #12
 800cb14:	f7ff fb9a 	bl	800c24c <memp_malloc>
 800cb18:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d109      	bne.n	800cb34 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cb20:	f7ff ff76 	bl	800ca10 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d002      	beq.n	800cb30 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cb2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb2c:	f000 faa8 	bl	800d080 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cb30:	2300      	movs	r3, #0
 800cb32:	e0a7      	b.n	800cc84 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cb34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb36:	3303      	adds	r3, #3
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	f023 0303 	bic.w	r3, r3, #3
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	8b7a      	ldrh	r2, [r7, #26]
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	bf28      	it	cs
 800cb4c:	4613      	movcs	r3, r2
 800cb4e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cb50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb52:	3310      	adds	r3, #16
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	4413      	add	r3, r2
 800cb58:	3303      	adds	r3, #3
 800cb5a:	f023 0303 	bic.w	r3, r3, #3
 800cb5e:	4618      	mov	r0, r3
 800cb60:	89f9      	ldrh	r1, [r7, #14]
 800cb62:	8b7a      	ldrh	r2, [r7, #26]
 800cb64:	2300      	movs	r3, #0
 800cb66:	9301      	str	r3, [sp, #4]
 800cb68:	887b      	ldrh	r3, [r7, #2]
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	4601      	mov	r1, r0
 800cb70:	6938      	ldr	r0, [r7, #16]
 800cb72:	f7ff ff77 	bl	800ca64 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	f003 0303 	and.w	r3, r3, #3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d006      	beq.n	800cb90 <pbuf_alloc+0xd8>
 800cb82:	4b42      	ldr	r3, [pc, #264]	; (800cc8c <pbuf_alloc+0x1d4>)
 800cb84:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb88:	4941      	ldr	r1, [pc, #260]	; (800cc90 <pbuf_alloc+0x1d8>)
 800cb8a:	4842      	ldr	r0, [pc, #264]	; (800cc94 <pbuf_alloc+0x1dc>)
 800cb8c:	f009 fbb8 	bl	8016300 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cb90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb92:	3303      	adds	r3, #3
 800cb94:	f023 0303 	bic.w	r3, r3, #3
 800cb98:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cb9c:	d106      	bne.n	800cbac <pbuf_alloc+0xf4>
 800cb9e:	4b3b      	ldr	r3, [pc, #236]	; (800cc8c <pbuf_alloc+0x1d4>)
 800cba0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cba4:	493c      	ldr	r1, [pc, #240]	; (800cc98 <pbuf_alloc+0x1e0>)
 800cba6:	483b      	ldr	r0, [pc, #236]	; (800cc94 <pbuf_alloc+0x1dc>)
 800cba8:	f009 fbaa 	bl	8016300 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d102      	bne.n	800cbb8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb6:	e002      	b.n	800cbbe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	693a      	ldr	r2, [r7, #16]
 800cbbc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cbc2:	8b7a      	ldrh	r2, [r7, #26]
 800cbc4:	89fb      	ldrh	r3, [r7, #14]
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cbce:	8b7b      	ldrh	r3, [r7, #26]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d19e      	bne.n	800cb12 <pbuf_alloc+0x5a>
      break;
 800cbd4:	e055      	b.n	800cc82 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cbd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbd8:	3303      	adds	r3, #3
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	f023 0303 	bic.w	r3, r3, #3
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	88bb      	ldrh	r3, [r7, #4]
 800cbe4:	3303      	adds	r3, #3
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	f023 0303 	bic.w	r3, r3, #3
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	4413      	add	r3, r2
 800cbf0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cbf2:	8b3b      	ldrh	r3, [r7, #24]
 800cbf4:	3310      	adds	r3, #16
 800cbf6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cbf8:	8b3a      	ldrh	r2, [r7, #24]
 800cbfa:	88bb      	ldrh	r3, [r7, #4]
 800cbfc:	3303      	adds	r3, #3
 800cbfe:	f023 0303 	bic.w	r3, r3, #3
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d306      	bcc.n	800cc14 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cc06:	8afa      	ldrh	r2, [r7, #22]
 800cc08:	88bb      	ldrh	r3, [r7, #4]
 800cc0a:	3303      	adds	r3, #3
 800cc0c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d201      	bcs.n	800cc18 <pbuf_alloc+0x160>
        return NULL;
 800cc14:	2300      	movs	r3, #0
 800cc16:	e035      	b.n	800cc84 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cc18:	8afb      	ldrh	r3, [r7, #22]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7ff f972 	bl	800bf04 <mem_malloc>
 800cc20:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d101      	bne.n	800cc2c <pbuf_alloc+0x174>
        return NULL;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	e02b      	b.n	800cc84 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cc2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc2e:	3310      	adds	r3, #16
 800cc30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc32:	4413      	add	r3, r2
 800cc34:	3303      	adds	r3, #3
 800cc36:	f023 0303 	bic.w	r3, r3, #3
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	88b9      	ldrh	r1, [r7, #4]
 800cc3e:	88ba      	ldrh	r2, [r7, #4]
 800cc40:	2300      	movs	r3, #0
 800cc42:	9301      	str	r3, [sp, #4]
 800cc44:	887b      	ldrh	r3, [r7, #2]
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	4601      	mov	r1, r0
 800cc4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc4e:	f7ff ff09 	bl	800ca64 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	f003 0303 	and.w	r3, r3, #3
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d010      	beq.n	800cc80 <pbuf_alloc+0x1c8>
 800cc5e:	4b0b      	ldr	r3, [pc, #44]	; (800cc8c <pbuf_alloc+0x1d4>)
 800cc60:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cc64:	490d      	ldr	r1, [pc, #52]	; (800cc9c <pbuf_alloc+0x1e4>)
 800cc66:	480b      	ldr	r0, [pc, #44]	; (800cc94 <pbuf_alloc+0x1dc>)
 800cc68:	f009 fb4a 	bl	8016300 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cc6c:	e008      	b.n	800cc80 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cc6e:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <pbuf_alloc+0x1d4>)
 800cc70:	f240 1227 	movw	r2, #295	; 0x127
 800cc74:	490a      	ldr	r1, [pc, #40]	; (800cca0 <pbuf_alloc+0x1e8>)
 800cc76:	4807      	ldr	r0, [pc, #28]	; (800cc94 <pbuf_alloc+0x1dc>)
 800cc78:	f009 fb42 	bl	8016300 <iprintf>
      return NULL;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	e001      	b.n	800cc84 <pbuf_alloc+0x1cc>
      break;
 800cc80:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3728      	adds	r7, #40	; 0x28
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	08018204 	.word	0x08018204
 800cc90:	08018234 	.word	0x08018234
 800cc94:	08018264 	.word	0x08018264
 800cc98:	0801828c 	.word	0x0801828c
 800cc9c:	080182c0 	.word	0x080182c0
 800cca0:	080182ec 	.word	0x080182ec

0800cca4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	807b      	strh	r3, [r7, #2]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ccb4:	883b      	ldrh	r3, [r7, #0]
 800ccb6:	2b41      	cmp	r3, #65	; 0x41
 800ccb8:	d009      	beq.n	800ccce <pbuf_alloc_reference+0x2a>
 800ccba:	883b      	ldrh	r3, [r7, #0]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d006      	beq.n	800ccce <pbuf_alloc_reference+0x2a>
 800ccc0:	4b0f      	ldr	r3, [pc, #60]	; (800cd00 <pbuf_alloc_reference+0x5c>)
 800ccc2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ccc6:	490f      	ldr	r1, [pc, #60]	; (800cd04 <pbuf_alloc_reference+0x60>)
 800ccc8:	480f      	ldr	r0, [pc, #60]	; (800cd08 <pbuf_alloc_reference+0x64>)
 800ccca:	f009 fb19 	bl	8016300 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ccce:	200b      	movs	r0, #11
 800ccd0:	f7ff fabc 	bl	800c24c <memp_malloc>
 800ccd4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d101      	bne.n	800cce0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	e00b      	b.n	800ccf8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cce0:	8879      	ldrh	r1, [r7, #2]
 800cce2:	887a      	ldrh	r2, [r7, #2]
 800cce4:	2300      	movs	r3, #0
 800cce6:	9301      	str	r3, [sp, #4]
 800cce8:	883b      	ldrh	r3, [r7, #0]
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	460b      	mov	r3, r1
 800ccee:	6879      	ldr	r1, [r7, #4]
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f7ff feb7 	bl	800ca64 <pbuf_init_alloced_pbuf>
  return p;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	08018204 	.word	0x08018204
 800cd04:	08018308 	.word	0x08018308
 800cd08:	08018264 	.word	0x08018264

0800cd0c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af02      	add	r7, sp, #8
 800cd12:	607b      	str	r3, [r7, #4]
 800cd14:	4603      	mov	r3, r0
 800cd16:	73fb      	strb	r3, [r7, #15]
 800cd18:	460b      	mov	r3, r1
 800cd1a:	81bb      	strh	r3, [r7, #12]
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cd20:	7bfb      	ldrb	r3, [r7, #15]
 800cd22:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cd24:	8a7b      	ldrh	r3, [r7, #18]
 800cd26:	3303      	adds	r3, #3
 800cd28:	f023 0203 	bic.w	r2, r3, #3
 800cd2c:	89bb      	ldrh	r3, [r7, #12]
 800cd2e:	441a      	add	r2, r3
 800cd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d901      	bls.n	800cd3a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	e018      	b.n	800cd6c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cd3a:	6a3b      	ldr	r3, [r7, #32]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d007      	beq.n	800cd50 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cd40:	8a7b      	ldrh	r3, [r7, #18]
 800cd42:	3303      	adds	r3, #3
 800cd44:	f023 0303 	bic.w	r3, r3, #3
 800cd48:	6a3a      	ldr	r2, [r7, #32]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	617b      	str	r3, [r7, #20]
 800cd4e:	e001      	b.n	800cd54 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cd50:	2300      	movs	r3, #0
 800cd52:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	89b9      	ldrh	r1, [r7, #12]
 800cd58:	89ba      	ldrh	r2, [r7, #12]
 800cd5a:	2302      	movs	r3, #2
 800cd5c:	9301      	str	r3, [sp, #4]
 800cd5e:	897b      	ldrh	r3, [r7, #10]
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	460b      	mov	r3, r1
 800cd64:	6979      	ldr	r1, [r7, #20]
 800cd66:	f7ff fe7d 	bl	800ca64 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cd6a:	687b      	ldr	r3, [r7, #4]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3718      	adds	r7, #24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d106      	bne.n	800cd94 <pbuf_realloc+0x20>
 800cd86:	4b3a      	ldr	r3, [pc, #232]	; (800ce70 <pbuf_realloc+0xfc>)
 800cd88:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cd8c:	4939      	ldr	r1, [pc, #228]	; (800ce74 <pbuf_realloc+0x100>)
 800cd8e:	483a      	ldr	r0, [pc, #232]	; (800ce78 <pbuf_realloc+0x104>)
 800cd90:	f009 fab6 	bl	8016300 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	891b      	ldrh	r3, [r3, #8]
 800cd98:	887a      	ldrh	r2, [r7, #2]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d263      	bcs.n	800ce66 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	891a      	ldrh	r2, [r3, #8]
 800cda2:	887b      	ldrh	r3, [r7, #2]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cda8:	887b      	ldrh	r3, [r7, #2]
 800cdaa:	817b      	strh	r3, [r7, #10]
  q = p;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cdb0:	e018      	b.n	800cde4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	895b      	ldrh	r3, [r3, #10]
 800cdb6:	897a      	ldrh	r2, [r7, #10]
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	891a      	ldrh	r2, [r3, #8]
 800cdc0:	893b      	ldrh	r3, [r7, #8]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <pbuf_realloc+0x70>
 800cdd6:	4b26      	ldr	r3, [pc, #152]	; (800ce70 <pbuf_realloc+0xfc>)
 800cdd8:	f240 12af 	movw	r2, #431	; 0x1af
 800cddc:	4927      	ldr	r1, [pc, #156]	; (800ce7c <pbuf_realloc+0x108>)
 800cdde:	4826      	ldr	r0, [pc, #152]	; (800ce78 <pbuf_realloc+0x104>)
 800cde0:	f009 fa8e 	bl	8016300 <iprintf>
  while (rem_len > q->len) {
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	895b      	ldrh	r3, [r3, #10]
 800cde8:	897a      	ldrh	r2, [r7, #10]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d8e1      	bhi.n	800cdb2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	7b1b      	ldrb	r3, [r3, #12]
 800cdf2:	f003 030f 	and.w	r3, r3, #15
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d121      	bne.n	800ce3e <pbuf_realloc+0xca>
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	895b      	ldrh	r3, [r3, #10]
 800cdfe:	897a      	ldrh	r2, [r7, #10]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d01c      	beq.n	800ce3e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	7b5b      	ldrb	r3, [r3, #13]
 800ce08:	f003 0302 	and.w	r3, r3, #2
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d116      	bne.n	800ce3e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	685a      	ldr	r2, [r3, #4]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	897b      	ldrh	r3, [r7, #10]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	4619      	mov	r1, r3
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f7fe ff64 	bl	800bcf0 <mem_trim>
 800ce28:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d106      	bne.n	800ce3e <pbuf_realloc+0xca>
 800ce30:	4b0f      	ldr	r3, [pc, #60]	; (800ce70 <pbuf_realloc+0xfc>)
 800ce32:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ce36:	4912      	ldr	r1, [pc, #72]	; (800ce80 <pbuf_realloc+0x10c>)
 800ce38:	480f      	ldr	r0, [pc, #60]	; (800ce78 <pbuf_realloc+0x104>)
 800ce3a:	f009 fa61 	bl	8016300 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	897a      	ldrh	r2, [r7, #10]
 800ce42:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	895a      	ldrh	r2, [r3, #10]
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d004      	beq.n	800ce5e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 f911 	bl	800d080 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	e000      	b.n	800ce68 <pbuf_realloc+0xf4>
    return;
 800ce66:	bf00      	nop

}
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	08018204 	.word	0x08018204
 800ce74:	0801831c 	.word	0x0801831c
 800ce78:	08018264 	.word	0x08018264
 800ce7c:	08018334 	.word	0x08018334
 800ce80:	0801834c 	.word	0x0801834c

0800ce84 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d106      	bne.n	800cea6 <pbuf_add_header_impl+0x22>
 800ce98:	4b2b      	ldr	r3, [pc, #172]	; (800cf48 <pbuf_add_header_impl+0xc4>)
 800ce9a:	f240 12df 	movw	r2, #479	; 0x1df
 800ce9e:	492b      	ldr	r1, [pc, #172]	; (800cf4c <pbuf_add_header_impl+0xc8>)
 800cea0:	482b      	ldr	r0, [pc, #172]	; (800cf50 <pbuf_add_header_impl+0xcc>)
 800cea2:	f009 fa2d 	bl	8016300 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <pbuf_add_header_impl+0x30>
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceb2:	d301      	bcc.n	800ceb8 <pbuf_add_header_impl+0x34>
    return 1;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e043      	b.n	800cf40 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d101      	bne.n	800cec2 <pbuf_add_header_impl+0x3e>
    return 0;
 800cebe:	2300      	movs	r3, #0
 800cec0:	e03e      	b.n	800cf40 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	891a      	ldrh	r2, [r3, #8]
 800ceca:	8a7b      	ldrh	r3, [r7, #18]
 800cecc:	4413      	add	r3, r2
 800cece:	b29b      	uxth	r3, r3
 800ced0:	8a7a      	ldrh	r2, [r7, #18]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d901      	bls.n	800ceda <pbuf_add_header_impl+0x56>
    return 1;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e032      	b.n	800cf40 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	7b1b      	ldrb	r3, [r3, #12]
 800cede:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cee0:	8a3b      	ldrh	r3, [r7, #16]
 800cee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00c      	beq.n	800cf04 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	685a      	ldr	r2, [r3, #4]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	425b      	negs	r3, r3
 800cef2:	4413      	add	r3, r2
 800cef4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	3310      	adds	r3, #16
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d20d      	bcs.n	800cf1c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cf00:	2301      	movs	r3, #1
 800cf02:	e01d      	b.n	800cf40 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cf04:	79fb      	ldrb	r3, [r7, #7]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d006      	beq.n	800cf18 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	425b      	negs	r3, r3
 800cf12:	4413      	add	r3, r2
 800cf14:	617b      	str	r3, [r7, #20]
 800cf16:	e001      	b.n	800cf1c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e011      	b.n	800cf40 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	895a      	ldrh	r2, [r3, #10]
 800cf26:	8a7b      	ldrh	r3, [r7, #18]
 800cf28:	4413      	add	r3, r2
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	891a      	ldrh	r2, [r3, #8]
 800cf34:	8a7b      	ldrh	r3, [r7, #18]
 800cf36:	4413      	add	r3, r2
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	811a      	strh	r2, [r3, #8]


  return 0;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3718      	adds	r7, #24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	08018204 	.word	0x08018204
 800cf4c:	08018368 	.word	0x08018368
 800cf50:	08018264 	.word	0x08018264

0800cf54 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cf5e:	2200      	movs	r2, #0
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7ff ff8e 	bl	800ce84 <pbuf_add_header_impl>
 800cf68:	4603      	mov	r3, r0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
	...

0800cf74 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d106      	bne.n	800cf92 <pbuf_remove_header+0x1e>
 800cf84:	4b20      	ldr	r3, [pc, #128]	; (800d008 <pbuf_remove_header+0x94>)
 800cf86:	f240 224b 	movw	r2, #587	; 0x24b
 800cf8a:	4920      	ldr	r1, [pc, #128]	; (800d00c <pbuf_remove_header+0x98>)
 800cf8c:	4820      	ldr	r0, [pc, #128]	; (800d010 <pbuf_remove_header+0x9c>)
 800cf8e:	f009 f9b7 	bl	8016300 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <pbuf_remove_header+0x2c>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf9e:	d301      	bcc.n	800cfa4 <pbuf_remove_header+0x30>
    return 1;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e02c      	b.n	800cffe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d101      	bne.n	800cfae <pbuf_remove_header+0x3a>
    return 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	e027      	b.n	800cffe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	895b      	ldrh	r3, [r3, #10]
 800cfb6:	89fa      	ldrh	r2, [r7, #14]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d908      	bls.n	800cfce <pbuf_remove_header+0x5a>
 800cfbc:	4b12      	ldr	r3, [pc, #72]	; (800d008 <pbuf_remove_header+0x94>)
 800cfbe:	f240 2255 	movw	r2, #597	; 0x255
 800cfc2:	4914      	ldr	r1, [pc, #80]	; (800d014 <pbuf_remove_header+0xa0>)
 800cfc4:	4812      	ldr	r0, [pc, #72]	; (800d010 <pbuf_remove_header+0x9c>)
 800cfc6:	f009 f99b 	bl	8016300 <iprintf>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e017      	b.n	800cffe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	685a      	ldr	r2, [r3, #4]
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	441a      	add	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	895a      	ldrh	r2, [r3, #10]
 800cfe4:	89fb      	ldrh	r3, [r7, #14]
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	891a      	ldrh	r2, [r3, #8]
 800cff2:	89fb      	ldrh	r3, [r7, #14]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	08018204 	.word	0x08018204
 800d00c:	08018368 	.word	0x08018368
 800d010:	08018264 	.word	0x08018264
 800d014:	08018374 	.word	0x08018374

0800d018 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	460b      	mov	r3, r1
 800d022:	807b      	strh	r3, [r7, #2]
 800d024:	4613      	mov	r3, r2
 800d026:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d028:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	da08      	bge.n	800d042 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d030:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d034:	425b      	negs	r3, r3
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7ff ff9b 	bl	800cf74 <pbuf_remove_header>
 800d03e:	4603      	mov	r3, r0
 800d040:	e007      	b.n	800d052 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d042:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d046:	787a      	ldrb	r2, [r7, #1]
 800d048:	4619      	mov	r1, r3
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7ff ff1a 	bl	800ce84 <pbuf_add_header_impl>
 800d050:	4603      	mov	r3, r0
  }
}
 800d052:	4618      	mov	r0, r3
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b082      	sub	sp, #8
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	460b      	mov	r3, r1
 800d064:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d066:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d06a:	2201      	movs	r2, #1
 800d06c:	4619      	mov	r1, r3
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7ff ffd2 	bl	800d018 <pbuf_header_impl>
 800d074:	4603      	mov	r3, r0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3708      	adds	r7, #8
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
	...

0800d080 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b088      	sub	sp, #32
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10b      	bne.n	800d0a6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <pbuf_free+0x22>
 800d094:	4b3b      	ldr	r3, [pc, #236]	; (800d184 <pbuf_free+0x104>)
 800d096:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d09a:	493b      	ldr	r1, [pc, #236]	; (800d188 <pbuf_free+0x108>)
 800d09c:	483b      	ldr	r0, [pc, #236]	; (800d18c <pbuf_free+0x10c>)
 800d09e:	f009 f92f 	bl	8016300 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e069      	b.n	800d17a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d0aa:	e062      	b.n	800d172 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d0ac:	f008 ff04 	bl	8015eb8 <sys_arch_protect>
 800d0b0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	7b9b      	ldrb	r3, [r3, #14]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d106      	bne.n	800d0c8 <pbuf_free+0x48>
 800d0ba:	4b32      	ldr	r3, [pc, #200]	; (800d184 <pbuf_free+0x104>)
 800d0bc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d0c0:	4933      	ldr	r1, [pc, #204]	; (800d190 <pbuf_free+0x110>)
 800d0c2:	4832      	ldr	r0, [pc, #200]	; (800d18c <pbuf_free+0x10c>)
 800d0c4:	f009 f91c 	bl	8016300 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	7b9b      	ldrb	r3, [r3, #14]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	739a      	strb	r2, [r3, #14]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	7b9b      	ldrb	r3, [r3, #14]
 800d0d8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d0da:	69b8      	ldr	r0, [r7, #24]
 800d0dc:	f008 fefa 	bl	8015ed4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d143      	bne.n	800d16e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	7b1b      	ldrb	r3, [r3, #12]
 800d0f0:	f003 030f 	and.w	r3, r3, #15
 800d0f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	7b5b      	ldrb	r3, [r3, #13]
 800d0fa:	f003 0302 	and.w	r3, r3, #2
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d011      	beq.n	800d126 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d106      	bne.n	800d11c <pbuf_free+0x9c>
 800d10e:	4b1d      	ldr	r3, [pc, #116]	; (800d184 <pbuf_free+0x104>)
 800d110:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d114:	491f      	ldr	r1, [pc, #124]	; (800d194 <pbuf_free+0x114>)
 800d116:	481d      	ldr	r0, [pc, #116]	; (800d18c <pbuf_free+0x10c>)
 800d118:	f009 f8f2 	bl	8016300 <iprintf>
        pc->custom_free_function(p);
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	4798      	blx	r3
 800d124:	e01d      	b.n	800d162 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d126:	7bfb      	ldrb	r3, [r7, #15]
 800d128:	2b02      	cmp	r3, #2
 800d12a:	d104      	bne.n	800d136 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d12c:	6879      	ldr	r1, [r7, #4]
 800d12e:	200c      	movs	r0, #12
 800d130:	f7ff f902 	bl	800c338 <memp_free>
 800d134:	e015      	b.n	800d162 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d136:	7bfb      	ldrb	r3, [r7, #15]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d104      	bne.n	800d146 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d13c:	6879      	ldr	r1, [r7, #4]
 800d13e:	200b      	movs	r0, #11
 800d140:	f7ff f8fa 	bl	800c338 <memp_free>
 800d144:	e00d      	b.n	800d162 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d146:	7bfb      	ldrb	r3, [r7, #15]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d103      	bne.n	800d154 <pbuf_free+0xd4>
          mem_free(p);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7fe fd3f 	bl	800bbd0 <mem_free>
 800d152:	e006      	b.n	800d162 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d154:	4b0b      	ldr	r3, [pc, #44]	; (800d184 <pbuf_free+0x104>)
 800d156:	f240 320f 	movw	r2, #783	; 0x30f
 800d15a:	490f      	ldr	r1, [pc, #60]	; (800d198 <pbuf_free+0x118>)
 800d15c:	480b      	ldr	r0, [pc, #44]	; (800d18c <pbuf_free+0x10c>)
 800d15e:	f009 f8cf 	bl	8016300 <iprintf>
        }
      }
      count++;
 800d162:	7ffb      	ldrb	r3, [r7, #31]
 800d164:	3301      	adds	r3, #1
 800d166:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	607b      	str	r3, [r7, #4]
 800d16c:	e001      	b.n	800d172 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d16e:	2300      	movs	r3, #0
 800d170:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d199      	bne.n	800d0ac <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d178:	7ffb      	ldrb	r3, [r7, #31]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3720      	adds	r7, #32
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	08018204 	.word	0x08018204
 800d188:	08018368 	.word	0x08018368
 800d18c:	08018264 	.word	0x08018264
 800d190:	08018394 	.word	0x08018394
 800d194:	080183ac 	.word	0x080183ac
 800d198:	080183d0 	.word	0x080183d0

0800d19c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d1a8:	e005      	b.n	800d1b6 <pbuf_clen+0x1a>
    ++len;
 800d1aa:	89fb      	ldrh	r3, [r7, #14]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1f6      	bne.n	800d1aa <pbuf_clen+0xe>
  }
  return len;
 800d1bc:	89fb      	ldrh	r3, [r7, #14]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3714      	adds	r7, #20
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
	...

0800d1cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d016      	beq.n	800d208 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d1da:	f008 fe6d 	bl	8015eb8 <sys_arch_protect>
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	7b9b      	ldrb	r3, [r3, #14]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	739a      	strb	r2, [r3, #14]
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f008 fe71 	bl	8015ed4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7b9b      	ldrb	r3, [r3, #14]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d106      	bne.n	800d208 <pbuf_ref+0x3c>
 800d1fa:	4b05      	ldr	r3, [pc, #20]	; (800d210 <pbuf_ref+0x44>)
 800d1fc:	f240 3242 	movw	r2, #834	; 0x342
 800d200:	4904      	ldr	r1, [pc, #16]	; (800d214 <pbuf_ref+0x48>)
 800d202:	4805      	ldr	r0, [pc, #20]	; (800d218 <pbuf_ref+0x4c>)
 800d204:	f009 f87c 	bl	8016300 <iprintf>
  }
}
 800d208:	bf00      	nop
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	08018204 	.word	0x08018204
 800d214:	080183e4 	.word	0x080183e4
 800d218:	08018264 	.word	0x08018264

0800d21c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d002      	beq.n	800d232 <pbuf_cat+0x16>
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d107      	bne.n	800d242 <pbuf_cat+0x26>
 800d232:	4b20      	ldr	r3, [pc, #128]	; (800d2b4 <pbuf_cat+0x98>)
 800d234:	f240 3259 	movw	r2, #857	; 0x359
 800d238:	491f      	ldr	r1, [pc, #124]	; (800d2b8 <pbuf_cat+0x9c>)
 800d23a:	4820      	ldr	r0, [pc, #128]	; (800d2bc <pbuf_cat+0xa0>)
 800d23c:	f009 f860 	bl	8016300 <iprintf>
 800d240:	e034      	b.n	800d2ac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	60fb      	str	r3, [r7, #12]
 800d246:	e00a      	b.n	800d25e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	891a      	ldrh	r2, [r3, #8]
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	891b      	ldrh	r3, [r3, #8]
 800d250:	4413      	add	r3, r2
 800d252:	b29a      	uxth	r2, r3
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	60fb      	str	r3, [r7, #12]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1f0      	bne.n	800d248 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	891a      	ldrh	r2, [r3, #8]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	895b      	ldrh	r3, [r3, #10]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d006      	beq.n	800d280 <pbuf_cat+0x64>
 800d272:	4b10      	ldr	r3, [pc, #64]	; (800d2b4 <pbuf_cat+0x98>)
 800d274:	f240 3262 	movw	r2, #866	; 0x362
 800d278:	4911      	ldr	r1, [pc, #68]	; (800d2c0 <pbuf_cat+0xa4>)
 800d27a:	4810      	ldr	r0, [pc, #64]	; (800d2bc <pbuf_cat+0xa0>)
 800d27c:	f009 f840 	bl	8016300 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d006      	beq.n	800d296 <pbuf_cat+0x7a>
 800d288:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <pbuf_cat+0x98>)
 800d28a:	f240 3263 	movw	r2, #867	; 0x363
 800d28e:	490d      	ldr	r1, [pc, #52]	; (800d2c4 <pbuf_cat+0xa8>)
 800d290:	480a      	ldr	r0, [pc, #40]	; (800d2bc <pbuf_cat+0xa0>)
 800d292:	f009 f835 	bl	8016300 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	891a      	ldrh	r2, [r3, #8]
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	891b      	ldrh	r3, [r3, #8]
 800d29e:	4413      	add	r3, r2
 800d2a0:	b29a      	uxth	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	683a      	ldr	r2, [r7, #0]
 800d2aa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	08018204 	.word	0x08018204
 800d2b8:	080183f8 	.word	0x080183f8
 800d2bc:	08018264 	.word	0x08018264
 800d2c0:	08018430 	.word	0x08018430
 800d2c4:	08018460 	.word	0x08018460

0800d2c8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7ff ffa1 	bl	800d21c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d2da:	6838      	ldr	r0, [r7, #0]
 800d2dc:	f7ff ff76 	bl	800d1cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d2e0:	bf00      	nop
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	617b      	str	r3, [r7, #20]
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d008      	beq.n	800d312 <pbuf_copy+0x2a>
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <pbuf_copy+0x2a>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	891a      	ldrh	r2, [r3, #8]
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	891b      	ldrh	r3, [r3, #8]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d209      	bcs.n	800d326 <pbuf_copy+0x3e>
 800d312:	4b57      	ldr	r3, [pc, #348]	; (800d470 <pbuf_copy+0x188>)
 800d314:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d318:	4956      	ldr	r1, [pc, #344]	; (800d474 <pbuf_copy+0x18c>)
 800d31a:	4857      	ldr	r0, [pc, #348]	; (800d478 <pbuf_copy+0x190>)
 800d31c:	f008 fff0 	bl	8016300 <iprintf>
 800d320:	f06f 030f 	mvn.w	r3, #15
 800d324:	e09f      	b.n	800d466 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	895b      	ldrh	r3, [r3, #10]
 800d32a:	461a      	mov	r2, r3
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	1ad2      	subs	r2, r2, r3
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	895b      	ldrh	r3, [r3, #10]
 800d334:	4619      	mov	r1, r3
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	1acb      	subs	r3, r1, r3
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d306      	bcc.n	800d34c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	895b      	ldrh	r3, [r3, #10]
 800d342:	461a      	mov	r2, r3
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	60fb      	str	r3, [r7, #12]
 800d34a:	e005      	b.n	800d358 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	895b      	ldrh	r3, [r3, #10]
 800d350:	461a      	mov	r2, r3
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	18d0      	adds	r0, r2, r3
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	685a      	ldr	r2, [r3, #4]
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	4413      	add	r3, r2
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	4619      	mov	r1, r3
 800d36c:	f008 ff03 	bl	8016176 <memcpy>
    offset_to += len;
 800d370:	697a      	ldr	r2, [r7, #20]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	4413      	add	r3, r2
 800d376:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d378:	693a      	ldr	r2, [r7, #16]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	4413      	add	r3, r2
 800d37e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	895b      	ldrh	r3, [r3, #10]
 800d384:	461a      	mov	r2, r3
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	4293      	cmp	r3, r2
 800d38a:	d906      	bls.n	800d39a <pbuf_copy+0xb2>
 800d38c:	4b38      	ldr	r3, [pc, #224]	; (800d470 <pbuf_copy+0x188>)
 800d38e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d392:	493a      	ldr	r1, [pc, #232]	; (800d47c <pbuf_copy+0x194>)
 800d394:	4838      	ldr	r0, [pc, #224]	; (800d478 <pbuf_copy+0x190>)
 800d396:	f008 ffb3 	bl	8016300 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	895b      	ldrh	r3, [r3, #10]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d906      	bls.n	800d3b4 <pbuf_copy+0xcc>
 800d3a6:	4b32      	ldr	r3, [pc, #200]	; (800d470 <pbuf_copy+0x188>)
 800d3a8:	f240 32da 	movw	r2, #986	; 0x3da
 800d3ac:	4934      	ldr	r1, [pc, #208]	; (800d480 <pbuf_copy+0x198>)
 800d3ae:	4832      	ldr	r0, [pc, #200]	; (800d478 <pbuf_copy+0x190>)
 800d3b0:	f008 ffa6 	bl	8016300 <iprintf>
    if (offset_from >= p_from->len) {
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	895b      	ldrh	r3, [r3, #10]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d304      	bcc.n	800d3ca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	895b      	ldrh	r3, [r3, #10]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d114      	bne.n	800d400 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10c      	bne.n	800d400 <pbuf_copy+0x118>
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d009      	beq.n	800d400 <pbuf_copy+0x118>
 800d3ec:	4b20      	ldr	r3, [pc, #128]	; (800d470 <pbuf_copy+0x188>)
 800d3ee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d3f2:	4924      	ldr	r1, [pc, #144]	; (800d484 <pbuf_copy+0x19c>)
 800d3f4:	4820      	ldr	r0, [pc, #128]	; (800d478 <pbuf_copy+0x190>)
 800d3f6:	f008 ff83 	bl	8016300 <iprintf>
 800d3fa:	f06f 030f 	mvn.w	r3, #15
 800d3fe:	e032      	b.n	800d466 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d013      	beq.n	800d42e <pbuf_copy+0x146>
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	895a      	ldrh	r2, [r3, #10]
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	891b      	ldrh	r3, [r3, #8]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d10d      	bne.n	800d42e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d009      	beq.n	800d42e <pbuf_copy+0x146>
 800d41a:	4b15      	ldr	r3, [pc, #84]	; (800d470 <pbuf_copy+0x188>)
 800d41c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d420:	4919      	ldr	r1, [pc, #100]	; (800d488 <pbuf_copy+0x1a0>)
 800d422:	4815      	ldr	r0, [pc, #84]	; (800d478 <pbuf_copy+0x190>)
 800d424:	f008 ff6c 	bl	8016300 <iprintf>
 800d428:	f06f 0305 	mvn.w	r3, #5
 800d42c:	e01b      	b.n	800d466 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d013      	beq.n	800d45c <pbuf_copy+0x174>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	895a      	ldrh	r2, [r3, #10]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	891b      	ldrh	r3, [r3, #8]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d10d      	bne.n	800d45c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d009      	beq.n	800d45c <pbuf_copy+0x174>
 800d448:	4b09      	ldr	r3, [pc, #36]	; (800d470 <pbuf_copy+0x188>)
 800d44a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d44e:	490e      	ldr	r1, [pc, #56]	; (800d488 <pbuf_copy+0x1a0>)
 800d450:	4809      	ldr	r0, [pc, #36]	; (800d478 <pbuf_copy+0x190>)
 800d452:	f008 ff55 	bl	8016300 <iprintf>
 800d456:	f06f 0305 	mvn.w	r3, #5
 800d45a:	e004      	b.n	800d466 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f47f af61 	bne.w	800d326 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3718      	adds	r7, #24
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	08018204 	.word	0x08018204
 800d474:	080184ac 	.word	0x080184ac
 800d478:	08018264 	.word	0x08018264
 800d47c:	080184dc 	.word	0x080184dc
 800d480:	080184f4 	.word	0x080184f4
 800d484:	08018510 	.word	0x08018510
 800d488:	08018520 	.word	0x08018520

0800d48c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b088      	sub	sp, #32
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	4611      	mov	r1, r2
 800d498:	461a      	mov	r2, r3
 800d49a:	460b      	mov	r3, r1
 800d49c:	80fb      	strh	r3, [r7, #6]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d108      	bne.n	800d4c2 <pbuf_copy_partial+0x36>
 800d4b0:	4b2b      	ldr	r3, [pc, #172]	; (800d560 <pbuf_copy_partial+0xd4>)
 800d4b2:	f240 420a 	movw	r2, #1034	; 0x40a
 800d4b6:	492b      	ldr	r1, [pc, #172]	; (800d564 <pbuf_copy_partial+0xd8>)
 800d4b8:	482b      	ldr	r0, [pc, #172]	; (800d568 <pbuf_copy_partial+0xdc>)
 800d4ba:	f008 ff21 	bl	8016300 <iprintf>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e04a      	b.n	800d558 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d108      	bne.n	800d4da <pbuf_copy_partial+0x4e>
 800d4c8:	4b25      	ldr	r3, [pc, #148]	; (800d560 <pbuf_copy_partial+0xd4>)
 800d4ca:	f240 420b 	movw	r2, #1035	; 0x40b
 800d4ce:	4927      	ldr	r1, [pc, #156]	; (800d56c <pbuf_copy_partial+0xe0>)
 800d4d0:	4825      	ldr	r0, [pc, #148]	; (800d568 <pbuf_copy_partial+0xdc>)
 800d4d2:	f008 ff15 	bl	8016300 <iprintf>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	e03e      	b.n	800d558 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	61fb      	str	r3, [r7, #28]
 800d4de:	e034      	b.n	800d54a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d4e0:	88bb      	ldrh	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00a      	beq.n	800d4fc <pbuf_copy_partial+0x70>
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	895b      	ldrh	r3, [r3, #10]
 800d4ea:	88ba      	ldrh	r2, [r7, #4]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d305      	bcc.n	800d4fc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	895b      	ldrh	r3, [r3, #10]
 800d4f4:	88ba      	ldrh	r2, [r7, #4]
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	80bb      	strh	r3, [r7, #4]
 800d4fa:	e023      	b.n	800d544 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	895a      	ldrh	r2, [r3, #10]
 800d500:	88bb      	ldrh	r3, [r7, #4]
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d506:	8b3a      	ldrh	r2, [r7, #24]
 800d508:	88fb      	ldrh	r3, [r7, #6]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d901      	bls.n	800d512 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d50e:	88fb      	ldrh	r3, [r7, #6]
 800d510:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d512:	8b7b      	ldrh	r3, [r7, #26]
 800d514:	68ba      	ldr	r2, [r7, #8]
 800d516:	18d0      	adds	r0, r2, r3
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	685a      	ldr	r2, [r3, #4]
 800d51c:	88bb      	ldrh	r3, [r7, #4]
 800d51e:	4413      	add	r3, r2
 800d520:	8b3a      	ldrh	r2, [r7, #24]
 800d522:	4619      	mov	r1, r3
 800d524:	f008 fe27 	bl	8016176 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d528:	8afa      	ldrh	r2, [r7, #22]
 800d52a:	8b3b      	ldrh	r3, [r7, #24]
 800d52c:	4413      	add	r3, r2
 800d52e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d530:	8b7a      	ldrh	r2, [r7, #26]
 800d532:	8b3b      	ldrh	r3, [r7, #24]
 800d534:	4413      	add	r3, r2
 800d536:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d538:	88fa      	ldrh	r2, [r7, #6]
 800d53a:	8b3b      	ldrh	r3, [r7, #24]
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d540:	2300      	movs	r3, #0
 800d542:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	61fb      	str	r3, [r7, #28]
 800d54a:	88fb      	ldrh	r3, [r7, #6]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <pbuf_copy_partial+0xca>
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1c4      	bne.n	800d4e0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d556:	8afb      	ldrh	r3, [r7, #22]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3720      	adds	r7, #32
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	08018204 	.word	0x08018204
 800d564:	0801854c 	.word	0x0801854c
 800d568:	08018264 	.word	0x08018264
 800d56c:	0801856c 	.word	0x0801856c

0800d570 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d570:	b480      	push	{r7}
 800d572:	b087      	sub	sp, #28
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	460b      	mov	r3, r1
 800d57a:	607a      	str	r2, [r7, #4]
 800d57c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800d57e:	897b      	ldrh	r3, [r7, #10]
 800d580:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800d586:	e007      	b.n	800d598 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	895b      	ldrh	r3, [r3, #10]
 800d58c:	8afa      	ldrh	r2, [r7, #22]
 800d58e:	1ad3      	subs	r3, r2, r3
 800d590:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d004      	beq.n	800d5a8 <pbuf_skip_const+0x38>
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	895b      	ldrh	r3, [r3, #10]
 800d5a2:	8afa      	ldrh	r2, [r7, #22]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d2ef      	bcs.n	800d588 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d002      	beq.n	800d5b4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	8afa      	ldrh	r2, [r7, #22]
 800d5b2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800d5b4:	693b      	ldr	r3, [r7, #16]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	371c      	adds	r7, #28
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
	...

0800d5c4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	603a      	str	r2, [r7, #0]
 800d5ce:	71fb      	strb	r3, [r7, #7]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	8919      	ldrh	r1, [r3, #8]
 800d5d8:	88ba      	ldrh	r2, [r7, #4]
 800d5da:	79fb      	ldrb	r3, [r7, #7]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7ff fa6b 	bl	800cab8 <pbuf_alloc>
 800d5e2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <pbuf_clone+0x2a>
    return NULL;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	e011      	b.n	800d612 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d5ee:	6839      	ldr	r1, [r7, #0]
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f7ff fe79 	bl	800d2e8 <pbuf_copy>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d5fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d006      	beq.n	800d610 <pbuf_clone+0x4c>
 800d602:	4b06      	ldr	r3, [pc, #24]	; (800d61c <pbuf_clone+0x58>)
 800d604:	f240 5224 	movw	r2, #1316	; 0x524
 800d608:	4905      	ldr	r1, [pc, #20]	; (800d620 <pbuf_clone+0x5c>)
 800d60a:	4806      	ldr	r0, [pc, #24]	; (800d624 <pbuf_clone+0x60>)
 800d60c:	f008 fe78 	bl	8016300 <iprintf>
  return q;
 800d610:	68fb      	ldr	r3, [r7, #12]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	08018204 	.word	0x08018204
 800d620:	08018678 	.word	0x08018678
 800d624:	08018264 	.word	0x08018264

0800d628 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	460b      	mov	r3, r1
 800d632:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800d634:	887b      	ldrh	r3, [r7, #2]
 800d636:	4619      	mov	r1, r3
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f80c 	bl	800d656 <pbuf_try_get_at>
 800d63e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2b00      	cmp	r3, #0
 800d644:	db02      	blt.n	800d64c <pbuf_get_at+0x24>
    return (u8_t)ret;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	e000      	b.n	800d64e <pbuf_get_at+0x26>
  }
  return 0;
 800d64c:	2300      	movs	r3, #0
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b084      	sub	sp, #16
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
 800d65e:	460b      	mov	r3, r1
 800d660:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800d662:	f107 020a 	add.w	r2, r7, #10
 800d666:	887b      	ldrh	r3, [r7, #2]
 800d668:	4619      	mov	r1, r3
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7ff ff80 	bl	800d570 <pbuf_skip_const>
 800d670:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00a      	beq.n	800d68e <pbuf_try_get_at+0x38>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	895a      	ldrh	r2, [r3, #10]
 800d67c:	897b      	ldrh	r3, [r7, #10]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d905      	bls.n	800d68e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	897a      	ldrh	r2, [r7, #10]
 800d688:	4413      	add	r3, r2
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	e001      	b.n	800d692 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800d68e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d692:	4618      	mov	r0, r3
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b088      	sub	sp, #32
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	60f8      	str	r0, [r7, #12]
 800d6a2:	607a      	str	r2, [r7, #4]
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	817b      	strh	r3, [r7, #10]
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 800d6ae:	897b      	ldrh	r3, [r7, #10]
 800d6b0:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	891b      	ldrh	r3, [r3, #8]
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	897a      	ldrh	r2, [r7, #10]
 800d6be:	893b      	ldrh	r3, [r7, #8]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	4299      	cmp	r1, r3
 800d6c4:	da0a      	bge.n	800d6dc <pbuf_memcmp+0x42>
    return 0xffff;
 800d6c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d6ca:	e037      	b.n	800d73c <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	895b      	ldrh	r3, [r3, #10]
 800d6d0:	8bfa      	ldrh	r2, [r7, #30]
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 800d6d6:	69bb      	ldr	r3, [r7, #24]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d004      	beq.n	800d6ec <pbuf_memcmp+0x52>
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	895b      	ldrh	r3, [r3, #10]
 800d6e6:	8bfa      	ldrh	r2, [r7, #30]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d2ef      	bcs.n	800d6cc <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	82fb      	strh	r3, [r7, #22]
 800d6f0:	e01f      	b.n	800d732 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800d6f2:	8bfa      	ldrh	r2, [r7, #30]
 800d6f4:	8afb      	ldrh	r3, [r7, #22]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	69b8      	ldr	r0, [r7, #24]
 800d6fe:	f7ff ff93 	bl	800d628 <pbuf_get_at>
 800d702:	4603      	mov	r3, r0
 800d704:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 800d706:	8afb      	ldrh	r3, [r7, #22]
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	4413      	add	r3, r2
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 800d710:	7d7a      	ldrb	r2, [r7, #21]
 800d712:	7d3b      	ldrb	r3, [r7, #20]
 800d714:	429a      	cmp	r2, r3
 800d716:	d009      	beq.n	800d72c <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800d718:	8afb      	ldrh	r3, [r7, #22]
 800d71a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d71e:	4293      	cmp	r3, r2
 800d720:	bf28      	it	cs
 800d722:	4613      	movcs	r3, r2
 800d724:	b29b      	uxth	r3, r3
 800d726:	3301      	adds	r3, #1
 800d728:	b29b      	uxth	r3, r3
 800d72a:	e007      	b.n	800d73c <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 800d72c:	8afb      	ldrh	r3, [r7, #22]
 800d72e:	3301      	adds	r3, #1
 800d730:	82fb      	strh	r3, [r7, #22]
 800d732:	8afa      	ldrh	r2, [r7, #22]
 800d734:	893b      	ldrh	r3, [r7, #8]
 800d736:	429a      	cmp	r2, r3
 800d738:	d3db      	bcc.n	800d6f2 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3720      	adds	r7, #32
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	4611      	mov	r1, r2
 800d750:	461a      	mov	r2, r3
 800d752:	460b      	mov	r3, r1
 800d754:	80fb      	strh	r3, [r7, #6]
 800d756:	4613      	mov	r3, r2
 800d758:	80bb      	strh	r3, [r7, #4]
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	891a      	ldrh	r2, [r3, #8]
 800d75e:	88fb      	ldrh	r3, [r7, #6]
 800d760:	1ad3      	subs	r3, r2, r3
 800d762:	82bb      	strh	r3, [r7, #20]
  if (p->tot_len >= mem_len + start_offset) {
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	891b      	ldrh	r3, [r3, #8]
 800d768:	4619      	mov	r1, r3
 800d76a:	88fa      	ldrh	r2, [r7, #6]
 800d76c:	88bb      	ldrh	r3, [r7, #4]
 800d76e:	4413      	add	r3, r2
 800d770:	4299      	cmp	r1, r3
 800d772:	db16      	blt.n	800d7a2 <pbuf_memfind+0x5e>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800d774:	88bb      	ldrh	r3, [r7, #4]
 800d776:	82fb      	strh	r3, [r7, #22]
 800d778:	e00f      	b.n	800d79a <pbuf_memfind+0x56>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 800d77a:	88fb      	ldrh	r3, [r7, #6]
 800d77c:	8af9      	ldrh	r1, [r7, #22]
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f7ff ff8a 	bl	800d69a <pbuf_memcmp>
 800d786:	4603      	mov	r3, r0
 800d788:	827b      	strh	r3, [r7, #18]
      if (plus == 0) {
 800d78a:	8a7b      	ldrh	r3, [r7, #18]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <pbuf_memfind+0x50>
        return i;
 800d790:	8afb      	ldrh	r3, [r7, #22]
 800d792:	e008      	b.n	800d7a6 <pbuf_memfind+0x62>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800d794:	8afb      	ldrh	r3, [r7, #22]
 800d796:	3301      	adds	r3, #1
 800d798:	82fb      	strh	r3, [r7, #22]
 800d79a:	8afa      	ldrh	r2, [r7, #22]
 800d79c:	8abb      	ldrh	r3, [r7, #20]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d9eb      	bls.n	800d77a <pbuf_memfind+0x36>
      }
    }
  }
  return 0xFFFF;
 800d7a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3718      	adds	r7, #24
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
	...

0800d7b0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d7b4:	f008 fe32 	bl	801641c <rand>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	4b01      	ldr	r3, [pc, #4]	; (800d7d0 <tcp_init+0x20>)
 800d7ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d7cc:	bf00      	nop
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	20000028 	.word	0x20000028

0800d7d4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7d1b      	ldrb	r3, [r3, #20]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d105      	bne.n	800d7f0 <tcp_free+0x1c>
 800d7e4:	4b06      	ldr	r3, [pc, #24]	; (800d800 <tcp_free+0x2c>)
 800d7e6:	22d4      	movs	r2, #212	; 0xd4
 800d7e8:	4906      	ldr	r1, [pc, #24]	; (800d804 <tcp_free+0x30>)
 800d7ea:	4807      	ldr	r0, [pc, #28]	; (800d808 <tcp_free+0x34>)
 800d7ec:	f008 fd88 	bl	8016300 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d7f0:	6879      	ldr	r1, [r7, #4]
 800d7f2:	2001      	movs	r0, #1
 800d7f4:	f7fe fda0 	bl	800c338 <memp_free>
}
 800d7f8:	bf00      	nop
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	08018704 	.word	0x08018704
 800d804:	08018734 	.word	0x08018734
 800d808:	08018748 	.word	0x08018748

0800d80c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	7d1b      	ldrb	r3, [r3, #20]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d105      	bne.n	800d828 <tcp_free_listen+0x1c>
 800d81c:	4b06      	ldr	r3, [pc, #24]	; (800d838 <tcp_free_listen+0x2c>)
 800d81e:	22df      	movs	r2, #223	; 0xdf
 800d820:	4906      	ldr	r1, [pc, #24]	; (800d83c <tcp_free_listen+0x30>)
 800d822:	4807      	ldr	r0, [pc, #28]	; (800d840 <tcp_free_listen+0x34>)
 800d824:	f008 fd6c 	bl	8016300 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d828:	6879      	ldr	r1, [r7, #4]
 800d82a:	2002      	movs	r0, #2
 800d82c:	f7fe fd84 	bl	800c338 <memp_free>
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	08018704 	.word	0x08018704
 800d83c:	08018770 	.word	0x08018770
 800d840:	08018748 	.word	0x08018748

0800d844 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d848:	f000 fea2 	bl	800e590 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d84c:	4b07      	ldr	r3, [pc, #28]	; (800d86c <tcp_tmr+0x28>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	3301      	adds	r3, #1
 800d852:	b2da      	uxtb	r2, r3
 800d854:	4b05      	ldr	r3, [pc, #20]	; (800d86c <tcp_tmr+0x28>)
 800d856:	701a      	strb	r2, [r3, #0]
 800d858:	4b04      	ldr	r3, [pc, #16]	; (800d86c <tcp_tmr+0x28>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	f003 0301 	and.w	r3, r3, #1
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d864:	f000 fb54 	bl	800df10 <tcp_slowtmr>
  }
}
 800d868:	bf00      	nop
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	20030465 	.word	0x20030465

0800d870 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d105      	bne.n	800d88c <tcp_remove_listener+0x1c>
 800d880:	4b0d      	ldr	r3, [pc, #52]	; (800d8b8 <tcp_remove_listener+0x48>)
 800d882:	22ff      	movs	r2, #255	; 0xff
 800d884:	490d      	ldr	r1, [pc, #52]	; (800d8bc <tcp_remove_listener+0x4c>)
 800d886:	480e      	ldr	r0, [pc, #56]	; (800d8c0 <tcp_remove_listener+0x50>)
 800d888:	f008 fd3a 	bl	8016300 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	e00a      	b.n	800d8a8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d102      	bne.n	800d8a2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1f1      	bne.n	800d892 <tcp_remove_listener+0x22>
    }
  }
}
 800d8ae:	bf00      	nop
 800d8b0:	bf00      	nop
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	08018704 	.word	0x08018704
 800d8bc:	0801878c 	.word	0x0801878c
 800d8c0:	08018748 	.word	0x08018748

0800d8c4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d106      	bne.n	800d8e0 <tcp_listen_closed+0x1c>
 800d8d2:	4b14      	ldr	r3, [pc, #80]	; (800d924 <tcp_listen_closed+0x60>)
 800d8d4:	f240 1211 	movw	r2, #273	; 0x111
 800d8d8:	4913      	ldr	r1, [pc, #76]	; (800d928 <tcp_listen_closed+0x64>)
 800d8da:	4814      	ldr	r0, [pc, #80]	; (800d92c <tcp_listen_closed+0x68>)
 800d8dc:	f008 fd10 	bl	8016300 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	7d1b      	ldrb	r3, [r3, #20]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d006      	beq.n	800d8f6 <tcp_listen_closed+0x32>
 800d8e8:	4b0e      	ldr	r3, [pc, #56]	; (800d924 <tcp_listen_closed+0x60>)
 800d8ea:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d8ee:	4910      	ldr	r1, [pc, #64]	; (800d930 <tcp_listen_closed+0x6c>)
 800d8f0:	480e      	ldr	r0, [pc, #56]	; (800d92c <tcp_listen_closed+0x68>)
 800d8f2:	f008 fd05 	bl	8016300 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	60fb      	str	r3, [r7, #12]
 800d8fa:	e00b      	b.n	800d914 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d8fc:	4a0d      	ldr	r2, [pc, #52]	; (800d934 <tcp_listen_closed+0x70>)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	6879      	ldr	r1, [r7, #4]
 800d908:	4618      	mov	r0, r3
 800d90a:	f7ff ffb1 	bl	800d870 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	3301      	adds	r3, #1
 800d912:	60fb      	str	r3, [r7, #12]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b03      	cmp	r3, #3
 800d918:	d9f0      	bls.n	800d8fc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d91a:	bf00      	nop
 800d91c:	bf00      	nop
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	08018704 	.word	0x08018704
 800d928:	080187b4 	.word	0x080187b4
 800d92c:	08018748 	.word	0x08018748
 800d930:	080187c0 	.word	0x080187c0
 800d934:	0801a724 	.word	0x0801a724

0800d938 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d938:	b5b0      	push	{r4, r5, r7, lr}
 800d93a:	b088      	sub	sp, #32
 800d93c:	af04      	add	r7, sp, #16
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <tcp_close_shutdown+0x20>
 800d94a:	4b63      	ldr	r3, [pc, #396]	; (800dad8 <tcp_close_shutdown+0x1a0>)
 800d94c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d950:	4962      	ldr	r1, [pc, #392]	; (800dadc <tcp_close_shutdown+0x1a4>)
 800d952:	4863      	ldr	r0, [pc, #396]	; (800dae0 <tcp_close_shutdown+0x1a8>)
 800d954:	f008 fcd4 	bl	8016300 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d958:	78fb      	ldrb	r3, [r7, #3]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d066      	beq.n	800da2c <tcp_close_shutdown+0xf4>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	7d1b      	ldrb	r3, [r3, #20]
 800d962:	2b04      	cmp	r3, #4
 800d964:	d003      	beq.n	800d96e <tcp_close_shutdown+0x36>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	7d1b      	ldrb	r3, [r3, #20]
 800d96a:	2b07      	cmp	r3, #7
 800d96c:	d15e      	bne.n	800da2c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d972:	2b00      	cmp	r3, #0
 800d974:	d104      	bne.n	800d980 <tcp_close_shutdown+0x48>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d97a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d97e:	d055      	beq.n	800da2c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	8b5b      	ldrh	r3, [r3, #26]
 800d984:	f003 0310 	and.w	r3, r3, #16
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d106      	bne.n	800d99a <tcp_close_shutdown+0x62>
 800d98c:	4b52      	ldr	r3, [pc, #328]	; (800dad8 <tcp_close_shutdown+0x1a0>)
 800d98e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d992:	4954      	ldr	r1, [pc, #336]	; (800dae4 <tcp_close_shutdown+0x1ac>)
 800d994:	4852      	ldr	r0, [pc, #328]	; (800dae0 <tcp_close_shutdown+0x1a8>)
 800d996:	f008 fcb3 	bl	8016300 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d9a2:	687d      	ldr	r5, [r7, #4]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	8ad2      	ldrh	r2, [r2, #22]
 800d9ac:	6879      	ldr	r1, [r7, #4]
 800d9ae:	8b09      	ldrh	r1, [r1, #24]
 800d9b0:	9102      	str	r1, [sp, #8]
 800d9b2:	9201      	str	r2, [sp, #4]
 800d9b4:	9300      	str	r3, [sp, #0]
 800d9b6:	462b      	mov	r3, r5
 800d9b8:	4622      	mov	r2, r4
 800d9ba:	4601      	mov	r1, r0
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f004 fe91 	bl	80126e4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f001 f8c6 	bl	800eb54 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d9c8:	4b47      	ldr	r3, [pc, #284]	; (800dae8 <tcp_close_shutdown+0x1b0>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d105      	bne.n	800d9de <tcp_close_shutdown+0xa6>
 800d9d2:	4b45      	ldr	r3, [pc, #276]	; (800dae8 <tcp_close_shutdown+0x1b0>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	4a43      	ldr	r2, [pc, #268]	; (800dae8 <tcp_close_shutdown+0x1b0>)
 800d9da:	6013      	str	r3, [r2, #0]
 800d9dc:	e013      	b.n	800da06 <tcp_close_shutdown+0xce>
 800d9de:	4b42      	ldr	r3, [pc, #264]	; (800dae8 <tcp_close_shutdown+0x1b0>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	60fb      	str	r3, [r7, #12]
 800d9e4:	e00c      	b.n	800da00 <tcp_close_shutdown+0xc8>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d104      	bne.n	800d9fa <tcp_close_shutdown+0xc2>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	68da      	ldr	r2, [r3, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	60da      	str	r2, [r3, #12]
 800d9f8:	e005      	b.n	800da06 <tcp_close_shutdown+0xce>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	60fb      	str	r3, [r7, #12]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1ef      	bne.n	800d9e6 <tcp_close_shutdown+0xae>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	60da      	str	r2, [r3, #12]
 800da0c:	4b37      	ldr	r3, [pc, #220]	; (800daec <tcp_close_shutdown+0x1b4>)
 800da0e:	2201      	movs	r2, #1
 800da10:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800da12:	4b37      	ldr	r3, [pc, #220]	; (800daf0 <tcp_close_shutdown+0x1b8>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d102      	bne.n	800da22 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800da1c:	f003 fd5e 	bl	80114dc <tcp_trigger_input_pcb_close>
 800da20:	e002      	b.n	800da28 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7ff fed6 	bl	800d7d4 <tcp_free>
      }
      return ERR_OK;
 800da28:	2300      	movs	r3, #0
 800da2a:	e050      	b.n	800dace <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	7d1b      	ldrb	r3, [r3, #20]
 800da30:	2b02      	cmp	r3, #2
 800da32:	d03b      	beq.n	800daac <tcp_close_shutdown+0x174>
 800da34:	2b02      	cmp	r3, #2
 800da36:	dc44      	bgt.n	800dac2 <tcp_close_shutdown+0x18a>
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <tcp_close_shutdown+0x10a>
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d02a      	beq.n	800da96 <tcp_close_shutdown+0x15e>
 800da40:	e03f      	b.n	800dac2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	8adb      	ldrh	r3, [r3, #22]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d021      	beq.n	800da8e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da4a:	4b2a      	ldr	r3, [pc, #168]	; (800daf4 <tcp_close_shutdown+0x1bc>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	429a      	cmp	r2, r3
 800da52:	d105      	bne.n	800da60 <tcp_close_shutdown+0x128>
 800da54:	4b27      	ldr	r3, [pc, #156]	; (800daf4 <tcp_close_shutdown+0x1bc>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	4a26      	ldr	r2, [pc, #152]	; (800daf4 <tcp_close_shutdown+0x1bc>)
 800da5c:	6013      	str	r3, [r2, #0]
 800da5e:	e013      	b.n	800da88 <tcp_close_shutdown+0x150>
 800da60:	4b24      	ldr	r3, [pc, #144]	; (800daf4 <tcp_close_shutdown+0x1bc>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	60bb      	str	r3, [r7, #8]
 800da66:	e00c      	b.n	800da82 <tcp_close_shutdown+0x14a>
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d104      	bne.n	800da7c <tcp_close_shutdown+0x144>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68da      	ldr	r2, [r3, #12]
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	60da      	str	r2, [r3, #12]
 800da7a:	e005      	b.n	800da88 <tcp_close_shutdown+0x150>
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	60bb      	str	r3, [r7, #8]
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1ef      	bne.n	800da68 <tcp_close_shutdown+0x130>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f7ff fea0 	bl	800d7d4 <tcp_free>
      break;
 800da94:	e01a      	b.n	800dacc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7ff ff14 	bl	800d8c4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800da9c:	6879      	ldr	r1, [r7, #4]
 800da9e:	4816      	ldr	r0, [pc, #88]	; (800daf8 <tcp_close_shutdown+0x1c0>)
 800daa0:	f001 f8a8 	bl	800ebf4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff feb1 	bl	800d80c <tcp_free_listen>
      break;
 800daaa:	e00f      	b.n	800dacc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800daac:	6879      	ldr	r1, [r7, #4]
 800daae:	480e      	ldr	r0, [pc, #56]	; (800dae8 <tcp_close_shutdown+0x1b0>)
 800dab0:	f001 f8a0 	bl	800ebf4 <tcp_pcb_remove>
 800dab4:	4b0d      	ldr	r3, [pc, #52]	; (800daec <tcp_close_shutdown+0x1b4>)
 800dab6:	2201      	movs	r2, #1
 800dab8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff fe8a 	bl	800d7d4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dac0:	e004      	b.n	800dacc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f81a 	bl	800dafc <tcp_close_shutdown_fin>
 800dac8:	4603      	mov	r3, r0
 800daca:	e000      	b.n	800dace <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bdb0      	pop	{r4, r5, r7, pc}
 800dad6:	bf00      	nop
 800dad8:	08018704 	.word	0x08018704
 800dadc:	080187d8 	.word	0x080187d8
 800dae0:	08018748 	.word	0x08018748
 800dae4:	080187f8 	.word	0x080187f8
 800dae8:	2003045c 	.word	0x2003045c
 800daec:	20030464 	.word	0x20030464
 800daf0:	2003049c 	.word	0x2003049c
 800daf4:	20030454 	.word	0x20030454
 800daf8:	20030458 	.word	0x20030458

0800dafc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d106      	bne.n	800db18 <tcp_close_shutdown_fin+0x1c>
 800db0a:	4b2e      	ldr	r3, [pc, #184]	; (800dbc4 <tcp_close_shutdown_fin+0xc8>)
 800db0c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800db10:	492d      	ldr	r1, [pc, #180]	; (800dbc8 <tcp_close_shutdown_fin+0xcc>)
 800db12:	482e      	ldr	r0, [pc, #184]	; (800dbcc <tcp_close_shutdown_fin+0xd0>)
 800db14:	f008 fbf4 	bl	8016300 <iprintf>

  switch (pcb->state) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	2b07      	cmp	r3, #7
 800db1e:	d020      	beq.n	800db62 <tcp_close_shutdown_fin+0x66>
 800db20:	2b07      	cmp	r3, #7
 800db22:	dc2b      	bgt.n	800db7c <tcp_close_shutdown_fin+0x80>
 800db24:	2b03      	cmp	r3, #3
 800db26:	d002      	beq.n	800db2e <tcp_close_shutdown_fin+0x32>
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d00d      	beq.n	800db48 <tcp_close_shutdown_fin+0x4c>
 800db2c:	e026      	b.n	800db7c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f003 fee6 	bl	8011900 <tcp_send_fin>
 800db34:	4603      	mov	r3, r0
 800db36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d11f      	bne.n	800db80 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2205      	movs	r2, #5
 800db44:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db46:	e01b      	b.n	800db80 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f003 fed9 	bl	8011900 <tcp_send_fin>
 800db4e:	4603      	mov	r3, r0
 800db50:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d114      	bne.n	800db84 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2205      	movs	r2, #5
 800db5e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db60:	e010      	b.n	800db84 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f003 fecc 	bl	8011900 <tcp_send_fin>
 800db68:	4603      	mov	r3, r0
 800db6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d109      	bne.n	800db88 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2209      	movs	r2, #9
 800db78:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db7a:	e005      	b.n	800db88 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800db7c:	2300      	movs	r3, #0
 800db7e:	e01c      	b.n	800dbba <tcp_close_shutdown_fin+0xbe>
      break;
 800db80:	bf00      	nop
 800db82:	e002      	b.n	800db8a <tcp_close_shutdown_fin+0x8e>
      break;
 800db84:	bf00      	nop
 800db86:	e000      	b.n	800db8a <tcp_close_shutdown_fin+0x8e>
      break;
 800db88:	bf00      	nop
  }

  if (err == ERR_OK) {
 800db8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d103      	bne.n	800db9a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f003 fff2 	bl	8011b7c <tcp_output>
 800db98:	e00d      	b.n	800dbb6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800db9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dba2:	d108      	bne.n	800dbb6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	8b5b      	ldrh	r3, [r3, #26]
 800dba8:	f043 0308 	orr.w	r3, r3, #8
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	e001      	b.n	800dbba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dbb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	08018704 	.word	0x08018704
 800dbc8:	080187b4 	.word	0x080187b4
 800dbcc:	08018748 	.word	0x08018748

0800dbd0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d109      	bne.n	800dbf2 <tcp_close+0x22>
 800dbde:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <tcp_close+0x4c>)
 800dbe0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dbe4:	490e      	ldr	r1, [pc, #56]	; (800dc20 <tcp_close+0x50>)
 800dbe6:	480f      	ldr	r0, [pc, #60]	; (800dc24 <tcp_close+0x54>)
 800dbe8:	f008 fb8a 	bl	8016300 <iprintf>
 800dbec:	f06f 030f 	mvn.w	r3, #15
 800dbf0:	e00f      	b.n	800dc12 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	7d1b      	ldrb	r3, [r3, #20]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d006      	beq.n	800dc08 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	8b5b      	ldrh	r3, [r3, #26]
 800dbfe:	f043 0310 	orr.w	r3, r3, #16
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dc08:	2101      	movs	r1, #1
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7ff fe94 	bl	800d938 <tcp_close_shutdown>
 800dc10:	4603      	mov	r3, r0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	08018704 	.word	0x08018704
 800dc20:	08018814 	.word	0x08018814
 800dc24:	08018748 	.word	0x08018748

0800dc28 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b08e      	sub	sp, #56	; 0x38
 800dc2c:	af04      	add	r7, sp, #16
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d107      	bne.n	800dc48 <tcp_abandon+0x20>
 800dc38:	4b52      	ldr	r3, [pc, #328]	; (800dd84 <tcp_abandon+0x15c>)
 800dc3a:	f240 223d 	movw	r2, #573	; 0x23d
 800dc3e:	4952      	ldr	r1, [pc, #328]	; (800dd88 <tcp_abandon+0x160>)
 800dc40:	4852      	ldr	r0, [pc, #328]	; (800dd8c <tcp_abandon+0x164>)
 800dc42:	f008 fb5d 	bl	8016300 <iprintf>
 800dc46:	e099      	b.n	800dd7c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	7d1b      	ldrb	r3, [r3, #20]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d106      	bne.n	800dc5e <tcp_abandon+0x36>
 800dc50:	4b4c      	ldr	r3, [pc, #304]	; (800dd84 <tcp_abandon+0x15c>)
 800dc52:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dc56:	494e      	ldr	r1, [pc, #312]	; (800dd90 <tcp_abandon+0x168>)
 800dc58:	484c      	ldr	r0, [pc, #304]	; (800dd8c <tcp_abandon+0x164>)
 800dc5a:	f008 fb51 	bl	8016300 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	7d1b      	ldrb	r3, [r3, #20]
 800dc62:	2b0a      	cmp	r3, #10
 800dc64:	d107      	bne.n	800dc76 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dc66:	6879      	ldr	r1, [r7, #4]
 800dc68:	484a      	ldr	r0, [pc, #296]	; (800dd94 <tcp_abandon+0x16c>)
 800dc6a:	f000 ffc3 	bl	800ebf4 <tcp_pcb_remove>
    tcp_free(pcb);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7ff fdb0 	bl	800d7d4 <tcp_free>
 800dc74:	e082      	b.n	800dd7c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc82:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc88:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc90:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	7d1b      	ldrb	r3, [r3, #20]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d126      	bne.n	800dcee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	8adb      	ldrh	r3, [r3, #22]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d02e      	beq.n	800dd06 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dca8:	4b3b      	ldr	r3, [pc, #236]	; (800dd98 <tcp_abandon+0x170>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d105      	bne.n	800dcbe <tcp_abandon+0x96>
 800dcb2:	4b39      	ldr	r3, [pc, #228]	; (800dd98 <tcp_abandon+0x170>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	4a37      	ldr	r2, [pc, #220]	; (800dd98 <tcp_abandon+0x170>)
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	e013      	b.n	800dce6 <tcp_abandon+0xbe>
 800dcbe:	4b36      	ldr	r3, [pc, #216]	; (800dd98 <tcp_abandon+0x170>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	61fb      	str	r3, [r7, #28]
 800dcc4:	e00c      	b.n	800dce0 <tcp_abandon+0xb8>
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d104      	bne.n	800dcda <tcp_abandon+0xb2>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	68da      	ldr	r2, [r3, #12]
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	60da      	str	r2, [r3, #12]
 800dcd8:	e005      	b.n	800dce6 <tcp_abandon+0xbe>
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	61fb      	str	r3, [r7, #28]
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1ef      	bne.n	800dcc6 <tcp_abandon+0x9e>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	60da      	str	r2, [r3, #12]
 800dcec:	e00b      	b.n	800dd06 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	8adb      	ldrh	r3, [r3, #22]
 800dcf6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dcf8:	6879      	ldr	r1, [r7, #4]
 800dcfa:	4828      	ldr	r0, [pc, #160]	; (800dd9c <tcp_abandon+0x174>)
 800dcfc:	f000 ff7a 	bl	800ebf4 <tcp_pcb_remove>
 800dd00:	4b27      	ldr	r3, [pc, #156]	; (800dda0 <tcp_abandon+0x178>)
 800dd02:	2201      	movs	r2, #1
 800dd04:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d004      	beq.n	800dd18 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 fd1c 	bl	800e750 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d004      	beq.n	800dd2a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd24:	4618      	mov	r0, r3
 800dd26:	f000 fd13 	bl	800e750 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d004      	beq.n	800dd3c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd36:	4618      	mov	r0, r3
 800dd38:	f000 fd0a 	bl	800e750 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00e      	beq.n	800dd60 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dd42:	6879      	ldr	r1, [r7, #4]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	3304      	adds	r3, #4
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	8b12      	ldrh	r2, [r2, #24]
 800dd4c:	9202      	str	r2, [sp, #8]
 800dd4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dd50:	9201      	str	r2, [sp, #4]
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	460b      	mov	r3, r1
 800dd56:	697a      	ldr	r2, [r7, #20]
 800dd58:	69b9      	ldr	r1, [r7, #24]
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f004 fcc2 	bl	80126e4 <tcp_rst>
    }
    last_state = pcb->state;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	7d1b      	ldrb	r3, [r3, #20]
 800dd64:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7ff fd34 	bl	800d7d4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d004      	beq.n	800dd7c <tcp_abandon+0x154>
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	f06f 010c 	mvn.w	r1, #12
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	4798      	blx	r3
  }
}
 800dd7c:	3728      	adds	r7, #40	; 0x28
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	08018704 	.word	0x08018704
 800dd88:	08018848 	.word	0x08018848
 800dd8c:	08018748 	.word	0x08018748
 800dd90:	08018864 	.word	0x08018864
 800dd94:	20030460 	.word	0x20030460
 800dd98:	20030454 	.word	0x20030454
 800dd9c:	2003045c 	.word	0x2003045c
 800dda0:	20030464 	.word	0x20030464

0800dda4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ddac:	2101      	movs	r1, #1
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7ff ff3a 	bl	800dc28 <tcp_abandon>
}
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d106      	bne.n	800ddd8 <tcp_update_rcv_ann_wnd+0x1c>
 800ddca:	4b25      	ldr	r3, [pc, #148]	; (800de60 <tcp_update_rcv_ann_wnd+0xa4>)
 800ddcc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ddd0:	4924      	ldr	r1, [pc, #144]	; (800de64 <tcp_update_rcv_ann_wnd+0xa8>)
 800ddd2:	4825      	ldr	r0, [pc, #148]	; (800de68 <tcp_update_rcv_ann_wnd+0xac>)
 800ddd4:	f008 fa94 	bl	8016300 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dde0:	4413      	add	r3, r2
 800dde2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ddec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ddf0:	bf28      	it	cs
 800ddf2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ddf6:	b292      	uxth	r2, r2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	1ad3      	subs	r3, r2, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	db08      	blt.n	800de14 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0e:	68fa      	ldr	r2, [r7, #12]
 800de10:	1ad3      	subs	r3, r2, r3
 800de12:	e020      	b.n	800de56 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	dd03      	ble.n	800de2a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	855a      	strh	r2, [r3, #42]	; 0x2a
 800de28:	e014      	b.n	800de54 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de3c:	d306      	bcc.n	800de4c <tcp_update_rcv_ann_wnd+0x90>
 800de3e:	4b08      	ldr	r3, [pc, #32]	; (800de60 <tcp_update_rcv_ann_wnd+0xa4>)
 800de40:	f240 32b6 	movw	r2, #950	; 0x3b6
 800de44:	4909      	ldr	r1, [pc, #36]	; (800de6c <tcp_update_rcv_ann_wnd+0xb0>)
 800de46:	4808      	ldr	r0, [pc, #32]	; (800de68 <tcp_update_rcv_ann_wnd+0xac>)
 800de48:	f008 fa5a 	bl	8016300 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	b29a      	uxth	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800de54:	2300      	movs	r3, #0
  }
}
 800de56:	4618      	mov	r0, r3
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	08018704 	.word	0x08018704
 800de64:	08018960 	.word	0x08018960
 800de68:	08018748 	.word	0x08018748
 800de6c:	08018984 	.word	0x08018984

0800de70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	460b      	mov	r3, r1
 800de7a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d107      	bne.n	800de92 <tcp_recved+0x22>
 800de82:	4b1f      	ldr	r3, [pc, #124]	; (800df00 <tcp_recved+0x90>)
 800de84:	f240 32cf 	movw	r2, #975	; 0x3cf
 800de88:	491e      	ldr	r1, [pc, #120]	; (800df04 <tcp_recved+0x94>)
 800de8a:	481f      	ldr	r0, [pc, #124]	; (800df08 <tcp_recved+0x98>)
 800de8c:	f008 fa38 	bl	8016300 <iprintf>
 800de90:	e032      	b.n	800def8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	7d1b      	ldrb	r3, [r3, #20]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d106      	bne.n	800dea8 <tcp_recved+0x38>
 800de9a:	4b19      	ldr	r3, [pc, #100]	; (800df00 <tcp_recved+0x90>)
 800de9c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800dea0:	491a      	ldr	r1, [pc, #104]	; (800df0c <tcp_recved+0x9c>)
 800dea2:	4819      	ldr	r0, [pc, #100]	; (800df08 <tcp_recved+0x98>)
 800dea4:	f008 fa2c 	bl	8016300 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800deac:	887b      	ldrh	r3, [r7, #2]
 800deae:	4413      	add	r3, r2
 800deb0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800deb2:	89fb      	ldrh	r3, [r7, #14]
 800deb4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800deb8:	d804      	bhi.n	800dec4 <tcp_recved+0x54>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800debe:	89fa      	ldrh	r2, [r7, #14]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d204      	bcs.n	800dece <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800deca:	851a      	strh	r2, [r3, #40]	; 0x28
 800decc:	e002      	b.n	800ded4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	89fa      	ldrh	r2, [r7, #14]
 800ded2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7ff ff71 	bl	800ddbc <tcp_update_rcv_ann_wnd>
 800deda:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dee2:	d309      	bcc.n	800def8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	8b5b      	ldrh	r3, [r3, #26]
 800dee8:	f043 0302 	orr.w	r3, r3, #2
 800deec:	b29a      	uxth	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f003 fe42 	bl	8011b7c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	08018704 	.word	0x08018704
 800df04:	080189a0 	.word	0x080189a0
 800df08:	08018748 	.word	0x08018748
 800df0c:	080189b8 	.word	0x080189b8

0800df10 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800df10:	b5b0      	push	{r4, r5, r7, lr}
 800df12:	b090      	sub	sp, #64	; 0x40
 800df14:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800df16:	2300      	movs	r3, #0
 800df18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800df1c:	4b94      	ldr	r3, [pc, #592]	; (800e170 <tcp_slowtmr+0x260>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	3301      	adds	r3, #1
 800df22:	4a93      	ldr	r2, [pc, #588]	; (800e170 <tcp_slowtmr+0x260>)
 800df24:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800df26:	4b93      	ldr	r3, [pc, #588]	; (800e174 <tcp_slowtmr+0x264>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	3301      	adds	r3, #1
 800df2c:	b2da      	uxtb	r2, r3
 800df2e:	4b91      	ldr	r3, [pc, #580]	; (800e174 <tcp_slowtmr+0x264>)
 800df30:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800df32:	2300      	movs	r3, #0
 800df34:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800df36:	4b90      	ldr	r3, [pc, #576]	; (800e178 <tcp_slowtmr+0x268>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800df3c:	e29d      	b.n	800e47a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800df3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df40:	7d1b      	ldrb	r3, [r3, #20]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d106      	bne.n	800df54 <tcp_slowtmr+0x44>
 800df46:	4b8d      	ldr	r3, [pc, #564]	; (800e17c <tcp_slowtmr+0x26c>)
 800df48:	f240 42be 	movw	r2, #1214	; 0x4be
 800df4c:	498c      	ldr	r1, [pc, #560]	; (800e180 <tcp_slowtmr+0x270>)
 800df4e:	488d      	ldr	r0, [pc, #564]	; (800e184 <tcp_slowtmr+0x274>)
 800df50:	f008 f9d6 	bl	8016300 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	7d1b      	ldrb	r3, [r3, #20]
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d106      	bne.n	800df6a <tcp_slowtmr+0x5a>
 800df5c:	4b87      	ldr	r3, [pc, #540]	; (800e17c <tcp_slowtmr+0x26c>)
 800df5e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800df62:	4989      	ldr	r1, [pc, #548]	; (800e188 <tcp_slowtmr+0x278>)
 800df64:	4887      	ldr	r0, [pc, #540]	; (800e184 <tcp_slowtmr+0x274>)
 800df66:	f008 f9cb 	bl	8016300 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800df6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6c:	7d1b      	ldrb	r3, [r3, #20]
 800df6e:	2b0a      	cmp	r3, #10
 800df70:	d106      	bne.n	800df80 <tcp_slowtmr+0x70>
 800df72:	4b82      	ldr	r3, [pc, #520]	; (800e17c <tcp_slowtmr+0x26c>)
 800df74:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800df78:	4984      	ldr	r1, [pc, #528]	; (800e18c <tcp_slowtmr+0x27c>)
 800df7a:	4882      	ldr	r0, [pc, #520]	; (800e184 <tcp_slowtmr+0x274>)
 800df7c:	f008 f9c0 	bl	8016300 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	7f9a      	ldrb	r2, [r3, #30]
 800df84:	4b7b      	ldr	r3, [pc, #492]	; (800e174 <tcp_slowtmr+0x264>)
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d105      	bne.n	800df98 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800df8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800df90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800df96:	e270      	b.n	800e47a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800df98:	4b76      	ldr	r3, [pc, #472]	; (800e174 <tcp_slowtmr+0x264>)
 800df9a:	781a      	ldrb	r2, [r3, #0]
 800df9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfae:	7d1b      	ldrb	r3, [r3, #20]
 800dfb0:	2b02      	cmp	r3, #2
 800dfb2:	d10a      	bne.n	800dfca <tcp_slowtmr+0xba>
 800dfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfba:	2b05      	cmp	r3, #5
 800dfbc:	d905      	bls.n	800dfca <tcp_slowtmr+0xba>
      ++pcb_remove;
 800dfbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfc8:	e11e      	b.n	800e208 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfd0:	2b0b      	cmp	r3, #11
 800dfd2:	d905      	bls.n	800dfe0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800dfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfd8:	3301      	adds	r3, #1
 800dfda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfde:	e113      	b.n	800e208 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d075      	beq.n	800e0d6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d006      	beq.n	800e000 <tcp_slowtmr+0xf0>
 800dff2:	4b62      	ldr	r3, [pc, #392]	; (800e17c <tcp_slowtmr+0x26c>)
 800dff4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dff8:	4965      	ldr	r1, [pc, #404]	; (800e190 <tcp_slowtmr+0x280>)
 800dffa:	4862      	ldr	r0, [pc, #392]	; (800e184 <tcp_slowtmr+0x274>)
 800dffc:	f008 f980 	bl	8016300 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e004:	2b00      	cmp	r3, #0
 800e006:	d106      	bne.n	800e016 <tcp_slowtmr+0x106>
 800e008:	4b5c      	ldr	r3, [pc, #368]	; (800e17c <tcp_slowtmr+0x26c>)
 800e00a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e00e:	4961      	ldr	r1, [pc, #388]	; (800e194 <tcp_slowtmr+0x284>)
 800e010:	485c      	ldr	r0, [pc, #368]	; (800e184 <tcp_slowtmr+0x274>)
 800e012:	f008 f975 	bl	8016300 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e018:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e01c:	2b0b      	cmp	r3, #11
 800e01e:	d905      	bls.n	800e02c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e024:	3301      	adds	r3, #1
 800e026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e02a:	e0ed      	b.n	800e208 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e032:	3b01      	subs	r3, #1
 800e034:	4a58      	ldr	r2, [pc, #352]	; (800e198 <tcp_slowtmr+0x288>)
 800e036:	5cd3      	ldrb	r3, [r2, r3]
 800e038:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e040:	7c7a      	ldrb	r2, [r7, #17]
 800e042:	429a      	cmp	r2, r3
 800e044:	d907      	bls.n	800e056 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e048:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e04c:	3301      	adds	r3, #1
 800e04e:	b2da      	uxtb	r2, r3
 800e050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e052:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e05c:	7c7a      	ldrb	r2, [r7, #17]
 800e05e:	429a      	cmp	r2, r3
 800e060:	f200 80d2 	bhi.w	800e208 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e064:	2301      	movs	r3, #1
 800e066:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d108      	bne.n	800e084 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e074:	f004 fc2a 	bl	80128cc <tcp_zero_window_probe>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d014      	beq.n	800e0a8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e07e:	2300      	movs	r3, #0
 800e080:	623b      	str	r3, [r7, #32]
 800e082:	e011      	b.n	800e0a8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e08a:	4619      	mov	r1, r3
 800e08c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e08e:	f003 faef 	bl	8011670 <tcp_split_unsent_seg>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d107      	bne.n	800e0a8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e09a:	f003 fd6f 	bl	8011b7c <tcp_output>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d101      	bne.n	800e0a8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e0a8:	6a3b      	ldr	r3, [r7, #32]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f000 80ac 	beq.w	800e208 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e0be:	2b06      	cmp	r3, #6
 800e0c0:	f200 80a2 	bhi.w	800e208 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e0d4:	e098      	b.n	800e208 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	db0f      	blt.n	800e100 <tcp_slowtmr+0x1f0>
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d008      	beq.n	800e100 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	b21a      	sxth	r2, r3
 800e0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e102:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e108:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e10c:	429a      	cmp	r2, r3
 800e10e:	db7b      	blt.n	800e208 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e112:	f004 f825 	bl	8012160 <tcp_rexmit_rto_prepare>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d007      	beq.n	800e12c <tcp_slowtmr+0x21c>
 800e11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e120:	2b00      	cmp	r3, #0
 800e122:	d171      	bne.n	800e208 <tcp_slowtmr+0x2f8>
 800e124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d06d      	beq.n	800e208 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12e:	7d1b      	ldrb	r3, [r3, #20]
 800e130:	2b02      	cmp	r3, #2
 800e132:	d03a      	beq.n	800e1aa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e13a:	2b0c      	cmp	r3, #12
 800e13c:	bf28      	it	cs
 800e13e:	230c      	movcs	r3, #12
 800e140:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e144:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e148:	10db      	asrs	r3, r3, #3
 800e14a:	b21b      	sxth	r3, r3
 800e14c:	461a      	mov	r2, r3
 800e14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e150:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e154:	4413      	add	r3, r2
 800e156:	7efa      	ldrb	r2, [r7, #27]
 800e158:	4910      	ldr	r1, [pc, #64]	; (800e19c <tcp_slowtmr+0x28c>)
 800e15a:	5c8a      	ldrb	r2, [r1, r2]
 800e15c:	4093      	lsls	r3, r2
 800e15e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e166:	4293      	cmp	r3, r2
 800e168:	dc1a      	bgt.n	800e1a0 <tcp_slowtmr+0x290>
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	b21a      	sxth	r2, r3
 800e16e:	e019      	b.n	800e1a4 <tcp_slowtmr+0x294>
 800e170:	20030450 	.word	0x20030450
 800e174:	20030466 	.word	0x20030466
 800e178:	2003045c 	.word	0x2003045c
 800e17c:	08018704 	.word	0x08018704
 800e180:	08018a48 	.word	0x08018a48
 800e184:	08018748 	.word	0x08018748
 800e188:	08018a74 	.word	0x08018a74
 800e18c:	08018aa0 	.word	0x08018aa0
 800e190:	08018ad0 	.word	0x08018ad0
 800e194:	08018b04 	.word	0x08018b04
 800e198:	0801a71c 	.word	0x0801a71c
 800e19c:	0801a70c 	.word	0x0801a70c
 800e1a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	bf28      	it	cs
 800e1c0:	4613      	movcs	r3, r2
 800e1c2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e1c4:	8a7b      	ldrh	r3, [r7, #18]
 800e1c6:	085b      	lsrs	r3, r3, #1
 800e1c8:	b29a      	uxth	r2, r3
 800e1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1da:	005b      	lsls	r3, r3, #1
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d206      	bcs.n	800e1f0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1e6:	005b      	lsls	r3, r3, #1
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e204:	f004 f81c 	bl	8012240 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20a:	7d1b      	ldrb	r3, [r3, #20]
 800e20c:	2b06      	cmp	r3, #6
 800e20e:	d111      	bne.n	800e234 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e212:	8b5b      	ldrh	r3, [r3, #26]
 800e214:	f003 0310 	and.w	r3, r3, #16
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00b      	beq.n	800e234 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e21c:	4b9c      	ldr	r3, [pc, #624]	; (800e490 <tcp_slowtmr+0x580>)
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e222:	6a1b      	ldr	r3, [r3, #32]
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	2b28      	cmp	r3, #40	; 0x28
 800e228:	d904      	bls.n	800e234 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e22a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e22e:	3301      	adds	r3, #1
 800e230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e236:	7a5b      	ldrb	r3, [r3, #9]
 800e238:	f003 0308 	and.w	r3, r3, #8
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d04a      	beq.n	800e2d6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e242:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e244:	2b04      	cmp	r3, #4
 800e246:	d003      	beq.n	800e250 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e24c:	2b07      	cmp	r3, #7
 800e24e:	d142      	bne.n	800e2d6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e250:	4b8f      	ldr	r3, [pc, #572]	; (800e490 <tcp_slowtmr+0x580>)
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e256:	6a1b      	ldr	r3, [r3, #32]
 800e258:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e260:	4b8c      	ldr	r3, [pc, #560]	; (800e494 <tcp_slowtmr+0x584>)
 800e262:	440b      	add	r3, r1
 800e264:	498c      	ldr	r1, [pc, #560]	; (800e498 <tcp_slowtmr+0x588>)
 800e266:	fba1 1303 	umull	r1, r3, r1, r3
 800e26a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d90a      	bls.n	800e286 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e274:	3301      	adds	r3, #1
 800e276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e27a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e27e:	3301      	adds	r3, #1
 800e280:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e284:	e027      	b.n	800e2d6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e286:	4b82      	ldr	r3, [pc, #520]	; (800e490 <tcp_slowtmr+0x580>)
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28c:	6a1b      	ldr	r3, [r3, #32]
 800e28e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e292:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e298:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e29c:	4618      	mov	r0, r3
 800e29e:	4b7f      	ldr	r3, [pc, #508]	; (800e49c <tcp_slowtmr+0x58c>)
 800e2a0:	fb00 f303 	mul.w	r3, r0, r3
 800e2a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e2a6:	497c      	ldr	r1, [pc, #496]	; (800e498 <tcp_slowtmr+0x588>)
 800e2a8:	fba1 1303 	umull	r1, r3, r1, r3
 800e2ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d911      	bls.n	800e2d6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2b4:	f004 faca 	bl	801284c <tcp_keepalive>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e2be:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d107      	bne.n	800e2d6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d011      	beq.n	800e302 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e2de:	4b6c      	ldr	r3, [pc, #432]	; (800e490 <tcp_slowtmr+0x580>)
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e4:	6a1b      	ldr	r3, [r3, #32]
 800e2e6:	1ad2      	subs	r2, r2, r3
 800e2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	005b      	lsls	r3, r3, #1
 800e2f4:	440b      	add	r3, r1
 800e2f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d302      	bcc.n	800e302 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e2fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2fe:	f000 fddd 	bl	800eebc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	7d1b      	ldrb	r3, [r3, #20]
 800e306:	2b03      	cmp	r3, #3
 800e308:	d10b      	bne.n	800e322 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e30a:	4b61      	ldr	r3, [pc, #388]	; (800e490 <tcp_slowtmr+0x580>)
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e310:	6a1b      	ldr	r3, [r3, #32]
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	2b28      	cmp	r3, #40	; 0x28
 800e316:	d904      	bls.n	800e322 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e31c:	3301      	adds	r3, #1
 800e31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e324:	7d1b      	ldrb	r3, [r3, #20]
 800e326:	2b09      	cmp	r3, #9
 800e328:	d10b      	bne.n	800e342 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e32a:	4b59      	ldr	r3, [pc, #356]	; (800e490 <tcp_slowtmr+0x580>)
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e330:	6a1b      	ldr	r3, [r3, #32]
 800e332:	1ad3      	subs	r3, r2, r3
 800e334:	2bf0      	cmp	r3, #240	; 0xf0
 800e336:	d904      	bls.n	800e342 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e33c:	3301      	adds	r3, #1
 800e33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e346:	2b00      	cmp	r3, #0
 800e348:	d060      	beq.n	800e40c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e350:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e354:	f000 fbfe 	bl	800eb54 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d010      	beq.n	800e380 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e35e:	4b50      	ldr	r3, [pc, #320]	; (800e4a0 <tcp_slowtmr+0x590>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e364:	429a      	cmp	r2, r3
 800e366:	d106      	bne.n	800e376 <tcp_slowtmr+0x466>
 800e368:	4b4e      	ldr	r3, [pc, #312]	; (800e4a4 <tcp_slowtmr+0x594>)
 800e36a:	f240 526d 	movw	r2, #1389	; 0x56d
 800e36e:	494e      	ldr	r1, [pc, #312]	; (800e4a8 <tcp_slowtmr+0x598>)
 800e370:	484e      	ldr	r0, [pc, #312]	; (800e4ac <tcp_slowtmr+0x59c>)
 800e372:	f007 ffc5 	bl	8016300 <iprintf>
        prev->next = pcb->next;
 800e376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e378:	68da      	ldr	r2, [r3, #12]
 800e37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37c:	60da      	str	r2, [r3, #12]
 800e37e:	e00f      	b.n	800e3a0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e380:	4b47      	ldr	r3, [pc, #284]	; (800e4a0 <tcp_slowtmr+0x590>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e386:	429a      	cmp	r2, r3
 800e388:	d006      	beq.n	800e398 <tcp_slowtmr+0x488>
 800e38a:	4b46      	ldr	r3, [pc, #280]	; (800e4a4 <tcp_slowtmr+0x594>)
 800e38c:	f240 5271 	movw	r2, #1393	; 0x571
 800e390:	4947      	ldr	r1, [pc, #284]	; (800e4b0 <tcp_slowtmr+0x5a0>)
 800e392:	4846      	ldr	r0, [pc, #280]	; (800e4ac <tcp_slowtmr+0x59c>)
 800e394:	f007 ffb4 	bl	8016300 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	4a40      	ldr	r2, [pc, #256]	; (800e4a0 <tcp_slowtmr+0x590>)
 800e39e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e3a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d013      	beq.n	800e3d0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e3b0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b4:	3304      	adds	r3, #4
 800e3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3b8:	8ad2      	ldrh	r2, [r2, #22]
 800e3ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3bc:	8b09      	ldrh	r1, [r1, #24]
 800e3be:	9102      	str	r1, [sp, #8]
 800e3c0:	9201      	str	r2, [sp, #4]
 800e3c2:	9300      	str	r3, [sp, #0]
 800e3c4:	462b      	mov	r3, r5
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	4601      	mov	r1, r0
 800e3ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3cc:	f004 f98a 	bl	80126e4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d8:	7d1b      	ldrb	r3, [r3, #20]
 800e3da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e3e6:	6838      	ldr	r0, [r7, #0]
 800e3e8:	f7ff f9f4 	bl	800d7d4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e3ec:	4b31      	ldr	r3, [pc, #196]	; (800e4b4 <tcp_slowtmr+0x5a4>)
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d004      	beq.n	800e402 <tcp_slowtmr+0x4f2>
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f06f 010c 	mvn.w	r1, #12
 800e3fe:	68b8      	ldr	r0, [r7, #8]
 800e400:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e402:	4b2c      	ldr	r3, [pc, #176]	; (800e4b4 <tcp_slowtmr+0x5a4>)
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d037      	beq.n	800e47a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e40a:	e592      	b.n	800df32 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e418:	7f1b      	ldrb	r3, [r3, #28]
 800e41a:	3301      	adds	r3, #1
 800e41c:	b2da      	uxtb	r2, r3
 800e41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e420:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	7f1a      	ldrb	r2, [r3, #28]
 800e426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e428:	7f5b      	ldrb	r3, [r3, #29]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d325      	bcc.n	800e47a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e430:	2200      	movs	r2, #0
 800e432:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e434:	4b1f      	ldr	r3, [pc, #124]	; (800e4b4 <tcp_slowtmr+0x5a4>)
 800e436:	2200      	movs	r2, #0
 800e438:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00b      	beq.n	800e45c <tcp_slowtmr+0x54c>
 800e444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e44c:	6912      	ldr	r2, [r2, #16]
 800e44e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e450:	4610      	mov	r0, r2
 800e452:	4798      	blx	r3
 800e454:	4603      	mov	r3, r0
 800e456:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e45a:	e002      	b.n	800e462 <tcp_slowtmr+0x552>
 800e45c:	2300      	movs	r3, #0
 800e45e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e462:	4b14      	ldr	r3, [pc, #80]	; (800e4b4 <tcp_slowtmr+0x5a4>)
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d000      	beq.n	800e46c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e46a:	e562      	b.n	800df32 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e46c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e470:	2b00      	cmp	r3, #0
 800e472:	d102      	bne.n	800e47a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e476:	f003 fb81 	bl	8011b7c <tcp_output>
  while (pcb != NULL) {
 800e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f47f ad5e 	bne.w	800df3e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e482:	2300      	movs	r3, #0
 800e484:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e486:	4b0c      	ldr	r3, [pc, #48]	; (800e4b8 <tcp_slowtmr+0x5a8>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e48c:	e069      	b.n	800e562 <tcp_slowtmr+0x652>
 800e48e:	bf00      	nop
 800e490:	20030450 	.word	0x20030450
 800e494:	000a4cb8 	.word	0x000a4cb8
 800e498:	10624dd3 	.word	0x10624dd3
 800e49c:	000124f8 	.word	0x000124f8
 800e4a0:	2003045c 	.word	0x2003045c
 800e4a4:	08018704 	.word	0x08018704
 800e4a8:	08018b3c 	.word	0x08018b3c
 800e4ac:	08018748 	.word	0x08018748
 800e4b0:	08018b68 	.word	0x08018b68
 800e4b4:	20030464 	.word	0x20030464
 800e4b8:	20030460 	.word	0x20030460
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4be:	7d1b      	ldrb	r3, [r3, #20]
 800e4c0:	2b0a      	cmp	r3, #10
 800e4c2:	d006      	beq.n	800e4d2 <tcp_slowtmr+0x5c2>
 800e4c4:	4b2b      	ldr	r3, [pc, #172]	; (800e574 <tcp_slowtmr+0x664>)
 800e4c6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e4ca:	492b      	ldr	r1, [pc, #172]	; (800e578 <tcp_slowtmr+0x668>)
 800e4cc:	482b      	ldr	r0, [pc, #172]	; (800e57c <tcp_slowtmr+0x66c>)
 800e4ce:	f007 ff17 	bl	8016300 <iprintf>
    pcb_remove = 0;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e4d8:	4b29      	ldr	r3, [pc, #164]	; (800e580 <tcp_slowtmr+0x670>)
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	6a1b      	ldr	r3, [r3, #32]
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	2bf0      	cmp	r3, #240	; 0xf0
 800e4e4:	d904      	bls.n	800e4f0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e4e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d02f      	beq.n	800e558 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e4f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4fa:	f000 fb2b 	bl	800eb54 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	2b00      	cmp	r3, #0
 800e502:	d010      	beq.n	800e526 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e504:	4b1f      	ldr	r3, [pc, #124]	; (800e584 <tcp_slowtmr+0x674>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d106      	bne.n	800e51c <tcp_slowtmr+0x60c>
 800e50e:	4b19      	ldr	r3, [pc, #100]	; (800e574 <tcp_slowtmr+0x664>)
 800e510:	f240 52af 	movw	r2, #1455	; 0x5af
 800e514:	491c      	ldr	r1, [pc, #112]	; (800e588 <tcp_slowtmr+0x678>)
 800e516:	4819      	ldr	r0, [pc, #100]	; (800e57c <tcp_slowtmr+0x66c>)
 800e518:	f007 fef2 	bl	8016300 <iprintf>
        prev->next = pcb->next;
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	68da      	ldr	r2, [r3, #12]
 800e520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e522:	60da      	str	r2, [r3, #12]
 800e524:	e00f      	b.n	800e546 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e526:	4b17      	ldr	r3, [pc, #92]	; (800e584 <tcp_slowtmr+0x674>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d006      	beq.n	800e53e <tcp_slowtmr+0x62e>
 800e530:	4b10      	ldr	r3, [pc, #64]	; (800e574 <tcp_slowtmr+0x664>)
 800e532:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e536:	4915      	ldr	r1, [pc, #84]	; (800e58c <tcp_slowtmr+0x67c>)
 800e538:	4810      	ldr	r0, [pc, #64]	; (800e57c <tcp_slowtmr+0x66c>)
 800e53a:	f007 fee1 	bl	8016300 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	4a10      	ldr	r2, [pc, #64]	; (800e584 <tcp_slowtmr+0x674>)
 800e544:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e548:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e550:	69f8      	ldr	r0, [r7, #28]
 800e552:	f7ff f93f 	bl	800d7d4 <tcp_free>
 800e556:	e004      	b.n	800e562 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1a9      	bne.n	800e4bc <tcp_slowtmr+0x5ac>
    }
  }
}
 800e568:	bf00      	nop
 800e56a:	bf00      	nop
 800e56c:	3730      	adds	r7, #48	; 0x30
 800e56e:	46bd      	mov	sp, r7
 800e570:	bdb0      	pop	{r4, r5, r7, pc}
 800e572:	bf00      	nop
 800e574:	08018704 	.word	0x08018704
 800e578:	08018b94 	.word	0x08018b94
 800e57c:	08018748 	.word	0x08018748
 800e580:	20030450 	.word	0x20030450
 800e584:	20030460 	.word	0x20030460
 800e588:	08018bc4 	.word	0x08018bc4
 800e58c:	08018bec 	.word	0x08018bec

0800e590 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e596:	4b2d      	ldr	r3, [pc, #180]	; (800e64c <tcp_fasttmr+0xbc>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	3301      	adds	r3, #1
 800e59c:	b2da      	uxtb	r2, r3
 800e59e:	4b2b      	ldr	r3, [pc, #172]	; (800e64c <tcp_fasttmr+0xbc>)
 800e5a0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e5a2:	4b2b      	ldr	r3, [pc, #172]	; (800e650 <tcp_fasttmr+0xc0>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e5a8:	e048      	b.n	800e63c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	7f9a      	ldrb	r2, [r3, #30]
 800e5ae:	4b27      	ldr	r3, [pc, #156]	; (800e64c <tcp_fasttmr+0xbc>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d03f      	beq.n	800e636 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e5b6:	4b25      	ldr	r3, [pc, #148]	; (800e64c <tcp_fasttmr+0xbc>)
 800e5b8:	781a      	ldrb	r2, [r3, #0]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	8b5b      	ldrh	r3, [r3, #26]
 800e5c2:	f003 0301 	and.w	r3, r3, #1
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d010      	beq.n	800e5ec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	8b5b      	ldrh	r3, [r3, #26]
 800e5ce:	f043 0302 	orr.w	r3, r3, #2
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f003 facf 	bl	8011b7c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	8b5b      	ldrh	r3, [r3, #26]
 800e5e2:	f023 0303 	bic.w	r3, r3, #3
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	8b5b      	ldrh	r3, [r3, #26]
 800e5f0:	f003 0308 	and.w	r3, r3, #8
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d009      	beq.n	800e60c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	8b5b      	ldrh	r3, [r3, #26]
 800e5fc:	f023 0308 	bic.w	r3, r3, #8
 800e600:	b29a      	uxth	r2, r3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f7ff fa78 	bl	800dafc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00a      	beq.n	800e630 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e61a:	4b0e      	ldr	r3, [pc, #56]	; (800e654 <tcp_fasttmr+0xc4>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f819 	bl	800e658 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e626:	4b0b      	ldr	r3, [pc, #44]	; (800e654 <tcp_fasttmr+0xc4>)
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d000      	beq.n	800e630 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e62e:	e7b8      	b.n	800e5a2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	607b      	str	r3, [r7, #4]
 800e634:	e002      	b.n	800e63c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1b3      	bne.n	800e5aa <tcp_fasttmr+0x1a>
    }
  }
}
 800e642:	bf00      	nop
 800e644:	bf00      	nop
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	20030466 	.word	0x20030466
 800e650:	2003045c 	.word	0x2003045c
 800e654:	20030464 	.word	0x20030464

0800e658 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e658:	b590      	push	{r4, r7, lr}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d109      	bne.n	800e67a <tcp_process_refused_data+0x22>
 800e666:	4b37      	ldr	r3, [pc, #220]	; (800e744 <tcp_process_refused_data+0xec>)
 800e668:	f240 6209 	movw	r2, #1545	; 0x609
 800e66c:	4936      	ldr	r1, [pc, #216]	; (800e748 <tcp_process_refused_data+0xf0>)
 800e66e:	4837      	ldr	r0, [pc, #220]	; (800e74c <tcp_process_refused_data+0xf4>)
 800e670:	f007 fe46 	bl	8016300 <iprintf>
 800e674:	f06f 030f 	mvn.w	r3, #15
 800e678:	e060      	b.n	800e73c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e67e:	7b5b      	ldrb	r3, [r3, #13]
 800e680:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e686:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00b      	beq.n	800e6b0 <tcp_process_refused_data+0x58>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6918      	ldr	r0, [r3, #16]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	68ba      	ldr	r2, [r7, #8]
 800e6a6:	6879      	ldr	r1, [r7, #4]
 800e6a8:	47a0      	blx	r4
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	73fb      	strb	r3, [r7, #15]
 800e6ae:	e007      	b.n	800e6c0 <tcp_process_refused_data+0x68>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	68ba      	ldr	r2, [r7, #8]
 800e6b4:	6879      	ldr	r1, [r7, #4]
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	f000 f8a4 	bl	800e804 <tcp_recv_null>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e6c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d12a      	bne.n	800e71e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e6c8:	7bbb      	ldrb	r3, [r7, #14]
 800e6ca:	f003 0320 	and.w	r3, r3, #32
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d033      	beq.n	800e73a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e6da:	d005      	beq.n	800e6e8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00b      	beq.n	800e70a <tcp_process_refused_data+0xb2>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6918      	ldr	r0, [r3, #16]
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	2200      	movs	r2, #0
 800e700:	6879      	ldr	r1, [r7, #4]
 800e702:	47a0      	blx	r4
 800e704:	4603      	mov	r3, r0
 800e706:	73fb      	strb	r3, [r7, #15]
 800e708:	e001      	b.n	800e70e <tcp_process_refused_data+0xb6>
 800e70a:	2300      	movs	r3, #0
 800e70c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e712:	f113 0f0d 	cmn.w	r3, #13
 800e716:	d110      	bne.n	800e73a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e718:	f06f 030c 	mvn.w	r3, #12
 800e71c:	e00e      	b.n	800e73c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e722:	f113 0f0d 	cmn.w	r3, #13
 800e726:	d102      	bne.n	800e72e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e728:	f06f 030c 	mvn.w	r3, #12
 800e72c:	e006      	b.n	800e73c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	68ba      	ldr	r2, [r7, #8]
 800e732:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e734:	f06f 0304 	mvn.w	r3, #4
 800e738:	e000      	b.n	800e73c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e73a:	2300      	movs	r3, #0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3714      	adds	r7, #20
 800e740:	46bd      	mov	sp, r7
 800e742:	bd90      	pop	{r4, r7, pc}
 800e744:	08018704 	.word	0x08018704
 800e748:	08018c14 	.word	0x08018c14
 800e74c:	08018748 	.word	0x08018748

0800e750 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e758:	e007      	b.n	800e76a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f000 f80a 	bl	800e77a <tcp_seg_free>
    seg = next;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1f4      	bne.n	800e75a <tcp_segs_free+0xa>
  }
}
 800e770:	bf00      	nop
 800e772:	bf00      	nop
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b082      	sub	sp, #8
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00c      	beq.n	800e7a2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d004      	beq.n	800e79a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	4618      	mov	r0, r3
 800e796:	f7fe fc73 	bl	800d080 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e79a:	6879      	ldr	r1, [r7, #4]
 800e79c:	2003      	movs	r0, #3
 800e79e:	f7fd fdcb 	bl	800c338 <memp_free>
  }
}
 800e7a2:	bf00      	nop
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
	...

0800e7ac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d106      	bne.n	800e7c8 <tcp_seg_copy+0x1c>
 800e7ba:	4b0f      	ldr	r3, [pc, #60]	; (800e7f8 <tcp_seg_copy+0x4c>)
 800e7bc:	f240 6282 	movw	r2, #1666	; 0x682
 800e7c0:	490e      	ldr	r1, [pc, #56]	; (800e7fc <tcp_seg_copy+0x50>)
 800e7c2:	480f      	ldr	r0, [pc, #60]	; (800e800 <tcp_seg_copy+0x54>)
 800e7c4:	f007 fd9c 	bl	8016300 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e7c8:	2003      	movs	r0, #3
 800e7ca:	f7fd fd3f 	bl	800c24c <memp_malloc>
 800e7ce:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d101      	bne.n	800e7da <tcp_seg_copy+0x2e>
    return NULL;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	e00a      	b.n	800e7f0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e7da:	2210      	movs	r2, #16
 800e7dc:	6879      	ldr	r1, [r7, #4]
 800e7de:	68f8      	ldr	r0, [r7, #12]
 800e7e0:	f007 fcc9 	bl	8016176 <memcpy>
  pbuf_ref(cseg->p);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fe fcef 	bl	800d1cc <pbuf_ref>
  return cseg;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3710      	adds	r7, #16
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}
 800e7f8:	08018704 	.word	0x08018704
 800e7fc:	08018c58 	.word	0x08018c58
 800e800:	08018748 	.word	0x08018748

0800e804 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]
 800e810:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d109      	bne.n	800e82c <tcp_recv_null+0x28>
 800e818:	4b12      	ldr	r3, [pc, #72]	; (800e864 <tcp_recv_null+0x60>)
 800e81a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e81e:	4912      	ldr	r1, [pc, #72]	; (800e868 <tcp_recv_null+0x64>)
 800e820:	4812      	ldr	r0, [pc, #72]	; (800e86c <tcp_recv_null+0x68>)
 800e822:	f007 fd6d 	bl	8016300 <iprintf>
 800e826:	f06f 030f 	mvn.w	r3, #15
 800e82a:	e016      	b.n	800e85a <tcp_recv_null+0x56>

  if (p != NULL) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d009      	beq.n	800e846 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	891b      	ldrh	r3, [r3, #8]
 800e836:	4619      	mov	r1, r3
 800e838:	68b8      	ldr	r0, [r7, #8]
 800e83a:	f7ff fb19 	bl	800de70 <tcp_recved>
    pbuf_free(p);
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f7fe fc1e 	bl	800d080 <pbuf_free>
 800e844:	e008      	b.n	800e858 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d104      	bne.n	800e858 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e84e:	68b8      	ldr	r0, [r7, #8]
 800e850:	f7ff f9be 	bl	800dbd0 <tcp_close>
 800e854:	4603      	mov	r3, r0
 800e856:	e000      	b.n	800e85a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	08018704 	.word	0x08018704
 800e868:	08018c74 	.word	0x08018c74
 800e86c:	08018748 	.word	0x08018748

0800e870 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
 800e876:	4603      	mov	r3, r0
 800e878:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e87a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	db01      	blt.n	800e886 <tcp_kill_prio+0x16>
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	e000      	b.n	800e888 <tcp_kill_prio+0x18>
 800e886:	237f      	movs	r3, #127	; 0x7f
 800e888:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e88a:	7afb      	ldrb	r3, [r7, #11]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d034      	beq.n	800e8fa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e890:	7afb      	ldrb	r3, [r7, #11]
 800e892:	3b01      	subs	r3, #1
 800e894:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e896:	2300      	movs	r3, #0
 800e898:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e89a:	2300      	movs	r3, #0
 800e89c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e89e:	4b19      	ldr	r3, [pc, #100]	; (800e904 <tcp_kill_prio+0x94>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	617b      	str	r3, [r7, #20]
 800e8a4:	e01f      	b.n	800e8e6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	7d5b      	ldrb	r3, [r3, #21]
 800e8aa:	7afa      	ldrb	r2, [r7, #11]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d80c      	bhi.n	800e8ca <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e8b4:	7afa      	ldrb	r2, [r7, #11]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d112      	bne.n	800e8e0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e8ba:	4b13      	ldr	r3, [pc, #76]	; (800e908 <tcp_kill_prio+0x98>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	6a1b      	ldr	r3, [r3, #32]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d80a      	bhi.n	800e8e0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e8ca:	4b0f      	ldr	r3, [pc, #60]	; (800e908 <tcp_kill_prio+0x98>)
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	6a1b      	ldr	r3, [r3, #32]
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	7d5b      	ldrb	r3, [r3, #21]
 800e8de:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	617b      	str	r3, [r7, #20]
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1dc      	bne.n	800e8a6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d004      	beq.n	800e8fc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e8f2:	6938      	ldr	r0, [r7, #16]
 800e8f4:	f7ff fa56 	bl	800dda4 <tcp_abort>
 800e8f8:	e000      	b.n	800e8fc <tcp_kill_prio+0x8c>
    return;
 800e8fa:	bf00      	nop
  }
}
 800e8fc:	3718      	adds	r7, #24
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	2003045c 	.word	0x2003045c
 800e908:	20030450 	.word	0x20030450

0800e90c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b086      	sub	sp, #24
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e916:	79fb      	ldrb	r3, [r7, #7]
 800e918:	2b08      	cmp	r3, #8
 800e91a:	d009      	beq.n	800e930 <tcp_kill_state+0x24>
 800e91c:	79fb      	ldrb	r3, [r7, #7]
 800e91e:	2b09      	cmp	r3, #9
 800e920:	d006      	beq.n	800e930 <tcp_kill_state+0x24>
 800e922:	4b1a      	ldr	r3, [pc, #104]	; (800e98c <tcp_kill_state+0x80>)
 800e924:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e928:	4919      	ldr	r1, [pc, #100]	; (800e990 <tcp_kill_state+0x84>)
 800e92a:	481a      	ldr	r0, [pc, #104]	; (800e994 <tcp_kill_state+0x88>)
 800e92c:	f007 fce8 	bl	8016300 <iprintf>

  inactivity = 0;
 800e930:	2300      	movs	r3, #0
 800e932:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e934:	2300      	movs	r3, #0
 800e936:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e938:	4b17      	ldr	r3, [pc, #92]	; (800e998 <tcp_kill_state+0x8c>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	617b      	str	r3, [r7, #20]
 800e93e:	e017      	b.n	800e970 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	7d1b      	ldrb	r3, [r3, #20]
 800e944:	79fa      	ldrb	r2, [r7, #7]
 800e946:	429a      	cmp	r2, r3
 800e948:	d10f      	bne.n	800e96a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e94a:	4b14      	ldr	r3, [pc, #80]	; (800e99c <tcp_kill_state+0x90>)
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	6a1b      	ldr	r3, [r3, #32]
 800e952:	1ad3      	subs	r3, r2, r3
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	429a      	cmp	r2, r3
 800e958:	d807      	bhi.n	800e96a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e95a:	4b10      	ldr	r3, [pc, #64]	; (800e99c <tcp_kill_state+0x90>)
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	6a1b      	ldr	r3, [r3, #32]
 800e962:	1ad3      	subs	r3, r2, r3
 800e964:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	617b      	str	r3, [r7, #20]
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1e4      	bne.n	800e940 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d003      	beq.n	800e984 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e97c:	2100      	movs	r1, #0
 800e97e:	6938      	ldr	r0, [r7, #16]
 800e980:	f7ff f952 	bl	800dc28 <tcp_abandon>
  }
}
 800e984:	bf00      	nop
 800e986:	3718      	adds	r7, #24
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	08018704 	.word	0x08018704
 800e990:	08018c90 	.word	0x08018c90
 800e994:	08018748 	.word	0x08018748
 800e998:	2003045c 	.word	0x2003045c
 800e99c:	20030450 	.word	0x20030450

0800e9a0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9ae:	4b12      	ldr	r3, [pc, #72]	; (800e9f8 <tcp_kill_timewait+0x58>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	60fb      	str	r3, [r7, #12]
 800e9b4:	e012      	b.n	800e9dc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e9b6:	4b11      	ldr	r3, [pc, #68]	; (800e9fc <tcp_kill_timewait+0x5c>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6a1b      	ldr	r3, [r3, #32]
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d807      	bhi.n	800e9d6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e9c6:	4b0d      	ldr	r3, [pc, #52]	; (800e9fc <tcp_kill_timewait+0x5c>)
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6a1b      	ldr	r3, [r3, #32]
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1e9      	bne.n	800e9b6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d002      	beq.n	800e9ee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e9e8:	68b8      	ldr	r0, [r7, #8]
 800e9ea:	f7ff f9db 	bl	800dda4 <tcp_abort>
  }
}
 800e9ee:	bf00      	nop
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	20030460 	.word	0x20030460
 800e9fc:	20030450 	.word	0x20030450

0800ea00 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ea06:	4b10      	ldr	r3, [pc, #64]	; (800ea48 <tcp_handle_closepend+0x48>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea0c:	e014      	b.n	800ea38 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	8b5b      	ldrh	r3, [r3, #26]
 800ea18:	f003 0308 	and.w	r3, r3, #8
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d009      	beq.n	800ea34 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	8b5b      	ldrh	r3, [r3, #26]
 800ea24:	f023 0308 	bic.w	r3, r3, #8
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7ff f864 	bl	800dafc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1e7      	bne.n	800ea0e <tcp_handle_closepend+0xe>
  }
}
 800ea3e:	bf00      	nop
 800ea40:	bf00      	nop
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	2003045c 	.word	0x2003045c

0800ea4c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	4603      	mov	r3, r0
 800ea54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea56:	2001      	movs	r0, #1
 800ea58:	f7fd fbf8 	bl	800c24c <memp_malloc>
 800ea5c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d126      	bne.n	800eab2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ea64:	f7ff ffcc 	bl	800ea00 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ea68:	f7ff ff9a 	bl	800e9a0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea6c:	2001      	movs	r0, #1
 800ea6e:	f7fd fbed 	bl	800c24c <memp_malloc>
 800ea72:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d11b      	bne.n	800eab2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ea7a:	2009      	movs	r0, #9
 800ea7c:	f7ff ff46 	bl	800e90c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea80:	2001      	movs	r0, #1
 800ea82:	f7fd fbe3 	bl	800c24c <memp_malloc>
 800ea86:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d111      	bne.n	800eab2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ea8e:	2008      	movs	r0, #8
 800ea90:	f7ff ff3c 	bl	800e90c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea94:	2001      	movs	r0, #1
 800ea96:	f7fd fbd9 	bl	800c24c <memp_malloc>
 800ea9a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d107      	bne.n	800eab2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800eaa2:	79fb      	ldrb	r3, [r7, #7]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7ff fee3 	bl	800e870 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eaaa:	2001      	movs	r0, #1
 800eaac:	f7fd fbce 	bl	800c24c <memp_malloc>
 800eab0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d03f      	beq.n	800eb38 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800eab8:	229c      	movs	r2, #156	; 0x9c
 800eaba:	2100      	movs	r1, #0
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f007 fb82 	bl	80161c6 <memset>
    pcb->prio = prio;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	79fa      	ldrb	r2, [r7, #7]
 800eac6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eace:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ead8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	22ff      	movs	r2, #255	; 0xff
 800eae6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eaee:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2206      	movs	r2, #6
 800eaf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2206      	movs	r2, #6
 800eafc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb04:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2201      	movs	r2, #1
 800eb0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800eb0e:	4b0d      	ldr	r3, [pc, #52]	; (800eb44 <tcp_alloc+0xf8>)
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800eb16:	4b0c      	ldr	r3, [pc, #48]	; (800eb48 <tcp_alloc+0xfc>)
 800eb18:	781a      	ldrb	r2, [r3, #0]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eb24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	4a08      	ldr	r2, [pc, #32]	; (800eb4c <tcp_alloc+0x100>)
 800eb2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	4a07      	ldr	r2, [pc, #28]	; (800eb50 <tcp_alloc+0x104>)
 800eb34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eb38:	68fb      	ldr	r3, [r7, #12]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3710      	adds	r7, #16
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	20030450 	.word	0x20030450
 800eb48:	20030466 	.word	0x20030466
 800eb4c:	0800e805 	.word	0x0800e805
 800eb50:	006ddd00 	.word	0x006ddd00

0800eb54 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d107      	bne.n	800eb72 <tcp_pcb_purge+0x1e>
 800eb62:	4b21      	ldr	r3, [pc, #132]	; (800ebe8 <tcp_pcb_purge+0x94>)
 800eb64:	f640 0251 	movw	r2, #2129	; 0x851
 800eb68:	4920      	ldr	r1, [pc, #128]	; (800ebec <tcp_pcb_purge+0x98>)
 800eb6a:	4821      	ldr	r0, [pc, #132]	; (800ebf0 <tcp_pcb_purge+0x9c>)
 800eb6c:	f007 fbc8 	bl	8016300 <iprintf>
 800eb70:	e037      	b.n	800ebe2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	7d1b      	ldrb	r3, [r3, #20]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d033      	beq.n	800ebe2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eb7e:	2b0a      	cmp	r3, #10
 800eb80:	d02f      	beq.n	800ebe2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d02b      	beq.n	800ebe2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d007      	beq.n	800eba2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7fe fa72 	bl	800d080 <pbuf_free>
      pcb->refused_data = NULL;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d002      	beq.n	800ebb0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f986 	bl	800eebc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebb6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7ff fdc7 	bl	800e750 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7ff fdc2 	bl	800e750 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	66da      	str	r2, [r3, #108]	; 0x6c
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	08018704 	.word	0x08018704
 800ebec:	08018d50 	.word	0x08018d50
 800ebf0:	08018748 	.word	0x08018748

0800ebf4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <tcp_pcb_remove+0x1e>
 800ec04:	4b3e      	ldr	r3, [pc, #248]	; (800ed00 <tcp_pcb_remove+0x10c>)
 800ec06:	f640 0283 	movw	r2, #2179	; 0x883
 800ec0a:	493e      	ldr	r1, [pc, #248]	; (800ed04 <tcp_pcb_remove+0x110>)
 800ec0c:	483e      	ldr	r0, [pc, #248]	; (800ed08 <tcp_pcb_remove+0x114>)
 800ec0e:	f007 fb77 	bl	8016300 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d106      	bne.n	800ec26 <tcp_pcb_remove+0x32>
 800ec18:	4b39      	ldr	r3, [pc, #228]	; (800ed00 <tcp_pcb_remove+0x10c>)
 800ec1a:	f640 0284 	movw	r2, #2180	; 0x884
 800ec1e:	493b      	ldr	r1, [pc, #236]	; (800ed0c <tcp_pcb_remove+0x118>)
 800ec20:	4839      	ldr	r0, [pc, #228]	; (800ed08 <tcp_pcb_remove+0x114>)
 800ec22:	f007 fb6d 	bl	8016300 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	683a      	ldr	r2, [r7, #0]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d105      	bne.n	800ec3c <tcp_pcb_remove+0x48>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	68da      	ldr	r2, [r3, #12]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	601a      	str	r2, [r3, #0]
 800ec3a:	e013      	b.n	800ec64 <tcp_pcb_remove+0x70>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	60fb      	str	r3, [r7, #12]
 800ec42:	e00c      	b.n	800ec5e <tcp_pcb_remove+0x6a>
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	68db      	ldr	r3, [r3, #12]
 800ec48:	683a      	ldr	r2, [r7, #0]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d104      	bne.n	800ec58 <tcp_pcb_remove+0x64>
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	68da      	ldr	r2, [r3, #12]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	60da      	str	r2, [r3, #12]
 800ec56:	e005      	b.n	800ec64 <tcp_pcb_remove+0x70>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	60fb      	str	r3, [r7, #12]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d1ef      	bne.n	800ec44 <tcp_pcb_remove+0x50>
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	2200      	movs	r2, #0
 800ec68:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ec6a:	6838      	ldr	r0, [r7, #0]
 800ec6c:	f7ff ff72 	bl	800eb54 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	7d1b      	ldrb	r3, [r3, #20]
 800ec74:	2b0a      	cmp	r3, #10
 800ec76:	d013      	beq.n	800eca0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d00f      	beq.n	800eca0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	8b5b      	ldrh	r3, [r3, #26]
 800ec84:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d009      	beq.n	800eca0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	8b5b      	ldrh	r3, [r3, #26]
 800ec90:	f043 0302 	orr.w	r3, r3, #2
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec9a:	6838      	ldr	r0, [r7, #0]
 800ec9c:	f002 ff6e 	bl	8011b7c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	7d1b      	ldrb	r3, [r3, #20]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d020      	beq.n	800ecea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d006      	beq.n	800ecbe <tcp_pcb_remove+0xca>
 800ecb0:	4b13      	ldr	r3, [pc, #76]	; (800ed00 <tcp_pcb_remove+0x10c>)
 800ecb2:	f640 0293 	movw	r2, #2195	; 0x893
 800ecb6:	4916      	ldr	r1, [pc, #88]	; (800ed10 <tcp_pcb_remove+0x11c>)
 800ecb8:	4813      	ldr	r0, [pc, #76]	; (800ed08 <tcp_pcb_remove+0x114>)
 800ecba:	f007 fb21 	bl	8016300 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d006      	beq.n	800ecd4 <tcp_pcb_remove+0xe0>
 800ecc6:	4b0e      	ldr	r3, [pc, #56]	; (800ed00 <tcp_pcb_remove+0x10c>)
 800ecc8:	f640 0294 	movw	r2, #2196	; 0x894
 800eccc:	4911      	ldr	r1, [pc, #68]	; (800ed14 <tcp_pcb_remove+0x120>)
 800ecce:	480e      	ldr	r0, [pc, #56]	; (800ed08 <tcp_pcb_remove+0x114>)
 800ecd0:	f007 fb16 	bl	8016300 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d006      	beq.n	800ecea <tcp_pcb_remove+0xf6>
 800ecdc:	4b08      	ldr	r3, [pc, #32]	; (800ed00 <tcp_pcb_remove+0x10c>)
 800ecde:	f640 0296 	movw	r2, #2198	; 0x896
 800ece2:	490d      	ldr	r1, [pc, #52]	; (800ed18 <tcp_pcb_remove+0x124>)
 800ece4:	4808      	ldr	r0, [pc, #32]	; (800ed08 <tcp_pcb_remove+0x114>)
 800ece6:	f007 fb0b 	bl	8016300 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	2200      	movs	r2, #0
 800ecee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ecf6:	bf00      	nop
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	08018704 	.word	0x08018704
 800ed04:	08018d6c 	.word	0x08018d6c
 800ed08:	08018748 	.word	0x08018748
 800ed0c:	08018d88 	.word	0x08018d88
 800ed10:	08018da8 	.word	0x08018da8
 800ed14:	08018dc0 	.word	0x08018dc0
 800ed18:	08018ddc 	.word	0x08018ddc

0800ed1c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d106      	bne.n	800ed38 <tcp_next_iss+0x1c>
 800ed2a:	4b0a      	ldr	r3, [pc, #40]	; (800ed54 <tcp_next_iss+0x38>)
 800ed2c:	f640 02af 	movw	r2, #2223	; 0x8af
 800ed30:	4909      	ldr	r1, [pc, #36]	; (800ed58 <tcp_next_iss+0x3c>)
 800ed32:	480a      	ldr	r0, [pc, #40]	; (800ed5c <tcp_next_iss+0x40>)
 800ed34:	f007 fae4 	bl	8016300 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ed38:	4b09      	ldr	r3, [pc, #36]	; (800ed60 <tcp_next_iss+0x44>)
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	4b09      	ldr	r3, [pc, #36]	; (800ed64 <tcp_next_iss+0x48>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4413      	add	r3, r2
 800ed42:	4a07      	ldr	r2, [pc, #28]	; (800ed60 <tcp_next_iss+0x44>)
 800ed44:	6013      	str	r3, [r2, #0]
  return iss;
 800ed46:	4b06      	ldr	r3, [pc, #24]	; (800ed60 <tcp_next_iss+0x44>)
 800ed48:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	08018704 	.word	0x08018704
 800ed58:	08018df4 	.word	0x08018df4
 800ed5c:	08018748 	.word	0x08018748
 800ed60:	2000002c 	.word	0x2000002c
 800ed64:	20030450 	.word	0x20030450

0800ed68 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	4603      	mov	r3, r0
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	607a      	str	r2, [r7, #4]
 800ed74:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d106      	bne.n	800ed8a <tcp_eff_send_mss_netif+0x22>
 800ed7c:	4b14      	ldr	r3, [pc, #80]	; (800edd0 <tcp_eff_send_mss_netif+0x68>)
 800ed7e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ed82:	4914      	ldr	r1, [pc, #80]	; (800edd4 <tcp_eff_send_mss_netif+0x6c>)
 800ed84:	4814      	ldr	r0, [pc, #80]	; (800edd8 <tcp_eff_send_mss_netif+0x70>)
 800ed86:	f007 fabb 	bl	8016300 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d101      	bne.n	800ed94 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ed90:	89fb      	ldrh	r3, [r7, #14]
 800ed92:	e019      	b.n	800edc8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed98:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ed9a:	8afb      	ldrh	r3, [r7, #22]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d012      	beq.n	800edc6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eda0:	2328      	movs	r3, #40	; 0x28
 800eda2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eda4:	8afa      	ldrh	r2, [r7, #22]
 800eda6:	8abb      	ldrh	r3, [r7, #20]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d904      	bls.n	800edb6 <tcp_eff_send_mss_netif+0x4e>
 800edac:	8afa      	ldrh	r2, [r7, #22]
 800edae:	8abb      	ldrh	r3, [r7, #20]
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	e000      	b.n	800edb8 <tcp_eff_send_mss_netif+0x50>
 800edb6:	2300      	movs	r3, #0
 800edb8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800edba:	8a7a      	ldrh	r2, [r7, #18]
 800edbc:	89fb      	ldrh	r3, [r7, #14]
 800edbe:	4293      	cmp	r3, r2
 800edc0:	bf28      	it	cs
 800edc2:	4613      	movcs	r3, r2
 800edc4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800edc6:	89fb      	ldrh	r3, [r7, #14]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3718      	adds	r7, #24
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	08018704 	.word	0x08018704
 800edd4:	08018e10 	.word	0x08018e10
 800edd8:	08018748 	.word	0x08018748

0800eddc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d119      	bne.n	800ee24 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800edf0:	4b10      	ldr	r3, [pc, #64]	; (800ee34 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800edf2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800edf6:	4910      	ldr	r1, [pc, #64]	; (800ee38 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800edf8:	4810      	ldr	r0, [pc, #64]	; (800ee3c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800edfa:	f007 fa81 	bl	8016300 <iprintf>

  while (pcb != NULL) {
 800edfe:	e011      	b.n	800ee24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d108      	bne.n	800ee1e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f7fe ffc6 	bl	800dda4 <tcp_abort>
      pcb = next;
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	e002      	b.n	800ee24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d1ea      	bne.n	800ee00 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ee2a:	bf00      	nop
 800ee2c:	bf00      	nop
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	08018704 	.word	0x08018704
 800ee38:	08018e38 	.word	0x08018e38
 800ee3c:	08018748 	.word	0x08018748

0800ee40 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d02a      	beq.n	800eea6 <tcp_netif_ip_addr_changed+0x66>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d026      	beq.n	800eea6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ee58:	4b15      	ldr	r3, [pc, #84]	; (800eeb0 <tcp_netif_ip_addr_changed+0x70>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff ffbc 	bl	800eddc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ee64:	4b13      	ldr	r3, [pc, #76]	; (800eeb4 <tcp_netif_ip_addr_changed+0x74>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4619      	mov	r1, r3
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f7ff ffb6 	bl	800eddc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d017      	beq.n	800eea6 <tcp_netif_ip_addr_changed+0x66>
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d013      	beq.n	800eea6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee7e:	4b0e      	ldr	r3, [pc, #56]	; (800eeb8 <tcp_netif_ip_addr_changed+0x78>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	60fb      	str	r3, [r7, #12]
 800ee84:	e00c      	b.n	800eea0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d103      	bne.n	800ee9a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	60fb      	str	r3, [r7, #12]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d1ef      	bne.n	800ee86 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800eea6:	bf00      	nop
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	2003045c 	.word	0x2003045c
 800eeb4:	20030454 	.word	0x20030454
 800eeb8:	20030458 	.word	0x20030458

0800eebc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d007      	beq.n	800eedc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7ff fc3d 	bl	800e750 <tcp_segs_free>
    pcb->ooseq = NULL;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eedc:	bf00      	nop
 800eede:	3708      	adds	r7, #8
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eee4:	b590      	push	{r4, r7, lr}
 800eee6:	b08d      	sub	sp, #52	; 0x34
 800eee8:	af04      	add	r7, sp, #16
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d105      	bne.n	800ef00 <tcp_input+0x1c>
 800eef4:	4b9b      	ldr	r3, [pc, #620]	; (800f164 <tcp_input+0x280>)
 800eef6:	2283      	movs	r2, #131	; 0x83
 800eef8:	499b      	ldr	r1, [pc, #620]	; (800f168 <tcp_input+0x284>)
 800eefa:	489c      	ldr	r0, [pc, #624]	; (800f16c <tcp_input+0x288>)
 800eefc:	f007 fa00 	bl	8016300 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	4a9a      	ldr	r2, [pc, #616]	; (800f170 <tcp_input+0x28c>)
 800ef06:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	895b      	ldrh	r3, [r3, #10]
 800ef0c:	2b13      	cmp	r3, #19
 800ef0e:	f240 83d1 	bls.w	800f6b4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ef12:	4b98      	ldr	r3, [pc, #608]	; (800f174 <tcp_input+0x290>)
 800ef14:	695b      	ldr	r3, [r3, #20]
 800ef16:	4a97      	ldr	r2, [pc, #604]	; (800f174 <tcp_input+0x290>)
 800ef18:	6812      	ldr	r2, [r2, #0]
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f005 ff7d 	bl	8014e1c <ip4_addr_isbroadcast_u32>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f040 83c7 	bne.w	800f6b8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ef2a:	4b92      	ldr	r3, [pc, #584]	; (800f174 <tcp_input+0x290>)
 800ef2c:	695b      	ldr	r3, [r3, #20]
 800ef2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ef32:	2be0      	cmp	r3, #224	; 0xe0
 800ef34:	f000 83c0 	beq.w	800f6b8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ef38:	4b8d      	ldr	r3, [pc, #564]	; (800f170 <tcp_input+0x28c>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	899b      	ldrh	r3, [r3, #12]
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7fc fcab 	bl	800b89c <lwip_htons>
 800ef46:	4603      	mov	r3, r0
 800ef48:	0b1b      	lsrs	r3, r3, #12
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ef52:	7cbb      	ldrb	r3, [r7, #18]
 800ef54:	2b13      	cmp	r3, #19
 800ef56:	f240 83b1 	bls.w	800f6bc <tcp_input+0x7d8>
 800ef5a:	7cbb      	ldrb	r3, [r7, #18]
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	891b      	ldrh	r3, [r3, #8]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	f200 83aa 	bhi.w	800f6bc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ef68:	7cbb      	ldrb	r3, [r7, #18]
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	3b14      	subs	r3, #20
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	4b81      	ldr	r3, [pc, #516]	; (800f178 <tcp_input+0x294>)
 800ef72:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ef74:	4b81      	ldr	r3, [pc, #516]	; (800f17c <tcp_input+0x298>)
 800ef76:	2200      	movs	r2, #0
 800ef78:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	895a      	ldrh	r2, [r3, #10]
 800ef7e:	7cbb      	ldrb	r3, [r7, #18]
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d309      	bcc.n	800ef9a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ef86:	4b7c      	ldr	r3, [pc, #496]	; (800f178 <tcp_input+0x294>)
 800ef88:	881a      	ldrh	r2, [r3, #0]
 800ef8a:	4b7d      	ldr	r3, [pc, #500]	; (800f180 <tcp_input+0x29c>)
 800ef8c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ef8e:	7cbb      	ldrb	r3, [r7, #18]
 800ef90:	4619      	mov	r1, r3
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7fd ffee 	bl	800cf74 <pbuf_remove_header>
 800ef98:	e04e      	b.n	800f038 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d105      	bne.n	800efae <tcp_input+0xca>
 800efa2:	4b70      	ldr	r3, [pc, #448]	; (800f164 <tcp_input+0x280>)
 800efa4:	22c2      	movs	r2, #194	; 0xc2
 800efa6:	4977      	ldr	r1, [pc, #476]	; (800f184 <tcp_input+0x2a0>)
 800efa8:	4870      	ldr	r0, [pc, #448]	; (800f16c <tcp_input+0x288>)
 800efaa:	f007 f9a9 	bl	8016300 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800efae:	2114      	movs	r1, #20
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7fd ffdf 	bl	800cf74 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	895a      	ldrh	r2, [r3, #10]
 800efba:	4b71      	ldr	r3, [pc, #452]	; (800f180 <tcp_input+0x29c>)
 800efbc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800efbe:	4b6e      	ldr	r3, [pc, #440]	; (800f178 <tcp_input+0x294>)
 800efc0:	881a      	ldrh	r2, [r3, #0]
 800efc2:	4b6f      	ldr	r3, [pc, #444]	; (800f180 <tcp_input+0x29c>)
 800efc4:	881b      	ldrh	r3, [r3, #0]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800efca:	4b6d      	ldr	r3, [pc, #436]	; (800f180 <tcp_input+0x29c>)
 800efcc:	881b      	ldrh	r3, [r3, #0]
 800efce:	4619      	mov	r1, r3
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f7fd ffcf 	bl	800cf74 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	895b      	ldrh	r3, [r3, #10]
 800efdc:	8a3a      	ldrh	r2, [r7, #16]
 800efde:	429a      	cmp	r2, r3
 800efe0:	f200 836e 	bhi.w	800f6c0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	4a64      	ldr	r2, [pc, #400]	; (800f17c <tcp_input+0x298>)
 800efec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	8a3a      	ldrh	r2, [r7, #16]
 800eff4:	4611      	mov	r1, r2
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7fd ffbc 	bl	800cf74 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	891a      	ldrh	r2, [r3, #8]
 800f000:	8a3b      	ldrh	r3, [r7, #16]
 800f002:	1ad3      	subs	r3, r2, r3
 800f004:	b29a      	uxth	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	895b      	ldrh	r3, [r3, #10]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d005      	beq.n	800f01e <tcp_input+0x13a>
 800f012:	4b54      	ldr	r3, [pc, #336]	; (800f164 <tcp_input+0x280>)
 800f014:	22df      	movs	r2, #223	; 0xdf
 800f016:	495c      	ldr	r1, [pc, #368]	; (800f188 <tcp_input+0x2a4>)
 800f018:	4854      	ldr	r0, [pc, #336]	; (800f16c <tcp_input+0x288>)
 800f01a:	f007 f971 	bl	8016300 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	891a      	ldrh	r2, [r3, #8]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	891b      	ldrh	r3, [r3, #8]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d005      	beq.n	800f038 <tcp_input+0x154>
 800f02c:	4b4d      	ldr	r3, [pc, #308]	; (800f164 <tcp_input+0x280>)
 800f02e:	22e0      	movs	r2, #224	; 0xe0
 800f030:	4956      	ldr	r1, [pc, #344]	; (800f18c <tcp_input+0x2a8>)
 800f032:	484e      	ldr	r0, [pc, #312]	; (800f16c <tcp_input+0x288>)
 800f034:	f007 f964 	bl	8016300 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f038:	4b4d      	ldr	r3, [pc, #308]	; (800f170 <tcp_input+0x28c>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	881b      	ldrh	r3, [r3, #0]
 800f03e:	b29b      	uxth	r3, r3
 800f040:	4a4b      	ldr	r2, [pc, #300]	; (800f170 <tcp_input+0x28c>)
 800f042:	6814      	ldr	r4, [r2, #0]
 800f044:	4618      	mov	r0, r3
 800f046:	f7fc fc29 	bl	800b89c <lwip_htons>
 800f04a:	4603      	mov	r3, r0
 800f04c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f04e:	4b48      	ldr	r3, [pc, #288]	; (800f170 <tcp_input+0x28c>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	885b      	ldrh	r3, [r3, #2]
 800f054:	b29b      	uxth	r3, r3
 800f056:	4a46      	ldr	r2, [pc, #280]	; (800f170 <tcp_input+0x28c>)
 800f058:	6814      	ldr	r4, [r2, #0]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fc fc1e 	bl	800b89c <lwip_htons>
 800f060:	4603      	mov	r3, r0
 800f062:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f064:	4b42      	ldr	r3, [pc, #264]	; (800f170 <tcp_input+0x28c>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	4a41      	ldr	r2, [pc, #260]	; (800f170 <tcp_input+0x28c>)
 800f06c:	6814      	ldr	r4, [r2, #0]
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fc fc29 	bl	800b8c6 <lwip_htonl>
 800f074:	4603      	mov	r3, r0
 800f076:	6063      	str	r3, [r4, #4]
 800f078:	6863      	ldr	r3, [r4, #4]
 800f07a:	4a45      	ldr	r2, [pc, #276]	; (800f190 <tcp_input+0x2ac>)
 800f07c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f07e:	4b3c      	ldr	r3, [pc, #240]	; (800f170 <tcp_input+0x28c>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	4a3a      	ldr	r2, [pc, #232]	; (800f170 <tcp_input+0x28c>)
 800f086:	6814      	ldr	r4, [r2, #0]
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fc fc1c 	bl	800b8c6 <lwip_htonl>
 800f08e:	4603      	mov	r3, r0
 800f090:	60a3      	str	r3, [r4, #8]
 800f092:	68a3      	ldr	r3, [r4, #8]
 800f094:	4a3f      	ldr	r2, [pc, #252]	; (800f194 <tcp_input+0x2b0>)
 800f096:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f098:	4b35      	ldr	r3, [pc, #212]	; (800f170 <tcp_input+0x28c>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	89db      	ldrh	r3, [r3, #14]
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4a33      	ldr	r2, [pc, #204]	; (800f170 <tcp_input+0x28c>)
 800f0a2:	6814      	ldr	r4, [r2, #0]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fc fbf9 	bl	800b89c <lwip_htons>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f0ae:	4b30      	ldr	r3, [pc, #192]	; (800f170 <tcp_input+0x28c>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	899b      	ldrh	r3, [r3, #12]
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fc fbf0 	bl	800b89c <lwip_htons>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0c4:	b2da      	uxtb	r2, r3
 800f0c6:	4b34      	ldr	r3, [pc, #208]	; (800f198 <tcp_input+0x2b4>)
 800f0c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	891a      	ldrh	r2, [r3, #8]
 800f0ce:	4b33      	ldr	r3, [pc, #204]	; (800f19c <tcp_input+0x2b8>)
 800f0d0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f0d2:	4b31      	ldr	r3, [pc, #196]	; (800f198 <tcp_input+0x2b4>)
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	f003 0303 	and.w	r3, r3, #3
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00c      	beq.n	800f0f8 <tcp_input+0x214>
    tcplen++;
 800f0de:	4b2f      	ldr	r3, [pc, #188]	; (800f19c <tcp_input+0x2b8>)
 800f0e0:	881b      	ldrh	r3, [r3, #0]
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	4b2d      	ldr	r3, [pc, #180]	; (800f19c <tcp_input+0x2b8>)
 800f0e8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	891a      	ldrh	r2, [r3, #8]
 800f0ee:	4b2b      	ldr	r3, [pc, #172]	; (800f19c <tcp_input+0x2b8>)
 800f0f0:	881b      	ldrh	r3, [r3, #0]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	f200 82e6 	bhi.w	800f6c4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0fc:	4b28      	ldr	r3, [pc, #160]	; (800f1a0 <tcp_input+0x2bc>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	61fb      	str	r3, [r7, #28]
 800f102:	e09d      	b.n	800f240 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	7d1b      	ldrb	r3, [r3, #20]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d105      	bne.n	800f118 <tcp_input+0x234>
 800f10c:	4b15      	ldr	r3, [pc, #84]	; (800f164 <tcp_input+0x280>)
 800f10e:	22fb      	movs	r2, #251	; 0xfb
 800f110:	4924      	ldr	r1, [pc, #144]	; (800f1a4 <tcp_input+0x2c0>)
 800f112:	4816      	ldr	r0, [pc, #88]	; (800f16c <tcp_input+0x288>)
 800f114:	f007 f8f4 	bl	8016300 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	7d1b      	ldrb	r3, [r3, #20]
 800f11c:	2b0a      	cmp	r3, #10
 800f11e:	d105      	bne.n	800f12c <tcp_input+0x248>
 800f120:	4b10      	ldr	r3, [pc, #64]	; (800f164 <tcp_input+0x280>)
 800f122:	22fc      	movs	r2, #252	; 0xfc
 800f124:	4920      	ldr	r1, [pc, #128]	; (800f1a8 <tcp_input+0x2c4>)
 800f126:	4811      	ldr	r0, [pc, #68]	; (800f16c <tcp_input+0x288>)
 800f128:	f007 f8ea 	bl	8016300 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	7d1b      	ldrb	r3, [r3, #20]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d105      	bne.n	800f140 <tcp_input+0x25c>
 800f134:	4b0b      	ldr	r3, [pc, #44]	; (800f164 <tcp_input+0x280>)
 800f136:	22fd      	movs	r2, #253	; 0xfd
 800f138:	491c      	ldr	r1, [pc, #112]	; (800f1ac <tcp_input+0x2c8>)
 800f13a:	480c      	ldr	r0, [pc, #48]	; (800f16c <tcp_input+0x288>)
 800f13c:	f007 f8e0 	bl	8016300 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	7a1b      	ldrb	r3, [r3, #8]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d033      	beq.n	800f1b0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	7a1a      	ldrb	r2, [r3, #8]
 800f14c:	4b09      	ldr	r3, [pc, #36]	; (800f174 <tcp_input+0x290>)
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f154:	3301      	adds	r3, #1
 800f156:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f158:	429a      	cmp	r2, r3
 800f15a:	d029      	beq.n	800f1b0 <tcp_input+0x2cc>
      prev = pcb;
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	61bb      	str	r3, [r7, #24]
      continue;
 800f160:	e06b      	b.n	800f23a <tcp_input+0x356>
 800f162:	bf00      	nop
 800f164:	08018e6c 	.word	0x08018e6c
 800f168:	08018ea0 	.word	0x08018ea0
 800f16c:	08018eb8 	.word	0x08018eb8
 800f170:	20030478 	.word	0x20030478
 800f174:	2002ccfc 	.word	0x2002ccfc
 800f178:	2003047c 	.word	0x2003047c
 800f17c:	20030480 	.word	0x20030480
 800f180:	2003047e 	.word	0x2003047e
 800f184:	08018ee0 	.word	0x08018ee0
 800f188:	08018ef0 	.word	0x08018ef0
 800f18c:	08018efc 	.word	0x08018efc
 800f190:	20030488 	.word	0x20030488
 800f194:	2003048c 	.word	0x2003048c
 800f198:	20030494 	.word	0x20030494
 800f19c:	20030492 	.word	0x20030492
 800f1a0:	2003045c 	.word	0x2003045c
 800f1a4:	08018f1c 	.word	0x08018f1c
 800f1a8:	08018f44 	.word	0x08018f44
 800f1ac:	08018f70 	.word	0x08018f70
    }

    if (pcb->remote_port == tcphdr->src &&
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	8b1a      	ldrh	r2, [r3, #24]
 800f1b4:	4b72      	ldr	r3, [pc, #456]	; (800f380 <tcp_input+0x49c>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d13a      	bne.n	800f236 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	8ada      	ldrh	r2, [r3, #22]
 800f1c4:	4b6e      	ldr	r3, [pc, #440]	; (800f380 <tcp_input+0x49c>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	885b      	ldrh	r3, [r3, #2]
 800f1ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d132      	bne.n	800f236 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	685a      	ldr	r2, [r3, #4]
 800f1d4:	4b6b      	ldr	r3, [pc, #428]	; (800f384 <tcp_input+0x4a0>)
 800f1d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d12c      	bne.n	800f236 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	4b68      	ldr	r3, [pc, #416]	; (800f384 <tcp_input+0x4a0>)
 800f1e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d126      	bne.n	800f236 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	69fa      	ldr	r2, [r7, #28]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d106      	bne.n	800f200 <tcp_input+0x31c>
 800f1f2:	4b65      	ldr	r3, [pc, #404]	; (800f388 <tcp_input+0x4a4>)
 800f1f4:	f240 120d 	movw	r2, #269	; 0x10d
 800f1f8:	4964      	ldr	r1, [pc, #400]	; (800f38c <tcp_input+0x4a8>)
 800f1fa:	4865      	ldr	r0, [pc, #404]	; (800f390 <tcp_input+0x4ac>)
 800f1fc:	f007 f880 	bl	8016300 <iprintf>
      if (prev != NULL) {
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00a      	beq.n	800f21c <tcp_input+0x338>
        prev->next = pcb->next;
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	68da      	ldr	r2, [r3, #12]
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f20e:	4b61      	ldr	r3, [pc, #388]	; (800f394 <tcp_input+0x4b0>)
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	69fb      	ldr	r3, [r7, #28]
 800f214:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f216:	4a5f      	ldr	r2, [pc, #380]	; (800f394 <tcp_input+0x4b0>)
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	68db      	ldr	r3, [r3, #12]
 800f220:	69fa      	ldr	r2, [r7, #28]
 800f222:	429a      	cmp	r2, r3
 800f224:	d111      	bne.n	800f24a <tcp_input+0x366>
 800f226:	4b58      	ldr	r3, [pc, #352]	; (800f388 <tcp_input+0x4a4>)
 800f228:	f240 1215 	movw	r2, #277	; 0x115
 800f22c:	495a      	ldr	r1, [pc, #360]	; (800f398 <tcp_input+0x4b4>)
 800f22e:	4858      	ldr	r0, [pc, #352]	; (800f390 <tcp_input+0x4ac>)
 800f230:	f007 f866 	bl	8016300 <iprintf>
      break;
 800f234:	e009      	b.n	800f24a <tcp_input+0x366>
    }
    prev = pcb;
 800f236:	69fb      	ldr	r3, [r7, #28]
 800f238:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f23a:	69fb      	ldr	r3, [r7, #28]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	61fb      	str	r3, [r7, #28]
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	2b00      	cmp	r3, #0
 800f244:	f47f af5e 	bne.w	800f104 <tcp_input+0x220>
 800f248:	e000      	b.n	800f24c <tcp_input+0x368>
      break;
 800f24a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f040 80aa 	bne.w	800f3a8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f254:	4b51      	ldr	r3, [pc, #324]	; (800f39c <tcp_input+0x4b8>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	61fb      	str	r3, [r7, #28]
 800f25a:	e03f      	b.n	800f2dc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	7d1b      	ldrb	r3, [r3, #20]
 800f260:	2b0a      	cmp	r3, #10
 800f262:	d006      	beq.n	800f272 <tcp_input+0x38e>
 800f264:	4b48      	ldr	r3, [pc, #288]	; (800f388 <tcp_input+0x4a4>)
 800f266:	f240 121f 	movw	r2, #287	; 0x11f
 800f26a:	494d      	ldr	r1, [pc, #308]	; (800f3a0 <tcp_input+0x4bc>)
 800f26c:	4848      	ldr	r0, [pc, #288]	; (800f390 <tcp_input+0x4ac>)
 800f26e:	f007 f847 	bl	8016300 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	7a1b      	ldrb	r3, [r3, #8]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d009      	beq.n	800f28e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	7a1a      	ldrb	r2, [r3, #8]
 800f27e:	4b41      	ldr	r3, [pc, #260]	; (800f384 <tcp_input+0x4a0>)
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f286:	3301      	adds	r3, #1
 800f288:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d122      	bne.n	800f2d4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	8b1a      	ldrh	r2, [r3, #24]
 800f292:	4b3b      	ldr	r3, [pc, #236]	; (800f380 <tcp_input+0x49c>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	881b      	ldrh	r3, [r3, #0]
 800f298:	b29b      	uxth	r3, r3
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d11b      	bne.n	800f2d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	8ada      	ldrh	r2, [r3, #22]
 800f2a2:	4b37      	ldr	r3, [pc, #220]	; (800f380 <tcp_input+0x49c>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	885b      	ldrh	r3, [r3, #2]
 800f2a8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d113      	bne.n	800f2d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	685a      	ldr	r2, [r3, #4]
 800f2b2:	4b34      	ldr	r3, [pc, #208]	; (800f384 <tcp_input+0x4a0>)
 800f2b4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d10d      	bne.n	800f2d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f2ba:	69fb      	ldr	r3, [r7, #28]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	4b31      	ldr	r3, [pc, #196]	; (800f384 <tcp_input+0x4a0>)
 800f2c0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d107      	bne.n	800f2d6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f2c6:	69f8      	ldr	r0, [r7, #28]
 800f2c8:	f000 fb56 	bl	800f978 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7fd fed7 	bl	800d080 <pbuf_free>
        return;
 800f2d2:	e1fd      	b.n	800f6d0 <tcp_input+0x7ec>
        continue;
 800f2d4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	61fb      	str	r3, [r7, #28]
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d1bc      	bne.n	800f25c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f2e6:	4b2f      	ldr	r3, [pc, #188]	; (800f3a4 <tcp_input+0x4c0>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	617b      	str	r3, [r7, #20]
 800f2ec:	e02a      	b.n	800f344 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	7a1b      	ldrb	r3, [r3, #8]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d00c      	beq.n	800f310 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	7a1a      	ldrb	r2, [r3, #8]
 800f2fa:	4b22      	ldr	r3, [pc, #136]	; (800f384 <tcp_input+0x4a0>)
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f302:	3301      	adds	r3, #1
 800f304:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f306:	429a      	cmp	r2, r3
 800f308:	d002      	beq.n	800f310 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	61bb      	str	r3, [r7, #24]
        continue;
 800f30e:	e016      	b.n	800f33e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	8ada      	ldrh	r2, [r3, #22]
 800f314:	4b1a      	ldr	r3, [pc, #104]	; (800f380 <tcp_input+0x49c>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	885b      	ldrh	r3, [r3, #2]
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d10c      	bne.n	800f33a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	4b17      	ldr	r3, [pc, #92]	; (800f384 <tcp_input+0x4a0>)
 800f326:	695b      	ldr	r3, [r3, #20]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d00f      	beq.n	800f34c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00d      	beq.n	800f34e <tcp_input+0x46a>
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d009      	beq.n	800f34e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	617b      	str	r3, [r7, #20]
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1d1      	bne.n	800f2ee <tcp_input+0x40a>
 800f34a:	e000      	b.n	800f34e <tcp_input+0x46a>
            break;
 800f34c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d029      	beq.n	800f3a8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f354:	69bb      	ldr	r3, [r7, #24]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00a      	beq.n	800f370 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	68da      	ldr	r2, [r3, #12]
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f362:	4b10      	ldr	r3, [pc, #64]	; (800f3a4 <tcp_input+0x4c0>)
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f36a:	4a0e      	ldr	r2, [pc, #56]	; (800f3a4 <tcp_input+0x4c0>)
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f370:	6978      	ldr	r0, [r7, #20]
 800f372:	f000 fa03 	bl	800f77c <tcp_listen_input>
      }
      pbuf_free(p);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f7fd fe82 	bl	800d080 <pbuf_free>
      return;
 800f37c:	e1a8      	b.n	800f6d0 <tcp_input+0x7ec>
 800f37e:	bf00      	nop
 800f380:	20030478 	.word	0x20030478
 800f384:	2002ccfc 	.word	0x2002ccfc
 800f388:	08018e6c 	.word	0x08018e6c
 800f38c:	08018f98 	.word	0x08018f98
 800f390:	08018eb8 	.word	0x08018eb8
 800f394:	2003045c 	.word	0x2003045c
 800f398:	08018fc4 	.word	0x08018fc4
 800f39c:	20030460 	.word	0x20030460
 800f3a0:	08018ff0 	.word	0x08018ff0
 800f3a4:	20030458 	.word	0x20030458
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f000 8158 	beq.w	800f660 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f3b0:	4b95      	ldr	r3, [pc, #596]	; (800f608 <tcp_input+0x724>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	891a      	ldrh	r2, [r3, #8]
 800f3ba:	4b93      	ldr	r3, [pc, #588]	; (800f608 <tcp_input+0x724>)
 800f3bc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f3be:	4a92      	ldr	r2, [pc, #584]	; (800f608 <tcp_input+0x724>)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f3c4:	4b91      	ldr	r3, [pc, #580]	; (800f60c <tcp_input+0x728>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	4a8f      	ldr	r2, [pc, #572]	; (800f608 <tcp_input+0x724>)
 800f3ca:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f3cc:	4b90      	ldr	r3, [pc, #576]	; (800f610 <tcp_input+0x72c>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f3d2:	4b90      	ldr	r3, [pc, #576]	; (800f614 <tcp_input+0x730>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f3d8:	4b8f      	ldr	r3, [pc, #572]	; (800f618 <tcp_input+0x734>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f3de:	4b8f      	ldr	r3, [pc, #572]	; (800f61c <tcp_input+0x738>)
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	f003 0308 	and.w	r3, r3, #8
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d006      	beq.n	800f3f8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	7b5b      	ldrb	r3, [r3, #13]
 800f3ee:	f043 0301 	orr.w	r3, r3, #1
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d017      	beq.n	800f430 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f400:	69f8      	ldr	r0, [r7, #28]
 800f402:	f7ff f929 	bl	800e658 <tcp_process_refused_data>
 800f406:	4603      	mov	r3, r0
 800f408:	f113 0f0d 	cmn.w	r3, #13
 800f40c:	d007      	beq.n	800f41e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00c      	beq.n	800f430 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f416:	4b82      	ldr	r3, [pc, #520]	; (800f620 <tcp_input+0x73c>)
 800f418:	881b      	ldrh	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d008      	beq.n	800f430 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f422:	2b00      	cmp	r3, #0
 800f424:	f040 80e3 	bne.w	800f5ee <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f428:	69f8      	ldr	r0, [r7, #28]
 800f42a:	f003 f9ad 	bl	8012788 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f42e:	e0de      	b.n	800f5ee <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f430:	4a7c      	ldr	r2, [pc, #496]	; (800f624 <tcp_input+0x740>)
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f436:	69f8      	ldr	r0, [r7, #28]
 800f438:	f000 fb18 	bl	800fa6c <tcp_process>
 800f43c:	4603      	mov	r3, r0
 800f43e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f440:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f444:	f113 0f0d 	cmn.w	r3, #13
 800f448:	f000 80d3 	beq.w	800f5f2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f44c:	4b71      	ldr	r3, [pc, #452]	; (800f614 <tcp_input+0x730>)
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	f003 0308 	and.w	r3, r3, #8
 800f454:	2b00      	cmp	r3, #0
 800f456:	d015      	beq.n	800f484 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d008      	beq.n	800f474 <tcp_input+0x590>
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f468:	69fa      	ldr	r2, [r7, #28]
 800f46a:	6912      	ldr	r2, [r2, #16]
 800f46c:	f06f 010d 	mvn.w	r1, #13
 800f470:	4610      	mov	r0, r2
 800f472:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f474:	69f9      	ldr	r1, [r7, #28]
 800f476:	486c      	ldr	r0, [pc, #432]	; (800f628 <tcp_input+0x744>)
 800f478:	f7ff fbbc 	bl	800ebf4 <tcp_pcb_remove>
        tcp_free(pcb);
 800f47c:	69f8      	ldr	r0, [r7, #28]
 800f47e:	f7fe f9a9 	bl	800d7d4 <tcp_free>
 800f482:	e0da      	b.n	800f63a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f484:	2300      	movs	r3, #0
 800f486:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f488:	4b63      	ldr	r3, [pc, #396]	; (800f618 <tcp_input+0x734>)
 800f48a:	881b      	ldrh	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d01d      	beq.n	800f4cc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f490:	4b61      	ldr	r3, [pc, #388]	; (800f618 <tcp_input+0x734>)
 800f492:	881b      	ldrh	r3, [r3, #0]
 800f494:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d00a      	beq.n	800f4b6 <tcp_input+0x5d2>
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4a6:	69fa      	ldr	r2, [r7, #28]
 800f4a8:	6910      	ldr	r0, [r2, #16]
 800f4aa:	89fa      	ldrh	r2, [r7, #14]
 800f4ac:	69f9      	ldr	r1, [r7, #28]
 800f4ae:	4798      	blx	r3
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	74fb      	strb	r3, [r7, #19]
 800f4b4:	e001      	b.n	800f4ba <tcp_input+0x5d6>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f4ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4be:	f113 0f0d 	cmn.w	r3, #13
 800f4c2:	f000 8098 	beq.w	800f5f6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f4c6:	4b54      	ldr	r3, [pc, #336]	; (800f618 <tcp_input+0x734>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f4cc:	69f8      	ldr	r0, [r7, #28]
 800f4ce:	f000 f915 	bl	800f6fc <tcp_input_delayed_close>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f040 8090 	bne.w	800f5fa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f4da:	4b4d      	ldr	r3, [pc, #308]	; (800f610 <tcp_input+0x72c>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d041      	beq.n	800f566 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d006      	beq.n	800f4f8 <tcp_input+0x614>
 800f4ea:	4b50      	ldr	r3, [pc, #320]	; (800f62c <tcp_input+0x748>)
 800f4ec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f4f0:	494f      	ldr	r1, [pc, #316]	; (800f630 <tcp_input+0x74c>)
 800f4f2:	4850      	ldr	r0, [pc, #320]	; (800f634 <tcp_input+0x750>)
 800f4f4:	f006 ff04 	bl	8016300 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	8b5b      	ldrh	r3, [r3, #26]
 800f4fc:	f003 0310 	and.w	r3, r3, #16
 800f500:	2b00      	cmp	r3, #0
 800f502:	d008      	beq.n	800f516 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f504:	4b42      	ldr	r3, [pc, #264]	; (800f610 <tcp_input+0x72c>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4618      	mov	r0, r3
 800f50a:	f7fd fdb9 	bl	800d080 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f50e:	69f8      	ldr	r0, [r7, #28]
 800f510:	f7fe fc48 	bl	800dda4 <tcp_abort>
            goto aborted;
 800f514:	e091      	b.n	800f63a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00c      	beq.n	800f53a <tcp_input+0x656>
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f526:	69fb      	ldr	r3, [r7, #28]
 800f528:	6918      	ldr	r0, [r3, #16]
 800f52a:	4b39      	ldr	r3, [pc, #228]	; (800f610 <tcp_input+0x72c>)
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	2300      	movs	r3, #0
 800f530:	69f9      	ldr	r1, [r7, #28]
 800f532:	47a0      	blx	r4
 800f534:	4603      	mov	r3, r0
 800f536:	74fb      	strb	r3, [r7, #19]
 800f538:	e008      	b.n	800f54c <tcp_input+0x668>
 800f53a:	4b35      	ldr	r3, [pc, #212]	; (800f610 <tcp_input+0x72c>)
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	2300      	movs	r3, #0
 800f540:	69f9      	ldr	r1, [r7, #28]
 800f542:	2000      	movs	r0, #0
 800f544:	f7ff f95e 	bl	800e804 <tcp_recv_null>
 800f548:	4603      	mov	r3, r0
 800f54a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f54c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f550:	f113 0f0d 	cmn.w	r3, #13
 800f554:	d053      	beq.n	800f5fe <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f556:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d003      	beq.n	800f566 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f55e:	4b2c      	ldr	r3, [pc, #176]	; (800f610 <tcp_input+0x72c>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f566:	4b2b      	ldr	r3, [pc, #172]	; (800f614 <tcp_input+0x730>)
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	f003 0320 	and.w	r3, r3, #32
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d030      	beq.n	800f5d4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f576:	2b00      	cmp	r3, #0
 800f578:	d009      	beq.n	800f58e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f57e:	7b5a      	ldrb	r2, [r3, #13]
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f584:	f042 0220 	orr.w	r2, r2, #32
 800f588:	b2d2      	uxtb	r2, r2
 800f58a:	735a      	strb	r2, [r3, #13]
 800f58c:	e022      	b.n	800f5d4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f592:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f596:	d005      	beq.n	800f5a4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f59c:	3301      	adds	r3, #1
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00b      	beq.n	800f5c6 <tcp_input+0x6e2>
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	6918      	ldr	r0, [r3, #16]
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	69f9      	ldr	r1, [r7, #28]
 800f5be:	47a0      	blx	r4
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	74fb      	strb	r3, [r7, #19]
 800f5c4:	e001      	b.n	800f5ca <tcp_input+0x6e6>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f5ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5ce:	f113 0f0d 	cmn.w	r3, #13
 800f5d2:	d016      	beq.n	800f602 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f5d4:	4b13      	ldr	r3, [pc, #76]	; (800f624 <tcp_input+0x740>)
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f5da:	69f8      	ldr	r0, [r7, #28]
 800f5dc:	f000 f88e 	bl	800f6fc <tcp_input_delayed_close>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d128      	bne.n	800f638 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f5e6:	69f8      	ldr	r0, [r7, #28]
 800f5e8:	f002 fac8 	bl	8011b7c <tcp_output>
 800f5ec:	e025      	b.n	800f63a <tcp_input+0x756>
        goto aborted;
 800f5ee:	bf00      	nop
 800f5f0:	e023      	b.n	800f63a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f5f2:	bf00      	nop
 800f5f4:	e021      	b.n	800f63a <tcp_input+0x756>
              goto aborted;
 800f5f6:	bf00      	nop
 800f5f8:	e01f      	b.n	800f63a <tcp_input+0x756>
          goto aborted;
 800f5fa:	bf00      	nop
 800f5fc:	e01d      	b.n	800f63a <tcp_input+0x756>
            goto aborted;
 800f5fe:	bf00      	nop
 800f600:	e01b      	b.n	800f63a <tcp_input+0x756>
              goto aborted;
 800f602:	bf00      	nop
 800f604:	e019      	b.n	800f63a <tcp_input+0x756>
 800f606:	bf00      	nop
 800f608:	20030468 	.word	0x20030468
 800f60c:	20030478 	.word	0x20030478
 800f610:	20030498 	.word	0x20030498
 800f614:	20030495 	.word	0x20030495
 800f618:	20030490 	.word	0x20030490
 800f61c:	20030494 	.word	0x20030494
 800f620:	20030492 	.word	0x20030492
 800f624:	2003049c 	.word	0x2003049c
 800f628:	2003045c 	.word	0x2003045c
 800f62c:	08018e6c 	.word	0x08018e6c
 800f630:	08019020 	.word	0x08019020
 800f634:	08018eb8 	.word	0x08018eb8
          goto aborted;
 800f638:	bf00      	nop
    tcp_input_pcb = NULL;
 800f63a:	4b27      	ldr	r3, [pc, #156]	; (800f6d8 <tcp_input+0x7f4>)
 800f63c:	2200      	movs	r2, #0
 800f63e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f640:	4b26      	ldr	r3, [pc, #152]	; (800f6dc <tcp_input+0x7f8>)
 800f642:	2200      	movs	r2, #0
 800f644:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f646:	4b26      	ldr	r3, [pc, #152]	; (800f6e0 <tcp_input+0x7fc>)
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d03f      	beq.n	800f6ce <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f64e:	4b24      	ldr	r3, [pc, #144]	; (800f6e0 <tcp_input+0x7fc>)
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	4618      	mov	r0, r3
 800f654:	f7fd fd14 	bl	800d080 <pbuf_free>
      inseg.p = NULL;
 800f658:	4b21      	ldr	r3, [pc, #132]	; (800f6e0 <tcp_input+0x7fc>)
 800f65a:	2200      	movs	r2, #0
 800f65c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f65e:	e036      	b.n	800f6ce <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f660:	4b20      	ldr	r3, [pc, #128]	; (800f6e4 <tcp_input+0x800>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	899b      	ldrh	r3, [r3, #12]
 800f666:	b29b      	uxth	r3, r3
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fc f917 	bl	800b89c <lwip_htons>
 800f66e:	4603      	mov	r3, r0
 800f670:	b2db      	uxtb	r3, r3
 800f672:	f003 0304 	and.w	r3, r3, #4
 800f676:	2b00      	cmp	r3, #0
 800f678:	d118      	bne.n	800f6ac <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f67a:	4b1b      	ldr	r3, [pc, #108]	; (800f6e8 <tcp_input+0x804>)
 800f67c:	6819      	ldr	r1, [r3, #0]
 800f67e:	4b1b      	ldr	r3, [pc, #108]	; (800f6ec <tcp_input+0x808>)
 800f680:	881b      	ldrh	r3, [r3, #0]
 800f682:	461a      	mov	r2, r3
 800f684:	4b1a      	ldr	r3, [pc, #104]	; (800f6f0 <tcp_input+0x80c>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f68a:	4b16      	ldr	r3, [pc, #88]	; (800f6e4 <tcp_input+0x800>)
 800f68c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f68e:	885b      	ldrh	r3, [r3, #2]
 800f690:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f692:	4a14      	ldr	r2, [pc, #80]	; (800f6e4 <tcp_input+0x800>)
 800f694:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f696:	8812      	ldrh	r2, [r2, #0]
 800f698:	b292      	uxth	r2, r2
 800f69a:	9202      	str	r2, [sp, #8]
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	4b15      	ldr	r3, [pc, #84]	; (800f6f4 <tcp_input+0x810>)
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	4b15      	ldr	r3, [pc, #84]	; (800f6f8 <tcp_input+0x814>)
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	f003 f81c 	bl	80126e4 <tcp_rst>
    pbuf_free(p);
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f7fd fce7 	bl	800d080 <pbuf_free>
  return;
 800f6b2:	e00c      	b.n	800f6ce <tcp_input+0x7ea>
    goto dropped;
 800f6b4:	bf00      	nop
 800f6b6:	e006      	b.n	800f6c6 <tcp_input+0x7e2>
    goto dropped;
 800f6b8:	bf00      	nop
 800f6ba:	e004      	b.n	800f6c6 <tcp_input+0x7e2>
    goto dropped;
 800f6bc:	bf00      	nop
 800f6be:	e002      	b.n	800f6c6 <tcp_input+0x7e2>
      goto dropped;
 800f6c0:	bf00      	nop
 800f6c2:	e000      	b.n	800f6c6 <tcp_input+0x7e2>
      goto dropped;
 800f6c4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f7fd fcda 	bl	800d080 <pbuf_free>
 800f6cc:	e000      	b.n	800f6d0 <tcp_input+0x7ec>
  return;
 800f6ce:	bf00      	nop
}
 800f6d0:	3724      	adds	r7, #36	; 0x24
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd90      	pop	{r4, r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	2003049c 	.word	0x2003049c
 800f6dc:	20030498 	.word	0x20030498
 800f6e0:	20030468 	.word	0x20030468
 800f6e4:	20030478 	.word	0x20030478
 800f6e8:	2003048c 	.word	0x2003048c
 800f6ec:	20030492 	.word	0x20030492
 800f6f0:	20030488 	.word	0x20030488
 800f6f4:	2002cd0c 	.word	0x2002cd0c
 800f6f8:	2002cd10 	.word	0x2002cd10

0800f6fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d106      	bne.n	800f718 <tcp_input_delayed_close+0x1c>
 800f70a:	4b17      	ldr	r3, [pc, #92]	; (800f768 <tcp_input_delayed_close+0x6c>)
 800f70c:	f240 225a 	movw	r2, #602	; 0x25a
 800f710:	4916      	ldr	r1, [pc, #88]	; (800f76c <tcp_input_delayed_close+0x70>)
 800f712:	4817      	ldr	r0, [pc, #92]	; (800f770 <tcp_input_delayed_close+0x74>)
 800f714:	f006 fdf4 	bl	8016300 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f718:	4b16      	ldr	r3, [pc, #88]	; (800f774 <tcp_input_delayed_close+0x78>)
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	f003 0310 	and.w	r3, r3, #16
 800f720:	2b00      	cmp	r3, #0
 800f722:	d01c      	beq.n	800f75e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	8b5b      	ldrh	r3, [r3, #26]
 800f728:	f003 0310 	and.w	r3, r3, #16
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d10d      	bne.n	800f74c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f736:	2b00      	cmp	r3, #0
 800f738:	d008      	beq.n	800f74c <tcp_input_delayed_close+0x50>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f740:	687a      	ldr	r2, [r7, #4]
 800f742:	6912      	ldr	r2, [r2, #16]
 800f744:	f06f 010e 	mvn.w	r1, #14
 800f748:	4610      	mov	r0, r2
 800f74a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f74c:	6879      	ldr	r1, [r7, #4]
 800f74e:	480a      	ldr	r0, [pc, #40]	; (800f778 <tcp_input_delayed_close+0x7c>)
 800f750:	f7ff fa50 	bl	800ebf4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7fe f83d 	bl	800d7d4 <tcp_free>
    return 1;
 800f75a:	2301      	movs	r3, #1
 800f75c:	e000      	b.n	800f760 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f75e:	2300      	movs	r3, #0
}
 800f760:	4618      	mov	r0, r3
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	08018e6c 	.word	0x08018e6c
 800f76c:	0801903c 	.word	0x0801903c
 800f770:	08018eb8 	.word	0x08018eb8
 800f774:	20030495 	.word	0x20030495
 800f778:	2003045c 	.word	0x2003045c

0800f77c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f77c:	b590      	push	{r4, r7, lr}
 800f77e:	b08b      	sub	sp, #44	; 0x2c
 800f780:	af04      	add	r7, sp, #16
 800f782:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f784:	4b6f      	ldr	r3, [pc, #444]	; (800f944 <tcp_listen_input+0x1c8>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	f003 0304 	and.w	r3, r3, #4
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f040 80d2 	bne.w	800f936 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d106      	bne.n	800f7a6 <tcp_listen_input+0x2a>
 800f798:	4b6b      	ldr	r3, [pc, #428]	; (800f948 <tcp_listen_input+0x1cc>)
 800f79a:	f240 2281 	movw	r2, #641	; 0x281
 800f79e:	496b      	ldr	r1, [pc, #428]	; (800f94c <tcp_listen_input+0x1d0>)
 800f7a0:	486b      	ldr	r0, [pc, #428]	; (800f950 <tcp_listen_input+0x1d4>)
 800f7a2:	f006 fdad 	bl	8016300 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f7a6:	4b67      	ldr	r3, [pc, #412]	; (800f944 <tcp_listen_input+0x1c8>)
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	f003 0310 	and.w	r3, r3, #16
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d019      	beq.n	800f7e6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7b2:	4b68      	ldr	r3, [pc, #416]	; (800f954 <tcp_listen_input+0x1d8>)
 800f7b4:	6819      	ldr	r1, [r3, #0]
 800f7b6:	4b68      	ldr	r3, [pc, #416]	; (800f958 <tcp_listen_input+0x1dc>)
 800f7b8:	881b      	ldrh	r3, [r3, #0]
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	4b67      	ldr	r3, [pc, #412]	; (800f95c <tcp_listen_input+0x1e0>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7c2:	4b67      	ldr	r3, [pc, #412]	; (800f960 <tcp_listen_input+0x1e4>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7c6:	885b      	ldrh	r3, [r3, #2]
 800f7c8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7ca:	4a65      	ldr	r2, [pc, #404]	; (800f960 <tcp_listen_input+0x1e4>)
 800f7cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7ce:	8812      	ldrh	r2, [r2, #0]
 800f7d0:	b292      	uxth	r2, r2
 800f7d2:	9202      	str	r2, [sp, #8]
 800f7d4:	9301      	str	r3, [sp, #4]
 800f7d6:	4b63      	ldr	r3, [pc, #396]	; (800f964 <tcp_listen_input+0x1e8>)
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	4b63      	ldr	r3, [pc, #396]	; (800f968 <tcp_listen_input+0x1ec>)
 800f7dc:	4602      	mov	r2, r0
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f002 ff80 	bl	80126e4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f7e4:	e0a9      	b.n	800f93a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f7e6:	4b57      	ldr	r3, [pc, #348]	; (800f944 <tcp_listen_input+0x1c8>)
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	f003 0302 	and.w	r3, r3, #2
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f000 80a3 	beq.w	800f93a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	7d5b      	ldrb	r3, [r3, #21]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7ff f927 	bl	800ea4c <tcp_alloc>
 800f7fe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d111      	bne.n	800f82a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	699b      	ldr	r3, [r3, #24]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d00a      	beq.n	800f824 <tcp_listen_input+0xa8>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	699b      	ldr	r3, [r3, #24]
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	6910      	ldr	r0, [r2, #16]
 800f816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f81a:	2100      	movs	r1, #0
 800f81c:	4798      	blx	r3
 800f81e:	4603      	mov	r3, r0
 800f820:	73bb      	strb	r3, [r7, #14]
      return;
 800f822:	e08b      	b.n	800f93c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f824:	23f0      	movs	r3, #240	; 0xf0
 800f826:	73bb      	strb	r3, [r7, #14]
      return;
 800f828:	e088      	b.n	800f93c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f82a:	4b50      	ldr	r3, [pc, #320]	; (800f96c <tcp_listen_input+0x1f0>)
 800f82c:	695a      	ldr	r2, [r3, #20]
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f832:	4b4e      	ldr	r3, [pc, #312]	; (800f96c <tcp_listen_input+0x1f0>)
 800f834:	691a      	ldr	r2, [r3, #16]
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	8ada      	ldrh	r2, [r3, #22]
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f842:	4b47      	ldr	r3, [pc, #284]	; (800f960 <tcp_listen_input+0x1e4>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	881b      	ldrh	r3, [r3, #0]
 800f848:	b29a      	uxth	r2, r3
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	2203      	movs	r2, #3
 800f852:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f854:	4b41      	ldr	r3, [pc, #260]	; (800f95c <tcp_listen_input+0x1e0>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f866:	6978      	ldr	r0, [r7, #20]
 800f868:	f7ff fa58 	bl	800ed1c <tcp_next_iss>
 800f86c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	693a      	ldr	r2, [r7, #16]
 800f872:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	693a      	ldr	r2, [r7, #16]
 800f878:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	693a      	ldr	r2, [r7, #16]
 800f884:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f886:	4b35      	ldr	r3, [pc, #212]	; (800f95c <tcp_listen_input+0x1e0>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	1e5a      	subs	r2, r3, #1
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	691a      	ldr	r2, [r3, #16]
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	7a5b      	ldrb	r3, [r3, #9]
 800f8a2:	f003 030c 	and.w	r3, r3, #12
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	7a1a      	ldrb	r2, [r3, #8]
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f8b4:	4b2e      	ldr	r3, [pc, #184]	; (800f970 <tcp_listen_input+0x1f4>)
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	60da      	str	r2, [r3, #12]
 800f8bc:	4a2c      	ldr	r2, [pc, #176]	; (800f970 <tcp_listen_input+0x1f4>)
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	6013      	str	r3, [r2, #0]
 800f8c2:	f003 f8d1 	bl	8012a68 <tcp_timer_needed>
 800f8c6:	4b2b      	ldr	r3, [pc, #172]	; (800f974 <tcp_listen_input+0x1f8>)
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f8cc:	6978      	ldr	r0, [r7, #20]
 800f8ce:	f001 fd8f 	bl	80113f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f8d2:	4b23      	ldr	r3, [pc, #140]	; (800f960 <tcp_listen_input+0x1e4>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	89db      	ldrh	r3, [r3, #14]
 800f8d8:	b29a      	uxth	r2, r3
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	3304      	adds	r3, #4
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f004 fffb 	bl	80148f0 <ip4_route>
 800f8fa:	4601      	mov	r1, r0
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	3304      	adds	r3, #4
 800f900:	461a      	mov	r2, r3
 800f902:	4620      	mov	r0, r4
 800f904:	f7ff fa30 	bl	800ed68 <tcp_eff_send_mss_netif>
 800f908:	4603      	mov	r3, r0
 800f90a:	461a      	mov	r2, r3
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f910:	2112      	movs	r1, #18
 800f912:	6978      	ldr	r0, [r7, #20]
 800f914:	f002 f844 	bl	80119a0 <tcp_enqueue_flags>
 800f918:	4603      	mov	r3, r0
 800f91a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f91c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d004      	beq.n	800f92e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f924:	2100      	movs	r1, #0
 800f926:	6978      	ldr	r0, [r7, #20]
 800f928:	f7fe f97e 	bl	800dc28 <tcp_abandon>
      return;
 800f92c:	e006      	b.n	800f93c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f92e:	6978      	ldr	r0, [r7, #20]
 800f930:	f002 f924 	bl	8011b7c <tcp_output>
  return;
 800f934:	e001      	b.n	800f93a <tcp_listen_input+0x1be>
    return;
 800f936:	bf00      	nop
 800f938:	e000      	b.n	800f93c <tcp_listen_input+0x1c0>
  return;
 800f93a:	bf00      	nop
}
 800f93c:	371c      	adds	r7, #28
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd90      	pop	{r4, r7, pc}
 800f942:	bf00      	nop
 800f944:	20030494 	.word	0x20030494
 800f948:	08018e6c 	.word	0x08018e6c
 800f94c:	08019064 	.word	0x08019064
 800f950:	08018eb8 	.word	0x08018eb8
 800f954:	2003048c 	.word	0x2003048c
 800f958:	20030492 	.word	0x20030492
 800f95c:	20030488 	.word	0x20030488
 800f960:	20030478 	.word	0x20030478
 800f964:	2002cd0c 	.word	0x2002cd0c
 800f968:	2002cd10 	.word	0x2002cd10
 800f96c:	2002ccfc 	.word	0x2002ccfc
 800f970:	2003045c 	.word	0x2003045c
 800f974:	20030464 	.word	0x20030464

0800f978 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b086      	sub	sp, #24
 800f97c:	af04      	add	r7, sp, #16
 800f97e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f980:	4b2f      	ldr	r3, [pc, #188]	; (800fa40 <tcp_timewait_input+0xc8>)
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	f003 0304 	and.w	r3, r3, #4
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d153      	bne.n	800fa34 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d106      	bne.n	800f9a0 <tcp_timewait_input+0x28>
 800f992:	4b2c      	ldr	r3, [pc, #176]	; (800fa44 <tcp_timewait_input+0xcc>)
 800f994:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f998:	492b      	ldr	r1, [pc, #172]	; (800fa48 <tcp_timewait_input+0xd0>)
 800f99a:	482c      	ldr	r0, [pc, #176]	; (800fa4c <tcp_timewait_input+0xd4>)
 800f99c:	f006 fcb0 	bl	8016300 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f9a0:	4b27      	ldr	r3, [pc, #156]	; (800fa40 <tcp_timewait_input+0xc8>)
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	f003 0302 	and.w	r3, r3, #2
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d02a      	beq.n	800fa02 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f9ac:	4b28      	ldr	r3, [pc, #160]	; (800fa50 <tcp_timewait_input+0xd8>)
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b4:	1ad3      	subs	r3, r2, r3
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	db2d      	blt.n	800fa16 <tcp_timewait_input+0x9e>
 800f9ba:	4b25      	ldr	r3, [pc, #148]	; (800fa50 <tcp_timewait_input+0xd8>)
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c2:	6879      	ldr	r1, [r7, #4]
 800f9c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9c6:	440b      	add	r3, r1
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	dc23      	bgt.n	800fa16 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9ce:	4b21      	ldr	r3, [pc, #132]	; (800fa54 <tcp_timewait_input+0xdc>)
 800f9d0:	6819      	ldr	r1, [r3, #0]
 800f9d2:	4b21      	ldr	r3, [pc, #132]	; (800fa58 <tcp_timewait_input+0xe0>)
 800f9d4:	881b      	ldrh	r3, [r3, #0]
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	4b1d      	ldr	r3, [pc, #116]	; (800fa50 <tcp_timewait_input+0xd8>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9de:	4b1f      	ldr	r3, [pc, #124]	; (800fa5c <tcp_timewait_input+0xe4>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9e2:	885b      	ldrh	r3, [r3, #2]
 800f9e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9e6:	4a1d      	ldr	r2, [pc, #116]	; (800fa5c <tcp_timewait_input+0xe4>)
 800f9e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9ea:	8812      	ldrh	r2, [r2, #0]
 800f9ec:	b292      	uxth	r2, r2
 800f9ee:	9202      	str	r2, [sp, #8]
 800f9f0:	9301      	str	r3, [sp, #4]
 800f9f2:	4b1b      	ldr	r3, [pc, #108]	; (800fa60 <tcp_timewait_input+0xe8>)
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	4b1b      	ldr	r3, [pc, #108]	; (800fa64 <tcp_timewait_input+0xec>)
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f002 fe72 	bl	80126e4 <tcp_rst>
      return;
 800fa00:	e01b      	b.n	800fa3a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fa02:	4b0f      	ldr	r3, [pc, #60]	; (800fa40 <tcp_timewait_input+0xc8>)
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	f003 0301 	and.w	r3, r3, #1
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d003      	beq.n	800fa16 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fa0e:	4b16      	ldr	r3, [pc, #88]	; (800fa68 <tcp_timewait_input+0xf0>)
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fa16:	4b10      	ldr	r3, [pc, #64]	; (800fa58 <tcp_timewait_input+0xe0>)
 800fa18:	881b      	ldrh	r3, [r3, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00c      	beq.n	800fa38 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	8b5b      	ldrh	r3, [r3, #26]
 800fa22:	f043 0302 	orr.w	r3, r3, #2
 800fa26:	b29a      	uxth	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f002 f8a5 	bl	8011b7c <tcp_output>
  }
  return;
 800fa32:	e001      	b.n	800fa38 <tcp_timewait_input+0xc0>
    return;
 800fa34:	bf00      	nop
 800fa36:	e000      	b.n	800fa3a <tcp_timewait_input+0xc2>
  return;
 800fa38:	bf00      	nop
}
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	20030494 	.word	0x20030494
 800fa44:	08018e6c 	.word	0x08018e6c
 800fa48:	08019084 	.word	0x08019084
 800fa4c:	08018eb8 	.word	0x08018eb8
 800fa50:	20030488 	.word	0x20030488
 800fa54:	2003048c 	.word	0x2003048c
 800fa58:	20030492 	.word	0x20030492
 800fa5c:	20030478 	.word	0x20030478
 800fa60:	2002cd0c 	.word	0x2002cd0c
 800fa64:	2002cd10 	.word	0x2002cd10
 800fa68:	20030450 	.word	0x20030450

0800fa6c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fa6c:	b590      	push	{r4, r7, lr}
 800fa6e:	b08d      	sub	sp, #52	; 0x34
 800fa70:	af04      	add	r7, sp, #16
 800fa72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fa74:	2300      	movs	r3, #0
 800fa76:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d106      	bne.n	800fa90 <tcp_process+0x24>
 800fa82:	4b9d      	ldr	r3, [pc, #628]	; (800fcf8 <tcp_process+0x28c>)
 800fa84:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fa88:	499c      	ldr	r1, [pc, #624]	; (800fcfc <tcp_process+0x290>)
 800fa8a:	489d      	ldr	r0, [pc, #628]	; (800fd00 <tcp_process+0x294>)
 800fa8c:	f006 fc38 	bl	8016300 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fa90:	4b9c      	ldr	r3, [pc, #624]	; (800fd04 <tcp_process+0x298>)
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	f003 0304 	and.w	r3, r3, #4
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d04e      	beq.n	800fb3a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	7d1b      	ldrb	r3, [r3, #20]
 800faa0:	2b02      	cmp	r3, #2
 800faa2:	d108      	bne.n	800fab6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800faa8:	4b97      	ldr	r3, [pc, #604]	; (800fd08 <tcp_process+0x29c>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	429a      	cmp	r2, r3
 800faae:	d123      	bne.n	800faf8 <tcp_process+0x8c>
        acceptable = 1;
 800fab0:	2301      	movs	r3, #1
 800fab2:	76fb      	strb	r3, [r7, #27]
 800fab4:	e020      	b.n	800faf8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800faba:	4b94      	ldr	r3, [pc, #592]	; (800fd0c <tcp_process+0x2a0>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d102      	bne.n	800fac8 <tcp_process+0x5c>
        acceptable = 1;
 800fac2:	2301      	movs	r3, #1
 800fac4:	76fb      	strb	r3, [r7, #27]
 800fac6:	e017      	b.n	800faf8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fac8:	4b90      	ldr	r3, [pc, #576]	; (800fd0c <tcp_process+0x2a0>)
 800faca:	681a      	ldr	r2, [r3, #0]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad0:	1ad3      	subs	r3, r2, r3
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	db10      	blt.n	800faf8 <tcp_process+0x8c>
 800fad6:	4b8d      	ldr	r3, [pc, #564]	; (800fd0c <tcp_process+0x2a0>)
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fade:	6879      	ldr	r1, [r7, #4]
 800fae0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fae2:	440b      	add	r3, r1
 800fae4:	1ad3      	subs	r3, r2, r3
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	dc06      	bgt.n	800faf8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	8b5b      	ldrh	r3, [r3, #26]
 800faee:	f043 0302 	orr.w	r3, r3, #2
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800faf8:	7efb      	ldrb	r3, [r7, #27]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d01b      	beq.n	800fb36 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	7d1b      	ldrb	r3, [r3, #20]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d106      	bne.n	800fb14 <tcp_process+0xa8>
 800fb06:	4b7c      	ldr	r3, [pc, #496]	; (800fcf8 <tcp_process+0x28c>)
 800fb08:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fb0c:	4980      	ldr	r1, [pc, #512]	; (800fd10 <tcp_process+0x2a4>)
 800fb0e:	487c      	ldr	r0, [pc, #496]	; (800fd00 <tcp_process+0x294>)
 800fb10:	f006 fbf6 	bl	8016300 <iprintf>
      recv_flags |= TF_RESET;
 800fb14:	4b7f      	ldr	r3, [pc, #508]	; (800fd14 <tcp_process+0x2a8>)
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	f043 0308 	orr.w	r3, r3, #8
 800fb1c:	b2da      	uxtb	r2, r3
 800fb1e:	4b7d      	ldr	r3, [pc, #500]	; (800fd14 <tcp_process+0x2a8>)
 800fb20:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	8b5b      	ldrh	r3, [r3, #26]
 800fb26:	f023 0301 	bic.w	r3, r3, #1
 800fb2a:	b29a      	uxth	r2, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fb30:	f06f 030d 	mvn.w	r3, #13
 800fb34:	e37a      	b.n	801022c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fb36:	2300      	movs	r3, #0
 800fb38:	e378      	b.n	801022c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fb3a:	4b72      	ldr	r3, [pc, #456]	; (800fd04 <tcp_process+0x298>)
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	f003 0302 	and.w	r3, r3, #2
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d010      	beq.n	800fb68 <tcp_process+0xfc>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	7d1b      	ldrb	r3, [r3, #20]
 800fb4a:	2b02      	cmp	r3, #2
 800fb4c:	d00c      	beq.n	800fb68 <tcp_process+0xfc>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	7d1b      	ldrb	r3, [r3, #20]
 800fb52:	2b03      	cmp	r3, #3
 800fb54:	d008      	beq.n	800fb68 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	8b5b      	ldrh	r3, [r3, #26]
 800fb5a:	f043 0302 	orr.w	r3, r3, #2
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fb64:	2300      	movs	r3, #0
 800fb66:	e361      	b.n	801022c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	8b5b      	ldrh	r3, [r3, #26]
 800fb6c:	f003 0310 	and.w	r3, r3, #16
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d103      	bne.n	800fb7c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fb74:	4b68      	ldr	r3, [pc, #416]	; (800fd18 <tcp_process+0x2ac>)
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2200      	movs	r2, #0
 800fb88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f001 fc2f 	bl	80113f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	7d1b      	ldrb	r3, [r3, #20]
 800fb96:	3b02      	subs	r3, #2
 800fb98:	2b07      	cmp	r3, #7
 800fb9a:	f200 8337 	bhi.w	801020c <tcp_process+0x7a0>
 800fb9e:	a201      	add	r2, pc, #4	; (adr r2, 800fba4 <tcp_process+0x138>)
 800fba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba4:	0800fbc5 	.word	0x0800fbc5
 800fba8:	0800fdf5 	.word	0x0800fdf5
 800fbac:	0800ff6d 	.word	0x0800ff6d
 800fbb0:	0800ff97 	.word	0x0800ff97
 800fbb4:	080100bb 	.word	0x080100bb
 800fbb8:	0800ff6d 	.word	0x0800ff6d
 800fbbc:	08010147 	.word	0x08010147
 800fbc0:	080101d7 	.word	0x080101d7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fbc4:	4b4f      	ldr	r3, [pc, #316]	; (800fd04 <tcp_process+0x298>)
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	f003 0310 	and.w	r3, r3, #16
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	f000 80e4 	beq.w	800fd9a <tcp_process+0x32e>
 800fbd2:	4b4c      	ldr	r3, [pc, #304]	; (800fd04 <tcp_process+0x298>)
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	f003 0302 	and.w	r3, r3, #2
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	f000 80dd 	beq.w	800fd9a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbe4:	1c5a      	adds	r2, r3, #1
 800fbe6:	4b48      	ldr	r3, [pc, #288]	; (800fd08 <tcp_process+0x29c>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	f040 80d5 	bne.w	800fd9a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fbf0:	4b46      	ldr	r3, [pc, #280]	; (800fd0c <tcp_process+0x2a0>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	1c5a      	adds	r2, r3, #1
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fc02:	4b41      	ldr	r3, [pc, #260]	; (800fd08 <tcp_process+0x29c>)
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fc0a:	4b44      	ldr	r3, [pc, #272]	; (800fd1c <tcp_process+0x2b0>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	89db      	ldrh	r3, [r3, #14]
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fc24:	4b39      	ldr	r3, [pc, #228]	; (800fd0c <tcp_process+0x2a0>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	1e5a      	subs	r2, r3, #1
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2204      	movs	r2, #4
 800fc32:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	3304      	adds	r3, #4
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f004 fe57 	bl	80148f0 <ip4_route>
 800fc42:	4601      	mov	r1, r0
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	3304      	adds	r3, #4
 800fc48:	461a      	mov	r2, r3
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f7ff f88c 	bl	800ed68 <tcp_eff_send_mss_netif>
 800fc50:	4603      	mov	r3, r0
 800fc52:	461a      	mov	r2, r3
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc5c:	009a      	lsls	r2, r3, #2
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc62:	005b      	lsls	r3, r3, #1
 800fc64:	f241 111c 	movw	r1, #4380	; 0x111c
 800fc68:	428b      	cmp	r3, r1
 800fc6a:	bf38      	it	cc
 800fc6c:	460b      	movcc	r3, r1
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d204      	bcs.n	800fc7c <tcp_process+0x210>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	b29b      	uxth	r3, r3
 800fc7a:	e00d      	b.n	800fc98 <tcp_process+0x22c>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	f241 121c 	movw	r2, #4380	; 0x111c
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d904      	bls.n	800fc94 <tcp_process+0x228>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	e001      	b.n	800fc98 <tcp_process+0x22c>
 800fc94:	f241 131c 	movw	r3, #4380	; 0x111c
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d106      	bne.n	800fcb6 <tcp_process+0x24a>
 800fca8:	4b13      	ldr	r3, [pc, #76]	; (800fcf8 <tcp_process+0x28c>)
 800fcaa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fcae:	491c      	ldr	r1, [pc, #112]	; (800fd20 <tcp_process+0x2b4>)
 800fcb0:	4813      	ldr	r0, [pc, #76]	; (800fd00 <tcp_process+0x294>)
 800fcb2:	f006 fb25 	bl	8016300 <iprintf>
        --pcb->snd_queuelen;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fcbc:	3b01      	subs	r3, #1
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d12a      	bne.n	800fd28 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcd6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d106      	bne.n	800fcec <tcp_process+0x280>
 800fcde:	4b06      	ldr	r3, [pc, #24]	; (800fcf8 <tcp_process+0x28c>)
 800fce0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fce4:	490f      	ldr	r1, [pc, #60]	; (800fd24 <tcp_process+0x2b8>)
 800fce6:	4806      	ldr	r0, [pc, #24]	; (800fd00 <tcp_process+0x294>)
 800fce8:	f006 fb0a 	bl	8016300 <iprintf>
          pcb->unsent = rseg->next;
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	66da      	str	r2, [r3, #108]	; 0x6c
 800fcf4:	e01c      	b.n	800fd30 <tcp_process+0x2c4>
 800fcf6:	bf00      	nop
 800fcf8:	08018e6c 	.word	0x08018e6c
 800fcfc:	080190a4 	.word	0x080190a4
 800fd00:	08018eb8 	.word	0x08018eb8
 800fd04:	20030494 	.word	0x20030494
 800fd08:	2003048c 	.word	0x2003048c
 800fd0c:	20030488 	.word	0x20030488
 800fd10:	080190c0 	.word	0x080190c0
 800fd14:	20030495 	.word	0x20030495
 800fd18:	20030450 	.word	0x20030450
 800fd1c:	20030478 	.word	0x20030478
 800fd20:	080190e0 	.word	0x080190e0
 800fd24:	080190f8 	.word	0x080190f8
        } else {
          pcb->unacked = rseg->next;
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fd30:	69f8      	ldr	r0, [r7, #28]
 800fd32:	f7fe fd22 	bl	800e77a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d104      	bne.n	800fd48 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd44:	861a      	strh	r2, [r3, #48]	; 0x30
 800fd46:	e006      	b.n	800fd56 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00a      	beq.n	800fd76 <tcp_process+0x30a>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd66:	687a      	ldr	r2, [r7, #4]
 800fd68:	6910      	ldr	r0, [r2, #16]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	6879      	ldr	r1, [r7, #4]
 800fd6e:	4798      	blx	r3
 800fd70:	4603      	mov	r3, r0
 800fd72:	76bb      	strb	r3, [r7, #26]
 800fd74:	e001      	b.n	800fd7a <tcp_process+0x30e>
 800fd76:	2300      	movs	r3, #0
 800fd78:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fd7a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd7e:	f113 0f0d 	cmn.w	r3, #13
 800fd82:	d102      	bne.n	800fd8a <tcp_process+0x31e>
          return ERR_ABRT;
 800fd84:	f06f 030c 	mvn.w	r3, #12
 800fd88:	e250      	b.n	801022c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	8b5b      	ldrh	r3, [r3, #26]
 800fd8e:	f043 0302 	orr.w	r3, r3, #2
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fd98:	e23a      	b.n	8010210 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fd9a:	4b98      	ldr	r3, [pc, #608]	; (800fffc <tcp_process+0x590>)
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	f003 0310 	and.w	r3, r3, #16
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 8234 	beq.w	8010210 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda8:	4b95      	ldr	r3, [pc, #596]	; (8010000 <tcp_process+0x594>)
 800fdaa:	6819      	ldr	r1, [r3, #0]
 800fdac:	4b95      	ldr	r3, [pc, #596]	; (8010004 <tcp_process+0x598>)
 800fdae:	881b      	ldrh	r3, [r3, #0]
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	4b95      	ldr	r3, [pc, #596]	; (8010008 <tcp_process+0x59c>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdb8:	4b94      	ldr	r3, [pc, #592]	; (801000c <tcp_process+0x5a0>)
 800fdba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdbc:	885b      	ldrh	r3, [r3, #2]
 800fdbe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdc0:	4a92      	ldr	r2, [pc, #584]	; (801000c <tcp_process+0x5a0>)
 800fdc2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdc4:	8812      	ldrh	r2, [r2, #0]
 800fdc6:	b292      	uxth	r2, r2
 800fdc8:	9202      	str	r2, [sp, #8]
 800fdca:	9301      	str	r3, [sp, #4]
 800fdcc:	4b90      	ldr	r3, [pc, #576]	; (8010010 <tcp_process+0x5a4>)
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	4b90      	ldr	r3, [pc, #576]	; (8010014 <tcp_process+0x5a8>)
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f002 fc85 	bl	80126e4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fde0:	2b05      	cmp	r3, #5
 800fde2:	f200 8215 	bhi.w	8010210 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f002 fa4f 	bl	8012290 <tcp_rexmit_rto>
      break;
 800fdf2:	e20d      	b.n	8010210 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fdf4:	4b81      	ldr	r3, [pc, #516]	; (800fffc <tcp_process+0x590>)
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	f003 0310 	and.w	r3, r3, #16
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 80a1 	beq.w	800ff44 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fe02:	4b7f      	ldr	r3, [pc, #508]	; (8010000 <tcp_process+0x594>)
 800fe04:	681a      	ldr	r2, [r3, #0]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe0a:	1ad3      	subs	r3, r2, r3
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	db7e      	blt.n	800ff10 <tcp_process+0x4a4>
 800fe12:	4b7b      	ldr	r3, [pc, #492]	; (8010000 <tcp_process+0x594>)
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe1a:	1ad3      	subs	r3, r2, r3
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	dc77      	bgt.n	800ff10 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2204      	movs	r2, #4
 800fe24:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d102      	bne.n	800fe34 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fe2e:	23fa      	movs	r3, #250	; 0xfa
 800fe30:	76bb      	strb	r3, [r7, #26]
 800fe32:	e01d      	b.n	800fe70 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe38:	699b      	ldr	r3, [r3, #24]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d106      	bne.n	800fe4c <tcp_process+0x3e0>
 800fe3e:	4b76      	ldr	r3, [pc, #472]	; (8010018 <tcp_process+0x5ac>)
 800fe40:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fe44:	4975      	ldr	r1, [pc, #468]	; (801001c <tcp_process+0x5b0>)
 800fe46:	4876      	ldr	r0, [pc, #472]	; (8010020 <tcp_process+0x5b4>)
 800fe48:	f006 fa5a 	bl	8016300 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe50:	699b      	ldr	r3, [r3, #24]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d00a      	beq.n	800fe6c <tcp_process+0x400>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe5a:	699b      	ldr	r3, [r3, #24]
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	6910      	ldr	r0, [r2, #16]
 800fe60:	2200      	movs	r2, #0
 800fe62:	6879      	ldr	r1, [r7, #4]
 800fe64:	4798      	blx	r3
 800fe66:	4603      	mov	r3, r0
 800fe68:	76bb      	strb	r3, [r7, #26]
 800fe6a:	e001      	b.n	800fe70 <tcp_process+0x404>
 800fe6c:	23f0      	movs	r3, #240	; 0xf0
 800fe6e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fe70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00a      	beq.n	800fe8e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fe78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe7c:	f113 0f0d 	cmn.w	r3, #13
 800fe80:	d002      	beq.n	800fe88 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f7fd ff8e 	bl	800dda4 <tcp_abort>
            }
            return ERR_ABRT;
 800fe88:	f06f 030c 	mvn.w	r3, #12
 800fe8c:	e1ce      	b.n	801022c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 fae0 	bl	8010454 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fe94:	4b63      	ldr	r3, [pc, #396]	; (8010024 <tcp_process+0x5b8>)
 800fe96:	881b      	ldrh	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d005      	beq.n	800fea8 <tcp_process+0x43c>
            recv_acked--;
 800fe9c:	4b61      	ldr	r3, [pc, #388]	; (8010024 <tcp_process+0x5b8>)
 800fe9e:	881b      	ldrh	r3, [r3, #0]
 800fea0:	3b01      	subs	r3, #1
 800fea2:	b29a      	uxth	r2, r3
 800fea4:	4b5f      	ldr	r3, [pc, #380]	; (8010024 <tcp_process+0x5b8>)
 800fea6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800feac:	009a      	lsls	r2, r3, #2
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800feb2:	005b      	lsls	r3, r3, #1
 800feb4:	f241 111c 	movw	r1, #4380	; 0x111c
 800feb8:	428b      	cmp	r3, r1
 800feba:	bf38      	it	cc
 800febc:	460b      	movcc	r3, r1
 800febe:	429a      	cmp	r2, r3
 800fec0:	d204      	bcs.n	800fecc <tcp_process+0x460>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	b29b      	uxth	r3, r3
 800feca:	e00d      	b.n	800fee8 <tcp_process+0x47c>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fed0:	005b      	lsls	r3, r3, #1
 800fed2:	f241 121c 	movw	r2, #4380	; 0x111c
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d904      	bls.n	800fee4 <tcp_process+0x478>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fede:	005b      	lsls	r3, r3, #1
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	e001      	b.n	800fee8 <tcp_process+0x47c>
 800fee4:	f241 131c 	movw	r3, #4380	; 0x111c
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800feee:	4b4e      	ldr	r3, [pc, #312]	; (8010028 <tcp_process+0x5bc>)
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	f003 0320 	and.w	r3, r3, #32
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d037      	beq.n	800ff6a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	8b5b      	ldrh	r3, [r3, #26]
 800fefe:	f043 0302 	orr.w	r3, r3, #2
 800ff02:	b29a      	uxth	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2207      	movs	r2, #7
 800ff0c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ff0e:	e02c      	b.n	800ff6a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff10:	4b3b      	ldr	r3, [pc, #236]	; (8010000 <tcp_process+0x594>)
 800ff12:	6819      	ldr	r1, [r3, #0]
 800ff14:	4b3b      	ldr	r3, [pc, #236]	; (8010004 <tcp_process+0x598>)
 800ff16:	881b      	ldrh	r3, [r3, #0]
 800ff18:	461a      	mov	r2, r3
 800ff1a:	4b3b      	ldr	r3, [pc, #236]	; (8010008 <tcp_process+0x59c>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff20:	4b3a      	ldr	r3, [pc, #232]	; (801000c <tcp_process+0x5a0>)
 800ff22:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff24:	885b      	ldrh	r3, [r3, #2]
 800ff26:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff28:	4a38      	ldr	r2, [pc, #224]	; (801000c <tcp_process+0x5a0>)
 800ff2a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff2c:	8812      	ldrh	r2, [r2, #0]
 800ff2e:	b292      	uxth	r2, r2
 800ff30:	9202      	str	r2, [sp, #8]
 800ff32:	9301      	str	r3, [sp, #4]
 800ff34:	4b36      	ldr	r3, [pc, #216]	; (8010010 <tcp_process+0x5a4>)
 800ff36:	9300      	str	r3, [sp, #0]
 800ff38:	4b36      	ldr	r3, [pc, #216]	; (8010014 <tcp_process+0x5a8>)
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f002 fbd1 	bl	80126e4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ff42:	e167      	b.n	8010214 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ff44:	4b2d      	ldr	r3, [pc, #180]	; (800fffc <tcp_process+0x590>)
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	f003 0302 	and.w	r3, r3, #2
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f000 8161 	beq.w	8010214 <tcp_process+0x7a8>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff56:	1e5a      	subs	r2, r3, #1
 800ff58:	4b2b      	ldr	r3, [pc, #172]	; (8010008 <tcp_process+0x59c>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	f040 8159 	bne.w	8010214 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f002 f9b6 	bl	80122d4 <tcp_rexmit>
      break;
 800ff68:	e154      	b.n	8010214 <tcp_process+0x7a8>
 800ff6a:	e153      	b.n	8010214 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f000 fa71 	bl	8010454 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ff72:	4b2d      	ldr	r3, [pc, #180]	; (8010028 <tcp_process+0x5bc>)
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	f003 0320 	and.w	r3, r3, #32
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	f000 814c 	beq.w	8010218 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	8b5b      	ldrh	r3, [r3, #26]
 800ff84:	f043 0302 	orr.w	r3, r3, #2
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2207      	movs	r2, #7
 800ff92:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff94:	e140      	b.n	8010218 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 fa5c 	bl	8010454 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ff9c:	4b22      	ldr	r3, [pc, #136]	; (8010028 <tcp_process+0x5bc>)
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	f003 0320 	and.w	r3, r3, #32
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d071      	beq.n	801008c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ffa8:	4b14      	ldr	r3, [pc, #80]	; (800fffc <tcp_process+0x590>)
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	f003 0310 	and.w	r3, r3, #16
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d060      	beq.n	8010076 <tcp_process+0x60a>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ffb8:	4b11      	ldr	r3, [pc, #68]	; (8010000 <tcp_process+0x594>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d15a      	bne.n	8010076 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d156      	bne.n	8010076 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	8b5b      	ldrh	r3, [r3, #26]
 800ffcc:	f043 0302 	orr.w	r3, r3, #2
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f7fe fdbc 	bl	800eb54 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ffdc:	4b13      	ldr	r3, [pc, #76]	; (801002c <tcp_process+0x5c0>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d105      	bne.n	800fff2 <tcp_process+0x586>
 800ffe6:	4b11      	ldr	r3, [pc, #68]	; (801002c <tcp_process+0x5c0>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	4a0f      	ldr	r2, [pc, #60]	; (801002c <tcp_process+0x5c0>)
 800ffee:	6013      	str	r3, [r2, #0]
 800fff0:	e02e      	b.n	8010050 <tcp_process+0x5e4>
 800fff2:	4b0e      	ldr	r3, [pc, #56]	; (801002c <tcp_process+0x5c0>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	617b      	str	r3, [r7, #20]
 800fff8:	e027      	b.n	801004a <tcp_process+0x5de>
 800fffa:	bf00      	nop
 800fffc:	20030494 	.word	0x20030494
 8010000:	2003048c 	.word	0x2003048c
 8010004:	20030492 	.word	0x20030492
 8010008:	20030488 	.word	0x20030488
 801000c:	20030478 	.word	0x20030478
 8010010:	2002cd0c 	.word	0x2002cd0c
 8010014:	2002cd10 	.word	0x2002cd10
 8010018:	08018e6c 	.word	0x08018e6c
 801001c:	0801910c 	.word	0x0801910c
 8010020:	08018eb8 	.word	0x08018eb8
 8010024:	20030490 	.word	0x20030490
 8010028:	20030495 	.word	0x20030495
 801002c:	2003045c 	.word	0x2003045c
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	429a      	cmp	r2, r3
 8010038:	d104      	bne.n	8010044 <tcp_process+0x5d8>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	68da      	ldr	r2, [r3, #12]
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	60da      	str	r2, [r3, #12]
 8010042:	e005      	b.n	8010050 <tcp_process+0x5e4>
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	617b      	str	r3, [r7, #20]
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1ef      	bne.n	8010030 <tcp_process+0x5c4>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	60da      	str	r2, [r3, #12]
 8010056:	4b77      	ldr	r3, [pc, #476]	; (8010234 <tcp_process+0x7c8>)
 8010058:	2201      	movs	r2, #1
 801005a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	220a      	movs	r2, #10
 8010060:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010062:	4b75      	ldr	r3, [pc, #468]	; (8010238 <tcp_process+0x7cc>)
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	60da      	str	r2, [r3, #12]
 801006a:	4a73      	ldr	r2, [pc, #460]	; (8010238 <tcp_process+0x7cc>)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6013      	str	r3, [r2, #0]
 8010070:	f002 fcfa 	bl	8012a68 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010074:	e0d2      	b.n	801021c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	8b5b      	ldrh	r3, [r3, #26]
 801007a:	f043 0302 	orr.w	r3, r3, #2
 801007e:	b29a      	uxth	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2208      	movs	r2, #8
 8010088:	751a      	strb	r2, [r3, #20]
      break;
 801008a:	e0c7      	b.n	801021c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801008c:	4b6b      	ldr	r3, [pc, #428]	; (801023c <tcp_process+0x7d0>)
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	f003 0310 	and.w	r3, r3, #16
 8010094:	2b00      	cmp	r3, #0
 8010096:	f000 80c1 	beq.w	801021c <tcp_process+0x7b0>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801009e:	4b68      	ldr	r3, [pc, #416]	; (8010240 <tcp_process+0x7d4>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	f040 80ba 	bne.w	801021c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f040 80b5 	bne.w	801021c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2206      	movs	r2, #6
 80100b6:	751a      	strb	r2, [r3, #20]
      break;
 80100b8:	e0b0      	b.n	801021c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f000 f9ca 	bl	8010454 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80100c0:	4b60      	ldr	r3, [pc, #384]	; (8010244 <tcp_process+0x7d8>)
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	f003 0320 	and.w	r3, r3, #32
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f000 80a9 	beq.w	8010220 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	8b5b      	ldrh	r3, [r3, #26]
 80100d2:	f043 0302 	orr.w	r3, r3, #2
 80100d6:	b29a      	uxth	r2, r3
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f7fe fd39 	bl	800eb54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80100e2:	4b59      	ldr	r3, [pc, #356]	; (8010248 <tcp_process+0x7dc>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d105      	bne.n	80100f8 <tcp_process+0x68c>
 80100ec:	4b56      	ldr	r3, [pc, #344]	; (8010248 <tcp_process+0x7dc>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	4a55      	ldr	r2, [pc, #340]	; (8010248 <tcp_process+0x7dc>)
 80100f4:	6013      	str	r3, [r2, #0]
 80100f6:	e013      	b.n	8010120 <tcp_process+0x6b4>
 80100f8:	4b53      	ldr	r3, [pc, #332]	; (8010248 <tcp_process+0x7dc>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	613b      	str	r3, [r7, #16]
 80100fe:	e00c      	b.n	801011a <tcp_process+0x6ae>
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	429a      	cmp	r2, r3
 8010108:	d104      	bne.n	8010114 <tcp_process+0x6a8>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	68da      	ldr	r2, [r3, #12]
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	60da      	str	r2, [r3, #12]
 8010112:	e005      	b.n	8010120 <tcp_process+0x6b4>
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	613b      	str	r3, [r7, #16]
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d1ef      	bne.n	8010100 <tcp_process+0x694>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	60da      	str	r2, [r3, #12]
 8010126:	4b43      	ldr	r3, [pc, #268]	; (8010234 <tcp_process+0x7c8>)
 8010128:	2201      	movs	r2, #1
 801012a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	220a      	movs	r2, #10
 8010130:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010132:	4b41      	ldr	r3, [pc, #260]	; (8010238 <tcp_process+0x7cc>)
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	60da      	str	r2, [r3, #12]
 801013a:	4a3f      	ldr	r2, [pc, #252]	; (8010238 <tcp_process+0x7cc>)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6013      	str	r3, [r2, #0]
 8010140:	f002 fc92 	bl	8012a68 <tcp_timer_needed>
      }
      break;
 8010144:	e06c      	b.n	8010220 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 f984 	bl	8010454 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801014c:	4b3b      	ldr	r3, [pc, #236]	; (801023c <tcp_process+0x7d0>)
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	f003 0310 	and.w	r3, r3, #16
 8010154:	2b00      	cmp	r3, #0
 8010156:	d065      	beq.n	8010224 <tcp_process+0x7b8>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801015c:	4b38      	ldr	r3, [pc, #224]	; (8010240 <tcp_process+0x7d4>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	429a      	cmp	r2, r3
 8010162:	d15f      	bne.n	8010224 <tcp_process+0x7b8>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010168:	2b00      	cmp	r3, #0
 801016a:	d15b      	bne.n	8010224 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7fe fcf1 	bl	800eb54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010172:	4b35      	ldr	r3, [pc, #212]	; (8010248 <tcp_process+0x7dc>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	429a      	cmp	r2, r3
 801017a:	d105      	bne.n	8010188 <tcp_process+0x71c>
 801017c:	4b32      	ldr	r3, [pc, #200]	; (8010248 <tcp_process+0x7dc>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	4a31      	ldr	r2, [pc, #196]	; (8010248 <tcp_process+0x7dc>)
 8010184:	6013      	str	r3, [r2, #0]
 8010186:	e013      	b.n	80101b0 <tcp_process+0x744>
 8010188:	4b2f      	ldr	r3, [pc, #188]	; (8010248 <tcp_process+0x7dc>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	60fb      	str	r3, [r7, #12]
 801018e:	e00c      	b.n	80101aa <tcp_process+0x73e>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	68db      	ldr	r3, [r3, #12]
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	429a      	cmp	r2, r3
 8010198:	d104      	bne.n	80101a4 <tcp_process+0x738>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	68da      	ldr	r2, [r3, #12]
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	60da      	str	r2, [r3, #12]
 80101a2:	e005      	b.n	80101b0 <tcp_process+0x744>
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	60fb      	str	r3, [r7, #12]
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1ef      	bne.n	8010190 <tcp_process+0x724>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2200      	movs	r2, #0
 80101b4:	60da      	str	r2, [r3, #12]
 80101b6:	4b1f      	ldr	r3, [pc, #124]	; (8010234 <tcp_process+0x7c8>)
 80101b8:	2201      	movs	r2, #1
 80101ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	220a      	movs	r2, #10
 80101c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80101c2:	4b1d      	ldr	r3, [pc, #116]	; (8010238 <tcp_process+0x7cc>)
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	60da      	str	r2, [r3, #12]
 80101ca:	4a1b      	ldr	r2, [pc, #108]	; (8010238 <tcp_process+0x7cc>)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6013      	str	r3, [r2, #0]
 80101d0:	f002 fc4a 	bl	8012a68 <tcp_timer_needed>
      }
      break;
 80101d4:	e026      	b.n	8010224 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f93c 	bl	8010454 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80101dc:	4b17      	ldr	r3, [pc, #92]	; (801023c <tcp_process+0x7d0>)
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	f003 0310 	and.w	r3, r3, #16
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d01f      	beq.n	8010228 <tcp_process+0x7bc>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101ec:	4b14      	ldr	r3, [pc, #80]	; (8010240 <tcp_process+0x7d4>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d119      	bne.n	8010228 <tcp_process+0x7bc>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d115      	bne.n	8010228 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80101fc:	4b11      	ldr	r3, [pc, #68]	; (8010244 <tcp_process+0x7d8>)
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	f043 0310 	orr.w	r3, r3, #16
 8010204:	b2da      	uxtb	r2, r3
 8010206:	4b0f      	ldr	r3, [pc, #60]	; (8010244 <tcp_process+0x7d8>)
 8010208:	701a      	strb	r2, [r3, #0]
      }
      break;
 801020a:	e00d      	b.n	8010228 <tcp_process+0x7bc>
    default:
      break;
 801020c:	bf00      	nop
 801020e:	e00c      	b.n	801022a <tcp_process+0x7be>
      break;
 8010210:	bf00      	nop
 8010212:	e00a      	b.n	801022a <tcp_process+0x7be>
      break;
 8010214:	bf00      	nop
 8010216:	e008      	b.n	801022a <tcp_process+0x7be>
      break;
 8010218:	bf00      	nop
 801021a:	e006      	b.n	801022a <tcp_process+0x7be>
      break;
 801021c:	bf00      	nop
 801021e:	e004      	b.n	801022a <tcp_process+0x7be>
      break;
 8010220:	bf00      	nop
 8010222:	e002      	b.n	801022a <tcp_process+0x7be>
      break;
 8010224:	bf00      	nop
 8010226:	e000      	b.n	801022a <tcp_process+0x7be>
      break;
 8010228:	bf00      	nop
  }
  return ERR_OK;
 801022a:	2300      	movs	r3, #0
}
 801022c:	4618      	mov	r0, r3
 801022e:	3724      	adds	r7, #36	; 0x24
 8010230:	46bd      	mov	sp, r7
 8010232:	bd90      	pop	{r4, r7, pc}
 8010234:	20030464 	.word	0x20030464
 8010238:	20030460 	.word	0x20030460
 801023c:	20030494 	.word	0x20030494
 8010240:	2003048c 	.word	0x2003048c
 8010244:	20030495 	.word	0x20030495
 8010248:	2003045c 	.word	0x2003045c

0801024c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801024c:	b590      	push	{r4, r7, lr}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d106      	bne.n	801026a <tcp_oos_insert_segment+0x1e>
 801025c:	4b3b      	ldr	r3, [pc, #236]	; (801034c <tcp_oos_insert_segment+0x100>)
 801025e:	f240 421f 	movw	r2, #1055	; 0x41f
 8010262:	493b      	ldr	r1, [pc, #236]	; (8010350 <tcp_oos_insert_segment+0x104>)
 8010264:	483b      	ldr	r0, [pc, #236]	; (8010354 <tcp_oos_insert_segment+0x108>)
 8010266:	f006 f84b 	bl	8016300 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	899b      	ldrh	r3, [r3, #12]
 8010270:	b29b      	uxth	r3, r3
 8010272:	4618      	mov	r0, r3
 8010274:	f7fb fb12 	bl	800b89c <lwip_htons>
 8010278:	4603      	mov	r3, r0
 801027a:	b2db      	uxtb	r3, r3
 801027c:	f003 0301 	and.w	r3, r3, #1
 8010280:	2b00      	cmp	r3, #0
 8010282:	d028      	beq.n	80102d6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010284:	6838      	ldr	r0, [r7, #0]
 8010286:	f7fe fa63 	bl	800e750 <tcp_segs_free>
    next = NULL;
 801028a:	2300      	movs	r3, #0
 801028c:	603b      	str	r3, [r7, #0]
 801028e:	e056      	b.n	801033e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	899b      	ldrh	r3, [r3, #12]
 8010296:	b29b      	uxth	r3, r3
 8010298:	4618      	mov	r0, r3
 801029a:	f7fb faff 	bl	800b89c <lwip_htons>
 801029e:	4603      	mov	r3, r0
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	f003 0301 	and.w	r3, r3, #1
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00d      	beq.n	80102c6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	899b      	ldrh	r3, [r3, #12]
 80102b0:	b29c      	uxth	r4, r3
 80102b2:	2001      	movs	r0, #1
 80102b4:	f7fb faf2 	bl	800b89c <lwip_htons>
 80102b8:	4603      	mov	r3, r0
 80102ba:	461a      	mov	r2, r3
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	4322      	orrs	r2, r4
 80102c2:	b292      	uxth	r2, r2
 80102c4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f7fe fa52 	bl	800e77a <tcp_seg_free>
    while (next &&
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d00e      	beq.n	80102fa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	891b      	ldrh	r3, [r3, #8]
 80102e0:	461a      	mov	r2, r3
 80102e2:	4b1d      	ldr	r3, [pc, #116]	; (8010358 <tcp_oos_insert_segment+0x10c>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	441a      	add	r2, r3
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	6839      	ldr	r1, [r7, #0]
 80102f0:	8909      	ldrh	r1, [r1, #8]
 80102f2:	440b      	add	r3, r1
 80102f4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	daca      	bge.n	8010290 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d01e      	beq.n	801033e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	891b      	ldrh	r3, [r3, #8]
 8010304:	461a      	mov	r2, r3
 8010306:	4b14      	ldr	r3, [pc, #80]	; (8010358 <tcp_oos_insert_segment+0x10c>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	441a      	add	r2, r3
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010314:	2b00      	cmp	r3, #0
 8010316:	dd12      	ble.n	801033e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	b29a      	uxth	r2, r3
 8010320:	4b0d      	ldr	r3, [pc, #52]	; (8010358 <tcp_oos_insert_segment+0x10c>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	b29b      	uxth	r3, r3
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	b29a      	uxth	r2, r3
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	685a      	ldr	r2, [r3, #4]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	891b      	ldrh	r3, [r3, #8]
 8010336:	4619      	mov	r1, r3
 8010338:	4610      	mov	r0, r2
 801033a:	f7fc fd1b 	bl	800cd74 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	683a      	ldr	r2, [r7, #0]
 8010342:	601a      	str	r2, [r3, #0]
}
 8010344:	bf00      	nop
 8010346:	3714      	adds	r7, #20
 8010348:	46bd      	mov	sp, r7
 801034a:	bd90      	pop	{r4, r7, pc}
 801034c:	08018e6c 	.word	0x08018e6c
 8010350:	0801912c 	.word	0x0801912c
 8010354:	08018eb8 	.word	0x08018eb8
 8010358:	20030488 	.word	0x20030488

0801035c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801035c:	b5b0      	push	{r4, r5, r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	607a      	str	r2, [r7, #4]
 8010368:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801036a:	e03e      	b.n	80103ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	4618      	mov	r0, r3
 801037c:	f7fc ff0e 	bl	800d19c <pbuf_clen>
 8010380:	4603      	mov	r3, r0
 8010382:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801038a:	8a7a      	ldrh	r2, [r7, #18]
 801038c:	429a      	cmp	r2, r3
 801038e:	d906      	bls.n	801039e <tcp_free_acked_segments+0x42>
 8010390:	4b2a      	ldr	r3, [pc, #168]	; (801043c <tcp_free_acked_segments+0xe0>)
 8010392:	f240 4257 	movw	r2, #1111	; 0x457
 8010396:	492a      	ldr	r1, [pc, #168]	; (8010440 <tcp_free_acked_segments+0xe4>)
 8010398:	482a      	ldr	r0, [pc, #168]	; (8010444 <tcp_free_acked_segments+0xe8>)
 801039a:	f005 ffb1 	bl	8016300 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80103a4:	8a7b      	ldrh	r3, [r7, #18]
 80103a6:	1ad3      	subs	r3, r2, r3
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	891a      	ldrh	r2, [r3, #8]
 80103b4:	4b24      	ldr	r3, [pc, #144]	; (8010448 <tcp_free_acked_segments+0xec>)
 80103b6:	881b      	ldrh	r3, [r3, #0]
 80103b8:	4413      	add	r3, r2
 80103ba:	b29a      	uxth	r2, r3
 80103bc:	4b22      	ldr	r3, [pc, #136]	; (8010448 <tcp_free_acked_segments+0xec>)
 80103be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80103c0:	6978      	ldr	r0, [r7, #20]
 80103c2:	f7fe f9da 	bl	800e77a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d00c      	beq.n	80103ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d109      	bne.n	80103ea <tcp_free_acked_segments+0x8e>
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d106      	bne.n	80103ea <tcp_free_acked_segments+0x8e>
 80103dc:	4b17      	ldr	r3, [pc, #92]	; (801043c <tcp_free_acked_segments+0xe0>)
 80103de:	f240 4261 	movw	r2, #1121	; 0x461
 80103e2:	491a      	ldr	r1, [pc, #104]	; (801044c <tcp_free_acked_segments+0xf0>)
 80103e4:	4817      	ldr	r0, [pc, #92]	; (8010444 <tcp_free_acked_segments+0xe8>)
 80103e6:	f005 ff8b 	bl	8016300 <iprintf>
  while (seg_list != NULL &&
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d020      	beq.n	8010432 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fb fa65 	bl	800b8c6 <lwip_htonl>
 80103fc:	4604      	mov	r4, r0
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	891b      	ldrh	r3, [r3, #8]
 8010402:	461d      	mov	r5, r3
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	899b      	ldrh	r3, [r3, #12]
 801040a:	b29b      	uxth	r3, r3
 801040c:	4618      	mov	r0, r3
 801040e:	f7fb fa45 	bl	800b89c <lwip_htons>
 8010412:	4603      	mov	r3, r0
 8010414:	b2db      	uxtb	r3, r3
 8010416:	f003 0303 	and.w	r3, r3, #3
 801041a:	2b00      	cmp	r3, #0
 801041c:	d001      	beq.n	8010422 <tcp_free_acked_segments+0xc6>
 801041e:	2301      	movs	r3, #1
 8010420:	e000      	b.n	8010424 <tcp_free_acked_segments+0xc8>
 8010422:	2300      	movs	r3, #0
 8010424:	442b      	add	r3, r5
 8010426:	18e2      	adds	r2, r4, r3
 8010428:	4b09      	ldr	r3, [pc, #36]	; (8010450 <tcp_free_acked_segments+0xf4>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801042e:	2b00      	cmp	r3, #0
 8010430:	dd9c      	ble.n	801036c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010432:	68bb      	ldr	r3, [r7, #8]
}
 8010434:	4618      	mov	r0, r3
 8010436:	3718      	adds	r7, #24
 8010438:	46bd      	mov	sp, r7
 801043a:	bdb0      	pop	{r4, r5, r7, pc}
 801043c:	08018e6c 	.word	0x08018e6c
 8010440:	08019154 	.word	0x08019154
 8010444:	08018eb8 	.word	0x08018eb8
 8010448:	20030490 	.word	0x20030490
 801044c:	0801917c 	.word	0x0801917c
 8010450:	2003048c 	.word	0x2003048c

08010454 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010454:	b5b0      	push	{r4, r5, r7, lr}
 8010456:	b094      	sub	sp, #80	; 0x50
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801045c:	2300      	movs	r3, #0
 801045e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d106      	bne.n	8010474 <tcp_receive+0x20>
 8010466:	4b91      	ldr	r3, [pc, #580]	; (80106ac <tcp_receive+0x258>)
 8010468:	f240 427b 	movw	r2, #1147	; 0x47b
 801046c:	4990      	ldr	r1, [pc, #576]	; (80106b0 <tcp_receive+0x25c>)
 801046e:	4891      	ldr	r0, [pc, #580]	; (80106b4 <tcp_receive+0x260>)
 8010470:	f005 ff46 	bl	8016300 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	7d1b      	ldrb	r3, [r3, #20]
 8010478:	2b03      	cmp	r3, #3
 801047a:	d806      	bhi.n	801048a <tcp_receive+0x36>
 801047c:	4b8b      	ldr	r3, [pc, #556]	; (80106ac <tcp_receive+0x258>)
 801047e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010482:	498d      	ldr	r1, [pc, #564]	; (80106b8 <tcp_receive+0x264>)
 8010484:	488b      	ldr	r0, [pc, #556]	; (80106b4 <tcp_receive+0x260>)
 8010486:	f005 ff3b 	bl	8016300 <iprintf>

  if (flags & TCP_ACK) {
 801048a:	4b8c      	ldr	r3, [pc, #560]	; (80106bc <tcp_receive+0x268>)
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	f003 0310 	and.w	r3, r3, #16
 8010492:	2b00      	cmp	r3, #0
 8010494:	f000 8264 	beq.w	8010960 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801049e:	461a      	mov	r2, r3
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104a4:	4413      	add	r3, r2
 80104a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80104ac:	4b84      	ldr	r3, [pc, #528]	; (80106c0 <tcp_receive+0x26c>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	1ad3      	subs	r3, r2, r3
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	db1b      	blt.n	80104ee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80104ba:	4b81      	ldr	r3, [pc, #516]	; (80106c0 <tcp_receive+0x26c>)
 80104bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80104be:	429a      	cmp	r2, r3
 80104c0:	d106      	bne.n	80104d0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80104c6:	4b7f      	ldr	r3, [pc, #508]	; (80106c4 <tcp_receive+0x270>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	1ad3      	subs	r3, r2, r3
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	db0e      	blt.n	80104ee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80104d4:	4b7b      	ldr	r3, [pc, #492]	; (80106c4 <tcp_receive+0x270>)
 80104d6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80104d8:	429a      	cmp	r2, r3
 80104da:	d125      	bne.n	8010528 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80104dc:	4b7a      	ldr	r3, [pc, #488]	; (80106c8 <tcp_receive+0x274>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	89db      	ldrh	r3, [r3, #14]
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d91c      	bls.n	8010528 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80104ee:	4b76      	ldr	r3, [pc, #472]	; (80106c8 <tcp_receive+0x274>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	89db      	ldrh	r3, [r3, #14]
 80104f4:	b29a      	uxth	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010508:	429a      	cmp	r2, r3
 801050a:	d205      	bcs.n	8010518 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010518:	4b69      	ldr	r3, [pc, #420]	; (80106c0 <tcp_receive+0x26c>)
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010520:	4b68      	ldr	r3, [pc, #416]	; (80106c4 <tcp_receive+0x270>)
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010528:	4b66      	ldr	r3, [pc, #408]	; (80106c4 <tcp_receive+0x270>)
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010530:	1ad3      	subs	r3, r2, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	dc58      	bgt.n	80105e8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010536:	4b65      	ldr	r3, [pc, #404]	; (80106cc <tcp_receive+0x278>)
 8010538:	881b      	ldrh	r3, [r3, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d14b      	bne.n	80105d6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010548:	4413      	add	r3, r2
 801054a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801054c:	429a      	cmp	r2, r3
 801054e:	d142      	bne.n	80105d6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010556:	2b00      	cmp	r3, #0
 8010558:	db3d      	blt.n	80105d6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801055e:	4b59      	ldr	r3, [pc, #356]	; (80106c4 <tcp_receive+0x270>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	429a      	cmp	r2, r3
 8010564:	d137      	bne.n	80105d6 <tcp_receive+0x182>
              found_dupack = 1;
 8010566:	2301      	movs	r3, #1
 8010568:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010570:	2bff      	cmp	r3, #255	; 0xff
 8010572:	d007      	beq.n	8010584 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801057a:	3301      	adds	r3, #1
 801057c:	b2da      	uxtb	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801058a:	2b03      	cmp	r3, #3
 801058c:	d91b      	bls.n	80105c6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010598:	4413      	add	r3, r2
 801059a:	b29a      	uxth	r2, r3
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d30a      	bcc.n	80105bc <tcp_receive+0x168>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105b0:	4413      	add	r3, r2
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80105ba:	e004      	b.n	80105c6 <tcp_receive+0x172>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d902      	bls.n	80105d6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f001 feeb 	bl	80123ac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80105d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f040 8161 	bne.w	80108a0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2200      	movs	r2, #0
 80105e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80105e6:	e15b      	b.n	80108a0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105e8:	4b36      	ldr	r3, [pc, #216]	; (80106c4 <tcp_receive+0x270>)
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	3b01      	subs	r3, #1
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	f2c0 814e 	blt.w	8010896 <tcp_receive+0x442>
 80105fa:	4b32      	ldr	r3, [pc, #200]	; (80106c4 <tcp_receive+0x270>)
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010602:	1ad3      	subs	r3, r2, r3
 8010604:	2b00      	cmp	r3, #0
 8010606:	f300 8146 	bgt.w	8010896 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	8b5b      	ldrh	r3, [r3, #26]
 801060e:	f003 0304 	and.w	r3, r3, #4
 8010612:	2b00      	cmp	r3, #0
 8010614:	d010      	beq.n	8010638 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	8b5b      	ldrh	r3, [r3, #26]
 801061a:	f023 0304 	bic.w	r3, r3, #4
 801061e:	b29a      	uxth	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2200      	movs	r2, #0
 8010634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010646:	10db      	asrs	r3, r3, #3
 8010648:	b21b      	sxth	r3, r3
 801064a:	b29a      	uxth	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010652:	b29b      	uxth	r3, r3
 8010654:	4413      	add	r3, r2
 8010656:	b29b      	uxth	r3, r3
 8010658:	b21a      	sxth	r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010660:	4b18      	ldr	r3, [pc, #96]	; (80106c4 <tcp_receive+0x270>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	b29a      	uxth	r2, r3
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801066a:	b29b      	uxth	r3, r3
 801066c:	1ad3      	subs	r3, r2, r3
 801066e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010678:	4b12      	ldr	r3, [pc, #72]	; (80106c4 <tcp_receive+0x270>)
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	7d1b      	ldrb	r3, [r3, #20]
 8010684:	2b03      	cmp	r3, #3
 8010686:	f240 8097 	bls.w	80107b8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010696:	429a      	cmp	r2, r3
 8010698:	d245      	bcs.n	8010726 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	8b5b      	ldrh	r3, [r3, #26]
 801069e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d014      	beq.n	80106d0 <tcp_receive+0x27c>
 80106a6:	2301      	movs	r3, #1
 80106a8:	e013      	b.n	80106d2 <tcp_receive+0x27e>
 80106aa:	bf00      	nop
 80106ac:	08018e6c 	.word	0x08018e6c
 80106b0:	0801919c 	.word	0x0801919c
 80106b4:	08018eb8 	.word	0x08018eb8
 80106b8:	080191b8 	.word	0x080191b8
 80106bc:	20030494 	.word	0x20030494
 80106c0:	20030488 	.word	0x20030488
 80106c4:	2003048c 	.word	0x2003048c
 80106c8:	20030478 	.word	0x20030478
 80106cc:	20030492 	.word	0x20030492
 80106d0:	2302      	movs	r3, #2
 80106d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80106d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80106da:	b29a      	uxth	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106e0:	fb12 f303 	smulbb	r3, r2, r3
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80106e8:	4293      	cmp	r3, r2
 80106ea:	bf28      	it	cs
 80106ec:	4613      	movcs	r3, r2
 80106ee:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106f8:	4413      	add	r3, r2
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010702:	429a      	cmp	r2, r3
 8010704:	d309      	bcc.n	801071a <tcp_receive+0x2c6>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801070c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801070e:	4413      	add	r3, r2
 8010710:	b29a      	uxth	r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010718:	e04e      	b.n	80107b8 <tcp_receive+0x364>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010720:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010724:	e048      	b.n	80107b8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801072c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801072e:	4413      	add	r3, r2
 8010730:	b29a      	uxth	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010738:	429a      	cmp	r2, r3
 801073a:	d309      	bcc.n	8010750 <tcp_receive+0x2fc>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010742:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010744:	4413      	add	r3, r2
 8010746:	b29a      	uxth	r2, r3
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801074e:	e004      	b.n	801075a <tcp_receive+0x306>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010756:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010766:	429a      	cmp	r2, r3
 8010768:	d326      	bcc.n	80107b8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	b29a      	uxth	r2, r3
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801078a:	4413      	add	r3, r2
 801078c:	b29a      	uxth	r2, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010794:	429a      	cmp	r2, r3
 8010796:	d30a      	bcc.n	80107ae <tcp_receive+0x35a>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107a2:	4413      	add	r3, r2
 80107a4:	b29a      	uxth	r2, r3
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80107ac:	e004      	b.n	80107b8 <tcp_receive+0x364>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107c0:	4a98      	ldr	r2, [pc, #608]	; (8010a24 <tcp_receive+0x5d0>)
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f7ff fdca 	bl	801035c <tcp_free_acked_segments>
 80107c8:	4602      	mov	r2, r0
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107d6:	4a94      	ldr	r2, [pc, #592]	; (8010a28 <tcp_receive+0x5d4>)
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7ff fdbf 	bl	801035c <tcp_free_acked_segments>
 80107de:	4602      	mov	r2, r0
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d104      	bne.n	80107f6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107f2:	861a      	strh	r2, [r3, #48]	; 0x30
 80107f4:	e002      	b.n	80107fc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2200      	movs	r2, #0
 80107fa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2200      	movs	r2, #0
 8010800:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010806:	2b00      	cmp	r3, #0
 8010808:	d103      	bne.n	8010812 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2200      	movs	r2, #0
 801080e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010818:	4b84      	ldr	r3, [pc, #528]	; (8010a2c <tcp_receive+0x5d8>)
 801081a:	881b      	ldrh	r3, [r3, #0]
 801081c:	4413      	add	r3, r2
 801081e:	b29a      	uxth	r2, r3
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	8b5b      	ldrh	r3, [r3, #26]
 801082a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801082e:	2b00      	cmp	r3, #0
 8010830:	d035      	beq.n	801089e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010836:	2b00      	cmp	r3, #0
 8010838:	d118      	bne.n	801086c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801083e:	2b00      	cmp	r3, #0
 8010840:	d00c      	beq.n	801085c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801084a:	68db      	ldr	r3, [r3, #12]
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	4618      	mov	r0, r3
 8010850:	f7fb f839 	bl	800b8c6 <lwip_htonl>
 8010854:	4603      	mov	r3, r0
 8010856:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010858:	2b00      	cmp	r3, #0
 801085a:	dc20      	bgt.n	801089e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	8b5b      	ldrh	r3, [r3, #26]
 8010860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010864:	b29a      	uxth	r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801086a:	e018      	b.n	801089e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	4618      	mov	r0, r3
 801087a:	f7fb f824 	bl	800b8c6 <lwip_htonl>
 801087e:	4603      	mov	r3, r0
 8010880:	1ae3      	subs	r3, r4, r3
 8010882:	2b00      	cmp	r3, #0
 8010884:	dc0b      	bgt.n	801089e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	8b5b      	ldrh	r3, [r3, #26]
 801088a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801088e:	b29a      	uxth	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010894:	e003      	b.n	801089e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f001 ff76 	bl	8012788 <tcp_send_empty_ack>
 801089c:	e000      	b.n	80108a0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801089e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d05b      	beq.n	8010960 <tcp_receive+0x50c>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108ac:	4b60      	ldr	r3, [pc, #384]	; (8010a30 <tcp_receive+0x5dc>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	da54      	bge.n	8010960 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80108b6:	4b5f      	ldr	r3, [pc, #380]	; (8010a34 <tcp_receive+0x5e0>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	1ad3      	subs	r3, r2, r3
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80108ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108d4:	10db      	asrs	r3, r3, #3
 80108d6:	b21b      	sxth	r3, r3
 80108d8:	b29b      	uxth	r3, r3
 80108da:	1ad3      	subs	r3, r2, r3
 80108dc:	b29b      	uxth	r3, r3
 80108de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80108ee:	4413      	add	r3, r2
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	b21a      	sxth	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80108f8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	da05      	bge.n	801090c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010904:	425b      	negs	r3, r3
 8010906:	b29b      	uxth	r3, r3
 8010908:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801090c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010916:	109b      	asrs	r3, r3, #2
 8010918:	b21b      	sxth	r3, r3
 801091a:	b29b      	uxth	r3, r3
 801091c:	1ad3      	subs	r3, r2, r3
 801091e:	b29b      	uxth	r3, r3
 8010920:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801092a:	b29a      	uxth	r2, r3
 801092c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010930:	4413      	add	r3, r2
 8010932:	b29b      	uxth	r3, r3
 8010934:	b21a      	sxth	r2, r3
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010940:	10db      	asrs	r3, r3, #3
 8010942:	b21b      	sxth	r3, r3
 8010944:	b29a      	uxth	r2, r3
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801094c:	b29b      	uxth	r3, r3
 801094e:	4413      	add	r3, r2
 8010950:	b29b      	uxth	r3, r3
 8010952:	b21a      	sxth	r2, r3
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2200      	movs	r2, #0
 801095e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010960:	4b35      	ldr	r3, [pc, #212]	; (8010a38 <tcp_receive+0x5e4>)
 8010962:	881b      	ldrh	r3, [r3, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	f000 84e2 	beq.w	801132e <tcp_receive+0xeda>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	7d1b      	ldrb	r3, [r3, #20]
 801096e:	2b06      	cmp	r3, #6
 8010970:	f200 84dd 	bhi.w	801132e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010978:	4b30      	ldr	r3, [pc, #192]	; (8010a3c <tcp_receive+0x5e8>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	3b01      	subs	r3, #1
 8010980:	2b00      	cmp	r3, #0
 8010982:	f2c0 808f 	blt.w	8010aa4 <tcp_receive+0x650>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801098a:	4b2b      	ldr	r3, [pc, #172]	; (8010a38 <tcp_receive+0x5e4>)
 801098c:	881b      	ldrh	r3, [r3, #0]
 801098e:	4619      	mov	r1, r3
 8010990:	4b2a      	ldr	r3, [pc, #168]	; (8010a3c <tcp_receive+0x5e8>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	440b      	add	r3, r1
 8010996:	1ad3      	subs	r3, r2, r3
 8010998:	3301      	adds	r3, #1
 801099a:	2b00      	cmp	r3, #0
 801099c:	f300 8082 	bgt.w	8010aa4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80109a0:	4b27      	ldr	r3, [pc, #156]	; (8010a40 <tcp_receive+0x5ec>)
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109aa:	4b24      	ldr	r3, [pc, #144]	; (8010a3c <tcp_receive+0x5e8>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	1ad3      	subs	r3, r2, r3
 80109b0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80109b2:	4b23      	ldr	r3, [pc, #140]	; (8010a40 <tcp_receive+0x5ec>)
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d106      	bne.n	80109c8 <tcp_receive+0x574>
 80109ba:	4b22      	ldr	r3, [pc, #136]	; (8010a44 <tcp_receive+0x5f0>)
 80109bc:	f240 5294 	movw	r2, #1428	; 0x594
 80109c0:	4921      	ldr	r1, [pc, #132]	; (8010a48 <tcp_receive+0x5f4>)
 80109c2:	4822      	ldr	r0, [pc, #136]	; (8010a4c <tcp_receive+0x5f8>)
 80109c4:	f005 fc9c 	bl	8016300 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80109c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d906      	bls.n	80109e0 <tcp_receive+0x58c>
 80109d2:	4b1c      	ldr	r3, [pc, #112]	; (8010a44 <tcp_receive+0x5f0>)
 80109d4:	f240 5295 	movw	r2, #1429	; 0x595
 80109d8:	491d      	ldr	r1, [pc, #116]	; (8010a50 <tcp_receive+0x5fc>)
 80109da:	481c      	ldr	r0, [pc, #112]	; (8010a4c <tcp_receive+0x5f8>)
 80109dc:	f005 fc90 	bl	8016300 <iprintf>
      off = (u16_t)off32;
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80109e6:	4b16      	ldr	r3, [pc, #88]	; (8010a40 <tcp_receive+0x5ec>)
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	891b      	ldrh	r3, [r3, #8]
 80109ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d906      	bls.n	8010a02 <tcp_receive+0x5ae>
 80109f4:	4b13      	ldr	r3, [pc, #76]	; (8010a44 <tcp_receive+0x5f0>)
 80109f6:	f240 5297 	movw	r2, #1431	; 0x597
 80109fa:	4916      	ldr	r1, [pc, #88]	; (8010a54 <tcp_receive+0x600>)
 80109fc:	4813      	ldr	r0, [pc, #76]	; (8010a4c <tcp_receive+0x5f8>)
 80109fe:	f005 fc7f 	bl	8016300 <iprintf>
      inseg.len -= off;
 8010a02:	4b0f      	ldr	r3, [pc, #60]	; (8010a40 <tcp_receive+0x5ec>)
 8010a04:	891a      	ldrh	r2, [r3, #8]
 8010a06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	4b0c      	ldr	r3, [pc, #48]	; (8010a40 <tcp_receive+0x5ec>)
 8010a10:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010a12:	4b0b      	ldr	r3, [pc, #44]	; (8010a40 <tcp_receive+0x5ec>)
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	891a      	ldrh	r2, [r3, #8]
 8010a18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a1c:	1ad3      	subs	r3, r2, r3
 8010a1e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010a20:	e02a      	b.n	8010a78 <tcp_receive+0x624>
 8010a22:	bf00      	nop
 8010a24:	080191d4 	.word	0x080191d4
 8010a28:	080191dc 	.word	0x080191dc
 8010a2c:	20030490 	.word	0x20030490
 8010a30:	2003048c 	.word	0x2003048c
 8010a34:	20030450 	.word	0x20030450
 8010a38:	20030492 	.word	0x20030492
 8010a3c:	20030488 	.word	0x20030488
 8010a40:	20030468 	.word	0x20030468
 8010a44:	08018e6c 	.word	0x08018e6c
 8010a48:	080191e4 	.word	0x080191e4
 8010a4c:	08018eb8 	.word	0x08018eb8
 8010a50:	080191f4 	.word	0x080191f4
 8010a54:	08019204 	.word	0x08019204
        off -= p->len;
 8010a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a5a:	895b      	ldrh	r3, [r3, #10]
 8010a5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a60:	1ad3      	subs	r3, r2, r3
 8010a62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a6a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a6e:	2200      	movs	r2, #0
 8010a70:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a7a:	895b      	ldrh	r3, [r3, #10]
 8010a7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d8e9      	bhi.n	8010a58 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010a84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a88:	4619      	mov	r1, r3
 8010a8a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010a8c:	f7fc fa72 	bl	800cf74 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a94:	4a91      	ldr	r2, [pc, #580]	; (8010cdc <tcp_receive+0x888>)
 8010a96:	6013      	str	r3, [r2, #0]
 8010a98:	4b91      	ldr	r3, [pc, #580]	; (8010ce0 <tcp_receive+0x88c>)
 8010a9a:	68db      	ldr	r3, [r3, #12]
 8010a9c:	4a8f      	ldr	r2, [pc, #572]	; (8010cdc <tcp_receive+0x888>)
 8010a9e:	6812      	ldr	r2, [r2, #0]
 8010aa0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010aa2:	e00d      	b.n	8010ac0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010aa4:	4b8d      	ldr	r3, [pc, #564]	; (8010cdc <tcp_receive+0x888>)
 8010aa6:	681a      	ldr	r2, [r3, #0]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	da06      	bge.n	8010ac0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	8b5b      	ldrh	r3, [r3, #26]
 8010ab6:	f043 0302 	orr.w	r3, r3, #2
 8010aba:	b29a      	uxth	r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010ac0:	4b86      	ldr	r3, [pc, #536]	; (8010cdc <tcp_receive+0x888>)
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f2c0 842a 	blt.w	8011324 <tcp_receive+0xed0>
 8010ad0:	4b82      	ldr	r3, [pc, #520]	; (8010cdc <tcp_receive+0x888>)
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad8:	6879      	ldr	r1, [r7, #4]
 8010ada:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010adc:	440b      	add	r3, r1
 8010ade:	1ad3      	subs	r3, r2, r3
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	f300 841e 	bgt.w	8011324 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010aec:	4b7b      	ldr	r3, [pc, #492]	; (8010cdc <tcp_receive+0x888>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	f040 829a 	bne.w	801102a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010af6:	4b7a      	ldr	r3, [pc, #488]	; (8010ce0 <tcp_receive+0x88c>)
 8010af8:	891c      	ldrh	r4, [r3, #8]
 8010afa:	4b79      	ldr	r3, [pc, #484]	; (8010ce0 <tcp_receive+0x88c>)
 8010afc:	68db      	ldr	r3, [r3, #12]
 8010afe:	899b      	ldrh	r3, [r3, #12]
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	4618      	mov	r0, r3
 8010b04:	f7fa feca 	bl	800b89c <lwip_htons>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	b2db      	uxtb	r3, r3
 8010b0c:	f003 0303 	and.w	r3, r3, #3
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d001      	beq.n	8010b18 <tcp_receive+0x6c4>
 8010b14:	2301      	movs	r3, #1
 8010b16:	e000      	b.n	8010b1a <tcp_receive+0x6c6>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	4423      	add	r3, r4
 8010b1c:	b29a      	uxth	r2, r3
 8010b1e:	4b71      	ldr	r3, [pc, #452]	; (8010ce4 <tcp_receive+0x890>)
 8010b20:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b26:	4b6f      	ldr	r3, [pc, #444]	; (8010ce4 <tcp_receive+0x890>)
 8010b28:	881b      	ldrh	r3, [r3, #0]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d275      	bcs.n	8010c1a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b2e:	4b6c      	ldr	r3, [pc, #432]	; (8010ce0 <tcp_receive+0x88c>)
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	899b      	ldrh	r3, [r3, #12]
 8010b34:	b29b      	uxth	r3, r3
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7fa feb0 	bl	800b89c <lwip_htons>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	f003 0301 	and.w	r3, r3, #1
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d01f      	beq.n	8010b88 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010b48:	4b65      	ldr	r3, [pc, #404]	; (8010ce0 <tcp_receive+0x88c>)
 8010b4a:	68db      	ldr	r3, [r3, #12]
 8010b4c:	899b      	ldrh	r3, [r3, #12]
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	b21b      	sxth	r3, r3
 8010b52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010b56:	b21c      	sxth	r4, r3
 8010b58:	4b61      	ldr	r3, [pc, #388]	; (8010ce0 <tcp_receive+0x88c>)
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	899b      	ldrh	r3, [r3, #12]
 8010b5e:	b29b      	uxth	r3, r3
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7fa fe9b 	bl	800b89c <lwip_htons>
 8010b66:	4603      	mov	r3, r0
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7fa fe92 	bl	800b89c <lwip_htons>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	b21b      	sxth	r3, r3
 8010b7c:	4323      	orrs	r3, r4
 8010b7e:	b21a      	sxth	r2, r3
 8010b80:	4b57      	ldr	r3, [pc, #348]	; (8010ce0 <tcp_receive+0x88c>)
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	b292      	uxth	r2, r2
 8010b86:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b8c:	4b54      	ldr	r3, [pc, #336]	; (8010ce0 <tcp_receive+0x88c>)
 8010b8e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010b90:	4b53      	ldr	r3, [pc, #332]	; (8010ce0 <tcp_receive+0x88c>)
 8010b92:	68db      	ldr	r3, [r3, #12]
 8010b94:	899b      	ldrh	r3, [r3, #12]
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7fa fe7f 	bl	800b89c <lwip_htons>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	f003 0302 	and.w	r3, r3, #2
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d005      	beq.n	8010bb6 <tcp_receive+0x762>
            inseg.len -= 1;
 8010baa:	4b4d      	ldr	r3, [pc, #308]	; (8010ce0 <tcp_receive+0x88c>)
 8010bac:	891b      	ldrh	r3, [r3, #8]
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	b29a      	uxth	r2, r3
 8010bb2:	4b4b      	ldr	r3, [pc, #300]	; (8010ce0 <tcp_receive+0x88c>)
 8010bb4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010bb6:	4b4a      	ldr	r3, [pc, #296]	; (8010ce0 <tcp_receive+0x88c>)
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	4a49      	ldr	r2, [pc, #292]	; (8010ce0 <tcp_receive+0x88c>)
 8010bbc:	8912      	ldrh	r2, [r2, #8]
 8010bbe:	4611      	mov	r1, r2
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fc f8d7 	bl	800cd74 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010bc6:	4b46      	ldr	r3, [pc, #280]	; (8010ce0 <tcp_receive+0x88c>)
 8010bc8:	891c      	ldrh	r4, [r3, #8]
 8010bca:	4b45      	ldr	r3, [pc, #276]	; (8010ce0 <tcp_receive+0x88c>)
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	899b      	ldrh	r3, [r3, #12]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7fa fe62 	bl	800b89c <lwip_htons>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	f003 0303 	and.w	r3, r3, #3
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d001      	beq.n	8010be8 <tcp_receive+0x794>
 8010be4:	2301      	movs	r3, #1
 8010be6:	e000      	b.n	8010bea <tcp_receive+0x796>
 8010be8:	2300      	movs	r3, #0
 8010bea:	4423      	add	r3, r4
 8010bec:	b29a      	uxth	r2, r3
 8010bee:	4b3d      	ldr	r3, [pc, #244]	; (8010ce4 <tcp_receive+0x890>)
 8010bf0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010bf2:	4b3c      	ldr	r3, [pc, #240]	; (8010ce4 <tcp_receive+0x890>)
 8010bf4:	881b      	ldrh	r3, [r3, #0]
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	4b38      	ldr	r3, [pc, #224]	; (8010cdc <tcp_receive+0x888>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	441a      	add	r2, r3
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c02:	6879      	ldr	r1, [r7, #4]
 8010c04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c06:	440b      	add	r3, r1
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d006      	beq.n	8010c1a <tcp_receive+0x7c6>
 8010c0c:	4b36      	ldr	r3, [pc, #216]	; (8010ce8 <tcp_receive+0x894>)
 8010c0e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010c12:	4936      	ldr	r1, [pc, #216]	; (8010cec <tcp_receive+0x898>)
 8010c14:	4836      	ldr	r0, [pc, #216]	; (8010cf0 <tcp_receive+0x89c>)
 8010c16:	f005 fb73 	bl	8016300 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f000 80e7 	beq.w	8010df2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c24:	4b2e      	ldr	r3, [pc, #184]	; (8010ce0 <tcp_receive+0x88c>)
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	899b      	ldrh	r3, [r3, #12]
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fa fe35 	bl	800b89c <lwip_htons>
 8010c32:	4603      	mov	r3, r0
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	f003 0301 	and.w	r3, r3, #1
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d010      	beq.n	8010c60 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010c3e:	e00a      	b.n	8010c56 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c44:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010c50:	68f8      	ldr	r0, [r7, #12]
 8010c52:	f7fd fd92 	bl	800e77a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1f0      	bne.n	8010c40 <tcp_receive+0x7ec>
 8010c5e:	e0c8      	b.n	8010df2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c64:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010c66:	e052      	b.n	8010d0e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	899b      	ldrh	r3, [r3, #12]
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7fa fe13 	bl	800b89c <lwip_htons>
 8010c76:	4603      	mov	r3, r0
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	f003 0301 	and.w	r3, r3, #1
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d03d      	beq.n	8010cfe <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010c82:	4b17      	ldr	r3, [pc, #92]	; (8010ce0 <tcp_receive+0x88c>)
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	899b      	ldrh	r3, [r3, #12]
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fa fe06 	bl	800b89c <lwip_htons>
 8010c90:	4603      	mov	r3, r0
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d130      	bne.n	8010cfe <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010c9c:	4b10      	ldr	r3, [pc, #64]	; (8010ce0 <tcp_receive+0x88c>)
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	899b      	ldrh	r3, [r3, #12]
 8010ca2:	b29c      	uxth	r4, r3
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	f7fa fdf9 	bl	800b89c <lwip_htons>
 8010caa:	4603      	mov	r3, r0
 8010cac:	461a      	mov	r2, r3
 8010cae:	4b0c      	ldr	r3, [pc, #48]	; (8010ce0 <tcp_receive+0x88c>)
 8010cb0:	68db      	ldr	r3, [r3, #12]
 8010cb2:	4322      	orrs	r2, r4
 8010cb4:	b292      	uxth	r2, r2
 8010cb6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010cb8:	4b09      	ldr	r3, [pc, #36]	; (8010ce0 <tcp_receive+0x88c>)
 8010cba:	891c      	ldrh	r4, [r3, #8]
 8010cbc:	4b08      	ldr	r3, [pc, #32]	; (8010ce0 <tcp_receive+0x88c>)
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	899b      	ldrh	r3, [r3, #12]
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7fa fde9 	bl	800b89c <lwip_htons>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	f003 0303 	and.w	r3, r3, #3
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d00e      	beq.n	8010cf4 <tcp_receive+0x8a0>
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	e00d      	b.n	8010cf6 <tcp_receive+0x8a2>
 8010cda:	bf00      	nop
 8010cdc:	20030488 	.word	0x20030488
 8010ce0:	20030468 	.word	0x20030468
 8010ce4:	20030492 	.word	0x20030492
 8010ce8:	08018e6c 	.word	0x08018e6c
 8010cec:	08019214 	.word	0x08019214
 8010cf0:	08018eb8 	.word	0x08018eb8
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	4423      	add	r3, r4
 8010cf8:	b29a      	uxth	r2, r3
 8010cfa:	4b98      	ldr	r3, [pc, #608]	; (8010f5c <tcp_receive+0xb08>)
 8010cfc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d00:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010d08:	6938      	ldr	r0, [r7, #16]
 8010d0a:	f7fd fd36 	bl	800e77a <tcp_seg_free>
            while (next &&
 8010d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d00e      	beq.n	8010d32 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010d14:	4b91      	ldr	r3, [pc, #580]	; (8010f5c <tcp_receive+0xb08>)
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	461a      	mov	r2, r3
 8010d1a:	4b91      	ldr	r3, [pc, #580]	; (8010f60 <tcp_receive+0xb0c>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	441a      	add	r2, r3
 8010d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d22:	68db      	ldr	r3, [r3, #12]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d28:	8909      	ldrh	r1, [r1, #8]
 8010d2a:	440b      	add	r3, r1
 8010d2c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	da9a      	bge.n	8010c68 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d059      	beq.n	8010dec <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010d38:	4b88      	ldr	r3, [pc, #544]	; (8010f5c <tcp_receive+0xb08>)
 8010d3a:	881b      	ldrh	r3, [r3, #0]
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	4b88      	ldr	r3, [pc, #544]	; (8010f60 <tcp_receive+0xb0c>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	441a      	add	r2, r3
 8010d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	dd4d      	ble.n	8010dec <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	4b81      	ldr	r3, [pc, #516]	; (8010f60 <tcp_receive+0xb0c>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	1ad3      	subs	r3, r2, r3
 8010d60:	b29a      	uxth	r2, r3
 8010d62:	4b80      	ldr	r3, [pc, #512]	; (8010f64 <tcp_receive+0xb10>)
 8010d64:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010d66:	4b7f      	ldr	r3, [pc, #508]	; (8010f64 <tcp_receive+0xb10>)
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	899b      	ldrh	r3, [r3, #12]
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fa fd94 	bl	800b89c <lwip_htons>
 8010d74:	4603      	mov	r3, r0
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	f003 0302 	and.w	r3, r3, #2
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d005      	beq.n	8010d8c <tcp_receive+0x938>
                inseg.len -= 1;
 8010d80:	4b78      	ldr	r3, [pc, #480]	; (8010f64 <tcp_receive+0xb10>)
 8010d82:	891b      	ldrh	r3, [r3, #8]
 8010d84:	3b01      	subs	r3, #1
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	4b76      	ldr	r3, [pc, #472]	; (8010f64 <tcp_receive+0xb10>)
 8010d8a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010d8c:	4b75      	ldr	r3, [pc, #468]	; (8010f64 <tcp_receive+0xb10>)
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	4a74      	ldr	r2, [pc, #464]	; (8010f64 <tcp_receive+0xb10>)
 8010d92:	8912      	ldrh	r2, [r2, #8]
 8010d94:	4611      	mov	r1, r2
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7fb ffec 	bl	800cd74 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010d9c:	4b71      	ldr	r3, [pc, #452]	; (8010f64 <tcp_receive+0xb10>)
 8010d9e:	891c      	ldrh	r4, [r3, #8]
 8010da0:	4b70      	ldr	r3, [pc, #448]	; (8010f64 <tcp_receive+0xb10>)
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	899b      	ldrh	r3, [r3, #12]
 8010da6:	b29b      	uxth	r3, r3
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fa fd77 	bl	800b89c <lwip_htons>
 8010dae:	4603      	mov	r3, r0
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	f003 0303 	and.w	r3, r3, #3
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d001      	beq.n	8010dbe <tcp_receive+0x96a>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e000      	b.n	8010dc0 <tcp_receive+0x96c>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	4423      	add	r3, r4
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	4b65      	ldr	r3, [pc, #404]	; (8010f5c <tcp_receive+0xb08>)
 8010dc6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010dc8:	4b64      	ldr	r3, [pc, #400]	; (8010f5c <tcp_receive+0xb08>)
 8010dca:	881b      	ldrh	r3, [r3, #0]
 8010dcc:	461a      	mov	r2, r3
 8010dce:	4b64      	ldr	r3, [pc, #400]	; (8010f60 <tcp_receive+0xb0c>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	441a      	add	r2, r3
 8010dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d006      	beq.n	8010dec <tcp_receive+0x998>
 8010dde:	4b62      	ldr	r3, [pc, #392]	; (8010f68 <tcp_receive+0xb14>)
 8010de0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010de4:	4961      	ldr	r1, [pc, #388]	; (8010f6c <tcp_receive+0xb18>)
 8010de6:	4862      	ldr	r0, [pc, #392]	; (8010f70 <tcp_receive+0xb1c>)
 8010de8:	f005 fa8a 	bl	8016300 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010df0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010df2:	4b5a      	ldr	r3, [pc, #360]	; (8010f5c <tcp_receive+0xb08>)
 8010df4:	881b      	ldrh	r3, [r3, #0]
 8010df6:	461a      	mov	r2, r3
 8010df8:	4b59      	ldr	r3, [pc, #356]	; (8010f60 <tcp_receive+0xb0c>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	441a      	add	r2, r3
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e06:	4b55      	ldr	r3, [pc, #340]	; (8010f5c <tcp_receive+0xb08>)
 8010e08:	881b      	ldrh	r3, [r3, #0]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d206      	bcs.n	8010e1c <tcp_receive+0x9c8>
 8010e0e:	4b56      	ldr	r3, [pc, #344]	; (8010f68 <tcp_receive+0xb14>)
 8010e10:	f240 6207 	movw	r2, #1543	; 0x607
 8010e14:	4957      	ldr	r1, [pc, #348]	; (8010f74 <tcp_receive+0xb20>)
 8010e16:	4856      	ldr	r0, [pc, #344]	; (8010f70 <tcp_receive+0xb1c>)
 8010e18:	f005 fa72 	bl	8016300 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e20:	4b4e      	ldr	r3, [pc, #312]	; (8010f5c <tcp_receive+0xb08>)
 8010e22:	881b      	ldrh	r3, [r3, #0]
 8010e24:	1ad3      	subs	r3, r2, r3
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f7fc ffc5 	bl	800ddbc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010e32:	4b4c      	ldr	r3, [pc, #304]	; (8010f64 <tcp_receive+0xb10>)
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	891b      	ldrh	r3, [r3, #8]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d006      	beq.n	8010e4a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010e3c:	4b49      	ldr	r3, [pc, #292]	; (8010f64 <tcp_receive+0xb10>)
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	4a4d      	ldr	r2, [pc, #308]	; (8010f78 <tcp_receive+0xb24>)
 8010e42:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010e44:	4b47      	ldr	r3, [pc, #284]	; (8010f64 <tcp_receive+0xb10>)
 8010e46:	2200      	movs	r2, #0
 8010e48:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e4a:	4b46      	ldr	r3, [pc, #280]	; (8010f64 <tcp_receive+0xb10>)
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	899b      	ldrh	r3, [r3, #12]
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7fa fd22 	bl	800b89c <lwip_htons>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	f003 0301 	and.w	r3, r3, #1
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	f000 80b8 	beq.w	8010fd6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010e66:	4b45      	ldr	r3, [pc, #276]	; (8010f7c <tcp_receive+0xb28>)
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	f043 0320 	orr.w	r3, r3, #32
 8010e6e:	b2da      	uxtb	r2, r3
 8010e70:	4b42      	ldr	r3, [pc, #264]	; (8010f7c <tcp_receive+0xb28>)
 8010e72:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010e74:	e0af      	b.n	8010fd6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e7a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e80:	68db      	ldr	r3, [r3, #12]
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	4a36      	ldr	r2, [pc, #216]	; (8010f60 <tcp_receive+0xb0c>)
 8010e86:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	891b      	ldrh	r3, [r3, #8]
 8010e8c:	461c      	mov	r4, r3
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	68db      	ldr	r3, [r3, #12]
 8010e92:	899b      	ldrh	r3, [r3, #12]
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fa fd00 	bl	800b89c <lwip_htons>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	b2db      	uxtb	r3, r3
 8010ea0:	f003 0303 	and.w	r3, r3, #3
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d001      	beq.n	8010eac <tcp_receive+0xa58>
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	e000      	b.n	8010eae <tcp_receive+0xa5a>
 8010eac:	2300      	movs	r3, #0
 8010eae:	191a      	adds	r2, r3, r4
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eb4:	441a      	add	r2, r3
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ebe:	461c      	mov	r4, r3
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	891b      	ldrh	r3, [r3, #8]
 8010ec4:	461d      	mov	r5, r3
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	68db      	ldr	r3, [r3, #12]
 8010eca:	899b      	ldrh	r3, [r3, #12]
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fa fce4 	bl	800b89c <lwip_htons>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	f003 0303 	and.w	r3, r3, #3
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d001      	beq.n	8010ee4 <tcp_receive+0xa90>
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	e000      	b.n	8010ee6 <tcp_receive+0xa92>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	442b      	add	r3, r5
 8010ee8:	429c      	cmp	r4, r3
 8010eea:	d206      	bcs.n	8010efa <tcp_receive+0xaa6>
 8010eec:	4b1e      	ldr	r3, [pc, #120]	; (8010f68 <tcp_receive+0xb14>)
 8010eee:	f240 622b 	movw	r2, #1579	; 0x62b
 8010ef2:	4923      	ldr	r1, [pc, #140]	; (8010f80 <tcp_receive+0xb2c>)
 8010ef4:	481e      	ldr	r0, [pc, #120]	; (8010f70 <tcp_receive+0xb1c>)
 8010ef6:	f005 fa03 	bl	8016300 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	891b      	ldrh	r3, [r3, #8]
 8010efe:	461c      	mov	r4, r3
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	899b      	ldrh	r3, [r3, #12]
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7fa fcc7 	bl	800b89c <lwip_htons>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	f003 0303 	and.w	r3, r3, #3
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d001      	beq.n	8010f1e <tcp_receive+0xaca>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	e000      	b.n	8010f20 <tcp_receive+0xacc>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	1919      	adds	r1, r3, r4
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f26:	b28b      	uxth	r3, r1
 8010f28:	1ad3      	subs	r3, r2, r3
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f7fc ff43 	bl	800ddbc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	891b      	ldrh	r3, [r3, #8]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d028      	beq.n	8010f92 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010f40:	4b0d      	ldr	r3, [pc, #52]	; (8010f78 <tcp_receive+0xb24>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d01d      	beq.n	8010f84 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010f48:	4b0b      	ldr	r3, [pc, #44]	; (8010f78 <tcp_receive+0xb24>)
 8010f4a:	681a      	ldr	r2, [r3, #0]
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	4619      	mov	r1, r3
 8010f52:	4610      	mov	r0, r2
 8010f54:	f7fc f962 	bl	800d21c <pbuf_cat>
 8010f58:	e018      	b.n	8010f8c <tcp_receive+0xb38>
 8010f5a:	bf00      	nop
 8010f5c:	20030492 	.word	0x20030492
 8010f60:	20030488 	.word	0x20030488
 8010f64:	20030468 	.word	0x20030468
 8010f68:	08018e6c 	.word	0x08018e6c
 8010f6c:	0801924c 	.word	0x0801924c
 8010f70:	08018eb8 	.word	0x08018eb8
 8010f74:	08019288 	.word	0x08019288
 8010f78:	20030498 	.word	0x20030498
 8010f7c:	20030495 	.word	0x20030495
 8010f80:	080192a8 	.word	0x080192a8
            } else {
              recv_data = cseg->p;
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	4a70      	ldr	r2, [pc, #448]	; (801114c <tcp_receive+0xcf8>)
 8010f8a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	899b      	ldrh	r3, [r3, #12]
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7fa fc7e 	bl	800b89c <lwip_htons>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	f003 0301 	and.w	r3, r3, #1
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00d      	beq.n	8010fc8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010fac:	4b68      	ldr	r3, [pc, #416]	; (8011150 <tcp_receive+0xcfc>)
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	f043 0320 	orr.w	r3, r3, #32
 8010fb4:	b2da      	uxtb	r2, r3
 8010fb6:	4b66      	ldr	r3, [pc, #408]	; (8011150 <tcp_receive+0xcfc>)
 8010fb8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	7d1b      	ldrb	r3, [r3, #20]
 8010fbe:	2b04      	cmp	r3, #4
 8010fc0:	d102      	bne.n	8010fc8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2207      	movs	r2, #7
 8010fc6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	681a      	ldr	r2, [r3, #0]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010fd0:	68b8      	ldr	r0, [r7, #8]
 8010fd2:	f7fd fbd2 	bl	800e77a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d008      	beq.n	8010ff0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fe2:	68db      	ldr	r3, [r3, #12]
 8010fe4:	685a      	ldr	r2, [r3, #4]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010fea:	429a      	cmp	r2, r3
 8010fec:	f43f af43 	beq.w	8010e76 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	8b5b      	ldrh	r3, [r3, #26]
 8010ff4:	f003 0301 	and.w	r3, r3, #1
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00e      	beq.n	801101a <tcp_receive+0xbc6>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	8b5b      	ldrh	r3, [r3, #26]
 8011000:	f023 0301 	bic.w	r3, r3, #1
 8011004:	b29a      	uxth	r2, r3
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	835a      	strh	r2, [r3, #26]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	8b5b      	ldrh	r3, [r3, #26]
 801100e:	f043 0302 	orr.w	r3, r3, #2
 8011012:	b29a      	uxth	r2, r3
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011018:	e188      	b.n	801132c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	8b5b      	ldrh	r3, [r3, #26]
 801101e:	f043 0301 	orr.w	r3, r3, #1
 8011022:	b29a      	uxth	r2, r3
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011028:	e180      	b.n	801132c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801102e:	2b00      	cmp	r3, #0
 8011030:	d106      	bne.n	8011040 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011032:	4848      	ldr	r0, [pc, #288]	; (8011154 <tcp_receive+0xd00>)
 8011034:	f7fd fbba 	bl	800e7ac <tcp_seg_copy>
 8011038:	4602      	mov	r2, r0
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	675a      	str	r2, [r3, #116]	; 0x74
 801103e:	e16d      	b.n	801131c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011040:	2300      	movs	r3, #0
 8011042:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011048:	63bb      	str	r3, [r7, #56]	; 0x38
 801104a:	e157      	b.n	80112fc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801104c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104e:	68db      	ldr	r3, [r3, #12]
 8011050:	685a      	ldr	r2, [r3, #4]
 8011052:	4b41      	ldr	r3, [pc, #260]	; (8011158 <tcp_receive+0xd04>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	429a      	cmp	r2, r3
 8011058:	d11d      	bne.n	8011096 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801105a:	4b3e      	ldr	r3, [pc, #248]	; (8011154 <tcp_receive+0xd00>)
 801105c:	891a      	ldrh	r2, [r3, #8]
 801105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011060:	891b      	ldrh	r3, [r3, #8]
 8011062:	429a      	cmp	r2, r3
 8011064:	f240 814f 	bls.w	8011306 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011068:	483a      	ldr	r0, [pc, #232]	; (8011154 <tcp_receive+0xd00>)
 801106a:	f7fd fb9f 	bl	800e7ac <tcp_seg_copy>
 801106e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	2b00      	cmp	r3, #0
 8011074:	f000 8149 	beq.w	801130a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801107a:	2b00      	cmp	r3, #0
 801107c:	d003      	beq.n	8011086 <tcp_receive+0xc32>
                    prev->next = cseg;
 801107e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011080:	697a      	ldr	r2, [r7, #20]
 8011082:	601a      	str	r2, [r3, #0]
 8011084:	e002      	b.n	801108c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	697a      	ldr	r2, [r7, #20]
 801108a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801108c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801108e:	6978      	ldr	r0, [r7, #20]
 8011090:	f7ff f8dc 	bl	801024c <tcp_oos_insert_segment>
                }
                break;
 8011094:	e139      	b.n	801130a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011098:	2b00      	cmp	r3, #0
 801109a:	d117      	bne.n	80110cc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801109c:	4b2e      	ldr	r3, [pc, #184]	; (8011158 <tcp_receive+0xd04>)
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	1ad3      	subs	r3, r2, r3
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	da57      	bge.n	801115c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80110ac:	4829      	ldr	r0, [pc, #164]	; (8011154 <tcp_receive+0xd00>)
 80110ae:	f7fd fb7d 	bl	800e7ac <tcp_seg_copy>
 80110b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80110b4:	69bb      	ldr	r3, [r7, #24]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	f000 8129 	beq.w	801130e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	69ba      	ldr	r2, [r7, #24]
 80110c0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80110c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80110c4:	69b8      	ldr	r0, [r7, #24]
 80110c6:	f7ff f8c1 	bl	801024c <tcp_oos_insert_segment>
                  }
                  break;
 80110ca:	e120      	b.n	801130e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80110cc:	4b22      	ldr	r3, [pc, #136]	; (8011158 <tcp_receive+0xd04>)
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	1ad3      	subs	r3, r2, r3
 80110d8:	3b01      	subs	r3, #1
 80110da:	2b00      	cmp	r3, #0
 80110dc:	db3e      	blt.n	801115c <tcp_receive+0xd08>
 80110de:	4b1e      	ldr	r3, [pc, #120]	; (8011158 <tcp_receive+0xd04>)
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	1ad3      	subs	r3, r2, r3
 80110ea:	3301      	adds	r3, #1
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	dc35      	bgt.n	801115c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80110f0:	4818      	ldr	r0, [pc, #96]	; (8011154 <tcp_receive+0xd00>)
 80110f2:	f7fd fb5b 	bl	800e7ac <tcp_seg_copy>
 80110f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f000 8109 	beq.w	8011312 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011108:	8912      	ldrh	r2, [r2, #8]
 801110a:	441a      	add	r2, r3
 801110c:	4b12      	ldr	r3, [pc, #72]	; (8011158 <tcp_receive+0xd04>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	1ad3      	subs	r3, r2, r3
 8011112:	2b00      	cmp	r3, #0
 8011114:	dd12      	ble.n	801113c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011116:	4b10      	ldr	r3, [pc, #64]	; (8011158 <tcp_receive+0xd04>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	b29a      	uxth	r2, r3
 801111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	b29b      	uxth	r3, r3
 8011124:	1ad3      	subs	r3, r2, r3
 8011126:	b29a      	uxth	r2, r3
 8011128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801112a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801112e:	685a      	ldr	r2, [r3, #4]
 8011130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011132:	891b      	ldrh	r3, [r3, #8]
 8011134:	4619      	mov	r1, r3
 8011136:	4610      	mov	r0, r2
 8011138:	f7fb fe1c 	bl	800cd74 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801113e:	69fa      	ldr	r2, [r7, #28]
 8011140:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011142:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011144:	69f8      	ldr	r0, [r7, #28]
 8011146:	f7ff f881 	bl	801024c <tcp_oos_insert_segment>
                  }
                  break;
 801114a:	e0e2      	b.n	8011312 <tcp_receive+0xebe>
 801114c:	20030498 	.word	0x20030498
 8011150:	20030495 	.word	0x20030495
 8011154:	20030468 	.word	0x20030468
 8011158:	20030488 	.word	0x20030488
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	f040 80c6 	bne.w	80112f6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801116a:	4b80      	ldr	r3, [pc, #512]	; (801136c <tcp_receive+0xf18>)
 801116c:	681a      	ldr	r2, [r3, #0]
 801116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011176:	2b00      	cmp	r3, #0
 8011178:	f340 80bd 	ble.w	80112f6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	899b      	ldrh	r3, [r3, #12]
 8011182:	b29b      	uxth	r3, r3
 8011184:	4618      	mov	r0, r3
 8011186:	f7fa fb89 	bl	800b89c <lwip_htons>
 801118a:	4603      	mov	r3, r0
 801118c:	b2db      	uxtb	r3, r3
 801118e:	f003 0301 	and.w	r3, r3, #1
 8011192:	2b00      	cmp	r3, #0
 8011194:	f040 80bf 	bne.w	8011316 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011198:	4875      	ldr	r0, [pc, #468]	; (8011370 <tcp_receive+0xf1c>)
 801119a:	f7fd fb07 	bl	800e7ac <tcp_seg_copy>
 801119e:	4602      	mov	r2, r0
 80111a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80111a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	f000 80b6 	beq.w	801131a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80111ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111b6:	8912      	ldrh	r2, [r2, #8]
 80111b8:	441a      	add	r2, r3
 80111ba:	4b6c      	ldr	r3, [pc, #432]	; (801136c <tcp_receive+0xf18>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	dd12      	ble.n	80111ea <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80111c4:	4b69      	ldr	r3, [pc, #420]	; (801136c <tcp_receive+0xf18>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	1ad3      	subs	r3, r2, r3
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80111da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111dc:	685a      	ldr	r2, [r3, #4]
 80111de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e0:	891b      	ldrh	r3, [r3, #8]
 80111e2:	4619      	mov	r1, r3
 80111e4:	4610      	mov	r0, r2
 80111e6:	f7fb fdc5 	bl	800cd74 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80111ea:	4b62      	ldr	r3, [pc, #392]	; (8011374 <tcp_receive+0xf20>)
 80111ec:	881b      	ldrh	r3, [r3, #0]
 80111ee:	461a      	mov	r2, r3
 80111f0:	4b5e      	ldr	r3, [pc, #376]	; (801136c <tcp_receive+0xf18>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	441a      	add	r2, r3
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111fa:	6879      	ldr	r1, [r7, #4]
 80111fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80111fe:	440b      	add	r3, r1
 8011200:	1ad3      	subs	r3, r2, r3
 8011202:	2b00      	cmp	r3, #0
 8011204:	f340 8089 	ble.w	801131a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	899b      	ldrh	r3, [r3, #12]
 8011210:	b29b      	uxth	r3, r3
 8011212:	4618      	mov	r0, r3
 8011214:	f7fa fb42 	bl	800b89c <lwip_htons>
 8011218:	4603      	mov	r3, r0
 801121a:	b2db      	uxtb	r3, r3
 801121c:	f003 0301 	and.w	r3, r3, #1
 8011220:	2b00      	cmp	r3, #0
 8011222:	d022      	beq.n	801126a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	899b      	ldrh	r3, [r3, #12]
 801122c:	b29b      	uxth	r3, r3
 801122e:	b21b      	sxth	r3, r3
 8011230:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011234:	b21c      	sxth	r4, r3
 8011236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	899b      	ldrh	r3, [r3, #12]
 801123e:	b29b      	uxth	r3, r3
 8011240:	4618      	mov	r0, r3
 8011242:	f7fa fb2b 	bl	800b89c <lwip_htons>
 8011246:	4603      	mov	r3, r0
 8011248:	b2db      	uxtb	r3, r3
 801124a:	b29b      	uxth	r3, r3
 801124c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011250:	b29b      	uxth	r3, r3
 8011252:	4618      	mov	r0, r3
 8011254:	f7fa fb22 	bl	800b89c <lwip_htons>
 8011258:	4603      	mov	r3, r0
 801125a:	b21b      	sxth	r3, r3
 801125c:	4323      	orrs	r3, r4
 801125e:	b21a      	sxth	r2, r3
 8011260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	b292      	uxth	r2, r2
 8011268:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801126e:	b29a      	uxth	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011274:	4413      	add	r3, r2
 8011276:	b299      	uxth	r1, r3
 8011278:	4b3c      	ldr	r3, [pc, #240]	; (801136c <tcp_receive+0xf18>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	b29a      	uxth	r2, r3
 801127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	1a8a      	subs	r2, r1, r2
 8011284:	b292      	uxth	r2, r2
 8011286:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	685a      	ldr	r2, [r3, #4]
 801128e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	891b      	ldrh	r3, [r3, #8]
 8011294:	4619      	mov	r1, r3
 8011296:	4610      	mov	r0, r2
 8011298:	f7fb fd6c 	bl	800cd74 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	891c      	ldrh	r4, [r3, #8]
 80112a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	68db      	ldr	r3, [r3, #12]
 80112a8:	899b      	ldrh	r3, [r3, #12]
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7fa faf5 	bl	800b89c <lwip_htons>
 80112b2:	4603      	mov	r3, r0
 80112b4:	b2db      	uxtb	r3, r3
 80112b6:	f003 0303 	and.w	r3, r3, #3
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d001      	beq.n	80112c2 <tcp_receive+0xe6e>
 80112be:	2301      	movs	r3, #1
 80112c0:	e000      	b.n	80112c4 <tcp_receive+0xe70>
 80112c2:	2300      	movs	r3, #0
 80112c4:	4423      	add	r3, r4
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	4b2a      	ldr	r3, [pc, #168]	; (8011374 <tcp_receive+0xf20>)
 80112ca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80112cc:	4b29      	ldr	r3, [pc, #164]	; (8011374 <tcp_receive+0xf20>)
 80112ce:	881b      	ldrh	r3, [r3, #0]
 80112d0:	461a      	mov	r2, r3
 80112d2:	4b26      	ldr	r3, [pc, #152]	; (801136c <tcp_receive+0xf18>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	441a      	add	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112dc:	6879      	ldr	r1, [r7, #4]
 80112de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112e0:	440b      	add	r3, r1
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d019      	beq.n	801131a <tcp_receive+0xec6>
 80112e6:	4b24      	ldr	r3, [pc, #144]	; (8011378 <tcp_receive+0xf24>)
 80112e8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80112ec:	4923      	ldr	r1, [pc, #140]	; (801137c <tcp_receive+0xf28>)
 80112ee:	4824      	ldr	r0, [pc, #144]	; (8011380 <tcp_receive+0xf2c>)
 80112f0:	f005 f806 	bl	8016300 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80112f4:	e011      	b.n	801131a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80112f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80112fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fe:	2b00      	cmp	r3, #0
 8011300:	f47f aea4 	bne.w	801104c <tcp_receive+0xbf8>
 8011304:	e00a      	b.n	801131c <tcp_receive+0xec8>
                break;
 8011306:	bf00      	nop
 8011308:	e008      	b.n	801131c <tcp_receive+0xec8>
                break;
 801130a:	bf00      	nop
 801130c:	e006      	b.n	801131c <tcp_receive+0xec8>
                  break;
 801130e:	bf00      	nop
 8011310:	e004      	b.n	801131c <tcp_receive+0xec8>
                  break;
 8011312:	bf00      	nop
 8011314:	e002      	b.n	801131c <tcp_receive+0xec8>
                  break;
 8011316:	bf00      	nop
 8011318:	e000      	b.n	801131c <tcp_receive+0xec8>
                break;
 801131a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f001 fa33 	bl	8012788 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011322:	e003      	b.n	801132c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f001 fa2f 	bl	8012788 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801132a:	e01a      	b.n	8011362 <tcp_receive+0xf0e>
 801132c:	e019      	b.n	8011362 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801132e:	4b0f      	ldr	r3, [pc, #60]	; (801136c <tcp_receive+0xf18>)
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	2b00      	cmp	r3, #0
 801133a:	db0a      	blt.n	8011352 <tcp_receive+0xefe>
 801133c:	4b0b      	ldr	r3, [pc, #44]	; (801136c <tcp_receive+0xf18>)
 801133e:	681a      	ldr	r2, [r3, #0]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011344:	6879      	ldr	r1, [r7, #4]
 8011346:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011348:	440b      	add	r3, r1
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	3301      	adds	r3, #1
 801134e:	2b00      	cmp	r3, #0
 8011350:	dd07      	ble.n	8011362 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	8b5b      	ldrh	r3, [r3, #26]
 8011356:	f043 0302 	orr.w	r3, r3, #2
 801135a:	b29a      	uxth	r2, r3
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011360:	e7ff      	b.n	8011362 <tcp_receive+0xf0e>
 8011362:	bf00      	nop
 8011364:	3750      	adds	r7, #80	; 0x50
 8011366:	46bd      	mov	sp, r7
 8011368:	bdb0      	pop	{r4, r5, r7, pc}
 801136a:	bf00      	nop
 801136c:	20030488 	.word	0x20030488
 8011370:	20030468 	.word	0x20030468
 8011374:	20030492 	.word	0x20030492
 8011378:	08018e6c 	.word	0x08018e6c
 801137c:	08019214 	.word	0x08019214
 8011380:	08018eb8 	.word	0x08018eb8

08011384 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801138a:	4b15      	ldr	r3, [pc, #84]	; (80113e0 <tcp_get_next_optbyte+0x5c>)
 801138c:	881b      	ldrh	r3, [r3, #0]
 801138e:	1c5a      	adds	r2, r3, #1
 8011390:	b291      	uxth	r1, r2
 8011392:	4a13      	ldr	r2, [pc, #76]	; (80113e0 <tcp_get_next_optbyte+0x5c>)
 8011394:	8011      	strh	r1, [r2, #0]
 8011396:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011398:	4b12      	ldr	r3, [pc, #72]	; (80113e4 <tcp_get_next_optbyte+0x60>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d004      	beq.n	80113aa <tcp_get_next_optbyte+0x26>
 80113a0:	4b11      	ldr	r3, [pc, #68]	; (80113e8 <tcp_get_next_optbyte+0x64>)
 80113a2:	881b      	ldrh	r3, [r3, #0]
 80113a4:	88fa      	ldrh	r2, [r7, #6]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d208      	bcs.n	80113bc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80113aa:	4b10      	ldr	r3, [pc, #64]	; (80113ec <tcp_get_next_optbyte+0x68>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	3314      	adds	r3, #20
 80113b0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80113b2:	88fb      	ldrh	r3, [r7, #6]
 80113b4:	683a      	ldr	r2, [r7, #0]
 80113b6:	4413      	add	r3, r2
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	e00b      	b.n	80113d4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80113bc:	88fb      	ldrh	r3, [r7, #6]
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	4b09      	ldr	r3, [pc, #36]	; (80113e8 <tcp_get_next_optbyte+0x64>)
 80113c2:	881b      	ldrh	r3, [r3, #0]
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80113ca:	4b06      	ldr	r3, [pc, #24]	; (80113e4 <tcp_get_next_optbyte+0x60>)
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	797b      	ldrb	r3, [r7, #5]
 80113d0:	4413      	add	r3, r2
 80113d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	370c      	adds	r7, #12
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr
 80113e0:	20030484 	.word	0x20030484
 80113e4:	20030480 	.word	0x20030480
 80113e8:	2003047e 	.word	0x2003047e
 80113ec:	20030478 	.word	0x20030478

080113f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d106      	bne.n	801140c <tcp_parseopt+0x1c>
 80113fe:	4b32      	ldr	r3, [pc, #200]	; (80114c8 <tcp_parseopt+0xd8>)
 8011400:	f240 727d 	movw	r2, #1917	; 0x77d
 8011404:	4931      	ldr	r1, [pc, #196]	; (80114cc <tcp_parseopt+0xdc>)
 8011406:	4832      	ldr	r0, [pc, #200]	; (80114d0 <tcp_parseopt+0xe0>)
 8011408:	f004 ff7a 	bl	8016300 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801140c:	4b31      	ldr	r3, [pc, #196]	; (80114d4 <tcp_parseopt+0xe4>)
 801140e:	881b      	ldrh	r3, [r3, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d055      	beq.n	80114c0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011414:	4b30      	ldr	r3, [pc, #192]	; (80114d8 <tcp_parseopt+0xe8>)
 8011416:	2200      	movs	r2, #0
 8011418:	801a      	strh	r2, [r3, #0]
 801141a:	e045      	b.n	80114a8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801141c:	f7ff ffb2 	bl	8011384 <tcp_get_next_optbyte>
 8011420:	4603      	mov	r3, r0
 8011422:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011424:	7bfb      	ldrb	r3, [r7, #15]
 8011426:	2b02      	cmp	r3, #2
 8011428:	d006      	beq.n	8011438 <tcp_parseopt+0x48>
 801142a:	2b02      	cmp	r3, #2
 801142c:	dc2b      	bgt.n	8011486 <tcp_parseopt+0x96>
 801142e:	2b00      	cmp	r3, #0
 8011430:	d041      	beq.n	80114b6 <tcp_parseopt+0xc6>
 8011432:	2b01      	cmp	r3, #1
 8011434:	d127      	bne.n	8011486 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011436:	e037      	b.n	80114a8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011438:	f7ff ffa4 	bl	8011384 <tcp_get_next_optbyte>
 801143c:	4603      	mov	r3, r0
 801143e:	2b04      	cmp	r3, #4
 8011440:	d13b      	bne.n	80114ba <tcp_parseopt+0xca>
 8011442:	4b25      	ldr	r3, [pc, #148]	; (80114d8 <tcp_parseopt+0xe8>)
 8011444:	881b      	ldrh	r3, [r3, #0]
 8011446:	3301      	adds	r3, #1
 8011448:	4a22      	ldr	r2, [pc, #136]	; (80114d4 <tcp_parseopt+0xe4>)
 801144a:	8812      	ldrh	r2, [r2, #0]
 801144c:	4293      	cmp	r3, r2
 801144e:	da34      	bge.n	80114ba <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011450:	f7ff ff98 	bl	8011384 <tcp_get_next_optbyte>
 8011454:	4603      	mov	r3, r0
 8011456:	b29b      	uxth	r3, r3
 8011458:	021b      	lsls	r3, r3, #8
 801145a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801145c:	f7ff ff92 	bl	8011384 <tcp_get_next_optbyte>
 8011460:	4603      	mov	r3, r0
 8011462:	b29a      	uxth	r2, r3
 8011464:	89bb      	ldrh	r3, [r7, #12]
 8011466:	4313      	orrs	r3, r2
 8011468:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801146a:	89bb      	ldrh	r3, [r7, #12]
 801146c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011470:	d804      	bhi.n	801147c <tcp_parseopt+0x8c>
 8011472:	89bb      	ldrh	r3, [r7, #12]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d001      	beq.n	801147c <tcp_parseopt+0x8c>
 8011478:	89ba      	ldrh	r2, [r7, #12]
 801147a:	e001      	b.n	8011480 <tcp_parseopt+0x90>
 801147c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011484:	e010      	b.n	80114a8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011486:	f7ff ff7d 	bl	8011384 <tcp_get_next_optbyte>
 801148a:	4603      	mov	r3, r0
 801148c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801148e:	7afb      	ldrb	r3, [r7, #11]
 8011490:	2b01      	cmp	r3, #1
 8011492:	d914      	bls.n	80114be <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011494:	7afb      	ldrb	r3, [r7, #11]
 8011496:	b29a      	uxth	r2, r3
 8011498:	4b0f      	ldr	r3, [pc, #60]	; (80114d8 <tcp_parseopt+0xe8>)
 801149a:	881b      	ldrh	r3, [r3, #0]
 801149c:	4413      	add	r3, r2
 801149e:	b29b      	uxth	r3, r3
 80114a0:	3b02      	subs	r3, #2
 80114a2:	b29a      	uxth	r2, r3
 80114a4:	4b0c      	ldr	r3, [pc, #48]	; (80114d8 <tcp_parseopt+0xe8>)
 80114a6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80114a8:	4b0b      	ldr	r3, [pc, #44]	; (80114d8 <tcp_parseopt+0xe8>)
 80114aa:	881a      	ldrh	r2, [r3, #0]
 80114ac:	4b09      	ldr	r3, [pc, #36]	; (80114d4 <tcp_parseopt+0xe4>)
 80114ae:	881b      	ldrh	r3, [r3, #0]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d3b3      	bcc.n	801141c <tcp_parseopt+0x2c>
 80114b4:	e004      	b.n	80114c0 <tcp_parseopt+0xd0>
          return;
 80114b6:	bf00      	nop
 80114b8:	e002      	b.n	80114c0 <tcp_parseopt+0xd0>
            return;
 80114ba:	bf00      	nop
 80114bc:	e000      	b.n	80114c0 <tcp_parseopt+0xd0>
            return;
 80114be:	bf00      	nop
      }
    }
  }
}
 80114c0:	3710      	adds	r7, #16
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
 80114c6:	bf00      	nop
 80114c8:	08018e6c 	.word	0x08018e6c
 80114cc:	080192d0 	.word	0x080192d0
 80114d0:	08018eb8 	.word	0x08018eb8
 80114d4:	2003047c 	.word	0x2003047c
 80114d8:	20030484 	.word	0x20030484

080114dc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80114dc:	b480      	push	{r7}
 80114de:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80114e0:	4b05      	ldr	r3, [pc, #20]	; (80114f8 <tcp_trigger_input_pcb_close+0x1c>)
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	f043 0310 	orr.w	r3, r3, #16
 80114e8:	b2da      	uxtb	r2, r3
 80114ea:	4b03      	ldr	r3, [pc, #12]	; (80114f8 <tcp_trigger_input_pcb_close+0x1c>)
 80114ec:	701a      	strb	r2, [r3, #0]
}
 80114ee:	bf00      	nop
 80114f0:	46bd      	mov	sp, r7
 80114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f6:	4770      	bx	lr
 80114f8:	20030495 	.word	0x20030495

080114fc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b084      	sub	sp, #16
 8011500:	af00      	add	r7, sp, #0
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d00a      	beq.n	8011524 <tcp_route+0x28>
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	7a1b      	ldrb	r3, [r3, #8]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d006      	beq.n	8011524 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	7a1b      	ldrb	r3, [r3, #8]
 801151a:	4618      	mov	r0, r3
 801151c:	f7fb fa22 	bl	800c964 <netif_get_by_index>
 8011520:	4603      	mov	r3, r0
 8011522:	e003      	b.n	801152c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f003 f9e3 	bl	80148f0 <ip4_route>
 801152a:	4603      	mov	r3, r0
  }
}
 801152c:	4618      	mov	r0, r3
 801152e:	3710      	adds	r7, #16
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011534:	b590      	push	{r4, r7, lr}
 8011536:	b087      	sub	sp, #28
 8011538:	af00      	add	r7, sp, #0
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	60b9      	str	r1, [r7, #8]
 801153e:	603b      	str	r3, [r7, #0]
 8011540:	4613      	mov	r3, r2
 8011542:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d105      	bne.n	8011556 <tcp_create_segment+0x22>
 801154a:	4b44      	ldr	r3, [pc, #272]	; (801165c <tcp_create_segment+0x128>)
 801154c:	22a3      	movs	r2, #163	; 0xa3
 801154e:	4944      	ldr	r1, [pc, #272]	; (8011660 <tcp_create_segment+0x12c>)
 8011550:	4844      	ldr	r0, [pc, #272]	; (8011664 <tcp_create_segment+0x130>)
 8011552:	f004 fed5 	bl	8016300 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d105      	bne.n	8011568 <tcp_create_segment+0x34>
 801155c:	4b3f      	ldr	r3, [pc, #252]	; (801165c <tcp_create_segment+0x128>)
 801155e:	22a4      	movs	r2, #164	; 0xa4
 8011560:	4941      	ldr	r1, [pc, #260]	; (8011668 <tcp_create_segment+0x134>)
 8011562:	4840      	ldr	r0, [pc, #256]	; (8011664 <tcp_create_segment+0x130>)
 8011564:	f004 fecc 	bl	8016300 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011568:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801156c:	009b      	lsls	r3, r3, #2
 801156e:	b2db      	uxtb	r3, r3
 8011570:	f003 0304 	and.w	r3, r3, #4
 8011574:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011576:	2003      	movs	r0, #3
 8011578:	f7fa fe68 	bl	800c24c <memp_malloc>
 801157c:	6138      	str	r0, [r7, #16]
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d104      	bne.n	801158e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011584:	68b8      	ldr	r0, [r7, #8]
 8011586:	f7fb fd7b 	bl	800d080 <pbuf_free>
    return NULL;
 801158a:	2300      	movs	r3, #0
 801158c:	e061      	b.n	8011652 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011594:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	2200      	movs	r2, #0
 801159a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	68ba      	ldr	r2, [r7, #8]
 80115a0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	891a      	ldrh	r2, [r3, #8]
 80115a6:	7dfb      	ldrb	r3, [r7, #23]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d205      	bcs.n	80115ba <tcp_create_segment+0x86>
 80115ae:	4b2b      	ldr	r3, [pc, #172]	; (801165c <tcp_create_segment+0x128>)
 80115b0:	22b0      	movs	r2, #176	; 0xb0
 80115b2:	492e      	ldr	r1, [pc, #184]	; (801166c <tcp_create_segment+0x138>)
 80115b4:	482b      	ldr	r0, [pc, #172]	; (8011664 <tcp_create_segment+0x130>)
 80115b6:	f004 fea3 	bl	8016300 <iprintf>
  seg->len = p->tot_len - optlen;
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	891a      	ldrh	r2, [r3, #8]
 80115be:	7dfb      	ldrb	r3, [r7, #23]
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	1ad3      	subs	r3, r2, r3
 80115c4:	b29a      	uxth	r2, r3
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80115ca:	2114      	movs	r1, #20
 80115cc:	68b8      	ldr	r0, [r7, #8]
 80115ce:	f7fb fcc1 	bl	800cf54 <pbuf_add_header>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d004      	beq.n	80115e2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80115d8:	6938      	ldr	r0, [r7, #16]
 80115da:	f7fd f8ce 	bl	800e77a <tcp_seg_free>
    return NULL;
 80115de:	2300      	movs	r3, #0
 80115e0:	e037      	b.n	8011652 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	685b      	ldr	r3, [r3, #4]
 80115e6:	685a      	ldr	r2, [r3, #4]
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	8ada      	ldrh	r2, [r3, #22]
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	68dc      	ldr	r4, [r3, #12]
 80115f4:	4610      	mov	r0, r2
 80115f6:	f7fa f951 	bl	800b89c <lwip_htons>
 80115fa:	4603      	mov	r3, r0
 80115fc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	8b1a      	ldrh	r2, [r3, #24]
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	68dc      	ldr	r4, [r3, #12]
 8011606:	4610      	mov	r0, r2
 8011608:	f7fa f948 	bl	800b89c <lwip_htons>
 801160c:	4603      	mov	r3, r0
 801160e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	68dc      	ldr	r4, [r3, #12]
 8011614:	6838      	ldr	r0, [r7, #0]
 8011616:	f7fa f956 	bl	800b8c6 <lwip_htonl>
 801161a:	4603      	mov	r3, r0
 801161c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801161e:	7dfb      	ldrb	r3, [r7, #23]
 8011620:	089b      	lsrs	r3, r3, #2
 8011622:	b2db      	uxtb	r3, r3
 8011624:	b29b      	uxth	r3, r3
 8011626:	3305      	adds	r3, #5
 8011628:	b29b      	uxth	r3, r3
 801162a:	031b      	lsls	r3, r3, #12
 801162c:	b29a      	uxth	r2, r3
 801162e:	79fb      	ldrb	r3, [r7, #7]
 8011630:	b29b      	uxth	r3, r3
 8011632:	4313      	orrs	r3, r2
 8011634:	b29a      	uxth	r2, r3
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	68dc      	ldr	r4, [r3, #12]
 801163a:	4610      	mov	r0, r2
 801163c:	f7fa f92e 	bl	800b89c <lwip_htons>
 8011640:	4603      	mov	r3, r0
 8011642:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	2200      	movs	r2, #0
 801164a:	749a      	strb	r2, [r3, #18]
 801164c:	2200      	movs	r2, #0
 801164e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011650:	693b      	ldr	r3, [r7, #16]
}
 8011652:	4618      	mov	r0, r3
 8011654:	371c      	adds	r7, #28
 8011656:	46bd      	mov	sp, r7
 8011658:	bd90      	pop	{r4, r7, pc}
 801165a:	bf00      	nop
 801165c:	080192ec 	.word	0x080192ec
 8011660:	08019320 	.word	0x08019320
 8011664:	08019340 	.word	0x08019340
 8011668:	08019368 	.word	0x08019368
 801166c:	0801938c 	.word	0x0801938c

08011670 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011670:	b590      	push	{r4, r7, lr}
 8011672:	b08b      	sub	sp, #44	; 0x2c
 8011674:	af02      	add	r7, sp, #8
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	460b      	mov	r3, r1
 801167a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801167c:	2300      	movs	r3, #0
 801167e:	61fb      	str	r3, [r7, #28]
 8011680:	2300      	movs	r3, #0
 8011682:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011684:	2300      	movs	r3, #0
 8011686:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d106      	bne.n	801169c <tcp_split_unsent_seg+0x2c>
 801168e:	4b95      	ldr	r3, [pc, #596]	; (80118e4 <tcp_split_unsent_seg+0x274>)
 8011690:	f240 324b 	movw	r2, #843	; 0x34b
 8011694:	4994      	ldr	r1, [pc, #592]	; (80118e8 <tcp_split_unsent_seg+0x278>)
 8011696:	4895      	ldr	r0, [pc, #596]	; (80118ec <tcp_split_unsent_seg+0x27c>)
 8011698:	f004 fe32 	bl	8016300 <iprintf>

  useg = pcb->unsent;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116a0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d102      	bne.n	80116ae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80116a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116ac:	e116      	b.n	80118dc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80116ae:	887b      	ldrh	r3, [r7, #2]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d109      	bne.n	80116c8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80116b4:	4b8b      	ldr	r3, [pc, #556]	; (80118e4 <tcp_split_unsent_seg+0x274>)
 80116b6:	f240 3253 	movw	r2, #851	; 0x353
 80116ba:	498d      	ldr	r1, [pc, #564]	; (80118f0 <tcp_split_unsent_seg+0x280>)
 80116bc:	488b      	ldr	r0, [pc, #556]	; (80118ec <tcp_split_unsent_seg+0x27c>)
 80116be:	f004 fe1f 	bl	8016300 <iprintf>
    return ERR_VAL;
 80116c2:	f06f 0305 	mvn.w	r3, #5
 80116c6:	e109      	b.n	80118dc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	891b      	ldrh	r3, [r3, #8]
 80116cc:	887a      	ldrh	r2, [r7, #2]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	d301      	bcc.n	80116d6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80116d2:	2300      	movs	r3, #0
 80116d4:	e102      	b.n	80118dc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116da:	887a      	ldrh	r2, [r7, #2]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d906      	bls.n	80116ee <tcp_split_unsent_seg+0x7e>
 80116e0:	4b80      	ldr	r3, [pc, #512]	; (80118e4 <tcp_split_unsent_seg+0x274>)
 80116e2:	f240 325b 	movw	r2, #859	; 0x35b
 80116e6:	4983      	ldr	r1, [pc, #524]	; (80118f4 <tcp_split_unsent_seg+0x284>)
 80116e8:	4880      	ldr	r0, [pc, #512]	; (80118ec <tcp_split_unsent_seg+0x27c>)
 80116ea:	f004 fe09 	bl	8016300 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	891b      	ldrh	r3, [r3, #8]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d106      	bne.n	8011704 <tcp_split_unsent_seg+0x94>
 80116f6:	4b7b      	ldr	r3, [pc, #492]	; (80118e4 <tcp_split_unsent_seg+0x274>)
 80116f8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80116fc:	497e      	ldr	r1, [pc, #504]	; (80118f8 <tcp_split_unsent_seg+0x288>)
 80116fe:	487b      	ldr	r0, [pc, #492]	; (80118ec <tcp_split_unsent_seg+0x27c>)
 8011700:	f004 fdfe 	bl	8016300 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	7a9b      	ldrb	r3, [r3, #10]
 8011708:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801170a:	7bfb      	ldrb	r3, [r7, #15]
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	b2db      	uxtb	r3, r3
 8011710:	f003 0304 	and.w	r3, r3, #4
 8011714:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	891a      	ldrh	r2, [r3, #8]
 801171a:	887b      	ldrh	r3, [r7, #2]
 801171c:	1ad3      	subs	r3, r2, r3
 801171e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011720:	7bbb      	ldrb	r3, [r7, #14]
 8011722:	b29a      	uxth	r2, r3
 8011724:	89bb      	ldrh	r3, [r7, #12]
 8011726:	4413      	add	r3, r2
 8011728:	b29b      	uxth	r3, r3
 801172a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801172e:	4619      	mov	r1, r3
 8011730:	2036      	movs	r0, #54	; 0x36
 8011732:	f7fb f9c1 	bl	800cab8 <pbuf_alloc>
 8011736:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	2b00      	cmp	r3, #0
 801173c:	f000 80b7 	beq.w	80118ae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	891a      	ldrh	r2, [r3, #8]
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	891b      	ldrh	r3, [r3, #8]
 801174a:	1ad3      	subs	r3, r2, r3
 801174c:	b29a      	uxth	r2, r3
 801174e:	887b      	ldrh	r3, [r7, #2]
 8011750:	4413      	add	r3, r2
 8011752:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	6858      	ldr	r0, [r3, #4]
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	685a      	ldr	r2, [r3, #4]
 801175c:	7bbb      	ldrb	r3, [r7, #14]
 801175e:	18d1      	adds	r1, r2, r3
 8011760:	897b      	ldrh	r3, [r7, #10]
 8011762:	89ba      	ldrh	r2, [r7, #12]
 8011764:	f7fb fe92 	bl	800d48c <pbuf_copy_partial>
 8011768:	4603      	mov	r3, r0
 801176a:	461a      	mov	r2, r3
 801176c:	89bb      	ldrh	r3, [r7, #12]
 801176e:	4293      	cmp	r3, r2
 8011770:	f040 809f 	bne.w	80118b2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	899b      	ldrh	r3, [r3, #12]
 801177a:	b29b      	uxth	r3, r3
 801177c:	4618      	mov	r0, r3
 801177e:	f7fa f88d 	bl	800b89c <lwip_htons>
 8011782:	4603      	mov	r3, r0
 8011784:	b2db      	uxtb	r3, r3
 8011786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801178a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801178c:	2300      	movs	r3, #0
 801178e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011790:	7efb      	ldrb	r3, [r7, #27]
 8011792:	f003 0308 	and.w	r3, r3, #8
 8011796:	2b00      	cmp	r3, #0
 8011798:	d007      	beq.n	80117aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801179a:	7efb      	ldrb	r3, [r7, #27]
 801179c:	f023 0308 	bic.w	r3, r3, #8
 80117a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80117a2:	7ebb      	ldrb	r3, [r7, #26]
 80117a4:	f043 0308 	orr.w	r3, r3, #8
 80117a8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80117aa:	7efb      	ldrb	r3, [r7, #27]
 80117ac:	f003 0301 	and.w	r3, r3, #1
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d007      	beq.n	80117c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80117b4:	7efb      	ldrb	r3, [r7, #27]
 80117b6:	f023 0301 	bic.w	r3, r3, #1
 80117ba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80117bc:	7ebb      	ldrb	r3, [r7, #26]
 80117be:	f043 0301 	orr.w	r3, r3, #1
 80117c2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7fa f87b 	bl	800b8c6 <lwip_htonl>
 80117d0:	4602      	mov	r2, r0
 80117d2:	887b      	ldrh	r3, [r7, #2]
 80117d4:	18d1      	adds	r1, r2, r3
 80117d6:	7eba      	ldrb	r2, [r7, #26]
 80117d8:	7bfb      	ldrb	r3, [r7, #15]
 80117da:	9300      	str	r3, [sp, #0]
 80117dc:	460b      	mov	r3, r1
 80117de:	6939      	ldr	r1, [r7, #16]
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f7ff fea7 	bl	8011534 <tcp_create_segment>
 80117e6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80117e8:	69fb      	ldr	r3, [r7, #28]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d063      	beq.n	80118b6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fb fcd2 	bl	800d19c <pbuf_clen>
 80117f8:	4603      	mov	r3, r0
 80117fa:	461a      	mov	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011802:	1a9b      	subs	r3, r3, r2
 8011804:	b29a      	uxth	r2, r3
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	6858      	ldr	r0, [r3, #4]
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	891a      	ldrh	r2, [r3, #8]
 8011816:	89bb      	ldrh	r3, [r7, #12]
 8011818:	1ad3      	subs	r3, r2, r3
 801181a:	b29b      	uxth	r3, r3
 801181c:	4619      	mov	r1, r3
 801181e:	f7fb faa9 	bl	800cd74 <pbuf_realloc>
  useg->len -= remainder;
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	891a      	ldrh	r2, [r3, #8]
 8011826:	89bb      	ldrh	r3, [r7, #12]
 8011828:	1ad3      	subs	r3, r2, r3
 801182a:	b29a      	uxth	r2, r3
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	899b      	ldrh	r3, [r3, #12]
 8011836:	b29c      	uxth	r4, r3
 8011838:	7efb      	ldrb	r3, [r7, #27]
 801183a:	b29b      	uxth	r3, r3
 801183c:	4618      	mov	r0, r3
 801183e:	f7fa f82d 	bl	800b89c <lwip_htons>
 8011842:	4603      	mov	r3, r0
 8011844:	461a      	mov	r2, r3
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	4322      	orrs	r2, r4
 801184c:	b292      	uxth	r2, r2
 801184e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	4618      	mov	r0, r3
 8011856:	f7fb fca1 	bl	800d19c <pbuf_clen>
 801185a:	4603      	mov	r3, r0
 801185c:	461a      	mov	r2, r3
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011864:	4413      	add	r3, r2
 8011866:	b29a      	uxth	r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	4618      	mov	r0, r3
 8011874:	f7fb fc92 	bl	800d19c <pbuf_clen>
 8011878:	4603      	mov	r3, r0
 801187a:	461a      	mov	r2, r3
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011882:	4413      	add	r3, r2
 8011884:	b29a      	uxth	r2, r3
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	69fa      	ldr	r2, [r7, #28]
 8011898:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801189a:	69fb      	ldr	r3, [r7, #28]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d103      	bne.n	80118aa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2200      	movs	r2, #0
 80118a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80118aa:	2300      	movs	r3, #0
 80118ac:	e016      	b.n	80118dc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80118ae:	bf00      	nop
 80118b0:	e002      	b.n	80118b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80118b2:	bf00      	nop
 80118b4:	e000      	b.n	80118b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80118b6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80118b8:	69fb      	ldr	r3, [r7, #28]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d006      	beq.n	80118cc <tcp_split_unsent_seg+0x25c>
 80118be:	4b09      	ldr	r3, [pc, #36]	; (80118e4 <tcp_split_unsent_seg+0x274>)
 80118c0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80118c4:	490d      	ldr	r1, [pc, #52]	; (80118fc <tcp_split_unsent_seg+0x28c>)
 80118c6:	4809      	ldr	r0, [pc, #36]	; (80118ec <tcp_split_unsent_seg+0x27c>)
 80118c8:	f004 fd1a 	bl	8016300 <iprintf>
  if (p != NULL) {
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d002      	beq.n	80118d8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80118d2:	6938      	ldr	r0, [r7, #16]
 80118d4:	f7fb fbd4 	bl	800d080 <pbuf_free>
  }

  return ERR_MEM;
 80118d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3724      	adds	r7, #36	; 0x24
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd90      	pop	{r4, r7, pc}
 80118e4:	080192ec 	.word	0x080192ec
 80118e8:	08019680 	.word	0x08019680
 80118ec:	08019340 	.word	0x08019340
 80118f0:	080196a4 	.word	0x080196a4
 80118f4:	080196c8 	.word	0x080196c8
 80118f8:	080196d8 	.word	0x080196d8
 80118fc:	080196e8 	.word	0x080196e8

08011900 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011900:	b590      	push	{r4, r7, lr}
 8011902:	b085      	sub	sp, #20
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <tcp_send_fin+0x1c>
 801190e:	4b21      	ldr	r3, [pc, #132]	; (8011994 <tcp_send_fin+0x94>)
 8011910:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011914:	4920      	ldr	r1, [pc, #128]	; (8011998 <tcp_send_fin+0x98>)
 8011916:	4821      	ldr	r0, [pc, #132]	; (801199c <tcp_send_fin+0x9c>)
 8011918:	f004 fcf2 	bl	8016300 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011920:	2b00      	cmp	r3, #0
 8011922:	d02e      	beq.n	8011982 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011928:	60fb      	str	r3, [r7, #12]
 801192a:	e002      	b.n	8011932 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d1f8      	bne.n	801192c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	68db      	ldr	r3, [r3, #12]
 801193e:	899b      	ldrh	r3, [r3, #12]
 8011940:	b29b      	uxth	r3, r3
 8011942:	4618      	mov	r0, r3
 8011944:	f7f9 ffaa 	bl	800b89c <lwip_htons>
 8011948:	4603      	mov	r3, r0
 801194a:	b2db      	uxtb	r3, r3
 801194c:	f003 0307 	and.w	r3, r3, #7
 8011950:	2b00      	cmp	r3, #0
 8011952:	d116      	bne.n	8011982 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	68db      	ldr	r3, [r3, #12]
 8011958:	899b      	ldrh	r3, [r3, #12]
 801195a:	b29c      	uxth	r4, r3
 801195c:	2001      	movs	r0, #1
 801195e:	f7f9 ff9d 	bl	800b89c <lwip_htons>
 8011962:	4603      	mov	r3, r0
 8011964:	461a      	mov	r2, r3
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	4322      	orrs	r2, r4
 801196c:	b292      	uxth	r2, r2
 801196e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	8b5b      	ldrh	r3, [r3, #26]
 8011974:	f043 0320 	orr.w	r3, r3, #32
 8011978:	b29a      	uxth	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801197e:	2300      	movs	r3, #0
 8011980:	e004      	b.n	801198c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011982:	2101      	movs	r1, #1
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f000 f80b 	bl	80119a0 <tcp_enqueue_flags>
 801198a:	4603      	mov	r3, r0
}
 801198c:	4618      	mov	r0, r3
 801198e:	3714      	adds	r7, #20
 8011990:	46bd      	mov	sp, r7
 8011992:	bd90      	pop	{r4, r7, pc}
 8011994:	080192ec 	.word	0x080192ec
 8011998:	080196f4 	.word	0x080196f4
 801199c:	08019340 	.word	0x08019340

080119a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b08a      	sub	sp, #40	; 0x28
 80119a4:	af02      	add	r7, sp, #8
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	460b      	mov	r3, r1
 80119aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80119ac:	2300      	movs	r3, #0
 80119ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80119b0:	2300      	movs	r3, #0
 80119b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80119b4:	78fb      	ldrb	r3, [r7, #3]
 80119b6:	f003 0303 	and.w	r3, r3, #3
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d106      	bne.n	80119cc <tcp_enqueue_flags+0x2c>
 80119be:	4b67      	ldr	r3, [pc, #412]	; (8011b5c <tcp_enqueue_flags+0x1bc>)
 80119c0:	f240 4211 	movw	r2, #1041	; 0x411
 80119c4:	4966      	ldr	r1, [pc, #408]	; (8011b60 <tcp_enqueue_flags+0x1c0>)
 80119c6:	4867      	ldr	r0, [pc, #412]	; (8011b64 <tcp_enqueue_flags+0x1c4>)
 80119c8:	f004 fc9a 	bl	8016300 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d106      	bne.n	80119e0 <tcp_enqueue_flags+0x40>
 80119d2:	4b62      	ldr	r3, [pc, #392]	; (8011b5c <tcp_enqueue_flags+0x1bc>)
 80119d4:	f240 4213 	movw	r2, #1043	; 0x413
 80119d8:	4963      	ldr	r1, [pc, #396]	; (8011b68 <tcp_enqueue_flags+0x1c8>)
 80119da:	4862      	ldr	r0, [pc, #392]	; (8011b64 <tcp_enqueue_flags+0x1c4>)
 80119dc:	f004 fc90 	bl	8016300 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80119e0:	78fb      	ldrb	r3, [r7, #3]
 80119e2:	f003 0302 	and.w	r3, r3, #2
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d001      	beq.n	80119ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80119ea:	2301      	movs	r3, #1
 80119ec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80119ee:	7ffb      	ldrb	r3, [r7, #31]
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	f003 0304 	and.w	r3, r3, #4
 80119f8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80119fa:	7dfb      	ldrb	r3, [r7, #23]
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a02:	4619      	mov	r1, r3
 8011a04:	2036      	movs	r0, #54	; 0x36
 8011a06:	f7fb f857 	bl	800cab8 <pbuf_alloc>
 8011a0a:	6138      	str	r0, [r7, #16]
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d109      	bne.n	8011a26 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	8b5b      	ldrh	r3, [r3, #26]
 8011a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a1a:	b29a      	uxth	r2, r3
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a24:	e095      	b.n	8011b52 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	895a      	ldrh	r2, [r3, #10]
 8011a2a:	7dfb      	ldrb	r3, [r7, #23]
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d206      	bcs.n	8011a40 <tcp_enqueue_flags+0xa0>
 8011a32:	4b4a      	ldr	r3, [pc, #296]	; (8011b5c <tcp_enqueue_flags+0x1bc>)
 8011a34:	f240 4239 	movw	r2, #1081	; 0x439
 8011a38:	494c      	ldr	r1, [pc, #304]	; (8011b6c <tcp_enqueue_flags+0x1cc>)
 8011a3a:	484a      	ldr	r0, [pc, #296]	; (8011b64 <tcp_enqueue_flags+0x1c4>)
 8011a3c:	f004 fc60 	bl	8016300 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011a44:	78fa      	ldrb	r2, [r7, #3]
 8011a46:	7ffb      	ldrb	r3, [r7, #31]
 8011a48:	9300      	str	r3, [sp, #0]
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	6939      	ldr	r1, [r7, #16]
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f7ff fd70 	bl	8011534 <tcp_create_segment>
 8011a54:	60f8      	str	r0, [r7, #12]
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d109      	bne.n	8011a70 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	8b5b      	ldrh	r3, [r3, #26]
 8011a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a6e:	e070      	b.n	8011b52 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	f003 0303 	and.w	r3, r3, #3
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d006      	beq.n	8011a8a <tcp_enqueue_flags+0xea>
 8011a7c:	4b37      	ldr	r3, [pc, #220]	; (8011b5c <tcp_enqueue_flags+0x1bc>)
 8011a7e:	f240 4242 	movw	r2, #1090	; 0x442
 8011a82:	493b      	ldr	r1, [pc, #236]	; (8011b70 <tcp_enqueue_flags+0x1d0>)
 8011a84:	4837      	ldr	r0, [pc, #220]	; (8011b64 <tcp_enqueue_flags+0x1c4>)
 8011a86:	f004 fc3b 	bl	8016300 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	891b      	ldrh	r3, [r3, #8]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d006      	beq.n	8011aa0 <tcp_enqueue_flags+0x100>
 8011a92:	4b32      	ldr	r3, [pc, #200]	; (8011b5c <tcp_enqueue_flags+0x1bc>)
 8011a94:	f240 4243 	movw	r2, #1091	; 0x443
 8011a98:	4936      	ldr	r1, [pc, #216]	; (8011b74 <tcp_enqueue_flags+0x1d4>)
 8011a9a:	4832      	ldr	r0, [pc, #200]	; (8011b64 <tcp_enqueue_flags+0x1c4>)
 8011a9c:	f004 fc30 	bl	8016300 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d103      	bne.n	8011ab0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	66da      	str	r2, [r3, #108]	; 0x6c
 8011aae:	e00d      	b.n	8011acc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab4:	61bb      	str	r3, [r7, #24]
 8011ab6:	e002      	b.n	8011abe <tcp_enqueue_flags+0x11e>
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	61bb      	str	r3, [r7, #24]
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d1f8      	bne.n	8011ab8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	68fa      	ldr	r2, [r7, #12]
 8011aca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011ad4:	78fb      	ldrb	r3, [r7, #3]
 8011ad6:	f003 0302 	and.w	r3, r3, #2
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d104      	bne.n	8011ae8 <tcp_enqueue_flags+0x148>
 8011ade:	78fb      	ldrb	r3, [r7, #3]
 8011ae0:	f003 0301 	and.w	r3, r3, #1
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d004      	beq.n	8011af2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011aec:	1c5a      	adds	r2, r3, #1
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011af2:	78fb      	ldrb	r3, [r7, #3]
 8011af4:	f003 0301 	and.w	r3, r3, #1
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d006      	beq.n	8011b0a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	8b5b      	ldrh	r3, [r3, #26]
 8011b00:	f043 0320 	orr.w	r3, r3, #32
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fb fb44 	bl	800d19c <pbuf_clen>
 8011b14:	4603      	mov	r3, r0
 8011b16:	461a      	mov	r2, r3
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b1e:	4413      	add	r3, r2
 8011b20:	b29a      	uxth	r2, r3
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d00e      	beq.n	8011b50 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d10a      	bne.n	8011b50 <tcp_enqueue_flags+0x1b0>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d106      	bne.n	8011b50 <tcp_enqueue_flags+0x1b0>
 8011b42:	4b06      	ldr	r3, [pc, #24]	; (8011b5c <tcp_enqueue_flags+0x1bc>)
 8011b44:	f240 4265 	movw	r2, #1125	; 0x465
 8011b48:	490b      	ldr	r1, [pc, #44]	; (8011b78 <tcp_enqueue_flags+0x1d8>)
 8011b4a:	4806      	ldr	r0, [pc, #24]	; (8011b64 <tcp_enqueue_flags+0x1c4>)
 8011b4c:	f004 fbd8 	bl	8016300 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3720      	adds	r7, #32
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	080192ec 	.word	0x080192ec
 8011b60:	08019710 	.word	0x08019710
 8011b64:	08019340 	.word	0x08019340
 8011b68:	08019768 	.word	0x08019768
 8011b6c:	08019788 	.word	0x08019788
 8011b70:	080197c4 	.word	0x080197c4
 8011b74:	080197dc 	.word	0x080197dc
 8011b78:	08019808 	.word	0x08019808

08011b7c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011b7c:	b5b0      	push	{r4, r5, r7, lr}
 8011b7e:	b08a      	sub	sp, #40	; 0x28
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d106      	bne.n	8011b98 <tcp_output+0x1c>
 8011b8a:	4b8a      	ldr	r3, [pc, #552]	; (8011db4 <tcp_output+0x238>)
 8011b8c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011b90:	4989      	ldr	r1, [pc, #548]	; (8011db8 <tcp_output+0x23c>)
 8011b92:	488a      	ldr	r0, [pc, #552]	; (8011dbc <tcp_output+0x240>)
 8011b94:	f004 fbb4 	bl	8016300 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	7d1b      	ldrb	r3, [r3, #20]
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d106      	bne.n	8011bae <tcp_output+0x32>
 8011ba0:	4b84      	ldr	r3, [pc, #528]	; (8011db4 <tcp_output+0x238>)
 8011ba2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011ba6:	4986      	ldr	r1, [pc, #536]	; (8011dc0 <tcp_output+0x244>)
 8011ba8:	4884      	ldr	r0, [pc, #528]	; (8011dbc <tcp_output+0x240>)
 8011baa:	f004 fba9 	bl	8016300 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011bae:	4b85      	ldr	r3, [pc, #532]	; (8011dc4 <tcp_output+0x248>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d101      	bne.n	8011bbc <tcp_output+0x40>
    return ERR_OK;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	e1ce      	b.n	8011f5a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	bf28      	it	cs
 8011bcc:	4613      	movcs	r3, r2
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d10b      	bne.n	8011bf6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	8b5b      	ldrh	r3, [r3, #26]
 8011be2:	f003 0302 	and.w	r3, r3, #2
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	f000 81aa 	beq.w	8011f40 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f000 fdcb 	bl	8012788 <tcp_send_empty_ack>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	e1b1      	b.n	8011f5a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011bf6:	6879      	ldr	r1, [r7, #4]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	3304      	adds	r3, #4
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7ff fc7c 	bl	80114fc <tcp_route>
 8011c04:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d102      	bne.n	8011c12 <tcp_output+0x96>
    return ERR_RTE;
 8011c0c:	f06f 0303 	mvn.w	r3, #3
 8011c10:	e1a3      	b.n	8011f5a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d003      	beq.n	8011c20 <tcp_output+0xa4>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d111      	bne.n	8011c44 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d002      	beq.n	8011c2c <tcp_output+0xb0>
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	3304      	adds	r3, #4
 8011c2a:	e000      	b.n	8011c2e <tcp_output+0xb2>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d102      	bne.n	8011c3c <tcp_output+0xc0>
      return ERR_RTE;
 8011c36:	f06f 0303 	mvn.w	r3, #3
 8011c3a:	e18e      	b.n	8011f5a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7f9 fe3b 	bl	800b8c6 <lwip_htonl>
 8011c50:	4602      	mov	r2, r0
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c5a:	8912      	ldrh	r2, [r2, #8]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	69ba      	ldr	r2, [r7, #24]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d227      	bcs.n	8011cb4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	69bb      	ldr	r3, [r7, #24]
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d114      	bne.n	8011c9c <tcp_output+0x120>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d110      	bne.n	8011c9c <tcp_output+0x120>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d10b      	bne.n	8011c9c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2200      	movs	r2, #0
 8011c88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2201      	movs	r2, #1
 8011c90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2200      	movs	r2, #0
 8011c98:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	8b5b      	ldrh	r3, [r3, #26]
 8011ca0:	f003 0302 	and.w	r3, r3, #2
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	f000 814d 	beq.w	8011f44 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f000 fd6c 	bl	8012788 <tcp_send_empty_ack>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	e152      	b.n	8011f5a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cc0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011cc2:	6a3b      	ldr	r3, [r7, #32]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	f000 811c 	beq.w	8011f02 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011cca:	e002      	b.n	8011cd2 <tcp_output+0x156>
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	623b      	str	r3, [r7, #32]
 8011cd2:	6a3b      	ldr	r3, [r7, #32]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d1f8      	bne.n	8011ccc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011cda:	e112      	b.n	8011f02 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	899b      	ldrh	r3, [r3, #12]
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7f9 fdd9 	bl	800b89c <lwip_htons>
 8011cea:	4603      	mov	r3, r0
 8011cec:	b2db      	uxtb	r3, r3
 8011cee:	f003 0304 	and.w	r3, r3, #4
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d006      	beq.n	8011d04 <tcp_output+0x188>
 8011cf6:	4b2f      	ldr	r3, [pc, #188]	; (8011db4 <tcp_output+0x238>)
 8011cf8:	f240 5236 	movw	r2, #1334	; 0x536
 8011cfc:	4932      	ldr	r1, [pc, #200]	; (8011dc8 <tcp_output+0x24c>)
 8011cfe:	482f      	ldr	r0, [pc, #188]	; (8011dbc <tcp_output+0x240>)
 8011d00:	f004 fafe 	bl	8016300 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d01f      	beq.n	8011d4c <tcp_output+0x1d0>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	8b5b      	ldrh	r3, [r3, #26]
 8011d10:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d119      	bne.n	8011d4c <tcp_output+0x1d0>
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d00b      	beq.n	8011d38 <tcp_output+0x1bc>
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d110      	bne.n	8011d4c <tcp_output+0x1d0>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d2e:	891a      	ldrh	r2, [r3, #8]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d209      	bcs.n	8011d4c <tcp_output+0x1d0>
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d004      	beq.n	8011d4c <tcp_output+0x1d0>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d48:	2b08      	cmp	r3, #8
 8011d4a:	d901      	bls.n	8011d50 <tcp_output+0x1d4>
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	e000      	b.n	8011d52 <tcp_output+0x1d6>
 8011d50:	2300      	movs	r3, #0
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d106      	bne.n	8011d64 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	8b5b      	ldrh	r3, [r3, #26]
 8011d5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	f000 80e4 	beq.w	8011f2c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	7d1b      	ldrb	r3, [r3, #20]
 8011d68:	2b02      	cmp	r3, #2
 8011d6a:	d00d      	beq.n	8011d88 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	899b      	ldrh	r3, [r3, #12]
 8011d72:	b29c      	uxth	r4, r3
 8011d74:	2010      	movs	r0, #16
 8011d76:	f7f9 fd91 	bl	800b89c <lwip_htons>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	4322      	orrs	r2, r4
 8011d84:	b292      	uxth	r2, r2
 8011d86:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011d88:	697a      	ldr	r2, [r7, #20]
 8011d8a:	6879      	ldr	r1, [r7, #4]
 8011d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d8e:	f000 f909 	bl	8011fa4 <tcp_output_segment>
 8011d92:	4603      	mov	r3, r0
 8011d94:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d016      	beq.n	8011dcc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	8b5b      	ldrh	r3, [r3, #26]
 8011da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	835a      	strh	r2, [r3, #26]
      return err;
 8011dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011db0:	e0d3      	b.n	8011f5a <tcp_output+0x3de>
 8011db2:	bf00      	nop
 8011db4:	080192ec 	.word	0x080192ec
 8011db8:	08019830 	.word	0x08019830
 8011dbc:	08019340 	.word	0x08019340
 8011dc0:	08019848 	.word	0x08019848
 8011dc4:	2003049c 	.word	0x2003049c
 8011dc8:	08019870 	.word	0x08019870
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	7d1b      	ldrb	r3, [r3, #20]
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d006      	beq.n	8011dea <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	8b5b      	ldrh	r3, [r3, #26]
 8011de0:	f023 0303 	bic.w	r3, r3, #3
 8011de4:	b29a      	uxth	r2, r3
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7f9 fd68 	bl	800b8c6 <lwip_htonl>
 8011df6:	4604      	mov	r4, r0
 8011df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfa:	891b      	ldrh	r3, [r3, #8]
 8011dfc:	461d      	mov	r5, r3
 8011dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	899b      	ldrh	r3, [r3, #12]
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7f9 fd48 	bl	800b89c <lwip_htons>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	b2db      	uxtb	r3, r3
 8011e10:	f003 0303 	and.w	r3, r3, #3
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d001      	beq.n	8011e1c <tcp_output+0x2a0>
 8011e18:	2301      	movs	r3, #1
 8011e1a:	e000      	b.n	8011e1e <tcp_output+0x2a2>
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	442b      	add	r3, r5
 8011e20:	4423      	add	r3, r4
 8011e22:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	1ad3      	subs	r3, r2, r3
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	da02      	bge.n	8011e36 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	68ba      	ldr	r2, [r7, #8]
 8011e34:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e38:	891b      	ldrh	r3, [r3, #8]
 8011e3a:	461c      	mov	r4, r3
 8011e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	899b      	ldrh	r3, [r3, #12]
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	4618      	mov	r0, r3
 8011e46:	f7f9 fd29 	bl	800b89c <lwip_htons>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	b2db      	uxtb	r3, r3
 8011e4e:	f003 0303 	and.w	r3, r3, #3
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d001      	beq.n	8011e5a <tcp_output+0x2de>
 8011e56:	2301      	movs	r3, #1
 8011e58:	e000      	b.n	8011e5c <tcp_output+0x2e0>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	4423      	add	r3, r4
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d049      	beq.n	8011ef6 <tcp_output+0x37a>
      seg->next = NULL;
 8011e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e64:	2200      	movs	r2, #0
 8011e66:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d105      	bne.n	8011e7c <tcp_output+0x300>
        pcb->unacked = seg;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e74:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e78:	623b      	str	r3, [r7, #32]
 8011e7a:	e03f      	b.n	8011efc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7e:	68db      	ldr	r3, [r3, #12]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7f9 fd1f 	bl	800b8c6 <lwip_htonl>
 8011e88:	4604      	mov	r4, r0
 8011e8a:	6a3b      	ldr	r3, [r7, #32]
 8011e8c:	68db      	ldr	r3, [r3, #12]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7f9 fd18 	bl	800b8c6 <lwip_htonl>
 8011e96:	4603      	mov	r3, r0
 8011e98:	1ae3      	subs	r3, r4, r3
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	da24      	bge.n	8011ee8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	3370      	adds	r3, #112	; 0x70
 8011ea2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011ea4:	e002      	b.n	8011eac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011eac:	69fb      	ldr	r3, [r7, #28]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d011      	beq.n	8011ed8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	68db      	ldr	r3, [r3, #12]
 8011eba:	685b      	ldr	r3, [r3, #4]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7f9 fd02 	bl	800b8c6 <lwip_htonl>
 8011ec2:	4604      	mov	r4, r0
 8011ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec6:	68db      	ldr	r3, [r3, #12]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7f9 fcfb 	bl	800b8c6 <lwip_htonl>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	dbe6      	blt.n	8011ea6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	681a      	ldr	r2, [r3, #0]
 8011edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ede:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ee4:	601a      	str	r2, [r3, #0]
 8011ee6:	e009      	b.n	8011efc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011ee8:	6a3b      	ldr	r3, [r7, #32]
 8011eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011eee:	6a3b      	ldr	r3, [r7, #32]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	623b      	str	r3, [r7, #32]
 8011ef4:	e002      	b.n	8011efc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ef8:	f7fc fc3f 	bl	800e77a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f00:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d012      	beq.n	8011f2e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7f9 fcd9 	bl	800b8c6 <lwip_htonl>
 8011f14:	4602      	mov	r2, r0
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f1e:	8912      	ldrh	r2, [r2, #8]
 8011f20:	4413      	add	r3, r2
  while (seg != NULL &&
 8011f22:	69ba      	ldr	r2, [r7, #24]
 8011f24:	429a      	cmp	r2, r3
 8011f26:	f4bf aed9 	bcs.w	8011cdc <tcp_output+0x160>
 8011f2a:	e000      	b.n	8011f2e <tcp_output+0x3b2>
      break;
 8011f2c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d108      	bne.n	8011f48 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011f3e:	e004      	b.n	8011f4a <tcp_output+0x3ce>
    goto output_done;
 8011f40:	bf00      	nop
 8011f42:	e002      	b.n	8011f4a <tcp_output+0x3ce>
    goto output_done;
 8011f44:	bf00      	nop
 8011f46:	e000      	b.n	8011f4a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011f48:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	8b5b      	ldrh	r3, [r3, #26]
 8011f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f52:	b29a      	uxth	r2, r3
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3728      	adds	r7, #40	; 0x28
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bdb0      	pop	{r4, r5, r7, pc}
 8011f62:	bf00      	nop

08011f64 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d106      	bne.n	8011f80 <tcp_output_segment_busy+0x1c>
 8011f72:	4b09      	ldr	r3, [pc, #36]	; (8011f98 <tcp_output_segment_busy+0x34>)
 8011f74:	f240 529a 	movw	r2, #1434	; 0x59a
 8011f78:	4908      	ldr	r1, [pc, #32]	; (8011f9c <tcp_output_segment_busy+0x38>)
 8011f7a:	4809      	ldr	r0, [pc, #36]	; (8011fa0 <tcp_output_segment_busy+0x3c>)
 8011f7c:	f004 f9c0 	bl	8016300 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	7b9b      	ldrb	r3, [r3, #14]
 8011f86:	2b01      	cmp	r3, #1
 8011f88:	d001      	beq.n	8011f8e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	e000      	b.n	8011f90 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011f8e:	2300      	movs	r3, #0
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3708      	adds	r7, #8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	080192ec 	.word	0x080192ec
 8011f9c:	08019888 	.word	0x08019888
 8011fa0:	08019340 	.word	0x08019340

08011fa4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011fa4:	b5b0      	push	{r4, r5, r7, lr}
 8011fa6:	b08c      	sub	sp, #48	; 0x30
 8011fa8:	af04      	add	r7, sp, #16
 8011faa:	60f8      	str	r0, [r7, #12]
 8011fac:	60b9      	str	r1, [r7, #8]
 8011fae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d106      	bne.n	8011fc4 <tcp_output_segment+0x20>
 8011fb6:	4b63      	ldr	r3, [pc, #396]	; (8012144 <tcp_output_segment+0x1a0>)
 8011fb8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011fbc:	4962      	ldr	r1, [pc, #392]	; (8012148 <tcp_output_segment+0x1a4>)
 8011fbe:	4863      	ldr	r0, [pc, #396]	; (801214c <tcp_output_segment+0x1a8>)
 8011fc0:	f004 f99e 	bl	8016300 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d106      	bne.n	8011fd8 <tcp_output_segment+0x34>
 8011fca:	4b5e      	ldr	r3, [pc, #376]	; (8012144 <tcp_output_segment+0x1a0>)
 8011fcc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011fd0:	495f      	ldr	r1, [pc, #380]	; (8012150 <tcp_output_segment+0x1ac>)
 8011fd2:	485e      	ldr	r0, [pc, #376]	; (801214c <tcp_output_segment+0x1a8>)
 8011fd4:	f004 f994 	bl	8016300 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d106      	bne.n	8011fec <tcp_output_segment+0x48>
 8011fde:	4b59      	ldr	r3, [pc, #356]	; (8012144 <tcp_output_segment+0x1a0>)
 8011fe0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011fe4:	495b      	ldr	r1, [pc, #364]	; (8012154 <tcp_output_segment+0x1b0>)
 8011fe6:	4859      	ldr	r0, [pc, #356]	; (801214c <tcp_output_segment+0x1a8>)
 8011fe8:	f004 f98a 	bl	8016300 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011fec:	68f8      	ldr	r0, [r7, #12]
 8011fee:	f7ff ffb9 	bl	8011f64 <tcp_output_segment_busy>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d001      	beq.n	8011ffc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	e09f      	b.n	801213c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	68dc      	ldr	r4, [r3, #12]
 8012004:	4610      	mov	r0, r2
 8012006:	f7f9 fc5e 	bl	800b8c6 <lwip_htonl>
 801200a:	4603      	mov	r3, r0
 801200c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	68dc      	ldr	r4, [r3, #12]
 8012016:	4610      	mov	r0, r2
 8012018:	f7f9 fc40 	bl	800b89c <lwip_htons>
 801201c:	4603      	mov	r3, r0
 801201e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012024:	68ba      	ldr	r2, [r7, #8]
 8012026:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012028:	441a      	add	r2, r3
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	3314      	adds	r3, #20
 8012034:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	7a9b      	ldrb	r3, [r3, #10]
 801203a:	f003 0301 	and.w	r3, r3, #1
 801203e:	2b00      	cmp	r3, #0
 8012040:	d015      	beq.n	801206e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	3304      	adds	r3, #4
 8012046:	461a      	mov	r2, r3
 8012048:	6879      	ldr	r1, [r7, #4]
 801204a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801204e:	f7fc fe8b 	bl	800ed68 <tcp_eff_send_mss_netif>
 8012052:	4603      	mov	r3, r0
 8012054:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012056:	8b7b      	ldrh	r3, [r7, #26]
 8012058:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801205c:	4618      	mov	r0, r3
 801205e:	f7f9 fc32 	bl	800b8c6 <lwip_htonl>
 8012062:	4602      	mov	r2, r0
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	3304      	adds	r3, #4
 801206c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012074:	2b00      	cmp	r3, #0
 8012076:	da02      	bge.n	801207e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	2200      	movs	r2, #0
 801207c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012082:	2b00      	cmp	r3, #0
 8012084:	d10c      	bne.n	80120a0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012086:	4b34      	ldr	r3, [pc, #208]	; (8012158 <tcp_output_segment+0x1b4>)
 8012088:	681a      	ldr	r2, [r3, #0]
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	685b      	ldr	r3, [r3, #4]
 8012094:	4618      	mov	r0, r3
 8012096:	f7f9 fc16 	bl	800b8c6 <lwip_htonl>
 801209a:	4602      	mov	r2, r0
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	68da      	ldr	r2, [r3, #12]
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	1ad3      	subs	r3, r2, r3
 80120ac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	8959      	ldrh	r1, [r3, #10]
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	8b3a      	ldrh	r2, [r7, #24]
 80120ba:	1a8a      	subs	r2, r1, r2
 80120bc:	b292      	uxth	r2, r2
 80120be:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	8919      	ldrh	r1, [r3, #8]
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	8b3a      	ldrh	r2, [r7, #24]
 80120cc:	1a8a      	subs	r2, r1, r2
 80120ce:	b292      	uxth	r2, r2
 80120d0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	68fa      	ldr	r2, [r7, #12]
 80120d8:	68d2      	ldr	r2, [r2, #12]
 80120da:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	68db      	ldr	r3, [r3, #12]
 80120e0:	2200      	movs	r2, #0
 80120e2:	741a      	strb	r2, [r3, #16]
 80120e4:	2200      	movs	r2, #0
 80120e6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	f103 0214 	add.w	r2, r3, #20
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	7a9b      	ldrb	r3, [r3, #10]
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	f003 0304 	and.w	r3, r3, #4
 80120fa:	4413      	add	r3, r2
 80120fc:	69fa      	ldr	r2, [r7, #28]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d006      	beq.n	8012110 <tcp_output_segment+0x16c>
 8012102:	4b10      	ldr	r3, [pc, #64]	; (8012144 <tcp_output_segment+0x1a0>)
 8012104:	f240 621c 	movw	r2, #1564	; 0x61c
 8012108:	4914      	ldr	r1, [pc, #80]	; (801215c <tcp_output_segment+0x1b8>)
 801210a:	4810      	ldr	r0, [pc, #64]	; (801214c <tcp_output_segment+0x1a8>)
 801210c:	f004 f8f8 	bl	8016300 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	6858      	ldr	r0, [r3, #4]
 8012114:	68b9      	ldr	r1, [r7, #8]
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	1d1c      	adds	r4, r3, #4
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	7add      	ldrb	r5, [r3, #11]
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	7a9b      	ldrb	r3, [r3, #10]
 8012122:	687a      	ldr	r2, [r7, #4]
 8012124:	9202      	str	r2, [sp, #8]
 8012126:	2206      	movs	r2, #6
 8012128:	9201      	str	r2, [sp, #4]
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	462b      	mov	r3, r5
 801212e:	4622      	mov	r2, r4
 8012130:	f002 fd9c 	bl	8014c6c <ip4_output_if>
 8012134:	4603      	mov	r3, r0
 8012136:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801213c:	4618      	mov	r0, r3
 801213e:	3720      	adds	r7, #32
 8012140:	46bd      	mov	sp, r7
 8012142:	bdb0      	pop	{r4, r5, r7, pc}
 8012144:	080192ec 	.word	0x080192ec
 8012148:	080198b0 	.word	0x080198b0
 801214c:	08019340 	.word	0x08019340
 8012150:	080198d0 	.word	0x080198d0
 8012154:	080198f0 	.word	0x080198f0
 8012158:	20030450 	.word	0x20030450
 801215c:	08019914 	.word	0x08019914

08012160 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012160:	b5b0      	push	{r4, r5, r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d106      	bne.n	801217c <tcp_rexmit_rto_prepare+0x1c>
 801216e:	4b31      	ldr	r3, [pc, #196]	; (8012234 <tcp_rexmit_rto_prepare+0xd4>)
 8012170:	f240 6263 	movw	r2, #1635	; 0x663
 8012174:	4930      	ldr	r1, [pc, #192]	; (8012238 <tcp_rexmit_rto_prepare+0xd8>)
 8012176:	4831      	ldr	r0, [pc, #196]	; (801223c <tcp_rexmit_rto_prepare+0xdc>)
 8012178:	f004 f8c2 	bl	8016300 <iprintf>

  if (pcb->unacked == NULL) {
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012180:	2b00      	cmp	r3, #0
 8012182:	d102      	bne.n	801218a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012184:	f06f 0305 	mvn.w	r3, #5
 8012188:	e050      	b.n	801222c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801218e:	60fb      	str	r3, [r7, #12]
 8012190:	e00b      	b.n	80121aa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012192:	68f8      	ldr	r0, [r7, #12]
 8012194:	f7ff fee6 	bl	8011f64 <tcp_output_segment_busy>
 8012198:	4603      	mov	r3, r0
 801219a:	2b00      	cmp	r3, #0
 801219c:	d002      	beq.n	80121a4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801219e:	f06f 0305 	mvn.w	r3, #5
 80121a2:	e043      	b.n	801222c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	60fb      	str	r3, [r7, #12]
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d1ef      	bne.n	8012192 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80121b2:	68f8      	ldr	r0, [r7, #12]
 80121b4:	f7ff fed6 	bl	8011f64 <tcp_output_segment_busy>
 80121b8:	4603      	mov	r3, r0
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d002      	beq.n	80121c4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80121be:	f06f 0305 	mvn.w	r3, #5
 80121c2:	e033      	b.n	801222c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2200      	movs	r2, #0
 80121d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	8b5b      	ldrh	r3, [r3, #26]
 80121de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80121e2:	b29a      	uxth	r2, r3
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	68db      	ldr	r3, [r3, #12]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7f9 fb69 	bl	800b8c6 <lwip_htonl>
 80121f4:	4604      	mov	r4, r0
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	891b      	ldrh	r3, [r3, #8]
 80121fa:	461d      	mov	r5, r3
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	899b      	ldrh	r3, [r3, #12]
 8012202:	b29b      	uxth	r3, r3
 8012204:	4618      	mov	r0, r3
 8012206:	f7f9 fb49 	bl	800b89c <lwip_htons>
 801220a:	4603      	mov	r3, r0
 801220c:	b2db      	uxtb	r3, r3
 801220e:	f003 0303 	and.w	r3, r3, #3
 8012212:	2b00      	cmp	r3, #0
 8012214:	d001      	beq.n	801221a <tcp_rexmit_rto_prepare+0xba>
 8012216:	2301      	movs	r3, #1
 8012218:	e000      	b.n	801221c <tcp_rexmit_rto_prepare+0xbc>
 801221a:	2300      	movs	r3, #0
 801221c:	442b      	add	r3, r5
 801221e:	18e2      	adds	r2, r4, r3
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2200      	movs	r2, #0
 8012228:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801222a:	2300      	movs	r3, #0
}
 801222c:	4618      	mov	r0, r3
 801222e:	3710      	adds	r7, #16
 8012230:	46bd      	mov	sp, r7
 8012232:	bdb0      	pop	{r4, r5, r7, pc}
 8012234:	080192ec 	.word	0x080192ec
 8012238:	08019928 	.word	0x08019928
 801223c:	08019340 	.word	0x08019340

08012240 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d106      	bne.n	801225c <tcp_rexmit_rto_commit+0x1c>
 801224e:	4b0d      	ldr	r3, [pc, #52]	; (8012284 <tcp_rexmit_rto_commit+0x44>)
 8012250:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012254:	490c      	ldr	r1, [pc, #48]	; (8012288 <tcp_rexmit_rto_commit+0x48>)
 8012256:	480d      	ldr	r0, [pc, #52]	; (801228c <tcp_rexmit_rto_commit+0x4c>)
 8012258:	f004 f852 	bl	8016300 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012262:	2bff      	cmp	r3, #255	; 0xff
 8012264:	d007      	beq.n	8012276 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801226c:	3301      	adds	r3, #1
 801226e:	b2da      	uxtb	r2, r3
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7ff fc80 	bl	8011b7c <tcp_output>
}
 801227c:	bf00      	nop
 801227e:	3708      	adds	r7, #8
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}
 8012284:	080192ec 	.word	0x080192ec
 8012288:	0801994c 	.word	0x0801994c
 801228c:	08019340 	.word	0x08019340

08012290 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d106      	bne.n	80122ac <tcp_rexmit_rto+0x1c>
 801229e:	4b0a      	ldr	r3, [pc, #40]	; (80122c8 <tcp_rexmit_rto+0x38>)
 80122a0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80122a4:	4909      	ldr	r1, [pc, #36]	; (80122cc <tcp_rexmit_rto+0x3c>)
 80122a6:	480a      	ldr	r0, [pc, #40]	; (80122d0 <tcp_rexmit_rto+0x40>)
 80122a8:	f004 f82a 	bl	8016300 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f7ff ff57 	bl	8012160 <tcp_rexmit_rto_prepare>
 80122b2:	4603      	mov	r3, r0
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d102      	bne.n	80122be <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f7ff ffc1 	bl	8012240 <tcp_rexmit_rto_commit>
  }
}
 80122be:	bf00      	nop
 80122c0:	3708      	adds	r7, #8
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	080192ec 	.word	0x080192ec
 80122cc:	08019970 	.word	0x08019970
 80122d0:	08019340 	.word	0x08019340

080122d4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80122d4:	b590      	push	{r4, r7, lr}
 80122d6:	b085      	sub	sp, #20
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d106      	bne.n	80122f0 <tcp_rexmit+0x1c>
 80122e2:	4b2f      	ldr	r3, [pc, #188]	; (80123a0 <tcp_rexmit+0xcc>)
 80122e4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80122e8:	492e      	ldr	r1, [pc, #184]	; (80123a4 <tcp_rexmit+0xd0>)
 80122ea:	482f      	ldr	r0, [pc, #188]	; (80123a8 <tcp_rexmit+0xd4>)
 80122ec:	f004 f808 	bl	8016300 <iprintf>

  if (pcb->unacked == NULL) {
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d102      	bne.n	80122fe <tcp_rexmit+0x2a>
    return ERR_VAL;
 80122f8:	f06f 0305 	mvn.w	r3, #5
 80122fc:	e04c      	b.n	8012398 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012302:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012304:	68b8      	ldr	r0, [r7, #8]
 8012306:	f7ff fe2d 	bl	8011f64 <tcp_output_segment_busy>
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	d002      	beq.n	8012316 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012310:	f06f 0305 	mvn.w	r3, #5
 8012314:	e040      	b.n	8012398 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	681a      	ldr	r2, [r3, #0]
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	336c      	adds	r3, #108	; 0x6c
 8012322:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012324:	e002      	b.n	801232c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d011      	beq.n	8012358 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	4618      	mov	r0, r3
 801233e:	f7f9 fac2 	bl	800b8c6 <lwip_htonl>
 8012342:	4604      	mov	r4, r0
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	f7f9 fabb 	bl	800b8c6 <lwip_htonl>
 8012350:	4603      	mov	r3, r0
 8012352:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012354:	2b00      	cmp	r3, #0
 8012356:	dbe6      	blt.n	8012326 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	68ba      	ldr	r2, [r7, #8]
 8012364:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d103      	bne.n	8012376 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2200      	movs	r2, #0
 8012372:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801237c:	2bff      	cmp	r3, #255	; 0xff
 801237e:	d007      	beq.n	8012390 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012386:	3301      	adds	r3, #1
 8012388:	b2da      	uxtb	r2, r3
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012396:	2300      	movs	r3, #0
}
 8012398:	4618      	mov	r0, r3
 801239a:	3714      	adds	r7, #20
 801239c:	46bd      	mov	sp, r7
 801239e:	bd90      	pop	{r4, r7, pc}
 80123a0:	080192ec 	.word	0x080192ec
 80123a4:	0801998c 	.word	0x0801998c
 80123a8:	08019340 	.word	0x08019340

080123ac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d106      	bne.n	80123c8 <tcp_rexmit_fast+0x1c>
 80123ba:	4b2a      	ldr	r3, [pc, #168]	; (8012464 <tcp_rexmit_fast+0xb8>)
 80123bc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80123c0:	4929      	ldr	r1, [pc, #164]	; (8012468 <tcp_rexmit_fast+0xbc>)
 80123c2:	482a      	ldr	r0, [pc, #168]	; (801246c <tcp_rexmit_fast+0xc0>)
 80123c4:	f003 ff9c 	bl	8016300 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d045      	beq.n	801245c <tcp_rexmit_fast+0xb0>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	8b5b      	ldrh	r3, [r3, #26]
 80123d4:	f003 0304 	and.w	r3, r3, #4
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d13f      	bne.n	801245c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7ff ff79 	bl	80122d4 <tcp_rexmit>
 80123e2:	4603      	mov	r3, r0
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d139      	bne.n	801245c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80123f4:	4293      	cmp	r3, r2
 80123f6:	bf28      	it	cs
 80123f8:	4613      	movcs	r3, r2
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	da00      	bge.n	8012402 <tcp_rexmit_fast+0x56>
 8012400:	3301      	adds	r3, #1
 8012402:	105b      	asrs	r3, r3, #1
 8012404:	b29a      	uxth	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012412:	461a      	mov	r2, r3
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012418:	005b      	lsls	r3, r3, #1
 801241a:	429a      	cmp	r2, r3
 801241c:	d206      	bcs.n	801242c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	b29a      	uxth	r2, r3
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012436:	4619      	mov	r1, r3
 8012438:	0049      	lsls	r1, r1, #1
 801243a:	440b      	add	r3, r1
 801243c:	b29b      	uxth	r3, r3
 801243e:	4413      	add	r3, r2
 8012440:	b29a      	uxth	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	8b5b      	ldrh	r3, [r3, #26]
 801244c:	f043 0304 	orr.w	r3, r3, #4
 8012450:	b29a      	uxth	r2, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2200      	movs	r2, #0
 801245a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801245c:	bf00      	nop
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	080192ec 	.word	0x080192ec
 8012468:	080199a4 	.word	0x080199a4
 801246c:	08019340 	.word	0x08019340

08012470 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b086      	sub	sp, #24
 8012474:	af00      	add	r7, sp, #0
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	607b      	str	r3, [r7, #4]
 801247a:	460b      	mov	r3, r1
 801247c:	817b      	strh	r3, [r7, #10]
 801247e:	4613      	mov	r3, r2
 8012480:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012482:	897a      	ldrh	r2, [r7, #10]
 8012484:	893b      	ldrh	r3, [r7, #8]
 8012486:	4413      	add	r3, r2
 8012488:	b29b      	uxth	r3, r3
 801248a:	3314      	adds	r3, #20
 801248c:	b29b      	uxth	r3, r3
 801248e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012492:	4619      	mov	r1, r3
 8012494:	2022      	movs	r0, #34	; 0x22
 8012496:	f7fa fb0f 	bl	800cab8 <pbuf_alloc>
 801249a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d04d      	beq.n	801253e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80124a2:	897b      	ldrh	r3, [r7, #10]
 80124a4:	3313      	adds	r3, #19
 80124a6:	697a      	ldr	r2, [r7, #20]
 80124a8:	8952      	ldrh	r2, [r2, #10]
 80124aa:	4293      	cmp	r3, r2
 80124ac:	db06      	blt.n	80124bc <tcp_output_alloc_header_common+0x4c>
 80124ae:	4b26      	ldr	r3, [pc, #152]	; (8012548 <tcp_output_alloc_header_common+0xd8>)
 80124b0:	f240 7223 	movw	r2, #1827	; 0x723
 80124b4:	4925      	ldr	r1, [pc, #148]	; (801254c <tcp_output_alloc_header_common+0xdc>)
 80124b6:	4826      	ldr	r0, [pc, #152]	; (8012550 <tcp_output_alloc_header_common+0xe0>)
 80124b8:	f003 ff22 	bl	8016300 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80124c2:	8c3b      	ldrh	r3, [r7, #32]
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7f9 f9e9 	bl	800b89c <lwip_htons>
 80124ca:	4603      	mov	r3, r0
 80124cc:	461a      	mov	r2, r3
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80124d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7f9 f9e1 	bl	800b89c <lwip_htons>
 80124da:	4603      	mov	r3, r0
 80124dc:	461a      	mov	r2, r3
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80124e8:	68f8      	ldr	r0, [r7, #12]
 80124ea:	f7f9 f9ec 	bl	800b8c6 <lwip_htonl>
 80124ee:	4602      	mov	r2, r0
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80124f4:	897b      	ldrh	r3, [r7, #10]
 80124f6:	089b      	lsrs	r3, r3, #2
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	3305      	adds	r3, #5
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	031b      	lsls	r3, r3, #12
 8012500:	b29a      	uxth	r2, r3
 8012502:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012506:	b29b      	uxth	r3, r3
 8012508:	4313      	orrs	r3, r2
 801250a:	b29b      	uxth	r3, r3
 801250c:	4618      	mov	r0, r3
 801250e:	f7f9 f9c5 	bl	800b89c <lwip_htons>
 8012512:	4603      	mov	r3, r0
 8012514:	461a      	mov	r2, r3
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801251a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801251c:	4618      	mov	r0, r3
 801251e:	f7f9 f9bd 	bl	800b89c <lwip_htons>
 8012522:	4603      	mov	r3, r0
 8012524:	461a      	mov	r2, r3
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	2200      	movs	r2, #0
 801252e:	741a      	strb	r2, [r3, #16]
 8012530:	2200      	movs	r2, #0
 8012532:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	2200      	movs	r2, #0
 8012538:	749a      	strb	r2, [r3, #18]
 801253a:	2200      	movs	r2, #0
 801253c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801253e:	697b      	ldr	r3, [r7, #20]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3718      	adds	r7, #24
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	080192ec 	.word	0x080192ec
 801254c:	080199c4 	.word	0x080199c4
 8012550:	08019340 	.word	0x08019340

08012554 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012554:	b5b0      	push	{r4, r5, r7, lr}
 8012556:	b08a      	sub	sp, #40	; 0x28
 8012558:	af04      	add	r7, sp, #16
 801255a:	60f8      	str	r0, [r7, #12]
 801255c:	607b      	str	r3, [r7, #4]
 801255e:	460b      	mov	r3, r1
 8012560:	817b      	strh	r3, [r7, #10]
 8012562:	4613      	mov	r3, r2
 8012564:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d106      	bne.n	801257a <tcp_output_alloc_header+0x26>
 801256c:	4b15      	ldr	r3, [pc, #84]	; (80125c4 <tcp_output_alloc_header+0x70>)
 801256e:	f240 7242 	movw	r2, #1858	; 0x742
 8012572:	4915      	ldr	r1, [pc, #84]	; (80125c8 <tcp_output_alloc_header+0x74>)
 8012574:	4815      	ldr	r0, [pc, #84]	; (80125cc <tcp_output_alloc_header+0x78>)
 8012576:	f003 fec3 	bl	8016300 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	8adb      	ldrh	r3, [r3, #22]
 8012582:	68fa      	ldr	r2, [r7, #12]
 8012584:	8b12      	ldrh	r2, [r2, #24]
 8012586:	68f9      	ldr	r1, [r7, #12]
 8012588:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801258a:	893d      	ldrh	r5, [r7, #8]
 801258c:	897c      	ldrh	r4, [r7, #10]
 801258e:	9103      	str	r1, [sp, #12]
 8012590:	2110      	movs	r1, #16
 8012592:	9102      	str	r1, [sp, #8]
 8012594:	9201      	str	r2, [sp, #4]
 8012596:	9300      	str	r3, [sp, #0]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	462a      	mov	r2, r5
 801259c:	4621      	mov	r1, r4
 801259e:	f7ff ff67 	bl	8012470 <tcp_output_alloc_header_common>
 80125a2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d006      	beq.n	80125b8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ae:	68fa      	ldr	r2, [r7, #12]
 80125b0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80125b2:	441a      	add	r2, r3
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80125b8:	697b      	ldr	r3, [r7, #20]
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3718      	adds	r7, #24
 80125be:	46bd      	mov	sp, r7
 80125c0:	bdb0      	pop	{r4, r5, r7, pc}
 80125c2:	bf00      	nop
 80125c4:	080192ec 	.word	0x080192ec
 80125c8:	080199f4 	.word	0x080199f4
 80125cc:	08019340 	.word	0x08019340

080125d0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b088      	sub	sp, #32
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	60f8      	str	r0, [r7, #12]
 80125d8:	60b9      	str	r1, [r7, #8]
 80125da:	4611      	mov	r1, r2
 80125dc:	461a      	mov	r2, r3
 80125de:	460b      	mov	r3, r1
 80125e0:	71fb      	strb	r3, [r7, #7]
 80125e2:	4613      	mov	r3, r2
 80125e4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80125e6:	2300      	movs	r3, #0
 80125e8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d106      	bne.n	80125fe <tcp_output_fill_options+0x2e>
 80125f0:	4b13      	ldr	r3, [pc, #76]	; (8012640 <tcp_output_fill_options+0x70>)
 80125f2:	f240 7256 	movw	r2, #1878	; 0x756
 80125f6:	4913      	ldr	r1, [pc, #76]	; (8012644 <tcp_output_fill_options+0x74>)
 80125f8:	4813      	ldr	r0, [pc, #76]	; (8012648 <tcp_output_fill_options+0x78>)
 80125fa:	f003 fe81 	bl	8016300 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012604:	69bb      	ldr	r3, [r7, #24]
 8012606:	3314      	adds	r3, #20
 8012608:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	f103 0214 	add.w	r2, r3, #20
 8012610:	8bfb      	ldrh	r3, [r7, #30]
 8012612:	009b      	lsls	r3, r3, #2
 8012614:	4619      	mov	r1, r3
 8012616:	79fb      	ldrb	r3, [r7, #7]
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	f003 0304 	and.w	r3, r3, #4
 801261e:	440b      	add	r3, r1
 8012620:	4413      	add	r3, r2
 8012622:	697a      	ldr	r2, [r7, #20]
 8012624:	429a      	cmp	r2, r3
 8012626:	d006      	beq.n	8012636 <tcp_output_fill_options+0x66>
 8012628:	4b05      	ldr	r3, [pc, #20]	; (8012640 <tcp_output_fill_options+0x70>)
 801262a:	f240 7275 	movw	r2, #1909	; 0x775
 801262e:	4907      	ldr	r1, [pc, #28]	; (801264c <tcp_output_fill_options+0x7c>)
 8012630:	4805      	ldr	r0, [pc, #20]	; (8012648 <tcp_output_fill_options+0x78>)
 8012632:	f003 fe65 	bl	8016300 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012636:	bf00      	nop
 8012638:	3720      	adds	r7, #32
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	080192ec 	.word	0x080192ec
 8012644:	08019a1c 	.word	0x08019a1c
 8012648:	08019340 	.word	0x08019340
 801264c:	08019914 	.word	0x08019914

08012650 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b08a      	sub	sp, #40	; 0x28
 8012654:	af04      	add	r7, sp, #16
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
 801265c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d106      	bne.n	8012672 <tcp_output_control_segment+0x22>
 8012664:	4b1c      	ldr	r3, [pc, #112]	; (80126d8 <tcp_output_control_segment+0x88>)
 8012666:	f240 7287 	movw	r2, #1927	; 0x787
 801266a:	491c      	ldr	r1, [pc, #112]	; (80126dc <tcp_output_control_segment+0x8c>)
 801266c:	481c      	ldr	r0, [pc, #112]	; (80126e0 <tcp_output_control_segment+0x90>)
 801266e:	f003 fe47 	bl	8016300 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012672:	683a      	ldr	r2, [r7, #0]
 8012674:	6879      	ldr	r1, [r7, #4]
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f7fe ff40 	bl	80114fc <tcp_route>
 801267c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d102      	bne.n	801268a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012684:	23fc      	movs	r3, #252	; 0xfc
 8012686:	75fb      	strb	r3, [r7, #23]
 8012688:	e01c      	b.n	80126c4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d006      	beq.n	801269e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	7adb      	ldrb	r3, [r3, #11]
 8012694:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	7a9b      	ldrb	r3, [r3, #10]
 801269a:	757b      	strb	r3, [r7, #21]
 801269c:	e003      	b.n	80126a6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801269e:	23ff      	movs	r3, #255	; 0xff
 80126a0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80126a2:	2300      	movs	r3, #0
 80126a4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80126a6:	7dba      	ldrb	r2, [r7, #22]
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	9302      	str	r3, [sp, #8]
 80126ac:	2306      	movs	r3, #6
 80126ae:	9301      	str	r3, [sp, #4]
 80126b0:	7d7b      	ldrb	r3, [r7, #21]
 80126b2:	9300      	str	r3, [sp, #0]
 80126b4:	4613      	mov	r3, r2
 80126b6:	683a      	ldr	r2, [r7, #0]
 80126b8:	6879      	ldr	r1, [r7, #4]
 80126ba:	68b8      	ldr	r0, [r7, #8]
 80126bc:	f002 fad6 	bl	8014c6c <ip4_output_if>
 80126c0:	4603      	mov	r3, r0
 80126c2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80126c4:	68b8      	ldr	r0, [r7, #8]
 80126c6:	f7fa fcdb 	bl	800d080 <pbuf_free>
  return err;
 80126ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	3718      	adds	r7, #24
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	080192ec 	.word	0x080192ec
 80126dc:	08019a44 	.word	0x08019a44
 80126e0:	08019340 	.word	0x08019340

080126e4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80126e4:	b590      	push	{r4, r7, lr}
 80126e6:	b08b      	sub	sp, #44	; 0x2c
 80126e8:	af04      	add	r7, sp, #16
 80126ea:	60f8      	str	r0, [r7, #12]
 80126ec:	60b9      	str	r1, [r7, #8]
 80126ee:	607a      	str	r2, [r7, #4]
 80126f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d106      	bne.n	8012706 <tcp_rst+0x22>
 80126f8:	4b1f      	ldr	r3, [pc, #124]	; (8012778 <tcp_rst+0x94>)
 80126fa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80126fe:	491f      	ldr	r1, [pc, #124]	; (801277c <tcp_rst+0x98>)
 8012700:	481f      	ldr	r0, [pc, #124]	; (8012780 <tcp_rst+0x9c>)
 8012702:	f003 fdfd 	bl	8016300 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012708:	2b00      	cmp	r3, #0
 801270a:	d106      	bne.n	801271a <tcp_rst+0x36>
 801270c:	4b1a      	ldr	r3, [pc, #104]	; (8012778 <tcp_rst+0x94>)
 801270e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012712:	491c      	ldr	r1, [pc, #112]	; (8012784 <tcp_rst+0xa0>)
 8012714:	481a      	ldr	r0, [pc, #104]	; (8012780 <tcp_rst+0x9c>)
 8012716:	f003 fdf3 	bl	8016300 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801271a:	2300      	movs	r3, #0
 801271c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801271e:	f246 0308 	movw	r3, #24584	; 0x6008
 8012722:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012724:	7dfb      	ldrb	r3, [r7, #23]
 8012726:	b29c      	uxth	r4, r3
 8012728:	68b8      	ldr	r0, [r7, #8]
 801272a:	f7f9 f8cc 	bl	800b8c6 <lwip_htonl>
 801272e:	4602      	mov	r2, r0
 8012730:	8abb      	ldrh	r3, [r7, #20]
 8012732:	9303      	str	r3, [sp, #12]
 8012734:	2314      	movs	r3, #20
 8012736:	9302      	str	r3, [sp, #8]
 8012738:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801273a:	9301      	str	r3, [sp, #4]
 801273c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801273e:	9300      	str	r3, [sp, #0]
 8012740:	4613      	mov	r3, r2
 8012742:	2200      	movs	r2, #0
 8012744:	4621      	mov	r1, r4
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f7ff fe92 	bl	8012470 <tcp_output_alloc_header_common>
 801274c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00c      	beq.n	801276e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012754:	7dfb      	ldrb	r3, [r7, #23]
 8012756:	2200      	movs	r2, #0
 8012758:	6939      	ldr	r1, [r7, #16]
 801275a:	68f8      	ldr	r0, [r7, #12]
 801275c:	f7ff ff38 	bl	80125d0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012762:	683a      	ldr	r2, [r7, #0]
 8012764:	6939      	ldr	r1, [r7, #16]
 8012766:	68f8      	ldr	r0, [r7, #12]
 8012768:	f7ff ff72 	bl	8012650 <tcp_output_control_segment>
 801276c:	e000      	b.n	8012770 <tcp_rst+0x8c>
    return;
 801276e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012770:	371c      	adds	r7, #28
 8012772:	46bd      	mov	sp, r7
 8012774:	bd90      	pop	{r4, r7, pc}
 8012776:	bf00      	nop
 8012778:	080192ec 	.word	0x080192ec
 801277c:	08019a70 	.word	0x08019a70
 8012780:	08019340 	.word	0x08019340
 8012784:	08019a8c 	.word	0x08019a8c

08012788 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012788:	b590      	push	{r4, r7, lr}
 801278a:	b087      	sub	sp, #28
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012790:	2300      	movs	r3, #0
 8012792:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012794:	2300      	movs	r3, #0
 8012796:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d106      	bne.n	80127ac <tcp_send_empty_ack+0x24>
 801279e:	4b28      	ldr	r3, [pc, #160]	; (8012840 <tcp_send_empty_ack+0xb8>)
 80127a0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80127a4:	4927      	ldr	r1, [pc, #156]	; (8012844 <tcp_send_empty_ack+0xbc>)
 80127a6:	4828      	ldr	r0, [pc, #160]	; (8012848 <tcp_send_empty_ack+0xc0>)
 80127a8:	f003 fdaa 	bl	8016300 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80127ac:	7dfb      	ldrb	r3, [r7, #23]
 80127ae:	009b      	lsls	r3, r3, #2
 80127b0:	b2db      	uxtb	r3, r3
 80127b2:	f003 0304 	and.w	r3, r3, #4
 80127b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80127b8:	7d7b      	ldrb	r3, [r7, #21]
 80127ba:	b29c      	uxth	r4, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7f9 f880 	bl	800b8c6 <lwip_htonl>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2200      	movs	r2, #0
 80127ca:	4621      	mov	r1, r4
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f7ff fec1 	bl	8012554 <tcp_output_alloc_header>
 80127d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d109      	bne.n	80127ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	8b5b      	ldrh	r3, [r3, #26]
 80127de:	f043 0303 	orr.w	r3, r3, #3
 80127e2:	b29a      	uxth	r2, r3
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80127e8:	f06f 0301 	mvn.w	r3, #1
 80127ec:	e023      	b.n	8012836 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80127ee:	7dbb      	ldrb	r3, [r7, #22]
 80127f0:	7dfa      	ldrb	r2, [r7, #23]
 80127f2:	6939      	ldr	r1, [r7, #16]
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7ff feeb 	bl	80125d0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	3304      	adds	r3, #4
 8012800:	6939      	ldr	r1, [r7, #16]
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f7ff ff24 	bl	8012650 <tcp_output_control_segment>
 8012808:	4603      	mov	r3, r0
 801280a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801280c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d007      	beq.n	8012824 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	8b5b      	ldrh	r3, [r3, #26]
 8012818:	f043 0303 	orr.w	r3, r3, #3
 801281c:	b29a      	uxth	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	835a      	strh	r2, [r3, #26]
 8012822:	e006      	b.n	8012832 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	8b5b      	ldrh	r3, [r3, #26]
 8012828:	f023 0303 	bic.w	r3, r3, #3
 801282c:	b29a      	uxth	r2, r3
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012832:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012836:	4618      	mov	r0, r3
 8012838:	371c      	adds	r7, #28
 801283a:	46bd      	mov	sp, r7
 801283c:	bd90      	pop	{r4, r7, pc}
 801283e:	bf00      	nop
 8012840:	080192ec 	.word	0x080192ec
 8012844:	08019aa8 	.word	0x08019aa8
 8012848:	08019340 	.word	0x08019340

0801284c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801284c:	b590      	push	{r4, r7, lr}
 801284e:	b087      	sub	sp, #28
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012854:	2300      	movs	r3, #0
 8012856:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d106      	bne.n	801286c <tcp_keepalive+0x20>
 801285e:	4b18      	ldr	r3, [pc, #96]	; (80128c0 <tcp_keepalive+0x74>)
 8012860:	f640 0224 	movw	r2, #2084	; 0x824
 8012864:	4917      	ldr	r1, [pc, #92]	; (80128c4 <tcp_keepalive+0x78>)
 8012866:	4818      	ldr	r0, [pc, #96]	; (80128c8 <tcp_keepalive+0x7c>)
 8012868:	f003 fd4a 	bl	8016300 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801286c:	7dfb      	ldrb	r3, [r7, #23]
 801286e:	b29c      	uxth	r4, r3
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012874:	3b01      	subs	r3, #1
 8012876:	4618      	mov	r0, r3
 8012878:	f7f9 f825 	bl	800b8c6 <lwip_htonl>
 801287c:	4603      	mov	r3, r0
 801287e:	2200      	movs	r2, #0
 8012880:	4621      	mov	r1, r4
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f7ff fe66 	bl	8012554 <tcp_output_alloc_header>
 8012888:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d102      	bne.n	8012896 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012894:	e010      	b.n	80128b8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012896:	7dfb      	ldrb	r3, [r7, #23]
 8012898:	2200      	movs	r2, #0
 801289a:	6939      	ldr	r1, [r7, #16]
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f7ff fe97 	bl	80125d0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80128a2:	687a      	ldr	r2, [r7, #4]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	3304      	adds	r3, #4
 80128a8:	6939      	ldr	r1, [r7, #16]
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f7ff fed0 	bl	8012650 <tcp_output_control_segment>
 80128b0:	4603      	mov	r3, r0
 80128b2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80128b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	371c      	adds	r7, #28
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd90      	pop	{r4, r7, pc}
 80128c0:	080192ec 	.word	0x080192ec
 80128c4:	08019ac8 	.word	0x08019ac8
 80128c8:	08019340 	.word	0x08019340

080128cc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80128cc:	b590      	push	{r4, r7, lr}
 80128ce:	b08b      	sub	sp, #44	; 0x2c
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80128d4:	2300      	movs	r3, #0
 80128d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d106      	bne.n	80128ee <tcp_zero_window_probe+0x22>
 80128e0:	4b4c      	ldr	r3, [pc, #304]	; (8012a14 <tcp_zero_window_probe+0x148>)
 80128e2:	f640 024f 	movw	r2, #2127	; 0x84f
 80128e6:	494c      	ldr	r1, [pc, #304]	; (8012a18 <tcp_zero_window_probe+0x14c>)
 80128e8:	484c      	ldr	r0, [pc, #304]	; (8012a1c <tcp_zero_window_probe+0x150>)
 80128ea:	f003 fd09 	bl	8016300 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128f2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80128f4:	6a3b      	ldr	r3, [r7, #32]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d101      	bne.n	80128fe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80128fa:	2300      	movs	r3, #0
 80128fc:	e086      	b.n	8012a0c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012904:	2bff      	cmp	r3, #255	; 0xff
 8012906:	d007      	beq.n	8012918 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801290e:	3301      	adds	r3, #1
 8012910:	b2da      	uxtb	r2, r3
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012918:	6a3b      	ldr	r3, [r7, #32]
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	899b      	ldrh	r3, [r3, #12]
 801291e:	b29b      	uxth	r3, r3
 8012920:	4618      	mov	r0, r3
 8012922:	f7f8 ffbb 	bl	800b89c <lwip_htons>
 8012926:	4603      	mov	r3, r0
 8012928:	b2db      	uxtb	r3, r3
 801292a:	f003 0301 	and.w	r3, r3, #1
 801292e:	2b00      	cmp	r3, #0
 8012930:	d005      	beq.n	801293e <tcp_zero_window_probe+0x72>
 8012932:	6a3b      	ldr	r3, [r7, #32]
 8012934:	891b      	ldrh	r3, [r3, #8]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d101      	bne.n	801293e <tcp_zero_window_probe+0x72>
 801293a:	2301      	movs	r3, #1
 801293c:	e000      	b.n	8012940 <tcp_zero_window_probe+0x74>
 801293e:	2300      	movs	r3, #0
 8012940:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012942:	7ffb      	ldrb	r3, [r7, #31]
 8012944:	2b00      	cmp	r3, #0
 8012946:	bf0c      	ite	eq
 8012948:	2301      	moveq	r3, #1
 801294a:	2300      	movne	r3, #0
 801294c:	b2db      	uxtb	r3, r3
 801294e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012954:	b299      	uxth	r1, r3
 8012956:	6a3b      	ldr	r3, [r7, #32]
 8012958:	68db      	ldr	r3, [r3, #12]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	8bba      	ldrh	r2, [r7, #28]
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f7ff fdf8 	bl	8012554 <tcp_output_alloc_header>
 8012964:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012966:	69bb      	ldr	r3, [r7, #24]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d102      	bne.n	8012972 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801296c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012970:	e04c      	b.n	8012a0c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012972:	69bb      	ldr	r3, [r7, #24]
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012978:	7ffb      	ldrb	r3, [r7, #31]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d011      	beq.n	80129a2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	899b      	ldrh	r3, [r3, #12]
 8012982:	b29b      	uxth	r3, r3
 8012984:	b21b      	sxth	r3, r3
 8012986:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801298a:	b21c      	sxth	r4, r3
 801298c:	2011      	movs	r0, #17
 801298e:	f7f8 ff85 	bl	800b89c <lwip_htons>
 8012992:	4603      	mov	r3, r0
 8012994:	b21b      	sxth	r3, r3
 8012996:	4323      	orrs	r3, r4
 8012998:	b21b      	sxth	r3, r3
 801299a:	b29a      	uxth	r2, r3
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	819a      	strh	r2, [r3, #12]
 80129a0:	e010      	b.n	80129c4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80129a2:	69bb      	ldr	r3, [r7, #24]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	3314      	adds	r3, #20
 80129a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80129aa:	6a3b      	ldr	r3, [r7, #32]
 80129ac:	6858      	ldr	r0, [r3, #4]
 80129ae:	6a3b      	ldr	r3, [r7, #32]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	891a      	ldrh	r2, [r3, #8]
 80129b4:	6a3b      	ldr	r3, [r7, #32]
 80129b6:	891b      	ldrh	r3, [r3, #8]
 80129b8:	1ad3      	subs	r3, r2, r3
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	2201      	movs	r2, #1
 80129be:	6939      	ldr	r1, [r7, #16]
 80129c0:	f7fa fd64 	bl	800d48c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80129c4:	6a3b      	ldr	r3, [r7, #32]
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7f8 ff7b 	bl	800b8c6 <lwip_htonl>
 80129d0:	4603      	mov	r3, r0
 80129d2:	3301      	adds	r3, #1
 80129d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	1ad3      	subs	r3, r2, r3
 80129de:	2b00      	cmp	r3, #0
 80129e0:	da02      	bge.n	80129e8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	68fa      	ldr	r2, [r7, #12]
 80129e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80129e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129ec:	2200      	movs	r2, #0
 80129ee:	69b9      	ldr	r1, [r7, #24]
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f7ff fded 	bl	80125d0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	3304      	adds	r3, #4
 80129fc:	69b9      	ldr	r1, [r7, #24]
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f7ff fe26 	bl	8012650 <tcp_output_control_segment>
 8012a04:	4603      	mov	r3, r0
 8012a06:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012a08:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	372c      	adds	r7, #44	; 0x2c
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd90      	pop	{r4, r7, pc}
 8012a14:	080192ec 	.word	0x080192ec
 8012a18:	08019ae4 	.word	0x08019ae4
 8012a1c:	08019340 	.word	0x08019340

08012a20 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012a28:	f7fa ff0c 	bl	800d844 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012a2c:	4b0a      	ldr	r3, [pc, #40]	; (8012a58 <tcpip_tcp_timer+0x38>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d103      	bne.n	8012a3c <tcpip_tcp_timer+0x1c>
 8012a34:	4b09      	ldr	r3, [pc, #36]	; (8012a5c <tcpip_tcp_timer+0x3c>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d005      	beq.n	8012a48 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	4908      	ldr	r1, [pc, #32]	; (8012a60 <tcpip_tcp_timer+0x40>)
 8012a40:	20fa      	movs	r0, #250	; 0xfa
 8012a42:	f000 f8f3 	bl	8012c2c <sys_timeout>
 8012a46:	e003      	b.n	8012a50 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012a48:	4b06      	ldr	r3, [pc, #24]	; (8012a64 <tcpip_tcp_timer+0x44>)
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	601a      	str	r2, [r3, #0]
  }
}
 8012a4e:	bf00      	nop
 8012a50:	bf00      	nop
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	2003045c 	.word	0x2003045c
 8012a5c:	20030460 	.word	0x20030460
 8012a60:	08012a21 	.word	0x08012a21
 8012a64:	200304a8 	.word	0x200304a8

08012a68 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012a6c:	4b0a      	ldr	r3, [pc, #40]	; (8012a98 <tcp_timer_needed+0x30>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d10f      	bne.n	8012a94 <tcp_timer_needed+0x2c>
 8012a74:	4b09      	ldr	r3, [pc, #36]	; (8012a9c <tcp_timer_needed+0x34>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d103      	bne.n	8012a84 <tcp_timer_needed+0x1c>
 8012a7c:	4b08      	ldr	r3, [pc, #32]	; (8012aa0 <tcp_timer_needed+0x38>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d007      	beq.n	8012a94 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012a84:	4b04      	ldr	r3, [pc, #16]	; (8012a98 <tcp_timer_needed+0x30>)
 8012a86:	2201      	movs	r2, #1
 8012a88:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	4905      	ldr	r1, [pc, #20]	; (8012aa4 <tcp_timer_needed+0x3c>)
 8012a8e:	20fa      	movs	r0, #250	; 0xfa
 8012a90:	f000 f8cc 	bl	8012c2c <sys_timeout>
  }
}
 8012a94:	bf00      	nop
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	200304a8 	.word	0x200304a8
 8012a9c:	2003045c 	.word	0x2003045c
 8012aa0:	20030460 	.word	0x20030460
 8012aa4:	08012a21 	.word	0x08012a21

08012aa8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012ab4:	200a      	movs	r0, #10
 8012ab6:	f7f9 fbc9 	bl	800c24c <memp_malloc>
 8012aba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012abc:	693b      	ldr	r3, [r7, #16]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d109      	bne.n	8012ad6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d151      	bne.n	8012b6c <sys_timeout_abs+0xc4>
 8012ac8:	4b2a      	ldr	r3, [pc, #168]	; (8012b74 <sys_timeout_abs+0xcc>)
 8012aca:	22be      	movs	r2, #190	; 0xbe
 8012acc:	492a      	ldr	r1, [pc, #168]	; (8012b78 <sys_timeout_abs+0xd0>)
 8012ace:	482b      	ldr	r0, [pc, #172]	; (8012b7c <sys_timeout_abs+0xd4>)
 8012ad0:	f003 fc16 	bl	8016300 <iprintf>
    return;
 8012ad4:	e04a      	b.n	8012b6c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	68ba      	ldr	r2, [r7, #8]
 8012ae0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	687a      	ldr	r2, [r7, #4]
 8012ae6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	68fa      	ldr	r2, [r7, #12]
 8012aec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012aee:	4b24      	ldr	r3, [pc, #144]	; (8012b80 <sys_timeout_abs+0xd8>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d103      	bne.n	8012afe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012af6:	4a22      	ldr	r2, [pc, #136]	; (8012b80 <sys_timeout_abs+0xd8>)
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	6013      	str	r3, [r2, #0]
    return;
 8012afc:	e037      	b.n	8012b6e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	685a      	ldr	r2, [r3, #4]
 8012b02:	4b1f      	ldr	r3, [pc, #124]	; (8012b80 <sys_timeout_abs+0xd8>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	1ad3      	subs	r3, r2, r3
 8012b0a:	0fdb      	lsrs	r3, r3, #31
 8012b0c:	f003 0301 	and.w	r3, r3, #1
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d007      	beq.n	8012b26 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012b16:	4b1a      	ldr	r3, [pc, #104]	; (8012b80 <sys_timeout_abs+0xd8>)
 8012b18:	681a      	ldr	r2, [r3, #0]
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012b1e:	4a18      	ldr	r2, [pc, #96]	; (8012b80 <sys_timeout_abs+0xd8>)
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	6013      	str	r3, [r2, #0]
 8012b24:	e023      	b.n	8012b6e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012b26:	4b16      	ldr	r3, [pc, #88]	; (8012b80 <sys_timeout_abs+0xd8>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	617b      	str	r3, [r7, #20]
 8012b2c:	e01a      	b.n	8012b64 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d00b      	beq.n	8012b4e <sys_timeout_abs+0xa6>
 8012b36:	693b      	ldr	r3, [r7, #16]
 8012b38:	685a      	ldr	r2, [r3, #4]
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	1ad3      	subs	r3, r2, r3
 8012b42:	0fdb      	lsrs	r3, r3, #31
 8012b44:	f003 0301 	and.w	r3, r3, #1
 8012b48:	b2db      	uxtb	r3, r3
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d007      	beq.n	8012b5e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	681a      	ldr	r2, [r3, #0]
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	693a      	ldr	r2, [r7, #16]
 8012b5a:	601a      	str	r2, [r3, #0]
        break;
 8012b5c:	e007      	b.n	8012b6e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	617b      	str	r3, [r7, #20]
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d1e1      	bne.n	8012b2e <sys_timeout_abs+0x86>
 8012b6a:	e000      	b.n	8012b6e <sys_timeout_abs+0xc6>
    return;
 8012b6c:	bf00      	nop
      }
    }
  }
}
 8012b6e:	3718      	adds	r7, #24
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}
 8012b74:	08019b08 	.word	0x08019b08
 8012b78:	08019b3c 	.word	0x08019b3c
 8012b7c:	08019b7c 	.word	0x08019b7c
 8012b80:	200304a0 	.word	0x200304a0

08012b84 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b086      	sub	sp, #24
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	4798      	blx	r3

  now = sys_now();
 8012b96:	f7f4 fe4f 	bl	8007838 <sys_now>
 8012b9a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	4b0f      	ldr	r3, [pc, #60]	; (8012be0 <lwip_cyclic_timer+0x5c>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	4413      	add	r3, r2
 8012ba6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	1ad3      	subs	r3, r2, r3
 8012bae:	0fdb      	lsrs	r3, r3, #31
 8012bb0:	f003 0301 	and.w	r3, r3, #1
 8012bb4:	b2db      	uxtb	r3, r3
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d009      	beq.n	8012bce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	681a      	ldr	r2, [r3, #0]
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	687a      	ldr	r2, [r7, #4]
 8012bc4:	4907      	ldr	r1, [pc, #28]	; (8012be4 <lwip_cyclic_timer+0x60>)
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff ff6e 	bl	8012aa8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012bcc:	e004      	b.n	8012bd8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	4904      	ldr	r1, [pc, #16]	; (8012be4 <lwip_cyclic_timer+0x60>)
 8012bd2:	68f8      	ldr	r0, [r7, #12]
 8012bd4:	f7ff ff68 	bl	8012aa8 <sys_timeout_abs>
}
 8012bd8:	bf00      	nop
 8012bda:	3718      	adds	r7, #24
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	200304a4 	.word	0x200304a4
 8012be4:	08012b85 	.word	0x08012b85

08012be8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012bee:	2301      	movs	r3, #1
 8012bf0:	607b      	str	r3, [r7, #4]
 8012bf2:	e00e      	b.n	8012c12 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012bf4:	4a0b      	ldr	r2, [pc, #44]	; (8012c24 <sys_timeouts_init+0x3c>)
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	00db      	lsls	r3, r3, #3
 8012c00:	4a08      	ldr	r2, [pc, #32]	; (8012c24 <sys_timeouts_init+0x3c>)
 8012c02:	4413      	add	r3, r2
 8012c04:	461a      	mov	r2, r3
 8012c06:	4908      	ldr	r1, [pc, #32]	; (8012c28 <sys_timeouts_init+0x40>)
 8012c08:	f000 f810 	bl	8012c2c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	3301      	adds	r3, #1
 8012c10:	607b      	str	r3, [r7, #4]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2b02      	cmp	r3, #2
 8012c16:	d9ed      	bls.n	8012bf4 <sys_timeouts_init+0xc>
  }
}
 8012c18:	bf00      	nop
 8012c1a:	bf00      	nop
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	0801a734 	.word	0x0801a734
 8012c28:	08012b85 	.word	0x08012b85

08012c2c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b086      	sub	sp, #24
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	60f8      	str	r0, [r7, #12]
 8012c34:	60b9      	str	r1, [r7, #8]
 8012c36:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c3e:	d306      	bcc.n	8012c4e <sys_timeout+0x22>
 8012c40:	4b0a      	ldr	r3, [pc, #40]	; (8012c6c <sys_timeout+0x40>)
 8012c42:	f240 1229 	movw	r2, #297	; 0x129
 8012c46:	490a      	ldr	r1, [pc, #40]	; (8012c70 <sys_timeout+0x44>)
 8012c48:	480a      	ldr	r0, [pc, #40]	; (8012c74 <sys_timeout+0x48>)
 8012c4a:	f003 fb59 	bl	8016300 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012c4e:	f7f4 fdf3 	bl	8007838 <sys_now>
 8012c52:	4602      	mov	r2, r0
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	4413      	add	r3, r2
 8012c58:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	68b9      	ldr	r1, [r7, #8]
 8012c5e:	6978      	ldr	r0, [r7, #20]
 8012c60:	f7ff ff22 	bl	8012aa8 <sys_timeout_abs>
#endif
}
 8012c64:	bf00      	nop
 8012c66:	3718      	adds	r7, #24
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}
 8012c6c:	08019b08 	.word	0x08019b08
 8012c70:	08019ba4 	.word	0x08019ba4
 8012c74:	08019b7c 	.word	0x08019b7c

08012c78 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b084      	sub	sp, #16
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012c82:	4b19      	ldr	r3, [pc, #100]	; (8012ce8 <sys_untimeout+0x70>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d029      	beq.n	8012cde <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8012c8a:	4b17      	ldr	r3, [pc, #92]	; (8012ce8 <sys_untimeout+0x70>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	60bb      	str	r3, [r7, #8]
 8012c90:	2300      	movs	r3, #0
 8012c92:	60fb      	str	r3, [r7, #12]
 8012c94:	e01f      	b.n	8012cd6 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	689b      	ldr	r3, [r3, #8]
 8012c9a:	687a      	ldr	r2, [r7, #4]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d115      	bne.n	8012ccc <sys_untimeout+0x54>
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	68db      	ldr	r3, [r3, #12]
 8012ca4:	683a      	ldr	r2, [r7, #0]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d110      	bne.n	8012ccc <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d104      	bne.n	8012cba <sys_untimeout+0x42>
        next_timeout = t->next;
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4a0c      	ldr	r2, [pc, #48]	; (8012ce8 <sys_untimeout+0x70>)
 8012cb6:	6013      	str	r3, [r2, #0]
 8012cb8:	e003      	b.n	8012cc2 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	681a      	ldr	r2, [r3, #0]
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8012cc2:	68b9      	ldr	r1, [r7, #8]
 8012cc4:	200a      	movs	r0, #10
 8012cc6:	f7f9 fb37 	bl	800c338 <memp_free>
      return;
 8012cca:	e009      	b.n	8012ce0 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	60fb      	str	r3, [r7, #12]
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	60bb      	str	r3, [r7, #8]
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d1dc      	bne.n	8012c96 <sys_untimeout+0x1e>
    }
  }
  return;
 8012cdc:	e000      	b.n	8012ce0 <sys_untimeout+0x68>
    return;
 8012cde:	bf00      	nop
}
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	200304a0 	.word	0x200304a0

08012cec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b084      	sub	sp, #16
 8012cf0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012cf2:	f7f4 fda1 	bl	8007838 <sys_now>
 8012cf6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012cf8:	4b17      	ldr	r3, [pc, #92]	; (8012d58 <sys_check_timeouts+0x6c>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d022      	beq.n	8012d4a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	68fa      	ldr	r2, [r7, #12]
 8012d0a:	1ad3      	subs	r3, r2, r3
 8012d0c:	0fdb      	lsrs	r3, r3, #31
 8012d0e:	f003 0301 	and.w	r3, r3, #1
 8012d12:	b2db      	uxtb	r3, r3
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d11a      	bne.n	8012d4e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4a0e      	ldr	r2, [pc, #56]	; (8012d58 <sys_check_timeouts+0x6c>)
 8012d1e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	689b      	ldr	r3, [r3, #8]
 8012d24:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	68db      	ldr	r3, [r3, #12]
 8012d2a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	4a0a      	ldr	r2, [pc, #40]	; (8012d5c <sys_check_timeouts+0x70>)
 8012d32:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012d34:	68b9      	ldr	r1, [r7, #8]
 8012d36:	200a      	movs	r0, #10
 8012d38:	f7f9 fafe 	bl	800c338 <memp_free>
    if (handler != NULL) {
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d0da      	beq.n	8012cf8 <sys_check_timeouts+0xc>
      handler(arg);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6838      	ldr	r0, [r7, #0]
 8012d46:	4798      	blx	r3
  do {
 8012d48:	e7d6      	b.n	8012cf8 <sys_check_timeouts+0xc>
      return;
 8012d4a:	bf00      	nop
 8012d4c:	e000      	b.n	8012d50 <sys_check_timeouts+0x64>
      return;
 8012d4e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012d50:	3710      	adds	r7, #16
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	200304a0 	.word	0x200304a0
 8012d5c:	200304a4 	.word	0x200304a4

08012d60 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012d66:	4b16      	ldr	r3, [pc, #88]	; (8012dc0 <sys_timeouts_sleeptime+0x60>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d102      	bne.n	8012d74 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d72:	e020      	b.n	8012db6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012d74:	f7f4 fd60 	bl	8007838 <sys_now>
 8012d78:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012d7a:	4b11      	ldr	r3, [pc, #68]	; (8012dc0 <sys_timeouts_sleeptime+0x60>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	685a      	ldr	r2, [r3, #4]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	1ad3      	subs	r3, r2, r3
 8012d84:	0fdb      	lsrs	r3, r3, #31
 8012d86:	f003 0301 	and.w	r3, r3, #1
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d001      	beq.n	8012d94 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012d90:	2300      	movs	r3, #0
 8012d92:	e010      	b.n	8012db6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012d94:	4b0a      	ldr	r3, [pc, #40]	; (8012dc0 <sys_timeouts_sleeptime+0x60>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	685a      	ldr	r2, [r3, #4]
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	1ad3      	subs	r3, r2, r3
 8012d9e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	da06      	bge.n	8012db4 <sys_timeouts_sleeptime+0x54>
 8012da6:	4b07      	ldr	r3, [pc, #28]	; (8012dc4 <sys_timeouts_sleeptime+0x64>)
 8012da8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012dac:	4906      	ldr	r1, [pc, #24]	; (8012dc8 <sys_timeouts_sleeptime+0x68>)
 8012dae:	4807      	ldr	r0, [pc, #28]	; (8012dcc <sys_timeouts_sleeptime+0x6c>)
 8012db0:	f003 faa6 	bl	8016300 <iprintf>
    return ret;
 8012db4:	683b      	ldr	r3, [r7, #0]
  }
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3708      	adds	r7, #8
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	200304a0 	.word	0x200304a0
 8012dc4:	08019b08 	.word	0x08019b08
 8012dc8:	08019bdc 	.word	0x08019bdc
 8012dcc:	08019b7c 	.word	0x08019b7c

08012dd0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012dd4:	f003 fb22 	bl	801641c <rand>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012de0:	b29b      	uxth	r3, r3
 8012de2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	4b01      	ldr	r3, [pc, #4]	; (8012df0 <udp_init+0x20>)
 8012dea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012dec:	bf00      	nop
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	20000030 	.word	0x20000030

08012df4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012df4:	b480      	push	{r7}
 8012df6:	b083      	sub	sp, #12
 8012df8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012dfe:	4b17      	ldr	r3, [pc, #92]	; (8012e5c <udp_new_port+0x68>)
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	1c5a      	adds	r2, r3, #1
 8012e04:	b291      	uxth	r1, r2
 8012e06:	4a15      	ldr	r2, [pc, #84]	; (8012e5c <udp_new_port+0x68>)
 8012e08:	8011      	strh	r1, [r2, #0]
 8012e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d103      	bne.n	8012e1a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012e12:	4b12      	ldr	r3, [pc, #72]	; (8012e5c <udp_new_port+0x68>)
 8012e14:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012e18:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e1a:	4b11      	ldr	r3, [pc, #68]	; (8012e60 <udp_new_port+0x6c>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	603b      	str	r3, [r7, #0]
 8012e20:	e011      	b.n	8012e46 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	8a5a      	ldrh	r2, [r3, #18]
 8012e26:	4b0d      	ldr	r3, [pc, #52]	; (8012e5c <udp_new_port+0x68>)
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d108      	bne.n	8012e40 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012e2e:	88fb      	ldrh	r3, [r7, #6]
 8012e30:	3301      	adds	r3, #1
 8012e32:	80fb      	strh	r3, [r7, #6]
 8012e34:	88fb      	ldrh	r3, [r7, #6]
 8012e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012e3a:	d3e0      	bcc.n	8012dfe <udp_new_port+0xa>
        return 0;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	e007      	b.n	8012e50 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	68db      	ldr	r3, [r3, #12]
 8012e44:	603b      	str	r3, [r7, #0]
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d1ea      	bne.n	8012e22 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012e4c:	4b03      	ldr	r3, [pc, #12]	; (8012e5c <udp_new_port+0x68>)
 8012e4e:	881b      	ldrh	r3, [r3, #0]
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	370c      	adds	r7, #12
 8012e54:	46bd      	mov	sp, r7
 8012e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5a:	4770      	bx	lr
 8012e5c:	20000030 	.word	0x20000030
 8012e60:	200304ac 	.word	0x200304ac

08012e64 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b084      	sub	sp, #16
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	60f8      	str	r0, [r7, #12]
 8012e6c:	60b9      	str	r1, [r7, #8]
 8012e6e:	4613      	mov	r3, r2
 8012e70:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d105      	bne.n	8012e84 <udp_input_local_match+0x20>
 8012e78:	4b27      	ldr	r3, [pc, #156]	; (8012f18 <udp_input_local_match+0xb4>)
 8012e7a:	2287      	movs	r2, #135	; 0x87
 8012e7c:	4927      	ldr	r1, [pc, #156]	; (8012f1c <udp_input_local_match+0xb8>)
 8012e7e:	4828      	ldr	r0, [pc, #160]	; (8012f20 <udp_input_local_match+0xbc>)
 8012e80:	f003 fa3e 	bl	8016300 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d105      	bne.n	8012e96 <udp_input_local_match+0x32>
 8012e8a:	4b23      	ldr	r3, [pc, #140]	; (8012f18 <udp_input_local_match+0xb4>)
 8012e8c:	2288      	movs	r2, #136	; 0x88
 8012e8e:	4925      	ldr	r1, [pc, #148]	; (8012f24 <udp_input_local_match+0xc0>)
 8012e90:	4823      	ldr	r0, [pc, #140]	; (8012f20 <udp_input_local_match+0xbc>)
 8012e92:	f003 fa35 	bl	8016300 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	7a1b      	ldrb	r3, [r3, #8]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d00b      	beq.n	8012eb6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	7a1a      	ldrb	r2, [r3, #8]
 8012ea2:	4b21      	ldr	r3, [pc, #132]	; (8012f28 <udp_input_local_match+0xc4>)
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012eaa:	3301      	adds	r3, #1
 8012eac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d001      	beq.n	8012eb6 <udp_input_local_match+0x52>
    return 0;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	e02b      	b.n	8012f0e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012eb6:	79fb      	ldrb	r3, [r7, #7]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d018      	beq.n	8012eee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d013      	beq.n	8012eea <udp_input_local_match+0x86>
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d00f      	beq.n	8012eea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012eca:	4b17      	ldr	r3, [pc, #92]	; (8012f28 <udp_input_local_match+0xc4>)
 8012ecc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ed2:	d00a      	beq.n	8012eea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	4b13      	ldr	r3, [pc, #76]	; (8012f28 <udp_input_local_match+0xc4>)
 8012eda:	695b      	ldr	r3, [r3, #20]
 8012edc:	405a      	eors	r2, r3
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	3308      	adds	r3, #8
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d110      	bne.n	8012f0c <udp_input_local_match+0xa8>
          return 1;
 8012eea:	2301      	movs	r3, #1
 8012eec:	e00f      	b.n	8012f0e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d009      	beq.n	8012f08 <udp_input_local_match+0xa4>
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d005      	beq.n	8012f08 <udp_input_local_match+0xa4>
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681a      	ldr	r2, [r3, #0]
 8012f00:	4b09      	ldr	r3, [pc, #36]	; (8012f28 <udp_input_local_match+0xc4>)
 8012f02:	695b      	ldr	r3, [r3, #20]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d101      	bne.n	8012f0c <udp_input_local_match+0xa8>
        return 1;
 8012f08:	2301      	movs	r3, #1
 8012f0a:	e000      	b.n	8012f0e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012f0c:	2300      	movs	r3, #0
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3710      	adds	r7, #16
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
 8012f16:	bf00      	nop
 8012f18:	08019bf0 	.word	0x08019bf0
 8012f1c:	08019c20 	.word	0x08019c20
 8012f20:	08019c44 	.word	0x08019c44
 8012f24:	08019c6c 	.word	0x08019c6c
 8012f28:	2002ccfc 	.word	0x2002ccfc

08012f2c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012f2c:	b590      	push	{r4, r7, lr}
 8012f2e:	b08d      	sub	sp, #52	; 0x34
 8012f30:	af02      	add	r7, sp, #8
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012f36:	2300      	movs	r3, #0
 8012f38:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d105      	bne.n	8012f4c <udp_input+0x20>
 8012f40:	4b7c      	ldr	r3, [pc, #496]	; (8013134 <udp_input+0x208>)
 8012f42:	22cf      	movs	r2, #207	; 0xcf
 8012f44:	497c      	ldr	r1, [pc, #496]	; (8013138 <udp_input+0x20c>)
 8012f46:	487d      	ldr	r0, [pc, #500]	; (801313c <udp_input+0x210>)
 8012f48:	f003 f9da 	bl	8016300 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d105      	bne.n	8012f5e <udp_input+0x32>
 8012f52:	4b78      	ldr	r3, [pc, #480]	; (8013134 <udp_input+0x208>)
 8012f54:	22d0      	movs	r2, #208	; 0xd0
 8012f56:	497a      	ldr	r1, [pc, #488]	; (8013140 <udp_input+0x214>)
 8012f58:	4878      	ldr	r0, [pc, #480]	; (801313c <udp_input+0x210>)
 8012f5a:	f003 f9d1 	bl	8016300 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	895b      	ldrh	r3, [r3, #10]
 8012f62:	2b07      	cmp	r3, #7
 8012f64:	d803      	bhi.n	8012f6e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f7fa f88a 	bl	800d080 <pbuf_free>
    goto end;
 8012f6c:	e0de      	b.n	801312c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	685b      	ldr	r3, [r3, #4]
 8012f72:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012f74:	4b73      	ldr	r3, [pc, #460]	; (8013144 <udp_input+0x218>)
 8012f76:	695b      	ldr	r3, [r3, #20]
 8012f78:	4a72      	ldr	r2, [pc, #456]	; (8013144 <udp_input+0x218>)
 8012f7a:	6812      	ldr	r2, [r2, #0]
 8012f7c:	4611      	mov	r1, r2
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f001 ff4c 	bl	8014e1c <ip4_addr_isbroadcast_u32>
 8012f84:	4603      	mov	r3, r0
 8012f86:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	881b      	ldrh	r3, [r3, #0]
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7f8 fc84 	bl	800b89c <lwip_htons>
 8012f94:	4603      	mov	r3, r0
 8012f96:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	885b      	ldrh	r3, [r3, #2]
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7f8 fc7c 	bl	800b89c <lwip_htons>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012fac:	2300      	movs	r3, #0
 8012fae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fb4:	4b64      	ldr	r3, [pc, #400]	; (8013148 <udp_input+0x21c>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8012fba:	e054      	b.n	8013066 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fbe:	8a5b      	ldrh	r3, [r3, #18]
 8012fc0:	89fa      	ldrh	r2, [r7, #14]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d14a      	bne.n	801305c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012fc6:	7cfb      	ldrb	r3, [r7, #19]
 8012fc8:	461a      	mov	r2, r3
 8012fca:	6839      	ldr	r1, [r7, #0]
 8012fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fce:	f7ff ff49 	bl	8012e64 <udp_input_local_match>
 8012fd2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d041      	beq.n	801305c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fda:	7c1b      	ldrb	r3, [r3, #16]
 8012fdc:	f003 0304 	and.w	r3, r3, #4
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d11d      	bne.n	8013020 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012fe4:	69fb      	ldr	r3, [r7, #28]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d102      	bne.n	8012ff0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fec:	61fb      	str	r3, [r7, #28]
 8012fee:	e017      	b.n	8013020 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012ff0:	7cfb      	ldrb	r3, [r7, #19]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d014      	beq.n	8013020 <udp_input+0xf4>
 8012ff6:	4b53      	ldr	r3, [pc, #332]	; (8013144 <udp_input+0x218>)
 8012ff8:	695b      	ldr	r3, [r3, #20]
 8012ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ffe:	d10f      	bne.n	8013020 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	3304      	adds	r3, #4
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	429a      	cmp	r2, r3
 801300c:	d008      	beq.n	8013020 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	3304      	adds	r3, #4
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	429a      	cmp	r2, r3
 801301a:	d101      	bne.n	8013020 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013022:	8a9b      	ldrh	r3, [r3, #20]
 8013024:	8a3a      	ldrh	r2, [r7, #16]
 8013026:	429a      	cmp	r2, r3
 8013028:	d118      	bne.n	801305c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801302c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801302e:	2b00      	cmp	r3, #0
 8013030:	d005      	beq.n	801303e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013034:	685a      	ldr	r2, [r3, #4]
 8013036:	4b43      	ldr	r3, [pc, #268]	; (8013144 <udp_input+0x218>)
 8013038:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801303a:	429a      	cmp	r2, r3
 801303c:	d10e      	bne.n	801305c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801303e:	6a3b      	ldr	r3, [r7, #32]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d014      	beq.n	801306e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013046:	68da      	ldr	r2, [r3, #12]
 8013048:	6a3b      	ldr	r3, [r7, #32]
 801304a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801304c:	4b3e      	ldr	r3, [pc, #248]	; (8013148 <udp_input+0x21c>)
 801304e:	681a      	ldr	r2, [r3, #0]
 8013050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013052:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013054:	4a3c      	ldr	r2, [pc, #240]	; (8013148 <udp_input+0x21c>)
 8013056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013058:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801305a:	e008      	b.n	801306e <udp_input+0x142>
      }
    }

    prev = pcb;
 801305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801305e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	627b      	str	r3, [r7, #36]	; 0x24
 8013066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013068:	2b00      	cmp	r3, #0
 801306a:	d1a7      	bne.n	8012fbc <udp_input+0x90>
 801306c:	e000      	b.n	8013070 <udp_input+0x144>
        break;
 801306e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013072:	2b00      	cmp	r3, #0
 8013074:	d101      	bne.n	801307a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013076:	69fb      	ldr	r3, [r7, #28]
 8013078:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801307c:	2b00      	cmp	r3, #0
 801307e:	d002      	beq.n	8013086 <udp_input+0x15a>
    for_us = 1;
 8013080:	2301      	movs	r3, #1
 8013082:	76fb      	strb	r3, [r7, #27]
 8013084:	e00a      	b.n	801309c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	3304      	adds	r3, #4
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	4b2d      	ldr	r3, [pc, #180]	; (8013144 <udp_input+0x218>)
 801308e:	695b      	ldr	r3, [r3, #20]
 8013090:	429a      	cmp	r2, r3
 8013092:	bf0c      	ite	eq
 8013094:	2301      	moveq	r3, #1
 8013096:	2300      	movne	r3, #0
 8013098:	b2db      	uxtb	r3, r3
 801309a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801309c:	7efb      	ldrb	r3, [r7, #27]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d041      	beq.n	8013126 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80130a2:	2108      	movs	r1, #8
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f7f9 ff65 	bl	800cf74 <pbuf_remove_header>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00a      	beq.n	80130c6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80130b0:	4b20      	ldr	r3, [pc, #128]	; (8013134 <udp_input+0x208>)
 80130b2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80130b6:	4925      	ldr	r1, [pc, #148]	; (801314c <udp_input+0x220>)
 80130b8:	4820      	ldr	r0, [pc, #128]	; (801313c <udp_input+0x210>)
 80130ba:	f003 f921 	bl	8016300 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f7f9 ffde 	bl	800d080 <pbuf_free>
      goto end;
 80130c4:	e032      	b.n	801312c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80130c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d012      	beq.n	80130f2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ce:	699b      	ldr	r3, [r3, #24]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d00a      	beq.n	80130ea <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80130d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d6:	699c      	ldr	r4, [r3, #24]
 80130d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130da:	69d8      	ldr	r0, [r3, #28]
 80130dc:	8a3b      	ldrh	r3, [r7, #16]
 80130de:	9300      	str	r3, [sp, #0]
 80130e0:	4b1b      	ldr	r3, [pc, #108]	; (8013150 <udp_input+0x224>)
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80130e8:	e021      	b.n	801312e <udp_input+0x202>
        pbuf_free(p);
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f7f9 ffc8 	bl	800d080 <pbuf_free>
        goto end;
 80130f0:	e01c      	b.n	801312c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80130f2:	7cfb      	ldrb	r3, [r7, #19]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d112      	bne.n	801311e <udp_input+0x1f2>
 80130f8:	4b12      	ldr	r3, [pc, #72]	; (8013144 <udp_input+0x218>)
 80130fa:	695b      	ldr	r3, [r3, #20]
 80130fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013100:	2be0      	cmp	r3, #224	; 0xe0
 8013102:	d00c      	beq.n	801311e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013104:	4b0f      	ldr	r3, [pc, #60]	; (8013144 <udp_input+0x218>)
 8013106:	899b      	ldrh	r3, [r3, #12]
 8013108:	3308      	adds	r3, #8
 801310a:	b29b      	uxth	r3, r3
 801310c:	b21b      	sxth	r3, r3
 801310e:	4619      	mov	r1, r3
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f7f9 ffa2 	bl	800d05a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013116:	2103      	movs	r1, #3
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f001 fb5f 	bl	80147dc <icmp_dest_unreach>
      pbuf_free(p);
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f7f9 ffae 	bl	800d080 <pbuf_free>
  return;
 8013124:	e003      	b.n	801312e <udp_input+0x202>
    pbuf_free(p);
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f7f9 ffaa 	bl	800d080 <pbuf_free>
  return;
 801312c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801312e:	372c      	adds	r7, #44	; 0x2c
 8013130:	46bd      	mov	sp, r7
 8013132:	bd90      	pop	{r4, r7, pc}
 8013134:	08019bf0 	.word	0x08019bf0
 8013138:	08019c94 	.word	0x08019c94
 801313c:	08019c44 	.word	0x08019c44
 8013140:	08019cac 	.word	0x08019cac
 8013144:	2002ccfc 	.word	0x2002ccfc
 8013148:	200304ac 	.word	0x200304ac
 801314c:	08019cc8 	.word	0x08019cc8
 8013150:	2002cd0c 	.word	0x2002cd0c

08013154 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b088      	sub	sp, #32
 8013158:	af02      	add	r7, sp, #8
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	607a      	str	r2, [r7, #4]
 8013160:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d109      	bne.n	801317c <udp_sendto+0x28>
 8013168:	4b23      	ldr	r3, [pc, #140]	; (80131f8 <udp_sendto+0xa4>)
 801316a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801316e:	4923      	ldr	r1, [pc, #140]	; (80131fc <udp_sendto+0xa8>)
 8013170:	4823      	ldr	r0, [pc, #140]	; (8013200 <udp_sendto+0xac>)
 8013172:	f003 f8c5 	bl	8016300 <iprintf>
 8013176:	f06f 030f 	mvn.w	r3, #15
 801317a:	e038      	b.n	80131ee <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d109      	bne.n	8013196 <udp_sendto+0x42>
 8013182:	4b1d      	ldr	r3, [pc, #116]	; (80131f8 <udp_sendto+0xa4>)
 8013184:	f240 2219 	movw	r2, #537	; 0x219
 8013188:	491e      	ldr	r1, [pc, #120]	; (8013204 <udp_sendto+0xb0>)
 801318a:	481d      	ldr	r0, [pc, #116]	; (8013200 <udp_sendto+0xac>)
 801318c:	f003 f8b8 	bl	8016300 <iprintf>
 8013190:	f06f 030f 	mvn.w	r3, #15
 8013194:	e02b      	b.n	80131ee <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d109      	bne.n	80131b0 <udp_sendto+0x5c>
 801319c:	4b16      	ldr	r3, [pc, #88]	; (80131f8 <udp_sendto+0xa4>)
 801319e:	f240 221a 	movw	r2, #538	; 0x21a
 80131a2:	4919      	ldr	r1, [pc, #100]	; (8013208 <udp_sendto+0xb4>)
 80131a4:	4816      	ldr	r0, [pc, #88]	; (8013200 <udp_sendto+0xac>)
 80131a6:	f003 f8ab 	bl	8016300 <iprintf>
 80131aa:	f06f 030f 	mvn.w	r3, #15
 80131ae:	e01e      	b.n	80131ee <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	7a1b      	ldrb	r3, [r3, #8]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d006      	beq.n	80131c6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	7a1b      	ldrb	r3, [r3, #8]
 80131bc:	4618      	mov	r0, r3
 80131be:	f7f9 fbd1 	bl	800c964 <netif_get_by_index>
 80131c2:	6178      	str	r0, [r7, #20]
 80131c4:	e003      	b.n	80131ce <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f001 fb92 	bl	80148f0 <ip4_route>
 80131cc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d102      	bne.n	80131da <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80131d4:	f06f 0303 	mvn.w	r3, #3
 80131d8:	e009      	b.n	80131ee <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80131da:	887a      	ldrh	r2, [r7, #2]
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	9300      	str	r3, [sp, #0]
 80131e0:	4613      	mov	r3, r2
 80131e2:	687a      	ldr	r2, [r7, #4]
 80131e4:	68b9      	ldr	r1, [r7, #8]
 80131e6:	68f8      	ldr	r0, [r7, #12]
 80131e8:	f000 f810 	bl	801320c <udp_sendto_if>
 80131ec:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80131ee:	4618      	mov	r0, r3
 80131f0:	3718      	adds	r7, #24
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	08019bf0 	.word	0x08019bf0
 80131fc:	08019d14 	.word	0x08019d14
 8013200:	08019c44 	.word	0x08019c44
 8013204:	08019d2c 	.word	0x08019d2c
 8013208:	08019d48 	.word	0x08019d48

0801320c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b088      	sub	sp, #32
 8013210:	af02      	add	r7, sp, #8
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	607a      	str	r2, [r7, #4]
 8013218:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d109      	bne.n	8013234 <udp_sendto_if+0x28>
 8013220:	4b2e      	ldr	r3, [pc, #184]	; (80132dc <udp_sendto_if+0xd0>)
 8013222:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013226:	492e      	ldr	r1, [pc, #184]	; (80132e0 <udp_sendto_if+0xd4>)
 8013228:	482e      	ldr	r0, [pc, #184]	; (80132e4 <udp_sendto_if+0xd8>)
 801322a:	f003 f869 	bl	8016300 <iprintf>
 801322e:	f06f 030f 	mvn.w	r3, #15
 8013232:	e04f      	b.n	80132d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d109      	bne.n	801324e <udp_sendto_if+0x42>
 801323a:	4b28      	ldr	r3, [pc, #160]	; (80132dc <udp_sendto_if+0xd0>)
 801323c:	f240 2281 	movw	r2, #641	; 0x281
 8013240:	4929      	ldr	r1, [pc, #164]	; (80132e8 <udp_sendto_if+0xdc>)
 8013242:	4828      	ldr	r0, [pc, #160]	; (80132e4 <udp_sendto_if+0xd8>)
 8013244:	f003 f85c 	bl	8016300 <iprintf>
 8013248:	f06f 030f 	mvn.w	r3, #15
 801324c:	e042      	b.n	80132d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d109      	bne.n	8013268 <udp_sendto_if+0x5c>
 8013254:	4b21      	ldr	r3, [pc, #132]	; (80132dc <udp_sendto_if+0xd0>)
 8013256:	f240 2282 	movw	r2, #642	; 0x282
 801325a:	4924      	ldr	r1, [pc, #144]	; (80132ec <udp_sendto_if+0xe0>)
 801325c:	4821      	ldr	r0, [pc, #132]	; (80132e4 <udp_sendto_if+0xd8>)
 801325e:	f003 f84f 	bl	8016300 <iprintf>
 8013262:	f06f 030f 	mvn.w	r3, #15
 8013266:	e035      	b.n	80132d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013268:	6a3b      	ldr	r3, [r7, #32]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d109      	bne.n	8013282 <udp_sendto_if+0x76>
 801326e:	4b1b      	ldr	r3, [pc, #108]	; (80132dc <udp_sendto_if+0xd0>)
 8013270:	f240 2283 	movw	r2, #643	; 0x283
 8013274:	491e      	ldr	r1, [pc, #120]	; (80132f0 <udp_sendto_if+0xe4>)
 8013276:	481b      	ldr	r0, [pc, #108]	; (80132e4 <udp_sendto_if+0xd8>)
 8013278:	f003 f842 	bl	8016300 <iprintf>
 801327c:	f06f 030f 	mvn.w	r3, #15
 8013280:	e028      	b.n	80132d4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d009      	beq.n	801329c <udp_sendto_if+0x90>
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d005      	beq.n	801329c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013298:	2be0      	cmp	r3, #224	; 0xe0
 801329a:	d103      	bne.n	80132a4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801329c:	6a3b      	ldr	r3, [r7, #32]
 801329e:	3304      	adds	r3, #4
 80132a0:	617b      	str	r3, [r7, #20]
 80132a2:	e00b      	b.n	80132bc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	3304      	adds	r3, #4
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d002      	beq.n	80132b8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80132b2:	f06f 0303 	mvn.w	r3, #3
 80132b6:	e00d      	b.n	80132d4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80132bc:	887a      	ldrh	r2, [r7, #2]
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	9301      	str	r3, [sp, #4]
 80132c2:	6a3b      	ldr	r3, [r7, #32]
 80132c4:	9300      	str	r3, [sp, #0]
 80132c6:	4613      	mov	r3, r2
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	68b9      	ldr	r1, [r7, #8]
 80132cc:	68f8      	ldr	r0, [r7, #12]
 80132ce:	f000 f811 	bl	80132f4 <udp_sendto_if_src>
 80132d2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3718      	adds	r7, #24
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	08019bf0 	.word	0x08019bf0
 80132e0:	08019d64 	.word	0x08019d64
 80132e4:	08019c44 	.word	0x08019c44
 80132e8:	08019d80 	.word	0x08019d80
 80132ec:	08019d9c 	.word	0x08019d9c
 80132f0:	08019dbc 	.word	0x08019dbc

080132f4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b08c      	sub	sp, #48	; 0x30
 80132f8:	af04      	add	r7, sp, #16
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
 8013300:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d109      	bne.n	801331c <udp_sendto_if_src+0x28>
 8013308:	4b65      	ldr	r3, [pc, #404]	; (80134a0 <udp_sendto_if_src+0x1ac>)
 801330a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801330e:	4965      	ldr	r1, [pc, #404]	; (80134a4 <udp_sendto_if_src+0x1b0>)
 8013310:	4865      	ldr	r0, [pc, #404]	; (80134a8 <udp_sendto_if_src+0x1b4>)
 8013312:	f002 fff5 	bl	8016300 <iprintf>
 8013316:	f06f 030f 	mvn.w	r3, #15
 801331a:	e0bc      	b.n	8013496 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d109      	bne.n	8013336 <udp_sendto_if_src+0x42>
 8013322:	4b5f      	ldr	r3, [pc, #380]	; (80134a0 <udp_sendto_if_src+0x1ac>)
 8013324:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013328:	4960      	ldr	r1, [pc, #384]	; (80134ac <udp_sendto_if_src+0x1b8>)
 801332a:	485f      	ldr	r0, [pc, #380]	; (80134a8 <udp_sendto_if_src+0x1b4>)
 801332c:	f002 ffe8 	bl	8016300 <iprintf>
 8013330:	f06f 030f 	mvn.w	r3, #15
 8013334:	e0af      	b.n	8013496 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d109      	bne.n	8013350 <udp_sendto_if_src+0x5c>
 801333c:	4b58      	ldr	r3, [pc, #352]	; (80134a0 <udp_sendto_if_src+0x1ac>)
 801333e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013342:	495b      	ldr	r1, [pc, #364]	; (80134b0 <udp_sendto_if_src+0x1bc>)
 8013344:	4858      	ldr	r0, [pc, #352]	; (80134a8 <udp_sendto_if_src+0x1b4>)
 8013346:	f002 ffdb 	bl	8016300 <iprintf>
 801334a:	f06f 030f 	mvn.w	r3, #15
 801334e:	e0a2      	b.n	8013496 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013352:	2b00      	cmp	r3, #0
 8013354:	d109      	bne.n	801336a <udp_sendto_if_src+0x76>
 8013356:	4b52      	ldr	r3, [pc, #328]	; (80134a0 <udp_sendto_if_src+0x1ac>)
 8013358:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801335c:	4955      	ldr	r1, [pc, #340]	; (80134b4 <udp_sendto_if_src+0x1c0>)
 801335e:	4852      	ldr	r0, [pc, #328]	; (80134a8 <udp_sendto_if_src+0x1b4>)
 8013360:	f002 ffce 	bl	8016300 <iprintf>
 8013364:	f06f 030f 	mvn.w	r3, #15
 8013368:	e095      	b.n	8013496 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336c:	2b00      	cmp	r3, #0
 801336e:	d109      	bne.n	8013384 <udp_sendto_if_src+0x90>
 8013370:	4b4b      	ldr	r3, [pc, #300]	; (80134a0 <udp_sendto_if_src+0x1ac>)
 8013372:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013376:	4950      	ldr	r1, [pc, #320]	; (80134b8 <udp_sendto_if_src+0x1c4>)
 8013378:	484b      	ldr	r0, [pc, #300]	; (80134a8 <udp_sendto_if_src+0x1b4>)
 801337a:	f002 ffc1 	bl	8016300 <iprintf>
 801337e:	f06f 030f 	mvn.w	r3, #15
 8013382:	e088      	b.n	8013496 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	8a5b      	ldrh	r3, [r3, #18]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d10f      	bne.n	80133ac <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801338c:	68f9      	ldr	r1, [r7, #12]
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	8a5b      	ldrh	r3, [r3, #18]
 8013392:	461a      	mov	r2, r3
 8013394:	68f8      	ldr	r0, [r7, #12]
 8013396:	f000 f893 	bl	80134c0 <udp_bind>
 801339a:	4603      	mov	r3, r0
 801339c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801339e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d002      	beq.n	80133ac <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80133a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80133aa:	e074      	b.n	8013496 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	891b      	ldrh	r3, [r3, #8]
 80133b0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80133b4:	4293      	cmp	r3, r2
 80133b6:	d902      	bls.n	80133be <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80133b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133bc:	e06b      	b.n	8013496 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80133be:	2108      	movs	r1, #8
 80133c0:	68b8      	ldr	r0, [r7, #8]
 80133c2:	f7f9 fdc7 	bl	800cf54 <pbuf_add_header>
 80133c6:	4603      	mov	r3, r0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d015      	beq.n	80133f8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80133cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133d0:	2108      	movs	r1, #8
 80133d2:	2022      	movs	r0, #34	; 0x22
 80133d4:	f7f9 fb70 	bl	800cab8 <pbuf_alloc>
 80133d8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80133da:	69fb      	ldr	r3, [r7, #28]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d102      	bne.n	80133e6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80133e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133e4:	e057      	b.n	8013496 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	891b      	ldrh	r3, [r3, #8]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d006      	beq.n	80133fc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80133ee:	68b9      	ldr	r1, [r7, #8]
 80133f0:	69f8      	ldr	r0, [r7, #28]
 80133f2:	f7f9 ff69 	bl	800d2c8 <pbuf_chain>
 80133f6:	e001      	b.n	80133fc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80133fc:	69fb      	ldr	r3, [r7, #28]
 80133fe:	895b      	ldrh	r3, [r3, #10]
 8013400:	2b07      	cmp	r3, #7
 8013402:	d806      	bhi.n	8013412 <udp_sendto_if_src+0x11e>
 8013404:	4b26      	ldr	r3, [pc, #152]	; (80134a0 <udp_sendto_if_src+0x1ac>)
 8013406:	f240 320d 	movw	r2, #781	; 0x30d
 801340a:	492c      	ldr	r1, [pc, #176]	; (80134bc <udp_sendto_if_src+0x1c8>)
 801340c:	4826      	ldr	r0, [pc, #152]	; (80134a8 <udp_sendto_if_src+0x1b4>)
 801340e:	f002 ff77 	bl	8016300 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013412:	69fb      	ldr	r3, [r7, #28]
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	8a5b      	ldrh	r3, [r3, #18]
 801341c:	4618      	mov	r0, r3
 801341e:	f7f8 fa3d 	bl	800b89c <lwip_htons>
 8013422:	4603      	mov	r3, r0
 8013424:	461a      	mov	r2, r3
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801342a:	887b      	ldrh	r3, [r7, #2]
 801342c:	4618      	mov	r0, r3
 801342e:	f7f8 fa35 	bl	800b89c <lwip_htons>
 8013432:	4603      	mov	r3, r0
 8013434:	461a      	mov	r2, r3
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	2200      	movs	r2, #0
 801343e:	719a      	strb	r2, [r3, #6]
 8013440:	2200      	movs	r2, #0
 8013442:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013444:	69fb      	ldr	r3, [r7, #28]
 8013446:	891b      	ldrh	r3, [r3, #8]
 8013448:	4618      	mov	r0, r3
 801344a:	f7f8 fa27 	bl	800b89c <lwip_htons>
 801344e:	4603      	mov	r3, r0
 8013450:	461a      	mov	r2, r3
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013456:	2311      	movs	r3, #17
 8013458:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	7adb      	ldrb	r3, [r3, #11]
 801345e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	7a9b      	ldrb	r3, [r3, #10]
 8013464:	7cb9      	ldrb	r1, [r7, #18]
 8013466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013468:	9202      	str	r2, [sp, #8]
 801346a:	7cfa      	ldrb	r2, [r7, #19]
 801346c:	9201      	str	r2, [sp, #4]
 801346e:	9300      	str	r3, [sp, #0]
 8013470:	460b      	mov	r3, r1
 8013472:	687a      	ldr	r2, [r7, #4]
 8013474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013476:	69f8      	ldr	r0, [r7, #28]
 8013478:	f001 fc22 	bl	8014cc0 <ip4_output_if_src>
 801347c:	4603      	mov	r3, r0
 801347e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013480:	69fa      	ldr	r2, [r7, #28]
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	429a      	cmp	r2, r3
 8013486:	d004      	beq.n	8013492 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013488:	69f8      	ldr	r0, [r7, #28]
 801348a:	f7f9 fdf9 	bl	800d080 <pbuf_free>
    q = NULL;
 801348e:	2300      	movs	r3, #0
 8013490:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013492:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013496:	4618      	mov	r0, r3
 8013498:	3720      	adds	r7, #32
 801349a:	46bd      	mov	sp, r7
 801349c:	bd80      	pop	{r7, pc}
 801349e:	bf00      	nop
 80134a0:	08019bf0 	.word	0x08019bf0
 80134a4:	08019ddc 	.word	0x08019ddc
 80134a8:	08019c44 	.word	0x08019c44
 80134ac:	08019dfc 	.word	0x08019dfc
 80134b0:	08019e1c 	.word	0x08019e1c
 80134b4:	08019e40 	.word	0x08019e40
 80134b8:	08019e64 	.word	0x08019e64
 80134bc:	08019e88 	.word	0x08019e88

080134c0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b086      	sub	sp, #24
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	60f8      	str	r0, [r7, #12]
 80134c8:	60b9      	str	r1, [r7, #8]
 80134ca:	4613      	mov	r3, r2
 80134cc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d101      	bne.n	80134d8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80134d4:	4b39      	ldr	r3, [pc, #228]	; (80135bc <udp_bind+0xfc>)
 80134d6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d109      	bne.n	80134f2 <udp_bind+0x32>
 80134de:	4b38      	ldr	r3, [pc, #224]	; (80135c0 <udp_bind+0x100>)
 80134e0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80134e4:	4937      	ldr	r1, [pc, #220]	; (80135c4 <udp_bind+0x104>)
 80134e6:	4838      	ldr	r0, [pc, #224]	; (80135c8 <udp_bind+0x108>)
 80134e8:	f002 ff0a 	bl	8016300 <iprintf>
 80134ec:	f06f 030f 	mvn.w	r3, #15
 80134f0:	e060      	b.n	80135b4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80134f2:	2300      	movs	r3, #0
 80134f4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80134f6:	4b35      	ldr	r3, [pc, #212]	; (80135cc <udp_bind+0x10c>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	617b      	str	r3, [r7, #20]
 80134fc:	e009      	b.n	8013512 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80134fe:	68fa      	ldr	r2, [r7, #12]
 8013500:	697b      	ldr	r3, [r7, #20]
 8013502:	429a      	cmp	r2, r3
 8013504:	d102      	bne.n	801350c <udp_bind+0x4c>
      rebind = 1;
 8013506:	2301      	movs	r3, #1
 8013508:	74fb      	strb	r3, [r7, #19]
      break;
 801350a:	e005      	b.n	8013518 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	68db      	ldr	r3, [r3, #12]
 8013510:	617b      	str	r3, [r7, #20]
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d1f2      	bne.n	80134fe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013518:	88fb      	ldrh	r3, [r7, #6]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d109      	bne.n	8013532 <udp_bind+0x72>
    port = udp_new_port();
 801351e:	f7ff fc69 	bl	8012df4 <udp_new_port>
 8013522:	4603      	mov	r3, r0
 8013524:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013526:	88fb      	ldrh	r3, [r7, #6]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d12c      	bne.n	8013586 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801352c:	f06f 0307 	mvn.w	r3, #7
 8013530:	e040      	b.n	80135b4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013532:	4b26      	ldr	r3, [pc, #152]	; (80135cc <udp_bind+0x10c>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	617b      	str	r3, [r7, #20]
 8013538:	e022      	b.n	8013580 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801353a:	68fa      	ldr	r2, [r7, #12]
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	429a      	cmp	r2, r3
 8013540:	d01b      	beq.n	801357a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	8a5b      	ldrh	r3, [r3, #18]
 8013546:	88fa      	ldrh	r2, [r7, #6]
 8013548:	429a      	cmp	r2, r3
 801354a:	d116      	bne.n	801357a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013554:	429a      	cmp	r2, r3
 8013556:	d00d      	beq.n	8013574 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d00a      	beq.n	8013574 <udp_bind+0xb4>
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d006      	beq.n	8013574 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013566:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013568:	2b00      	cmp	r3, #0
 801356a:	d003      	beq.n	8013574 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d102      	bne.n	801357a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013574:	f06f 0307 	mvn.w	r3, #7
 8013578:	e01c      	b.n	80135b4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	68db      	ldr	r3, [r3, #12]
 801357e:	617b      	str	r3, [r7, #20]
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d1d9      	bne.n	801353a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d002      	beq.n	8013592 <udp_bind+0xd2>
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	e000      	b.n	8013594 <udp_bind+0xd4>
 8013592:	2300      	movs	r3, #0
 8013594:	68fa      	ldr	r2, [r7, #12]
 8013596:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	88fa      	ldrh	r2, [r7, #6]
 801359c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801359e:	7cfb      	ldrb	r3, [r7, #19]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d106      	bne.n	80135b2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80135a4:	4b09      	ldr	r3, [pc, #36]	; (80135cc <udp_bind+0x10c>)
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80135ac:	4a07      	ldr	r2, [pc, #28]	; (80135cc <udp_bind+0x10c>)
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80135b2:	2300      	movs	r3, #0
}
 80135b4:	4618      	mov	r0, r3
 80135b6:	3718      	adds	r7, #24
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	0801a74c 	.word	0x0801a74c
 80135c0:	08019bf0 	.word	0x08019bf0
 80135c4:	08019eb8 	.word	0x08019eb8
 80135c8:	08019c44 	.word	0x08019c44
 80135cc:	200304ac 	.word	0x200304ac

080135d0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b084      	sub	sp, #16
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d107      	bne.n	80135f2 <udp_recv+0x22>
 80135e2:	4b08      	ldr	r3, [pc, #32]	; (8013604 <udp_recv+0x34>)
 80135e4:	f240 428a 	movw	r2, #1162	; 0x48a
 80135e8:	4907      	ldr	r1, [pc, #28]	; (8013608 <udp_recv+0x38>)
 80135ea:	4808      	ldr	r0, [pc, #32]	; (801360c <udp_recv+0x3c>)
 80135ec:	f002 fe88 	bl	8016300 <iprintf>
 80135f0:	e005      	b.n	80135fe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	68ba      	ldr	r2, [r7, #8]
 80135f6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	61da      	str	r2, [r3, #28]
}
 80135fe:	3710      	adds	r7, #16
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}
 8013604:	08019bf0 	.word	0x08019bf0
 8013608:	08019f24 	.word	0x08019f24
 801360c:	08019c44 	.word	0x08019c44

08013610 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b084      	sub	sp, #16
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d107      	bne.n	801362e <udp_remove+0x1e>
 801361e:	4b19      	ldr	r3, [pc, #100]	; (8013684 <udp_remove+0x74>)
 8013620:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013624:	4918      	ldr	r1, [pc, #96]	; (8013688 <udp_remove+0x78>)
 8013626:	4819      	ldr	r0, [pc, #100]	; (801368c <udp_remove+0x7c>)
 8013628:	f002 fe6a 	bl	8016300 <iprintf>
 801362c:	e026      	b.n	801367c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801362e:	4b18      	ldr	r3, [pc, #96]	; (8013690 <udp_remove+0x80>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	429a      	cmp	r2, r3
 8013636:	d105      	bne.n	8013644 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013638:	4b15      	ldr	r3, [pc, #84]	; (8013690 <udp_remove+0x80>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	68db      	ldr	r3, [r3, #12]
 801363e:	4a14      	ldr	r2, [pc, #80]	; (8013690 <udp_remove+0x80>)
 8013640:	6013      	str	r3, [r2, #0]
 8013642:	e017      	b.n	8013674 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013644:	4b12      	ldr	r3, [pc, #72]	; (8013690 <udp_remove+0x80>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	60fb      	str	r3, [r7, #12]
 801364a:	e010      	b.n	801366e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	68db      	ldr	r3, [r3, #12]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d009      	beq.n	8013668 <udp_remove+0x58>
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	68db      	ldr	r3, [r3, #12]
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	429a      	cmp	r2, r3
 801365c:	d104      	bne.n	8013668 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	68da      	ldr	r2, [r3, #12]
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	60da      	str	r2, [r3, #12]
        break;
 8013666:	e005      	b.n	8013674 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	68db      	ldr	r3, [r3, #12]
 801366c:	60fb      	str	r3, [r7, #12]
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d1eb      	bne.n	801364c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013674:	6879      	ldr	r1, [r7, #4]
 8013676:	2000      	movs	r0, #0
 8013678:	f7f8 fe5e 	bl	800c338 <memp_free>
}
 801367c:	3710      	adds	r7, #16
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
 8013682:	bf00      	nop
 8013684:	08019bf0 	.word	0x08019bf0
 8013688:	08019f3c 	.word	0x08019f3c
 801368c:	08019c44 	.word	0x08019c44
 8013690:	200304ac 	.word	0x200304ac

08013694 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801369a:	2000      	movs	r0, #0
 801369c:	f7f8 fdd6 	bl	800c24c <memp_malloc>
 80136a0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d007      	beq.n	80136b8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80136a8:	2220      	movs	r2, #32
 80136aa:	2100      	movs	r1, #0
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	f002 fd8a 	bl	80161c6 <memset>
    pcb->ttl = UDP_TTL;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	22ff      	movs	r2, #255	; 0xff
 80136b6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80136b8:	687b      	ldr	r3, [r7, #4]
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3708      	adds	r7, #8
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}

080136c2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80136c2:	b580      	push	{r7, lr}
 80136c4:	b084      	sub	sp, #16
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	4603      	mov	r3, r0
 80136ca:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80136cc:	f7ff ffe2 	bl	8013694 <udp_new>
 80136d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80136d2:	68fb      	ldr	r3, [r7, #12]
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3710      	adds	r7, #16
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}

080136dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80136dc:	b480      	push	{r7}
 80136de:	b085      	sub	sp, #20
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d01e      	beq.n	801372a <udp_netif_ip_addr_changed+0x4e>
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d01a      	beq.n	801372a <udp_netif_ip_addr_changed+0x4e>
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d017      	beq.n	801372a <udp_netif_ip_addr_changed+0x4e>
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d013      	beq.n	801372a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013702:	4b0d      	ldr	r3, [pc, #52]	; (8013738 <udp_netif_ip_addr_changed+0x5c>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	60fb      	str	r3, [r7, #12]
 8013708:	e00c      	b.n	8013724 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	681a      	ldr	r2, [r3, #0]
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	429a      	cmp	r2, r3
 8013714:	d103      	bne.n	801371e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	681a      	ldr	r2, [r3, #0]
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	68db      	ldr	r3, [r3, #12]
 8013722:	60fb      	str	r3, [r7, #12]
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d1ef      	bne.n	801370a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801372a:	bf00      	nop
 801372c:	3714      	adds	r7, #20
 801372e:	46bd      	mov	sp, r7
 8013730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013734:	4770      	bx	lr
 8013736:	bf00      	nop
 8013738:	200304ac 	.word	0x200304ac

0801373c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013744:	4915      	ldr	r1, [pc, #84]	; (801379c <etharp_free_entry+0x60>)
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	4613      	mov	r3, r2
 801374a:	005b      	lsls	r3, r3, #1
 801374c:	4413      	add	r3, r2
 801374e:	00db      	lsls	r3, r3, #3
 8013750:	440b      	add	r3, r1
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d013      	beq.n	8013780 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013758:	4910      	ldr	r1, [pc, #64]	; (801379c <etharp_free_entry+0x60>)
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	4613      	mov	r3, r2
 801375e:	005b      	lsls	r3, r3, #1
 8013760:	4413      	add	r3, r2
 8013762:	00db      	lsls	r3, r3, #3
 8013764:	440b      	add	r3, r1
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	4618      	mov	r0, r3
 801376a:	f7f9 fc89 	bl	800d080 <pbuf_free>
    arp_table[i].q = NULL;
 801376e:	490b      	ldr	r1, [pc, #44]	; (801379c <etharp_free_entry+0x60>)
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	4613      	mov	r3, r2
 8013774:	005b      	lsls	r3, r3, #1
 8013776:	4413      	add	r3, r2
 8013778:	00db      	lsls	r3, r3, #3
 801377a:	440b      	add	r3, r1
 801377c:	2200      	movs	r2, #0
 801377e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013780:	4906      	ldr	r1, [pc, #24]	; (801379c <etharp_free_entry+0x60>)
 8013782:	687a      	ldr	r2, [r7, #4]
 8013784:	4613      	mov	r3, r2
 8013786:	005b      	lsls	r3, r3, #1
 8013788:	4413      	add	r3, r2
 801378a:	00db      	lsls	r3, r3, #3
 801378c:	440b      	add	r3, r1
 801378e:	3314      	adds	r3, #20
 8013790:	2200      	movs	r2, #0
 8013792:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013794:	bf00      	nop
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	200304b0 	.word	0x200304b0

080137a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b082      	sub	sp, #8
 80137a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80137a6:	2300      	movs	r3, #0
 80137a8:	607b      	str	r3, [r7, #4]
 80137aa:	e096      	b.n	80138da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80137ac:	494f      	ldr	r1, [pc, #316]	; (80138ec <etharp_tmr+0x14c>)
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	4613      	mov	r3, r2
 80137b2:	005b      	lsls	r3, r3, #1
 80137b4:	4413      	add	r3, r2
 80137b6:	00db      	lsls	r3, r3, #3
 80137b8:	440b      	add	r3, r1
 80137ba:	3314      	adds	r3, #20
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80137c0:	78fb      	ldrb	r3, [r7, #3]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	f000 8086 	beq.w	80138d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80137c8:	4948      	ldr	r1, [pc, #288]	; (80138ec <etharp_tmr+0x14c>)
 80137ca:	687a      	ldr	r2, [r7, #4]
 80137cc:	4613      	mov	r3, r2
 80137ce:	005b      	lsls	r3, r3, #1
 80137d0:	4413      	add	r3, r2
 80137d2:	00db      	lsls	r3, r3, #3
 80137d4:	440b      	add	r3, r1
 80137d6:	3312      	adds	r3, #18
 80137d8:	881b      	ldrh	r3, [r3, #0]
 80137da:	3301      	adds	r3, #1
 80137dc:	b298      	uxth	r0, r3
 80137de:	4943      	ldr	r1, [pc, #268]	; (80138ec <etharp_tmr+0x14c>)
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	4613      	mov	r3, r2
 80137e4:	005b      	lsls	r3, r3, #1
 80137e6:	4413      	add	r3, r2
 80137e8:	00db      	lsls	r3, r3, #3
 80137ea:	440b      	add	r3, r1
 80137ec:	3312      	adds	r3, #18
 80137ee:	4602      	mov	r2, r0
 80137f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80137f2:	493e      	ldr	r1, [pc, #248]	; (80138ec <etharp_tmr+0x14c>)
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	4613      	mov	r3, r2
 80137f8:	005b      	lsls	r3, r3, #1
 80137fa:	4413      	add	r3, r2
 80137fc:	00db      	lsls	r3, r3, #3
 80137fe:	440b      	add	r3, r1
 8013800:	3312      	adds	r3, #18
 8013802:	881b      	ldrh	r3, [r3, #0]
 8013804:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013808:	d215      	bcs.n	8013836 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801380a:	4938      	ldr	r1, [pc, #224]	; (80138ec <etharp_tmr+0x14c>)
 801380c:	687a      	ldr	r2, [r7, #4]
 801380e:	4613      	mov	r3, r2
 8013810:	005b      	lsls	r3, r3, #1
 8013812:	4413      	add	r3, r2
 8013814:	00db      	lsls	r3, r3, #3
 8013816:	440b      	add	r3, r1
 8013818:	3314      	adds	r3, #20
 801381a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801381c:	2b01      	cmp	r3, #1
 801381e:	d10e      	bne.n	801383e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013820:	4932      	ldr	r1, [pc, #200]	; (80138ec <etharp_tmr+0x14c>)
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	4613      	mov	r3, r2
 8013826:	005b      	lsls	r3, r3, #1
 8013828:	4413      	add	r3, r2
 801382a:	00db      	lsls	r3, r3, #3
 801382c:	440b      	add	r3, r1
 801382e:	3312      	adds	r3, #18
 8013830:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013832:	2b04      	cmp	r3, #4
 8013834:	d903      	bls.n	801383e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f7ff ff80 	bl	801373c <etharp_free_entry>
 801383c:	e04a      	b.n	80138d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801383e:	492b      	ldr	r1, [pc, #172]	; (80138ec <etharp_tmr+0x14c>)
 8013840:	687a      	ldr	r2, [r7, #4]
 8013842:	4613      	mov	r3, r2
 8013844:	005b      	lsls	r3, r3, #1
 8013846:	4413      	add	r3, r2
 8013848:	00db      	lsls	r3, r3, #3
 801384a:	440b      	add	r3, r1
 801384c:	3314      	adds	r3, #20
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	2b03      	cmp	r3, #3
 8013852:	d10a      	bne.n	801386a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013854:	4925      	ldr	r1, [pc, #148]	; (80138ec <etharp_tmr+0x14c>)
 8013856:	687a      	ldr	r2, [r7, #4]
 8013858:	4613      	mov	r3, r2
 801385a:	005b      	lsls	r3, r3, #1
 801385c:	4413      	add	r3, r2
 801385e:	00db      	lsls	r3, r3, #3
 8013860:	440b      	add	r3, r1
 8013862:	3314      	adds	r3, #20
 8013864:	2204      	movs	r2, #4
 8013866:	701a      	strb	r2, [r3, #0]
 8013868:	e034      	b.n	80138d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801386a:	4920      	ldr	r1, [pc, #128]	; (80138ec <etharp_tmr+0x14c>)
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	4613      	mov	r3, r2
 8013870:	005b      	lsls	r3, r3, #1
 8013872:	4413      	add	r3, r2
 8013874:	00db      	lsls	r3, r3, #3
 8013876:	440b      	add	r3, r1
 8013878:	3314      	adds	r3, #20
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	2b04      	cmp	r3, #4
 801387e:	d10a      	bne.n	8013896 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013880:	491a      	ldr	r1, [pc, #104]	; (80138ec <etharp_tmr+0x14c>)
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	4613      	mov	r3, r2
 8013886:	005b      	lsls	r3, r3, #1
 8013888:	4413      	add	r3, r2
 801388a:	00db      	lsls	r3, r3, #3
 801388c:	440b      	add	r3, r1
 801388e:	3314      	adds	r3, #20
 8013890:	2202      	movs	r2, #2
 8013892:	701a      	strb	r2, [r3, #0]
 8013894:	e01e      	b.n	80138d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013896:	4915      	ldr	r1, [pc, #84]	; (80138ec <etharp_tmr+0x14c>)
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	4613      	mov	r3, r2
 801389c:	005b      	lsls	r3, r3, #1
 801389e:	4413      	add	r3, r2
 80138a0:	00db      	lsls	r3, r3, #3
 80138a2:	440b      	add	r3, r1
 80138a4:	3314      	adds	r3, #20
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	2b01      	cmp	r3, #1
 80138aa:	d113      	bne.n	80138d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80138ac:	490f      	ldr	r1, [pc, #60]	; (80138ec <etharp_tmr+0x14c>)
 80138ae:	687a      	ldr	r2, [r7, #4]
 80138b0:	4613      	mov	r3, r2
 80138b2:	005b      	lsls	r3, r3, #1
 80138b4:	4413      	add	r3, r2
 80138b6:	00db      	lsls	r3, r3, #3
 80138b8:	440b      	add	r3, r1
 80138ba:	3308      	adds	r3, #8
 80138bc:	6818      	ldr	r0, [r3, #0]
 80138be:	687a      	ldr	r2, [r7, #4]
 80138c0:	4613      	mov	r3, r2
 80138c2:	005b      	lsls	r3, r3, #1
 80138c4:	4413      	add	r3, r2
 80138c6:	00db      	lsls	r3, r3, #3
 80138c8:	4a08      	ldr	r2, [pc, #32]	; (80138ec <etharp_tmr+0x14c>)
 80138ca:	4413      	add	r3, r2
 80138cc:	3304      	adds	r3, #4
 80138ce:	4619      	mov	r1, r3
 80138d0:	f000 fe6e 	bl	80145b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	3301      	adds	r3, #1
 80138d8:	607b      	str	r3, [r7, #4]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	2b09      	cmp	r3, #9
 80138de:	f77f af65 	ble.w	80137ac <etharp_tmr+0xc>
      }
    }
  }
}
 80138e2:	bf00      	nop
 80138e4:	bf00      	nop
 80138e6:	3708      	adds	r7, #8
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	200304b0 	.word	0x200304b0

080138f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b08a      	sub	sp, #40	; 0x28
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	460b      	mov	r3, r1
 80138fa:	607a      	str	r2, [r7, #4]
 80138fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80138fe:	230a      	movs	r3, #10
 8013900:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013902:	230a      	movs	r3, #10
 8013904:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013906:	230a      	movs	r3, #10
 8013908:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801390a:	2300      	movs	r3, #0
 801390c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801390e:	230a      	movs	r3, #10
 8013910:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013912:	2300      	movs	r3, #0
 8013914:	83bb      	strh	r3, [r7, #28]
 8013916:	2300      	movs	r3, #0
 8013918:	837b      	strh	r3, [r7, #26]
 801391a:	2300      	movs	r3, #0
 801391c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801391e:	2300      	movs	r3, #0
 8013920:	843b      	strh	r3, [r7, #32]
 8013922:	e0ae      	b.n	8013a82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013924:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013928:	49a6      	ldr	r1, [pc, #664]	; (8013bc4 <etharp_find_entry+0x2d4>)
 801392a:	4613      	mov	r3, r2
 801392c:	005b      	lsls	r3, r3, #1
 801392e:	4413      	add	r3, r2
 8013930:	00db      	lsls	r3, r3, #3
 8013932:	440b      	add	r3, r1
 8013934:	3314      	adds	r3, #20
 8013936:	781b      	ldrb	r3, [r3, #0]
 8013938:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801393a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801393e:	2b0a      	cmp	r3, #10
 8013940:	d105      	bne.n	801394e <etharp_find_entry+0x5e>
 8013942:	7dfb      	ldrb	r3, [r7, #23]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d102      	bne.n	801394e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013948:	8c3b      	ldrh	r3, [r7, #32]
 801394a:	847b      	strh	r3, [r7, #34]	; 0x22
 801394c:	e095      	b.n	8013a7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801394e:	7dfb      	ldrb	r3, [r7, #23]
 8013950:	2b00      	cmp	r3, #0
 8013952:	f000 8092 	beq.w	8013a7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013956:	7dfb      	ldrb	r3, [r7, #23]
 8013958:	2b01      	cmp	r3, #1
 801395a:	d009      	beq.n	8013970 <etharp_find_entry+0x80>
 801395c:	7dfb      	ldrb	r3, [r7, #23]
 801395e:	2b01      	cmp	r3, #1
 8013960:	d806      	bhi.n	8013970 <etharp_find_entry+0x80>
 8013962:	4b99      	ldr	r3, [pc, #612]	; (8013bc8 <etharp_find_entry+0x2d8>)
 8013964:	f240 1223 	movw	r2, #291	; 0x123
 8013968:	4998      	ldr	r1, [pc, #608]	; (8013bcc <etharp_find_entry+0x2dc>)
 801396a:	4899      	ldr	r0, [pc, #612]	; (8013bd0 <etharp_find_entry+0x2e0>)
 801396c:	f002 fcc8 	bl	8016300 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d020      	beq.n	80139b8 <etharp_find_entry+0xc8>
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	6819      	ldr	r1, [r3, #0]
 801397a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801397e:	4891      	ldr	r0, [pc, #580]	; (8013bc4 <etharp_find_entry+0x2d4>)
 8013980:	4613      	mov	r3, r2
 8013982:	005b      	lsls	r3, r3, #1
 8013984:	4413      	add	r3, r2
 8013986:	00db      	lsls	r3, r3, #3
 8013988:	4403      	add	r3, r0
 801398a:	3304      	adds	r3, #4
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	4299      	cmp	r1, r3
 8013990:	d112      	bne.n	80139b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d00c      	beq.n	80139b2 <etharp_find_entry+0xc2>
 8013998:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801399c:	4989      	ldr	r1, [pc, #548]	; (8013bc4 <etharp_find_entry+0x2d4>)
 801399e:	4613      	mov	r3, r2
 80139a0:	005b      	lsls	r3, r3, #1
 80139a2:	4413      	add	r3, r2
 80139a4:	00db      	lsls	r3, r3, #3
 80139a6:	440b      	add	r3, r1
 80139a8:	3308      	adds	r3, #8
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	687a      	ldr	r2, [r7, #4]
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d102      	bne.n	80139b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80139b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80139b6:	e100      	b.n	8013bba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80139b8:	7dfb      	ldrb	r3, [r7, #23]
 80139ba:	2b01      	cmp	r3, #1
 80139bc:	d140      	bne.n	8013a40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80139be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139c2:	4980      	ldr	r1, [pc, #512]	; (8013bc4 <etharp_find_entry+0x2d4>)
 80139c4:	4613      	mov	r3, r2
 80139c6:	005b      	lsls	r3, r3, #1
 80139c8:	4413      	add	r3, r2
 80139ca:	00db      	lsls	r3, r3, #3
 80139cc:	440b      	add	r3, r1
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d01a      	beq.n	8013a0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80139d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139d8:	497a      	ldr	r1, [pc, #488]	; (8013bc4 <etharp_find_entry+0x2d4>)
 80139da:	4613      	mov	r3, r2
 80139dc:	005b      	lsls	r3, r3, #1
 80139de:	4413      	add	r3, r2
 80139e0:	00db      	lsls	r3, r3, #3
 80139e2:	440b      	add	r3, r1
 80139e4:	3312      	adds	r3, #18
 80139e6:	881b      	ldrh	r3, [r3, #0]
 80139e8:	8bba      	ldrh	r2, [r7, #28]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d845      	bhi.n	8013a7a <etharp_find_entry+0x18a>
            old_queue = i;
 80139ee:	8c3b      	ldrh	r3, [r7, #32]
 80139f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80139f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139f6:	4973      	ldr	r1, [pc, #460]	; (8013bc4 <etharp_find_entry+0x2d4>)
 80139f8:	4613      	mov	r3, r2
 80139fa:	005b      	lsls	r3, r3, #1
 80139fc:	4413      	add	r3, r2
 80139fe:	00db      	lsls	r3, r3, #3
 8013a00:	440b      	add	r3, r1
 8013a02:	3312      	adds	r3, #18
 8013a04:	881b      	ldrh	r3, [r3, #0]
 8013a06:	83bb      	strh	r3, [r7, #28]
 8013a08:	e037      	b.n	8013a7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013a0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a0e:	496d      	ldr	r1, [pc, #436]	; (8013bc4 <etharp_find_entry+0x2d4>)
 8013a10:	4613      	mov	r3, r2
 8013a12:	005b      	lsls	r3, r3, #1
 8013a14:	4413      	add	r3, r2
 8013a16:	00db      	lsls	r3, r3, #3
 8013a18:	440b      	add	r3, r1
 8013a1a:	3312      	adds	r3, #18
 8013a1c:	881b      	ldrh	r3, [r3, #0]
 8013a1e:	8b7a      	ldrh	r2, [r7, #26]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d82a      	bhi.n	8013a7a <etharp_find_entry+0x18a>
            old_pending = i;
 8013a24:	8c3b      	ldrh	r3, [r7, #32]
 8013a26:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013a28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a2c:	4965      	ldr	r1, [pc, #404]	; (8013bc4 <etharp_find_entry+0x2d4>)
 8013a2e:	4613      	mov	r3, r2
 8013a30:	005b      	lsls	r3, r3, #1
 8013a32:	4413      	add	r3, r2
 8013a34:	00db      	lsls	r3, r3, #3
 8013a36:	440b      	add	r3, r1
 8013a38:	3312      	adds	r3, #18
 8013a3a:	881b      	ldrh	r3, [r3, #0]
 8013a3c:	837b      	strh	r3, [r7, #26]
 8013a3e:	e01c      	b.n	8013a7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013a40:	7dfb      	ldrb	r3, [r7, #23]
 8013a42:	2b01      	cmp	r3, #1
 8013a44:	d919      	bls.n	8013a7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013a46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a4a:	495e      	ldr	r1, [pc, #376]	; (8013bc4 <etharp_find_entry+0x2d4>)
 8013a4c:	4613      	mov	r3, r2
 8013a4e:	005b      	lsls	r3, r3, #1
 8013a50:	4413      	add	r3, r2
 8013a52:	00db      	lsls	r3, r3, #3
 8013a54:	440b      	add	r3, r1
 8013a56:	3312      	adds	r3, #18
 8013a58:	881b      	ldrh	r3, [r3, #0]
 8013a5a:	8b3a      	ldrh	r2, [r7, #24]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d80c      	bhi.n	8013a7a <etharp_find_entry+0x18a>
            old_stable = i;
 8013a60:	8c3b      	ldrh	r3, [r7, #32]
 8013a62:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013a64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a68:	4956      	ldr	r1, [pc, #344]	; (8013bc4 <etharp_find_entry+0x2d4>)
 8013a6a:	4613      	mov	r3, r2
 8013a6c:	005b      	lsls	r3, r3, #1
 8013a6e:	4413      	add	r3, r2
 8013a70:	00db      	lsls	r3, r3, #3
 8013a72:	440b      	add	r3, r1
 8013a74:	3312      	adds	r3, #18
 8013a76:	881b      	ldrh	r3, [r3, #0]
 8013a78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a7a:	8c3b      	ldrh	r3, [r7, #32]
 8013a7c:	3301      	adds	r3, #1
 8013a7e:	b29b      	uxth	r3, r3
 8013a80:	843b      	strh	r3, [r7, #32]
 8013a82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a86:	2b09      	cmp	r3, #9
 8013a88:	f77f af4c 	ble.w	8013924 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013a8c:	7afb      	ldrb	r3, [r7, #11]
 8013a8e:	f003 0302 	and.w	r3, r3, #2
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d108      	bne.n	8013aa8 <etharp_find_entry+0x1b8>
 8013a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013a9a:	2b0a      	cmp	r3, #10
 8013a9c:	d107      	bne.n	8013aae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013a9e:	7afb      	ldrb	r3, [r7, #11]
 8013aa0:	f003 0301 	and.w	r3, r3, #1
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d102      	bne.n	8013aae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013aac:	e085      	b.n	8013bba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013aae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013ab2:	2b09      	cmp	r3, #9
 8013ab4:	dc02      	bgt.n	8013abc <etharp_find_entry+0x1cc>
    i = empty;
 8013ab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ab8:	843b      	strh	r3, [r7, #32]
 8013aba:	e039      	b.n	8013b30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013abc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013ac0:	2b09      	cmp	r3, #9
 8013ac2:	dc14      	bgt.n	8013aee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ac6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013ac8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013acc:	493d      	ldr	r1, [pc, #244]	; (8013bc4 <etharp_find_entry+0x2d4>)
 8013ace:	4613      	mov	r3, r2
 8013ad0:	005b      	lsls	r3, r3, #1
 8013ad2:	4413      	add	r3, r2
 8013ad4:	00db      	lsls	r3, r3, #3
 8013ad6:	440b      	add	r3, r1
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d018      	beq.n	8013b10 <etharp_find_entry+0x220>
 8013ade:	4b3a      	ldr	r3, [pc, #232]	; (8013bc8 <etharp_find_entry+0x2d8>)
 8013ae0:	f240 126d 	movw	r2, #365	; 0x16d
 8013ae4:	493b      	ldr	r1, [pc, #236]	; (8013bd4 <etharp_find_entry+0x2e4>)
 8013ae6:	483a      	ldr	r0, [pc, #232]	; (8013bd0 <etharp_find_entry+0x2e0>)
 8013ae8:	f002 fc0a 	bl	8016300 <iprintf>
 8013aec:	e010      	b.n	8013b10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013aee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013af2:	2b09      	cmp	r3, #9
 8013af4:	dc02      	bgt.n	8013afc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013af6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013af8:	843b      	strh	r3, [r7, #32]
 8013afa:	e009      	b.n	8013b10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013afc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013b00:	2b09      	cmp	r3, #9
 8013b02:	dc02      	bgt.n	8013b0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013b04:	8bfb      	ldrh	r3, [r7, #30]
 8013b06:	843b      	strh	r3, [r7, #32]
 8013b08:	e002      	b.n	8013b10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b0e:	e054      	b.n	8013bba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013b10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b14:	2b09      	cmp	r3, #9
 8013b16:	dd06      	ble.n	8013b26 <etharp_find_entry+0x236>
 8013b18:	4b2b      	ldr	r3, [pc, #172]	; (8013bc8 <etharp_find_entry+0x2d8>)
 8013b1a:	f240 127f 	movw	r2, #383	; 0x17f
 8013b1e:	492e      	ldr	r1, [pc, #184]	; (8013bd8 <etharp_find_entry+0x2e8>)
 8013b20:	482b      	ldr	r0, [pc, #172]	; (8013bd0 <etharp_find_entry+0x2e0>)
 8013b22:	f002 fbed 	bl	8016300 <iprintf>
    etharp_free_entry(i);
 8013b26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7ff fe06 	bl	801373c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013b30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b34:	2b09      	cmp	r3, #9
 8013b36:	dd06      	ble.n	8013b46 <etharp_find_entry+0x256>
 8013b38:	4b23      	ldr	r3, [pc, #140]	; (8013bc8 <etharp_find_entry+0x2d8>)
 8013b3a:	f240 1283 	movw	r2, #387	; 0x183
 8013b3e:	4926      	ldr	r1, [pc, #152]	; (8013bd8 <etharp_find_entry+0x2e8>)
 8013b40:	4823      	ldr	r0, [pc, #140]	; (8013bd0 <etharp_find_entry+0x2e0>)
 8013b42:	f002 fbdd 	bl	8016300 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013b46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b4a:	491e      	ldr	r1, [pc, #120]	; (8013bc4 <etharp_find_entry+0x2d4>)
 8013b4c:	4613      	mov	r3, r2
 8013b4e:	005b      	lsls	r3, r3, #1
 8013b50:	4413      	add	r3, r2
 8013b52:	00db      	lsls	r3, r3, #3
 8013b54:	440b      	add	r3, r1
 8013b56:	3314      	adds	r3, #20
 8013b58:	781b      	ldrb	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d006      	beq.n	8013b6c <etharp_find_entry+0x27c>
 8013b5e:	4b1a      	ldr	r3, [pc, #104]	; (8013bc8 <etharp_find_entry+0x2d8>)
 8013b60:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013b64:	491d      	ldr	r1, [pc, #116]	; (8013bdc <etharp_find_entry+0x2ec>)
 8013b66:	481a      	ldr	r0, [pc, #104]	; (8013bd0 <etharp_find_entry+0x2e0>)
 8013b68:	f002 fbca 	bl	8016300 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d00b      	beq.n	8013b8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013b72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	6819      	ldr	r1, [r3, #0]
 8013b7a:	4812      	ldr	r0, [pc, #72]	; (8013bc4 <etharp_find_entry+0x2d4>)
 8013b7c:	4613      	mov	r3, r2
 8013b7e:	005b      	lsls	r3, r3, #1
 8013b80:	4413      	add	r3, r2
 8013b82:	00db      	lsls	r3, r3, #3
 8013b84:	4403      	add	r3, r0
 8013b86:	3304      	adds	r3, #4
 8013b88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b8e:	490d      	ldr	r1, [pc, #52]	; (8013bc4 <etharp_find_entry+0x2d4>)
 8013b90:	4613      	mov	r3, r2
 8013b92:	005b      	lsls	r3, r3, #1
 8013b94:	4413      	add	r3, r2
 8013b96:	00db      	lsls	r3, r3, #3
 8013b98:	440b      	add	r3, r1
 8013b9a:	3312      	adds	r3, #18
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013ba0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ba4:	4907      	ldr	r1, [pc, #28]	; (8013bc4 <etharp_find_entry+0x2d4>)
 8013ba6:	4613      	mov	r3, r2
 8013ba8:	005b      	lsls	r3, r3, #1
 8013baa:	4413      	add	r3, r2
 8013bac:	00db      	lsls	r3, r3, #3
 8013bae:	440b      	add	r3, r1
 8013bb0:	3308      	adds	r3, #8
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013bb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3728      	adds	r7, #40	; 0x28
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	200304b0 	.word	0x200304b0
 8013bc8:	08019f54 	.word	0x08019f54
 8013bcc:	08019f8c 	.word	0x08019f8c
 8013bd0:	08019fcc 	.word	0x08019fcc
 8013bd4:	08019ff4 	.word	0x08019ff4
 8013bd8:	0801a00c 	.word	0x0801a00c
 8013bdc:	0801a020 	.word	0x0801a020

08013be0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b088      	sub	sp, #32
 8013be4:	af02      	add	r7, sp, #8
 8013be6:	60f8      	str	r0, [r7, #12]
 8013be8:	60b9      	str	r1, [r7, #8]
 8013bea:	607a      	str	r2, [r7, #4]
 8013bec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013bf4:	2b06      	cmp	r3, #6
 8013bf6:	d006      	beq.n	8013c06 <etharp_update_arp_entry+0x26>
 8013bf8:	4b48      	ldr	r3, [pc, #288]	; (8013d1c <etharp_update_arp_entry+0x13c>)
 8013bfa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013bfe:	4948      	ldr	r1, [pc, #288]	; (8013d20 <etharp_update_arp_entry+0x140>)
 8013c00:	4848      	ldr	r0, [pc, #288]	; (8013d24 <etharp_update_arp_entry+0x144>)
 8013c02:	f002 fb7d 	bl	8016300 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d012      	beq.n	8013c32 <etharp_update_arp_entry+0x52>
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d00e      	beq.n	8013c32 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	68f9      	ldr	r1, [r7, #12]
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f001 f8fe 	bl	8014e1c <ip4_addr_isbroadcast_u32>
 8013c20:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d105      	bne.n	8013c32 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013c2e:	2be0      	cmp	r3, #224	; 0xe0
 8013c30:	d102      	bne.n	8013c38 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013c32:	f06f 030f 	mvn.w	r3, #15
 8013c36:	e06c      	b.n	8013d12 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013c38:	78fb      	ldrb	r3, [r7, #3]
 8013c3a:	68fa      	ldr	r2, [r7, #12]
 8013c3c:	4619      	mov	r1, r3
 8013c3e:	68b8      	ldr	r0, [r7, #8]
 8013c40:	f7ff fe56 	bl	80138f0 <etharp_find_entry>
 8013c44:	4603      	mov	r3, r0
 8013c46:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013c48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	da02      	bge.n	8013c56 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013c50:	8afb      	ldrh	r3, [r7, #22]
 8013c52:	b25b      	sxtb	r3, r3
 8013c54:	e05d      	b.n	8013d12 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013c56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c5a:	4933      	ldr	r1, [pc, #204]	; (8013d28 <etharp_update_arp_entry+0x148>)
 8013c5c:	4613      	mov	r3, r2
 8013c5e:	005b      	lsls	r3, r3, #1
 8013c60:	4413      	add	r3, r2
 8013c62:	00db      	lsls	r3, r3, #3
 8013c64:	440b      	add	r3, r1
 8013c66:	3314      	adds	r3, #20
 8013c68:	2202      	movs	r2, #2
 8013c6a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013c6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c70:	492d      	ldr	r1, [pc, #180]	; (8013d28 <etharp_update_arp_entry+0x148>)
 8013c72:	4613      	mov	r3, r2
 8013c74:	005b      	lsls	r3, r3, #1
 8013c76:	4413      	add	r3, r2
 8013c78:	00db      	lsls	r3, r3, #3
 8013c7a:	440b      	add	r3, r1
 8013c7c:	3308      	adds	r3, #8
 8013c7e:	68fa      	ldr	r2, [r7, #12]
 8013c80:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013c82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c86:	4613      	mov	r3, r2
 8013c88:	005b      	lsls	r3, r3, #1
 8013c8a:	4413      	add	r3, r2
 8013c8c:	00db      	lsls	r3, r3, #3
 8013c8e:	3308      	adds	r3, #8
 8013c90:	4a25      	ldr	r2, [pc, #148]	; (8013d28 <etharp_update_arp_entry+0x148>)
 8013c92:	4413      	add	r3, r2
 8013c94:	3304      	adds	r3, #4
 8013c96:	2206      	movs	r2, #6
 8013c98:	6879      	ldr	r1, [r7, #4]
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f002 fa6b 	bl	8016176 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013ca0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ca4:	4920      	ldr	r1, [pc, #128]	; (8013d28 <etharp_update_arp_entry+0x148>)
 8013ca6:	4613      	mov	r3, r2
 8013ca8:	005b      	lsls	r3, r3, #1
 8013caa:	4413      	add	r3, r2
 8013cac:	00db      	lsls	r3, r3, #3
 8013cae:	440b      	add	r3, r1
 8013cb0:	3312      	adds	r3, #18
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013cb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cba:	491b      	ldr	r1, [pc, #108]	; (8013d28 <etharp_update_arp_entry+0x148>)
 8013cbc:	4613      	mov	r3, r2
 8013cbe:	005b      	lsls	r3, r3, #1
 8013cc0:	4413      	add	r3, r2
 8013cc2:	00db      	lsls	r3, r3, #3
 8013cc4:	440b      	add	r3, r1
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d021      	beq.n	8013d10 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013ccc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cd0:	4915      	ldr	r1, [pc, #84]	; (8013d28 <etharp_update_arp_entry+0x148>)
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	005b      	lsls	r3, r3, #1
 8013cd6:	4413      	add	r3, r2
 8013cd8:	00db      	lsls	r3, r3, #3
 8013cda:	440b      	add	r3, r1
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013ce0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ce4:	4910      	ldr	r1, [pc, #64]	; (8013d28 <etharp_update_arp_entry+0x148>)
 8013ce6:	4613      	mov	r3, r2
 8013ce8:	005b      	lsls	r3, r3, #1
 8013cea:	4413      	add	r3, r2
 8013cec:	00db      	lsls	r3, r3, #3
 8013cee:	440b      	add	r3, r1
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013cfe:	9300      	str	r3, [sp, #0]
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6939      	ldr	r1, [r7, #16]
 8013d04:	68f8      	ldr	r0, [r7, #12]
 8013d06:	f001 ff97 	bl	8015c38 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013d0a:	6938      	ldr	r0, [r7, #16]
 8013d0c:	f7f9 f9b8 	bl	800d080 <pbuf_free>
  }
  return ERR_OK;
 8013d10:	2300      	movs	r3, #0
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3718      	adds	r7, #24
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	08019f54 	.word	0x08019f54
 8013d20:	0801a04c 	.word	0x0801a04c
 8013d24:	08019fcc 	.word	0x08019fcc
 8013d28:	200304b0 	.word	0x200304b0

08013d2c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d34:	2300      	movs	r3, #0
 8013d36:	60fb      	str	r3, [r7, #12]
 8013d38:	e01e      	b.n	8013d78 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013d3a:	4913      	ldr	r1, [pc, #76]	; (8013d88 <etharp_cleanup_netif+0x5c>)
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	4613      	mov	r3, r2
 8013d40:	005b      	lsls	r3, r3, #1
 8013d42:	4413      	add	r3, r2
 8013d44:	00db      	lsls	r3, r3, #3
 8013d46:	440b      	add	r3, r1
 8013d48:	3314      	adds	r3, #20
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013d4e:	7afb      	ldrb	r3, [r7, #11]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d00e      	beq.n	8013d72 <etharp_cleanup_netif+0x46>
 8013d54:	490c      	ldr	r1, [pc, #48]	; (8013d88 <etharp_cleanup_netif+0x5c>)
 8013d56:	68fa      	ldr	r2, [r7, #12]
 8013d58:	4613      	mov	r3, r2
 8013d5a:	005b      	lsls	r3, r3, #1
 8013d5c:	4413      	add	r3, r2
 8013d5e:	00db      	lsls	r3, r3, #3
 8013d60:	440b      	add	r3, r1
 8013d62:	3308      	adds	r3, #8
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d102      	bne.n	8013d72 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013d6c:	68f8      	ldr	r0, [r7, #12]
 8013d6e:	f7ff fce5 	bl	801373c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	3301      	adds	r3, #1
 8013d76:	60fb      	str	r3, [r7, #12]
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2b09      	cmp	r3, #9
 8013d7c:	dddd      	ble.n	8013d3a <etharp_cleanup_netif+0xe>
    }
  }
}
 8013d7e:	bf00      	nop
 8013d80:	bf00      	nop
 8013d82:	3710      	adds	r7, #16
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}
 8013d88:	200304b0 	.word	0x200304b0

08013d8c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013d8c:	b5b0      	push	{r4, r5, r7, lr}
 8013d8e:	b08a      	sub	sp, #40	; 0x28
 8013d90:	af04      	add	r7, sp, #16
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013d96:	683b      	ldr	r3, [r7, #0]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d107      	bne.n	8013dac <etharp_input+0x20>
 8013d9c:	4b3d      	ldr	r3, [pc, #244]	; (8013e94 <etharp_input+0x108>)
 8013d9e:	f240 228a 	movw	r2, #650	; 0x28a
 8013da2:	493d      	ldr	r1, [pc, #244]	; (8013e98 <etharp_input+0x10c>)
 8013da4:	483d      	ldr	r0, [pc, #244]	; (8013e9c <etharp_input+0x110>)
 8013da6:	f002 faab 	bl	8016300 <iprintf>
 8013daa:	e06f      	b.n	8013e8c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	685b      	ldr	r3, [r3, #4]
 8013db0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	881b      	ldrh	r3, [r3, #0]
 8013db6:	b29b      	uxth	r3, r3
 8013db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013dbc:	d10c      	bne.n	8013dd8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013dbe:	693b      	ldr	r3, [r7, #16]
 8013dc0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013dc2:	2b06      	cmp	r3, #6
 8013dc4:	d108      	bne.n	8013dd8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013dca:	2b04      	cmp	r3, #4
 8013dcc:	d104      	bne.n	8013dd8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	885b      	ldrh	r3, [r3, #2]
 8013dd2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013dd4:	2b08      	cmp	r3, #8
 8013dd6:	d003      	beq.n	8013de0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013dd8:	6878      	ldr	r0, [r7, #4]
 8013dda:	f7f9 f951 	bl	800d080 <pbuf_free>
    return;
 8013dde:	e055      	b.n	8013e8c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	330e      	adds	r3, #14
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	3318      	adds	r3, #24
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	3304      	adds	r3, #4
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d102      	bne.n	8013e00 <etharp_input+0x74>
    for_us = 0;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	75fb      	strb	r3, [r7, #23]
 8013dfe:	e009      	b.n	8013e14 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013e00:	68ba      	ldr	r2, [r7, #8]
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	3304      	adds	r3, #4
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	bf0c      	ite	eq
 8013e0c:	2301      	moveq	r3, #1
 8013e0e:	2300      	movne	r3, #0
 8013e10:	b2db      	uxtb	r3, r3
 8013e12:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	f103 0208 	add.w	r2, r3, #8
 8013e1a:	7dfb      	ldrb	r3, [r7, #23]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d001      	beq.n	8013e24 <etharp_input+0x98>
 8013e20:	2301      	movs	r3, #1
 8013e22:	e000      	b.n	8013e26 <etharp_input+0x9a>
 8013e24:	2302      	movs	r3, #2
 8013e26:	f107 010c 	add.w	r1, r7, #12
 8013e2a:	6838      	ldr	r0, [r7, #0]
 8013e2c:	f7ff fed8 	bl	8013be0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	88db      	ldrh	r3, [r3, #6]
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e3a:	d003      	beq.n	8013e44 <etharp_input+0xb8>
 8013e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e40:	d01e      	beq.n	8013e80 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013e42:	e020      	b.n	8013e86 <etharp_input+0xfa>
      if (for_us) {
 8013e44:	7dfb      	ldrb	r3, [r7, #23]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d01c      	beq.n	8013e84 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013e50:	693b      	ldr	r3, [r7, #16]
 8013e52:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013e60:	693a      	ldr	r2, [r7, #16]
 8013e62:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013e64:	2102      	movs	r1, #2
 8013e66:	9103      	str	r1, [sp, #12]
 8013e68:	f107 010c 	add.w	r1, r7, #12
 8013e6c:	9102      	str	r1, [sp, #8]
 8013e6e:	9201      	str	r2, [sp, #4]
 8013e70:	9300      	str	r3, [sp, #0]
 8013e72:	462b      	mov	r3, r5
 8013e74:	4622      	mov	r2, r4
 8013e76:	4601      	mov	r1, r0
 8013e78:	6838      	ldr	r0, [r7, #0]
 8013e7a:	f000 faeb 	bl	8014454 <etharp_raw>
      break;
 8013e7e:	e001      	b.n	8013e84 <etharp_input+0xf8>
      break;
 8013e80:	bf00      	nop
 8013e82:	e000      	b.n	8013e86 <etharp_input+0xfa>
      break;
 8013e84:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f7f9 f8fa 	bl	800d080 <pbuf_free>
}
 8013e8c:	3718      	adds	r7, #24
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bdb0      	pop	{r4, r5, r7, pc}
 8013e92:	bf00      	nop
 8013e94:	08019f54 	.word	0x08019f54
 8013e98:	0801a0a4 	.word	0x0801a0a4
 8013e9c:	08019fcc 	.word	0x08019fcc

08013ea0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b086      	sub	sp, #24
 8013ea4:	af02      	add	r7, sp, #8
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	4613      	mov	r3, r2
 8013eac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013eae:	79fa      	ldrb	r2, [r7, #7]
 8013eb0:	4944      	ldr	r1, [pc, #272]	; (8013fc4 <etharp_output_to_arp_index+0x124>)
 8013eb2:	4613      	mov	r3, r2
 8013eb4:	005b      	lsls	r3, r3, #1
 8013eb6:	4413      	add	r3, r2
 8013eb8:	00db      	lsls	r3, r3, #3
 8013eba:	440b      	add	r3, r1
 8013ebc:	3314      	adds	r3, #20
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d806      	bhi.n	8013ed2 <etharp_output_to_arp_index+0x32>
 8013ec4:	4b40      	ldr	r3, [pc, #256]	; (8013fc8 <etharp_output_to_arp_index+0x128>)
 8013ec6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013eca:	4940      	ldr	r1, [pc, #256]	; (8013fcc <etharp_output_to_arp_index+0x12c>)
 8013ecc:	4840      	ldr	r0, [pc, #256]	; (8013fd0 <etharp_output_to_arp_index+0x130>)
 8013ece:	f002 fa17 	bl	8016300 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013ed2:	79fa      	ldrb	r2, [r7, #7]
 8013ed4:	493b      	ldr	r1, [pc, #236]	; (8013fc4 <etharp_output_to_arp_index+0x124>)
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	005b      	lsls	r3, r3, #1
 8013eda:	4413      	add	r3, r2
 8013edc:	00db      	lsls	r3, r3, #3
 8013ede:	440b      	add	r3, r1
 8013ee0:	3314      	adds	r3, #20
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	2b02      	cmp	r3, #2
 8013ee6:	d153      	bne.n	8013f90 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013ee8:	79fa      	ldrb	r2, [r7, #7]
 8013eea:	4936      	ldr	r1, [pc, #216]	; (8013fc4 <etharp_output_to_arp_index+0x124>)
 8013eec:	4613      	mov	r3, r2
 8013eee:	005b      	lsls	r3, r3, #1
 8013ef0:	4413      	add	r3, r2
 8013ef2:	00db      	lsls	r3, r3, #3
 8013ef4:	440b      	add	r3, r1
 8013ef6:	3312      	adds	r3, #18
 8013ef8:	881b      	ldrh	r3, [r3, #0]
 8013efa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013efe:	d919      	bls.n	8013f34 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013f00:	79fa      	ldrb	r2, [r7, #7]
 8013f02:	4613      	mov	r3, r2
 8013f04:	005b      	lsls	r3, r3, #1
 8013f06:	4413      	add	r3, r2
 8013f08:	00db      	lsls	r3, r3, #3
 8013f0a:	4a2e      	ldr	r2, [pc, #184]	; (8013fc4 <etharp_output_to_arp_index+0x124>)
 8013f0c:	4413      	add	r3, r2
 8013f0e:	3304      	adds	r3, #4
 8013f10:	4619      	mov	r1, r3
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	f000 fb4c 	bl	80145b0 <etharp_request>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d138      	bne.n	8013f90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013f1e:	79fa      	ldrb	r2, [r7, #7]
 8013f20:	4928      	ldr	r1, [pc, #160]	; (8013fc4 <etharp_output_to_arp_index+0x124>)
 8013f22:	4613      	mov	r3, r2
 8013f24:	005b      	lsls	r3, r3, #1
 8013f26:	4413      	add	r3, r2
 8013f28:	00db      	lsls	r3, r3, #3
 8013f2a:	440b      	add	r3, r1
 8013f2c:	3314      	adds	r3, #20
 8013f2e:	2203      	movs	r2, #3
 8013f30:	701a      	strb	r2, [r3, #0]
 8013f32:	e02d      	b.n	8013f90 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013f34:	79fa      	ldrb	r2, [r7, #7]
 8013f36:	4923      	ldr	r1, [pc, #140]	; (8013fc4 <etharp_output_to_arp_index+0x124>)
 8013f38:	4613      	mov	r3, r2
 8013f3a:	005b      	lsls	r3, r3, #1
 8013f3c:	4413      	add	r3, r2
 8013f3e:	00db      	lsls	r3, r3, #3
 8013f40:	440b      	add	r3, r1
 8013f42:	3312      	adds	r3, #18
 8013f44:	881b      	ldrh	r3, [r3, #0]
 8013f46:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013f4a:	d321      	bcc.n	8013f90 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013f4c:	79fa      	ldrb	r2, [r7, #7]
 8013f4e:	4613      	mov	r3, r2
 8013f50:	005b      	lsls	r3, r3, #1
 8013f52:	4413      	add	r3, r2
 8013f54:	00db      	lsls	r3, r3, #3
 8013f56:	4a1b      	ldr	r2, [pc, #108]	; (8013fc4 <etharp_output_to_arp_index+0x124>)
 8013f58:	4413      	add	r3, r2
 8013f5a:	1d19      	adds	r1, r3, #4
 8013f5c:	79fa      	ldrb	r2, [r7, #7]
 8013f5e:	4613      	mov	r3, r2
 8013f60:	005b      	lsls	r3, r3, #1
 8013f62:	4413      	add	r3, r2
 8013f64:	00db      	lsls	r3, r3, #3
 8013f66:	3308      	adds	r3, #8
 8013f68:	4a16      	ldr	r2, [pc, #88]	; (8013fc4 <etharp_output_to_arp_index+0x124>)
 8013f6a:	4413      	add	r3, r2
 8013f6c:	3304      	adds	r3, #4
 8013f6e:	461a      	mov	r2, r3
 8013f70:	68f8      	ldr	r0, [r7, #12]
 8013f72:	f000 fafb 	bl	801456c <etharp_request_dst>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d109      	bne.n	8013f90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013f7c:	79fa      	ldrb	r2, [r7, #7]
 8013f7e:	4911      	ldr	r1, [pc, #68]	; (8013fc4 <etharp_output_to_arp_index+0x124>)
 8013f80:	4613      	mov	r3, r2
 8013f82:	005b      	lsls	r3, r3, #1
 8013f84:	4413      	add	r3, r2
 8013f86:	00db      	lsls	r3, r3, #3
 8013f88:	440b      	add	r3, r1
 8013f8a:	3314      	adds	r3, #20
 8013f8c:	2203      	movs	r2, #3
 8013f8e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013f96:	79fa      	ldrb	r2, [r7, #7]
 8013f98:	4613      	mov	r3, r2
 8013f9a:	005b      	lsls	r3, r3, #1
 8013f9c:	4413      	add	r3, r2
 8013f9e:	00db      	lsls	r3, r3, #3
 8013fa0:	3308      	adds	r3, #8
 8013fa2:	4a08      	ldr	r2, [pc, #32]	; (8013fc4 <etharp_output_to_arp_index+0x124>)
 8013fa4:	4413      	add	r3, r2
 8013fa6:	3304      	adds	r3, #4
 8013fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013fac:	9200      	str	r2, [sp, #0]
 8013fae:	460a      	mov	r2, r1
 8013fb0:	68b9      	ldr	r1, [r7, #8]
 8013fb2:	68f8      	ldr	r0, [r7, #12]
 8013fb4:	f001 fe40 	bl	8015c38 <ethernet_output>
 8013fb8:	4603      	mov	r3, r0
}
 8013fba:	4618      	mov	r0, r3
 8013fbc:	3710      	adds	r7, #16
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}
 8013fc2:	bf00      	nop
 8013fc4:	200304b0 	.word	0x200304b0
 8013fc8:	08019f54 	.word	0x08019f54
 8013fcc:	0801a0c4 	.word	0x0801a0c4
 8013fd0:	08019fcc 	.word	0x08019fcc

08013fd4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b08a      	sub	sp, #40	; 0x28
 8013fd8:	af02      	add	r7, sp, #8
 8013fda:	60f8      	str	r0, [r7, #12]
 8013fdc:	60b9      	str	r1, [r7, #8]
 8013fde:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d106      	bne.n	8013ff8 <etharp_output+0x24>
 8013fea:	4b73      	ldr	r3, [pc, #460]	; (80141b8 <etharp_output+0x1e4>)
 8013fec:	f240 321e 	movw	r2, #798	; 0x31e
 8013ff0:	4972      	ldr	r1, [pc, #456]	; (80141bc <etharp_output+0x1e8>)
 8013ff2:	4873      	ldr	r0, [pc, #460]	; (80141c0 <etharp_output+0x1ec>)
 8013ff4:	f002 f984 	bl	8016300 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d106      	bne.n	801400c <etharp_output+0x38>
 8013ffe:	4b6e      	ldr	r3, [pc, #440]	; (80141b8 <etharp_output+0x1e4>)
 8014000:	f240 321f 	movw	r2, #799	; 0x31f
 8014004:	496f      	ldr	r1, [pc, #444]	; (80141c4 <etharp_output+0x1f0>)
 8014006:	486e      	ldr	r0, [pc, #440]	; (80141c0 <etharp_output+0x1ec>)
 8014008:	f002 f97a 	bl	8016300 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d106      	bne.n	8014020 <etharp_output+0x4c>
 8014012:	4b69      	ldr	r3, [pc, #420]	; (80141b8 <etharp_output+0x1e4>)
 8014014:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014018:	496b      	ldr	r1, [pc, #428]	; (80141c8 <etharp_output+0x1f4>)
 801401a:	4869      	ldr	r0, [pc, #420]	; (80141c0 <etharp_output+0x1ec>)
 801401c:	f002 f970 	bl	8016300 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	68f9      	ldr	r1, [r7, #12]
 8014026:	4618      	mov	r0, r3
 8014028:	f000 fef8 	bl	8014e1c <ip4_addr_isbroadcast_u32>
 801402c:	4603      	mov	r3, r0
 801402e:	2b00      	cmp	r3, #0
 8014030:	d002      	beq.n	8014038 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014032:	4b66      	ldr	r3, [pc, #408]	; (80141cc <etharp_output+0x1f8>)
 8014034:	61fb      	str	r3, [r7, #28]
 8014036:	e0af      	b.n	8014198 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014040:	2be0      	cmp	r3, #224	; 0xe0
 8014042:	d118      	bne.n	8014076 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014044:	2301      	movs	r3, #1
 8014046:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014048:	2300      	movs	r3, #0
 801404a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801404c:	235e      	movs	r3, #94	; 0x5e
 801404e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	3301      	adds	r3, #1
 8014054:	781b      	ldrb	r3, [r3, #0]
 8014056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801405a:	b2db      	uxtb	r3, r3
 801405c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	3302      	adds	r3, #2
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	3303      	adds	r3, #3
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801406e:	f107 0310 	add.w	r3, r7, #16
 8014072:	61fb      	str	r3, [r7, #28]
 8014074:	e090      	b.n	8014198 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681a      	ldr	r2, [r3, #0]
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	3304      	adds	r3, #4
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	405a      	eors	r2, r3
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	3308      	adds	r3, #8
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	4013      	ands	r3, r2
 801408a:	2b00      	cmp	r3, #0
 801408c:	d012      	beq.n	80140b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014094:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014098:	4293      	cmp	r3, r2
 801409a:	d00b      	beq.n	80140b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	330c      	adds	r3, #12
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d003      	beq.n	80140ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	330c      	adds	r3, #12
 80140aa:	61bb      	str	r3, [r7, #24]
 80140ac:	e002      	b.n	80140b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80140ae:	f06f 0303 	mvn.w	r3, #3
 80140b2:	e07d      	b.n	80141b0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80140b4:	4b46      	ldr	r3, [pc, #280]	; (80141d0 <etharp_output+0x1fc>)
 80140b6:	781b      	ldrb	r3, [r3, #0]
 80140b8:	4619      	mov	r1, r3
 80140ba:	4a46      	ldr	r2, [pc, #280]	; (80141d4 <etharp_output+0x200>)
 80140bc:	460b      	mov	r3, r1
 80140be:	005b      	lsls	r3, r3, #1
 80140c0:	440b      	add	r3, r1
 80140c2:	00db      	lsls	r3, r3, #3
 80140c4:	4413      	add	r3, r2
 80140c6:	3314      	adds	r3, #20
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	2b01      	cmp	r3, #1
 80140cc:	d925      	bls.n	801411a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80140ce:	4b40      	ldr	r3, [pc, #256]	; (80141d0 <etharp_output+0x1fc>)
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	4619      	mov	r1, r3
 80140d4:	4a3f      	ldr	r2, [pc, #252]	; (80141d4 <etharp_output+0x200>)
 80140d6:	460b      	mov	r3, r1
 80140d8:	005b      	lsls	r3, r3, #1
 80140da:	440b      	add	r3, r1
 80140dc:	00db      	lsls	r3, r3, #3
 80140de:	4413      	add	r3, r2
 80140e0:	3308      	adds	r3, #8
 80140e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80140e4:	68fa      	ldr	r2, [r7, #12]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d117      	bne.n	801411a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80140ea:	69bb      	ldr	r3, [r7, #24]
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	4b38      	ldr	r3, [pc, #224]	; (80141d0 <etharp_output+0x1fc>)
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	4618      	mov	r0, r3
 80140f4:	4937      	ldr	r1, [pc, #220]	; (80141d4 <etharp_output+0x200>)
 80140f6:	4603      	mov	r3, r0
 80140f8:	005b      	lsls	r3, r3, #1
 80140fa:	4403      	add	r3, r0
 80140fc:	00db      	lsls	r3, r3, #3
 80140fe:	440b      	add	r3, r1
 8014100:	3304      	adds	r3, #4
 8014102:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014104:	429a      	cmp	r2, r3
 8014106:	d108      	bne.n	801411a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014108:	4b31      	ldr	r3, [pc, #196]	; (80141d0 <etharp_output+0x1fc>)
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	461a      	mov	r2, r3
 801410e:	68b9      	ldr	r1, [r7, #8]
 8014110:	68f8      	ldr	r0, [r7, #12]
 8014112:	f7ff fec5 	bl	8013ea0 <etharp_output_to_arp_index>
 8014116:	4603      	mov	r3, r0
 8014118:	e04a      	b.n	80141b0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801411a:	2300      	movs	r3, #0
 801411c:	75fb      	strb	r3, [r7, #23]
 801411e:	e031      	b.n	8014184 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014120:	7dfa      	ldrb	r2, [r7, #23]
 8014122:	492c      	ldr	r1, [pc, #176]	; (80141d4 <etharp_output+0x200>)
 8014124:	4613      	mov	r3, r2
 8014126:	005b      	lsls	r3, r3, #1
 8014128:	4413      	add	r3, r2
 801412a:	00db      	lsls	r3, r3, #3
 801412c:	440b      	add	r3, r1
 801412e:	3314      	adds	r3, #20
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	2b01      	cmp	r3, #1
 8014134:	d923      	bls.n	801417e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014136:	7dfa      	ldrb	r2, [r7, #23]
 8014138:	4926      	ldr	r1, [pc, #152]	; (80141d4 <etharp_output+0x200>)
 801413a:	4613      	mov	r3, r2
 801413c:	005b      	lsls	r3, r3, #1
 801413e:	4413      	add	r3, r2
 8014140:	00db      	lsls	r3, r3, #3
 8014142:	440b      	add	r3, r1
 8014144:	3308      	adds	r3, #8
 8014146:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014148:	68fa      	ldr	r2, [r7, #12]
 801414a:	429a      	cmp	r2, r3
 801414c:	d117      	bne.n	801417e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	6819      	ldr	r1, [r3, #0]
 8014152:	7dfa      	ldrb	r2, [r7, #23]
 8014154:	481f      	ldr	r0, [pc, #124]	; (80141d4 <etharp_output+0x200>)
 8014156:	4613      	mov	r3, r2
 8014158:	005b      	lsls	r3, r3, #1
 801415a:	4413      	add	r3, r2
 801415c:	00db      	lsls	r3, r3, #3
 801415e:	4403      	add	r3, r0
 8014160:	3304      	adds	r3, #4
 8014162:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014164:	4299      	cmp	r1, r3
 8014166:	d10a      	bne.n	801417e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014168:	4a19      	ldr	r2, [pc, #100]	; (80141d0 <etharp_output+0x1fc>)
 801416a:	7dfb      	ldrb	r3, [r7, #23]
 801416c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801416e:	7dfb      	ldrb	r3, [r7, #23]
 8014170:	461a      	mov	r2, r3
 8014172:	68b9      	ldr	r1, [r7, #8]
 8014174:	68f8      	ldr	r0, [r7, #12]
 8014176:	f7ff fe93 	bl	8013ea0 <etharp_output_to_arp_index>
 801417a:	4603      	mov	r3, r0
 801417c:	e018      	b.n	80141b0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801417e:	7dfb      	ldrb	r3, [r7, #23]
 8014180:	3301      	adds	r3, #1
 8014182:	75fb      	strb	r3, [r7, #23]
 8014184:	7dfb      	ldrb	r3, [r7, #23]
 8014186:	2b09      	cmp	r3, #9
 8014188:	d9ca      	bls.n	8014120 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801418a:	68ba      	ldr	r2, [r7, #8]
 801418c:	69b9      	ldr	r1, [r7, #24]
 801418e:	68f8      	ldr	r0, [r7, #12]
 8014190:	f000 f822 	bl	80141d8 <etharp_query>
 8014194:	4603      	mov	r3, r0
 8014196:	e00b      	b.n	80141b0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801419e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80141a2:	9300      	str	r3, [sp, #0]
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	68b9      	ldr	r1, [r7, #8]
 80141a8:	68f8      	ldr	r0, [r7, #12]
 80141aa:	f001 fd45 	bl	8015c38 <ethernet_output>
 80141ae:	4603      	mov	r3, r0
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3720      	adds	r7, #32
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	08019f54 	.word	0x08019f54
 80141bc:	0801a0a4 	.word	0x0801a0a4
 80141c0:	08019fcc 	.word	0x08019fcc
 80141c4:	0801a0f4 	.word	0x0801a0f4
 80141c8:	0801a094 	.word	0x0801a094
 80141cc:	0801a750 	.word	0x0801a750
 80141d0:	200305a0 	.word	0x200305a0
 80141d4:	200304b0 	.word	0x200304b0

080141d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b08c      	sub	sp, #48	; 0x30
 80141dc:	af02      	add	r7, sp, #8
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	3326      	adds	r3, #38	; 0x26
 80141e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80141ea:	23ff      	movs	r3, #255	; 0xff
 80141ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80141f0:	2300      	movs	r3, #0
 80141f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	68f9      	ldr	r1, [r7, #12]
 80141fa:	4618      	mov	r0, r3
 80141fc:	f000 fe0e 	bl	8014e1c <ip4_addr_isbroadcast_u32>
 8014200:	4603      	mov	r3, r0
 8014202:	2b00      	cmp	r3, #0
 8014204:	d10c      	bne.n	8014220 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801420e:	2be0      	cmp	r3, #224	; 0xe0
 8014210:	d006      	beq.n	8014220 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d003      	beq.n	8014220 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d102      	bne.n	8014226 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014220:	f06f 030f 	mvn.w	r3, #15
 8014224:	e101      	b.n	801442a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014226:	68fa      	ldr	r2, [r7, #12]
 8014228:	2101      	movs	r1, #1
 801422a:	68b8      	ldr	r0, [r7, #8]
 801422c:	f7ff fb60 	bl	80138f0 <etharp_find_entry>
 8014230:	4603      	mov	r3, r0
 8014232:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014238:	2b00      	cmp	r3, #0
 801423a:	da02      	bge.n	8014242 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801423c:	8a7b      	ldrh	r3, [r7, #18]
 801423e:	b25b      	sxtb	r3, r3
 8014240:	e0f3      	b.n	801442a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014242:	8a7b      	ldrh	r3, [r7, #18]
 8014244:	2b7e      	cmp	r3, #126	; 0x7e
 8014246:	d906      	bls.n	8014256 <etharp_query+0x7e>
 8014248:	4b7a      	ldr	r3, [pc, #488]	; (8014434 <etharp_query+0x25c>)
 801424a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801424e:	497a      	ldr	r1, [pc, #488]	; (8014438 <etharp_query+0x260>)
 8014250:	487a      	ldr	r0, [pc, #488]	; (801443c <etharp_query+0x264>)
 8014252:	f002 f855 	bl	8016300 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014256:	8a7b      	ldrh	r3, [r7, #18]
 8014258:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801425a:	7c7a      	ldrb	r2, [r7, #17]
 801425c:	4978      	ldr	r1, [pc, #480]	; (8014440 <etharp_query+0x268>)
 801425e:	4613      	mov	r3, r2
 8014260:	005b      	lsls	r3, r3, #1
 8014262:	4413      	add	r3, r2
 8014264:	00db      	lsls	r3, r3, #3
 8014266:	440b      	add	r3, r1
 8014268:	3314      	adds	r3, #20
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d115      	bne.n	801429c <etharp_query+0xc4>
    is_new_entry = 1;
 8014270:	2301      	movs	r3, #1
 8014272:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014274:	7c7a      	ldrb	r2, [r7, #17]
 8014276:	4972      	ldr	r1, [pc, #456]	; (8014440 <etharp_query+0x268>)
 8014278:	4613      	mov	r3, r2
 801427a:	005b      	lsls	r3, r3, #1
 801427c:	4413      	add	r3, r2
 801427e:	00db      	lsls	r3, r3, #3
 8014280:	440b      	add	r3, r1
 8014282:	3314      	adds	r3, #20
 8014284:	2201      	movs	r2, #1
 8014286:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014288:	7c7a      	ldrb	r2, [r7, #17]
 801428a:	496d      	ldr	r1, [pc, #436]	; (8014440 <etharp_query+0x268>)
 801428c:	4613      	mov	r3, r2
 801428e:	005b      	lsls	r3, r3, #1
 8014290:	4413      	add	r3, r2
 8014292:	00db      	lsls	r3, r3, #3
 8014294:	440b      	add	r3, r1
 8014296:	3308      	adds	r3, #8
 8014298:	68fa      	ldr	r2, [r7, #12]
 801429a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801429c:	7c7a      	ldrb	r2, [r7, #17]
 801429e:	4968      	ldr	r1, [pc, #416]	; (8014440 <etharp_query+0x268>)
 80142a0:	4613      	mov	r3, r2
 80142a2:	005b      	lsls	r3, r3, #1
 80142a4:	4413      	add	r3, r2
 80142a6:	00db      	lsls	r3, r3, #3
 80142a8:	440b      	add	r3, r1
 80142aa:	3314      	adds	r3, #20
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d011      	beq.n	80142d6 <etharp_query+0xfe>
 80142b2:	7c7a      	ldrb	r2, [r7, #17]
 80142b4:	4962      	ldr	r1, [pc, #392]	; (8014440 <etharp_query+0x268>)
 80142b6:	4613      	mov	r3, r2
 80142b8:	005b      	lsls	r3, r3, #1
 80142ba:	4413      	add	r3, r2
 80142bc:	00db      	lsls	r3, r3, #3
 80142be:	440b      	add	r3, r1
 80142c0:	3314      	adds	r3, #20
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	2b01      	cmp	r3, #1
 80142c6:	d806      	bhi.n	80142d6 <etharp_query+0xfe>
 80142c8:	4b5a      	ldr	r3, [pc, #360]	; (8014434 <etharp_query+0x25c>)
 80142ca:	f240 32cd 	movw	r2, #973	; 0x3cd
 80142ce:	495d      	ldr	r1, [pc, #372]	; (8014444 <etharp_query+0x26c>)
 80142d0:	485a      	ldr	r0, [pc, #360]	; (801443c <etharp_query+0x264>)
 80142d2:	f002 f815 	bl	8016300 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80142d6:	6a3b      	ldr	r3, [r7, #32]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d102      	bne.n	80142e2 <etharp_query+0x10a>
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d10c      	bne.n	80142fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80142e2:	68b9      	ldr	r1, [r7, #8]
 80142e4:	68f8      	ldr	r0, [r7, #12]
 80142e6:	f000 f963 	bl	80145b0 <etharp_request>
 80142ea:	4603      	mov	r3, r0
 80142ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d102      	bne.n	80142fc <etharp_query+0x124>
      return result;
 80142f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80142fa:	e096      	b.n	801442a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d106      	bne.n	8014310 <etharp_query+0x138>
 8014302:	4b4c      	ldr	r3, [pc, #304]	; (8014434 <etharp_query+0x25c>)
 8014304:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014308:	494f      	ldr	r1, [pc, #316]	; (8014448 <etharp_query+0x270>)
 801430a:	484c      	ldr	r0, [pc, #304]	; (801443c <etharp_query+0x264>)
 801430c:	f001 fff8 	bl	8016300 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014310:	7c7a      	ldrb	r2, [r7, #17]
 8014312:	494b      	ldr	r1, [pc, #300]	; (8014440 <etharp_query+0x268>)
 8014314:	4613      	mov	r3, r2
 8014316:	005b      	lsls	r3, r3, #1
 8014318:	4413      	add	r3, r2
 801431a:	00db      	lsls	r3, r3, #3
 801431c:	440b      	add	r3, r1
 801431e:	3314      	adds	r3, #20
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	2b01      	cmp	r3, #1
 8014324:	d917      	bls.n	8014356 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014326:	4a49      	ldr	r2, [pc, #292]	; (801444c <etharp_query+0x274>)
 8014328:	7c7b      	ldrb	r3, [r7, #17]
 801432a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801432c:	7c7a      	ldrb	r2, [r7, #17]
 801432e:	4613      	mov	r3, r2
 8014330:	005b      	lsls	r3, r3, #1
 8014332:	4413      	add	r3, r2
 8014334:	00db      	lsls	r3, r3, #3
 8014336:	3308      	adds	r3, #8
 8014338:	4a41      	ldr	r2, [pc, #260]	; (8014440 <etharp_query+0x268>)
 801433a:	4413      	add	r3, r2
 801433c:	3304      	adds	r3, #4
 801433e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014342:	9200      	str	r2, [sp, #0]
 8014344:	697a      	ldr	r2, [r7, #20]
 8014346:	6879      	ldr	r1, [r7, #4]
 8014348:	68f8      	ldr	r0, [r7, #12]
 801434a:	f001 fc75 	bl	8015c38 <ethernet_output>
 801434e:	4603      	mov	r3, r0
 8014350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014354:	e067      	b.n	8014426 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014356:	7c7a      	ldrb	r2, [r7, #17]
 8014358:	4939      	ldr	r1, [pc, #228]	; (8014440 <etharp_query+0x268>)
 801435a:	4613      	mov	r3, r2
 801435c:	005b      	lsls	r3, r3, #1
 801435e:	4413      	add	r3, r2
 8014360:	00db      	lsls	r3, r3, #3
 8014362:	440b      	add	r3, r1
 8014364:	3314      	adds	r3, #20
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	2b01      	cmp	r3, #1
 801436a:	d15c      	bne.n	8014426 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801436c:	2300      	movs	r3, #0
 801436e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014374:	e01c      	b.n	80143b0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014376:	69fb      	ldr	r3, [r7, #28]
 8014378:	895a      	ldrh	r2, [r3, #10]
 801437a:	69fb      	ldr	r3, [r7, #28]
 801437c:	891b      	ldrh	r3, [r3, #8]
 801437e:	429a      	cmp	r2, r3
 8014380:	d10a      	bne.n	8014398 <etharp_query+0x1c0>
 8014382:	69fb      	ldr	r3, [r7, #28]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d006      	beq.n	8014398 <etharp_query+0x1c0>
 801438a:	4b2a      	ldr	r3, [pc, #168]	; (8014434 <etharp_query+0x25c>)
 801438c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014390:	492f      	ldr	r1, [pc, #188]	; (8014450 <etharp_query+0x278>)
 8014392:	482a      	ldr	r0, [pc, #168]	; (801443c <etharp_query+0x264>)
 8014394:	f001 ffb4 	bl	8016300 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	7b1b      	ldrb	r3, [r3, #12]
 801439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d002      	beq.n	80143aa <etharp_query+0x1d2>
        copy_needed = 1;
 80143a4:	2301      	movs	r3, #1
 80143a6:	61bb      	str	r3, [r7, #24]
        break;
 80143a8:	e005      	b.n	80143b6 <etharp_query+0x1de>
      }
      p = p->next;
 80143aa:	69fb      	ldr	r3, [r7, #28]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80143b0:	69fb      	ldr	r3, [r7, #28]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d1df      	bne.n	8014376 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80143b6:	69bb      	ldr	r3, [r7, #24]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d007      	beq.n	80143cc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80143bc:	687a      	ldr	r2, [r7, #4]
 80143be:	f44f 7120 	mov.w	r1, #640	; 0x280
 80143c2:	200e      	movs	r0, #14
 80143c4:	f7f9 f8fe 	bl	800d5c4 <pbuf_clone>
 80143c8:	61f8      	str	r0, [r7, #28]
 80143ca:	e004      	b.n	80143d6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80143d0:	69f8      	ldr	r0, [r7, #28]
 80143d2:	f7f8 fefb 	bl	800d1cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80143d6:	69fb      	ldr	r3, [r7, #28]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d021      	beq.n	8014420 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80143dc:	7c7a      	ldrb	r2, [r7, #17]
 80143de:	4918      	ldr	r1, [pc, #96]	; (8014440 <etharp_query+0x268>)
 80143e0:	4613      	mov	r3, r2
 80143e2:	005b      	lsls	r3, r3, #1
 80143e4:	4413      	add	r3, r2
 80143e6:	00db      	lsls	r3, r3, #3
 80143e8:	440b      	add	r3, r1
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d00a      	beq.n	8014406 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80143f0:	7c7a      	ldrb	r2, [r7, #17]
 80143f2:	4913      	ldr	r1, [pc, #76]	; (8014440 <etharp_query+0x268>)
 80143f4:	4613      	mov	r3, r2
 80143f6:	005b      	lsls	r3, r3, #1
 80143f8:	4413      	add	r3, r2
 80143fa:	00db      	lsls	r3, r3, #3
 80143fc:	440b      	add	r3, r1
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	4618      	mov	r0, r3
 8014402:	f7f8 fe3d 	bl	800d080 <pbuf_free>
      }
      arp_table[i].q = p;
 8014406:	7c7a      	ldrb	r2, [r7, #17]
 8014408:	490d      	ldr	r1, [pc, #52]	; (8014440 <etharp_query+0x268>)
 801440a:	4613      	mov	r3, r2
 801440c:	005b      	lsls	r3, r3, #1
 801440e:	4413      	add	r3, r2
 8014410:	00db      	lsls	r3, r3, #3
 8014412:	440b      	add	r3, r1
 8014414:	69fa      	ldr	r2, [r7, #28]
 8014416:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014418:	2300      	movs	r3, #0
 801441a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801441e:	e002      	b.n	8014426 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014420:	23ff      	movs	r3, #255	; 0xff
 8014422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014426:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801442a:	4618      	mov	r0, r3
 801442c:	3728      	adds	r7, #40	; 0x28
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}
 8014432:	bf00      	nop
 8014434:	08019f54 	.word	0x08019f54
 8014438:	0801a100 	.word	0x0801a100
 801443c:	08019fcc 	.word	0x08019fcc
 8014440:	200304b0 	.word	0x200304b0
 8014444:	0801a110 	.word	0x0801a110
 8014448:	0801a0f4 	.word	0x0801a0f4
 801444c:	200305a0 	.word	0x200305a0
 8014450:	0801a138 	.word	0x0801a138

08014454 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b08a      	sub	sp, #40	; 0x28
 8014458:	af02      	add	r7, sp, #8
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	607a      	str	r2, [r7, #4]
 8014460:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014462:	2300      	movs	r3, #0
 8014464:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d106      	bne.n	801447a <etharp_raw+0x26>
 801446c:	4b3a      	ldr	r3, [pc, #232]	; (8014558 <etharp_raw+0x104>)
 801446e:	f240 4257 	movw	r2, #1111	; 0x457
 8014472:	493a      	ldr	r1, [pc, #232]	; (801455c <etharp_raw+0x108>)
 8014474:	483a      	ldr	r0, [pc, #232]	; (8014560 <etharp_raw+0x10c>)
 8014476:	f001 ff43 	bl	8016300 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801447a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801447e:	211c      	movs	r1, #28
 8014480:	200e      	movs	r0, #14
 8014482:	f7f8 fb19 	bl	800cab8 <pbuf_alloc>
 8014486:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014488:	69bb      	ldr	r3, [r7, #24]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d102      	bne.n	8014494 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801448e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014492:	e05d      	b.n	8014550 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014494:	69bb      	ldr	r3, [r7, #24]
 8014496:	895b      	ldrh	r3, [r3, #10]
 8014498:	2b1b      	cmp	r3, #27
 801449a:	d806      	bhi.n	80144aa <etharp_raw+0x56>
 801449c:	4b2e      	ldr	r3, [pc, #184]	; (8014558 <etharp_raw+0x104>)
 801449e:	f240 4262 	movw	r2, #1122	; 0x462
 80144a2:	4930      	ldr	r1, [pc, #192]	; (8014564 <etharp_raw+0x110>)
 80144a4:	482e      	ldr	r0, [pc, #184]	; (8014560 <etharp_raw+0x10c>)
 80144a6:	f001 ff2b 	bl	8016300 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80144b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7f7 f9f2 	bl	800b89c <lwip_htons>
 80144b8:	4603      	mov	r3, r0
 80144ba:	461a      	mov	r2, r3
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80144c6:	2b06      	cmp	r3, #6
 80144c8:	d006      	beq.n	80144d8 <etharp_raw+0x84>
 80144ca:	4b23      	ldr	r3, [pc, #140]	; (8014558 <etharp_raw+0x104>)
 80144cc:	f240 4269 	movw	r2, #1129	; 0x469
 80144d0:	4925      	ldr	r1, [pc, #148]	; (8014568 <etharp_raw+0x114>)
 80144d2:	4823      	ldr	r0, [pc, #140]	; (8014560 <etharp_raw+0x10c>)
 80144d4:	f001 ff14 	bl	8016300 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80144d8:	697b      	ldr	r3, [r7, #20]
 80144da:	3308      	adds	r3, #8
 80144dc:	2206      	movs	r2, #6
 80144de:	6839      	ldr	r1, [r7, #0]
 80144e0:	4618      	mov	r0, r3
 80144e2:	f001 fe48 	bl	8016176 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80144e6:	697b      	ldr	r3, [r7, #20]
 80144e8:	3312      	adds	r3, #18
 80144ea:	2206      	movs	r2, #6
 80144ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80144ee:	4618      	mov	r0, r3
 80144f0:	f001 fe41 	bl	8016176 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80144f4:	697b      	ldr	r3, [r7, #20]
 80144f6:	330e      	adds	r3, #14
 80144f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144fa:	6812      	ldr	r2, [r2, #0]
 80144fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80144fe:	697b      	ldr	r3, [r7, #20]
 8014500:	3318      	adds	r3, #24
 8014502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014504:	6812      	ldr	r2, [r2, #0]
 8014506:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	2200      	movs	r2, #0
 801450c:	701a      	strb	r2, [r3, #0]
 801450e:	2200      	movs	r2, #0
 8014510:	f042 0201 	orr.w	r2, r2, #1
 8014514:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014516:	697b      	ldr	r3, [r7, #20]
 8014518:	2200      	movs	r2, #0
 801451a:	f042 0208 	orr.w	r2, r2, #8
 801451e:	709a      	strb	r2, [r3, #2]
 8014520:	2200      	movs	r2, #0
 8014522:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	2206      	movs	r2, #6
 8014528:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	2204      	movs	r2, #4
 801452e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014530:	f640 0306 	movw	r3, #2054	; 0x806
 8014534:	9300      	str	r3, [sp, #0]
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	68ba      	ldr	r2, [r7, #8]
 801453a:	69b9      	ldr	r1, [r7, #24]
 801453c:	68f8      	ldr	r0, [r7, #12]
 801453e:	f001 fb7b 	bl	8015c38 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014542:	69b8      	ldr	r0, [r7, #24]
 8014544:	f7f8 fd9c 	bl	800d080 <pbuf_free>
  p = NULL;
 8014548:	2300      	movs	r3, #0
 801454a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801454c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014550:	4618      	mov	r0, r3
 8014552:	3720      	adds	r7, #32
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	08019f54 	.word	0x08019f54
 801455c:	0801a0a4 	.word	0x0801a0a4
 8014560:	08019fcc 	.word	0x08019fcc
 8014564:	0801a154 	.word	0x0801a154
 8014568:	0801a188 	.word	0x0801a188

0801456c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b088      	sub	sp, #32
 8014570:	af04      	add	r7, sp, #16
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014588:	2201      	movs	r2, #1
 801458a:	9203      	str	r2, [sp, #12]
 801458c:	68ba      	ldr	r2, [r7, #8]
 801458e:	9202      	str	r2, [sp, #8]
 8014590:	4a06      	ldr	r2, [pc, #24]	; (80145ac <etharp_request_dst+0x40>)
 8014592:	9201      	str	r2, [sp, #4]
 8014594:	9300      	str	r3, [sp, #0]
 8014596:	4603      	mov	r3, r0
 8014598:	687a      	ldr	r2, [r7, #4]
 801459a:	68f8      	ldr	r0, [r7, #12]
 801459c:	f7ff ff5a 	bl	8014454 <etharp_raw>
 80145a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3710      	adds	r7, #16
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
 80145aa:	bf00      	nop
 80145ac:	0801a758 	.word	0x0801a758

080145b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b082      	sub	sp, #8
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
 80145b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80145ba:	4a05      	ldr	r2, [pc, #20]	; (80145d0 <etharp_request+0x20>)
 80145bc:	6839      	ldr	r1, [r7, #0]
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f7ff ffd4 	bl	801456c <etharp_request_dst>
 80145c4:	4603      	mov	r3, r0
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3708      	adds	r7, #8
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	0801a750 	.word	0x0801a750

080145d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b08e      	sub	sp, #56	; 0x38
 80145d8:	af04      	add	r7, sp, #16
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80145de:	4b79      	ldr	r3, [pc, #484]	; (80147c4 <icmp_input+0x1f0>)
 80145e0:	689b      	ldr	r3, [r3, #8]
 80145e2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80145e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145e6:	781b      	ldrb	r3, [r3, #0]
 80145e8:	f003 030f 	and.w	r3, r3, #15
 80145ec:	b2db      	uxtb	r3, r3
 80145ee:	009b      	lsls	r3, r3, #2
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80145f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80145f6:	2b13      	cmp	r3, #19
 80145f8:	f240 80cd 	bls.w	8014796 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	895b      	ldrh	r3, [r3, #10]
 8014600:	2b03      	cmp	r3, #3
 8014602:	f240 80ca 	bls.w	801479a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	781b      	ldrb	r3, [r3, #0]
 801460c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014610:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014614:	2b00      	cmp	r3, #0
 8014616:	f000 80b7 	beq.w	8014788 <icmp_input+0x1b4>
 801461a:	2b08      	cmp	r3, #8
 801461c:	f040 80b7 	bne.w	801478e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014620:	4b69      	ldr	r3, [pc, #420]	; (80147c8 <icmp_input+0x1f4>)
 8014622:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014624:	4b67      	ldr	r3, [pc, #412]	; (80147c4 <icmp_input+0x1f0>)
 8014626:	695b      	ldr	r3, [r3, #20]
 8014628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801462c:	2be0      	cmp	r3, #224	; 0xe0
 801462e:	f000 80bb 	beq.w	80147a8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014632:	4b64      	ldr	r3, [pc, #400]	; (80147c4 <icmp_input+0x1f0>)
 8014634:	695b      	ldr	r3, [r3, #20]
 8014636:	4a63      	ldr	r2, [pc, #396]	; (80147c4 <icmp_input+0x1f0>)
 8014638:	6812      	ldr	r2, [r2, #0]
 801463a:	4611      	mov	r1, r2
 801463c:	4618      	mov	r0, r3
 801463e:	f000 fbed 	bl	8014e1c <ip4_addr_isbroadcast_u32>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	f040 80b1 	bne.w	80147ac <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	891b      	ldrh	r3, [r3, #8]
 801464e:	2b07      	cmp	r3, #7
 8014650:	f240 80a5 	bls.w	801479e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014656:	330e      	adds	r3, #14
 8014658:	4619      	mov	r1, r3
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f7f8 fc7a 	bl	800cf54 <pbuf_add_header>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d04b      	beq.n	80146fe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	891a      	ldrh	r2, [r3, #8]
 801466a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801466c:	4413      	add	r3, r2
 801466e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	891b      	ldrh	r3, [r3, #8]
 8014674:	8b7a      	ldrh	r2, [r7, #26]
 8014676:	429a      	cmp	r2, r3
 8014678:	f0c0 809a 	bcc.w	80147b0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801467c:	8b7b      	ldrh	r3, [r7, #26]
 801467e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014682:	4619      	mov	r1, r3
 8014684:	200e      	movs	r0, #14
 8014686:	f7f8 fa17 	bl	800cab8 <pbuf_alloc>
 801468a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	2b00      	cmp	r3, #0
 8014690:	f000 8090 	beq.w	80147b4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	895b      	ldrh	r3, [r3, #10]
 8014698:	461a      	mov	r2, r3
 801469a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801469c:	3308      	adds	r3, #8
 801469e:	429a      	cmp	r2, r3
 80146a0:	d203      	bcs.n	80146aa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80146a2:	6978      	ldr	r0, [r7, #20]
 80146a4:	f7f8 fcec 	bl	800d080 <pbuf_free>
          goto icmperr;
 80146a8:	e085      	b.n	80147b6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80146aa:	697b      	ldr	r3, [r7, #20]
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80146b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146b2:	4618      	mov	r0, r3
 80146b4:	f001 fd5f 	bl	8016176 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80146b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146ba:	4619      	mov	r1, r3
 80146bc:	6978      	ldr	r0, [r7, #20]
 80146be:	f7f8 fc59 	bl	800cf74 <pbuf_remove_header>
 80146c2:	4603      	mov	r3, r0
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d009      	beq.n	80146dc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80146c8:	4b40      	ldr	r3, [pc, #256]	; (80147cc <icmp_input+0x1f8>)
 80146ca:	22b6      	movs	r2, #182	; 0xb6
 80146cc:	4940      	ldr	r1, [pc, #256]	; (80147d0 <icmp_input+0x1fc>)
 80146ce:	4841      	ldr	r0, [pc, #260]	; (80147d4 <icmp_input+0x200>)
 80146d0:	f001 fe16 	bl	8016300 <iprintf>
          pbuf_free(r);
 80146d4:	6978      	ldr	r0, [r7, #20]
 80146d6:	f7f8 fcd3 	bl	800d080 <pbuf_free>
          goto icmperr;
 80146da:	e06c      	b.n	80147b6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80146dc:	6879      	ldr	r1, [r7, #4]
 80146de:	6978      	ldr	r0, [r7, #20]
 80146e0:	f7f8 fe02 	bl	800d2e8 <pbuf_copy>
 80146e4:	4603      	mov	r3, r0
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d003      	beq.n	80146f2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80146ea:	6978      	ldr	r0, [r7, #20]
 80146ec:	f7f8 fcc8 	bl	800d080 <pbuf_free>
          goto icmperr;
 80146f0:	e061      	b.n	80147b6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7f8 fcc4 	bl	800d080 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80146f8:	697b      	ldr	r3, [r7, #20]
 80146fa:	607b      	str	r3, [r7, #4]
 80146fc:	e00f      	b.n	801471e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80146fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014700:	330e      	adds	r3, #14
 8014702:	4619      	mov	r1, r3
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f7f8 fc35 	bl	800cf74 <pbuf_remove_header>
 801470a:	4603      	mov	r3, r0
 801470c:	2b00      	cmp	r3, #0
 801470e:	d006      	beq.n	801471e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014710:	4b2e      	ldr	r3, [pc, #184]	; (80147cc <icmp_input+0x1f8>)
 8014712:	22c7      	movs	r2, #199	; 0xc7
 8014714:	4930      	ldr	r1, [pc, #192]	; (80147d8 <icmp_input+0x204>)
 8014716:	482f      	ldr	r0, [pc, #188]	; (80147d4 <icmp_input+0x200>)
 8014718:	f001 fdf2 	bl	8016300 <iprintf>
          goto icmperr;
 801471c:	e04b      	b.n	80147b6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	685b      	ldr	r3, [r3, #4]
 8014722:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014724:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014726:	4619      	mov	r1, r3
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7f8 fc13 	bl	800cf54 <pbuf_add_header>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	d12b      	bne.n	801478c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	685b      	ldr	r3, [r3, #4]
 8014738:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	681a      	ldr	r2, [r3, #0]
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014742:	4b20      	ldr	r3, [pc, #128]	; (80147c4 <icmp_input+0x1f0>)
 8014744:	691a      	ldr	r2, [r3, #16]
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801474a:	693b      	ldr	r3, [r7, #16]
 801474c:	2200      	movs	r2, #0
 801474e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	2200      	movs	r2, #0
 8014754:	709a      	strb	r2, [r3, #2]
 8014756:	2200      	movs	r2, #0
 8014758:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	22ff      	movs	r2, #255	; 0xff
 801475e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	2200      	movs	r2, #0
 8014764:	729a      	strb	r2, [r3, #10]
 8014766:	2200      	movs	r2, #0
 8014768:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	9302      	str	r3, [sp, #8]
 801476e:	2301      	movs	r3, #1
 8014770:	9301      	str	r3, [sp, #4]
 8014772:	2300      	movs	r3, #0
 8014774:	9300      	str	r3, [sp, #0]
 8014776:	23ff      	movs	r3, #255	; 0xff
 8014778:	2200      	movs	r2, #0
 801477a:	69f9      	ldr	r1, [r7, #28]
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f000 fa75 	bl	8014c6c <ip4_output_if>
 8014782:	4603      	mov	r3, r0
 8014784:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014786:	e001      	b.n	801478c <icmp_input+0x1b8>
      break;
 8014788:	bf00      	nop
 801478a:	e000      	b.n	801478e <icmp_input+0x1ba>
      break;
 801478c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f7f8 fc76 	bl	800d080 <pbuf_free>
  return;
 8014794:	e013      	b.n	80147be <icmp_input+0x1ea>
    goto lenerr;
 8014796:	bf00      	nop
 8014798:	e002      	b.n	80147a0 <icmp_input+0x1cc>
    goto lenerr;
 801479a:	bf00      	nop
 801479c:	e000      	b.n	80147a0 <icmp_input+0x1cc>
        goto lenerr;
 801479e:	bf00      	nop
lenerr:
  pbuf_free(p);
 80147a0:	6878      	ldr	r0, [r7, #4]
 80147a2:	f7f8 fc6d 	bl	800d080 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80147a6:	e00a      	b.n	80147be <icmp_input+0x1ea>
        goto icmperr;
 80147a8:	bf00      	nop
 80147aa:	e004      	b.n	80147b6 <icmp_input+0x1e2>
        goto icmperr;
 80147ac:	bf00      	nop
 80147ae:	e002      	b.n	80147b6 <icmp_input+0x1e2>
          goto icmperr;
 80147b0:	bf00      	nop
 80147b2:	e000      	b.n	80147b6 <icmp_input+0x1e2>
          goto icmperr;
 80147b4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7f8 fc62 	bl	800d080 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80147bc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80147be:	3728      	adds	r7, #40	; 0x28
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	2002ccfc 	.word	0x2002ccfc
 80147c8:	2002cd10 	.word	0x2002cd10
 80147cc:	0801a1cc 	.word	0x0801a1cc
 80147d0:	0801a204 	.word	0x0801a204
 80147d4:	0801a23c 	.word	0x0801a23c
 80147d8:	0801a264 	.word	0x0801a264

080147dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	460b      	mov	r3, r1
 80147e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80147e8:	78fb      	ldrb	r3, [r7, #3]
 80147ea:	461a      	mov	r2, r3
 80147ec:	2103      	movs	r1, #3
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f000 f814 	bl	801481c <icmp_send_response>
}
 80147f4:	bf00      	nop
 80147f6:	3708      	adds	r7, #8
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}

080147fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b082      	sub	sp, #8
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
 8014804:	460b      	mov	r3, r1
 8014806:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014808:	78fb      	ldrb	r3, [r7, #3]
 801480a:	461a      	mov	r2, r3
 801480c:	210b      	movs	r1, #11
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f000 f804 	bl	801481c <icmp_send_response>
}
 8014814:	bf00      	nop
 8014816:	3708      	adds	r7, #8
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}

0801481c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b08c      	sub	sp, #48	; 0x30
 8014820:	af04      	add	r7, sp, #16
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	460b      	mov	r3, r1
 8014826:	70fb      	strb	r3, [r7, #3]
 8014828:	4613      	mov	r3, r2
 801482a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801482c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014830:	2124      	movs	r1, #36	; 0x24
 8014832:	2022      	movs	r0, #34	; 0x22
 8014834:	f7f8 f940 	bl	800cab8 <pbuf_alloc>
 8014838:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801483a:	69fb      	ldr	r3, [r7, #28]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d04c      	beq.n	80148da <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014840:	69fb      	ldr	r3, [r7, #28]
 8014842:	895b      	ldrh	r3, [r3, #10]
 8014844:	2b23      	cmp	r3, #35	; 0x23
 8014846:	d806      	bhi.n	8014856 <icmp_send_response+0x3a>
 8014848:	4b26      	ldr	r3, [pc, #152]	; (80148e4 <icmp_send_response+0xc8>)
 801484a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801484e:	4926      	ldr	r1, [pc, #152]	; (80148e8 <icmp_send_response+0xcc>)
 8014850:	4826      	ldr	r0, [pc, #152]	; (80148ec <icmp_send_response+0xd0>)
 8014852:	f001 fd55 	bl	8016300 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	685b      	ldr	r3, [r3, #4]
 801485a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	78fa      	ldrb	r2, [r7, #3]
 8014866:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014868:	697b      	ldr	r3, [r7, #20]
 801486a:	78ba      	ldrb	r2, [r7, #2]
 801486c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	2200      	movs	r2, #0
 8014872:	711a      	strb	r2, [r3, #4]
 8014874:	2200      	movs	r2, #0
 8014876:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	2200      	movs	r2, #0
 801487c:	719a      	strb	r2, [r3, #6]
 801487e:	2200      	movs	r2, #0
 8014880:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014882:	69fb      	ldr	r3, [r7, #28]
 8014884:	685b      	ldr	r3, [r3, #4]
 8014886:	f103 0008 	add.w	r0, r3, #8
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	221c      	movs	r2, #28
 8014890:	4619      	mov	r1, r3
 8014892:	f001 fc70 	bl	8016176 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014896:	69bb      	ldr	r3, [r7, #24]
 8014898:	68db      	ldr	r3, [r3, #12]
 801489a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801489c:	f107 030c 	add.w	r3, r7, #12
 80148a0:	4618      	mov	r0, r3
 80148a2:	f000 f825 	bl	80148f0 <ip4_route>
 80148a6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80148a8:	693b      	ldr	r3, [r7, #16]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d011      	beq.n	80148d2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	2200      	movs	r2, #0
 80148b2:	709a      	strb	r2, [r3, #2]
 80148b4:	2200      	movs	r2, #0
 80148b6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80148b8:	f107 020c 	add.w	r2, r7, #12
 80148bc:	693b      	ldr	r3, [r7, #16]
 80148be:	9302      	str	r3, [sp, #8]
 80148c0:	2301      	movs	r3, #1
 80148c2:	9301      	str	r3, [sp, #4]
 80148c4:	2300      	movs	r3, #0
 80148c6:	9300      	str	r3, [sp, #0]
 80148c8:	23ff      	movs	r3, #255	; 0xff
 80148ca:	2100      	movs	r1, #0
 80148cc:	69f8      	ldr	r0, [r7, #28]
 80148ce:	f000 f9cd 	bl	8014c6c <ip4_output_if>
  }
  pbuf_free(q);
 80148d2:	69f8      	ldr	r0, [r7, #28]
 80148d4:	f7f8 fbd4 	bl	800d080 <pbuf_free>
 80148d8:	e000      	b.n	80148dc <icmp_send_response+0xc0>
    return;
 80148da:	bf00      	nop
}
 80148dc:	3720      	adds	r7, #32
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	0801a1cc 	.word	0x0801a1cc
 80148e8:	0801a298 	.word	0x0801a298
 80148ec:	0801a23c 	.word	0x0801a23c

080148f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80148f0:	b480      	push	{r7}
 80148f2:	b085      	sub	sp, #20
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80148f8:	4b33      	ldr	r3, [pc, #204]	; (80149c8 <ip4_route+0xd8>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	60fb      	str	r3, [r7, #12]
 80148fe:	e036      	b.n	801496e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014906:	f003 0301 	and.w	r3, r3, #1
 801490a:	b2db      	uxtb	r3, r3
 801490c:	2b00      	cmp	r3, #0
 801490e:	d02b      	beq.n	8014968 <ip4_route+0x78>
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014916:	089b      	lsrs	r3, r3, #2
 8014918:	f003 0301 	and.w	r3, r3, #1
 801491c:	b2db      	uxtb	r3, r3
 801491e:	2b00      	cmp	r3, #0
 8014920:	d022      	beq.n	8014968 <ip4_route+0x78>
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	3304      	adds	r3, #4
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d01d      	beq.n	8014968 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	3304      	adds	r3, #4
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	405a      	eors	r2, r3
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	3308      	adds	r3, #8
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	4013      	ands	r3, r2
 8014940:	2b00      	cmp	r3, #0
 8014942:	d101      	bne.n	8014948 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	e038      	b.n	80149ba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801494e:	f003 0302 	and.w	r3, r3, #2
 8014952:	2b00      	cmp	r3, #0
 8014954:	d108      	bne.n	8014968 <ip4_route+0x78>
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	681a      	ldr	r2, [r3, #0]
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	330c      	adds	r3, #12
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	429a      	cmp	r2, r3
 8014962:	d101      	bne.n	8014968 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	e028      	b.n	80149ba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	60fb      	str	r3, [r7, #12]
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d1c5      	bne.n	8014900 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014974:	4b15      	ldr	r3, [pc, #84]	; (80149cc <ip4_route+0xdc>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d01a      	beq.n	80149b2 <ip4_route+0xc2>
 801497c:	4b13      	ldr	r3, [pc, #76]	; (80149cc <ip4_route+0xdc>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014984:	f003 0301 	and.w	r3, r3, #1
 8014988:	2b00      	cmp	r3, #0
 801498a:	d012      	beq.n	80149b2 <ip4_route+0xc2>
 801498c:	4b0f      	ldr	r3, [pc, #60]	; (80149cc <ip4_route+0xdc>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014994:	f003 0304 	and.w	r3, r3, #4
 8014998:	2b00      	cmp	r3, #0
 801499a:	d00a      	beq.n	80149b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801499c:	4b0b      	ldr	r3, [pc, #44]	; (80149cc <ip4_route+0xdc>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	3304      	adds	r3, #4
 80149a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d004      	beq.n	80149b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	b2db      	uxtb	r3, r3
 80149ae:	2b7f      	cmp	r3, #127	; 0x7f
 80149b0:	d101      	bne.n	80149b6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80149b2:	2300      	movs	r3, #0
 80149b4:	e001      	b.n	80149ba <ip4_route+0xca>
  }

  return netif_default;
 80149b6:	4b05      	ldr	r3, [pc, #20]	; (80149cc <ip4_route+0xdc>)
 80149b8:	681b      	ldr	r3, [r3, #0]
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3714      	adds	r7, #20
 80149be:	46bd      	mov	sp, r7
 80149c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c4:	4770      	bx	lr
 80149c6:	bf00      	nop
 80149c8:	20030444 	.word	0x20030444
 80149cc:	20030448 	.word	0x20030448

080149d0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b082      	sub	sp, #8
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80149de:	f003 0301 	and.w	r3, r3, #1
 80149e2:	b2db      	uxtb	r3, r3
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d016      	beq.n	8014a16 <ip4_input_accept+0x46>
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	3304      	adds	r3, #4
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d011      	beq.n	8014a16 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80149f2:	4b0b      	ldr	r3, [pc, #44]	; (8014a20 <ip4_input_accept+0x50>)
 80149f4:	695a      	ldr	r2, [r3, #20]
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	3304      	adds	r3, #4
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d008      	beq.n	8014a12 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014a00:	4b07      	ldr	r3, [pc, #28]	; (8014a20 <ip4_input_accept+0x50>)
 8014a02:	695b      	ldr	r3, [r3, #20]
 8014a04:	6879      	ldr	r1, [r7, #4]
 8014a06:	4618      	mov	r0, r3
 8014a08:	f000 fa08 	bl	8014e1c <ip4_addr_isbroadcast_u32>
 8014a0c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d001      	beq.n	8014a16 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014a12:	2301      	movs	r3, #1
 8014a14:	e000      	b.n	8014a18 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014a16:	2300      	movs	r3, #0
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3708      	adds	r7, #8
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}
 8014a20:	2002ccfc 	.word	0x2002ccfc

08014a24 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b086      	sub	sp, #24
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	685b      	ldr	r3, [r3, #4]
 8014a32:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	091b      	lsrs	r3, r3, #4
 8014a3a:	b2db      	uxtb	r3, r3
 8014a3c:	2b04      	cmp	r3, #4
 8014a3e:	d004      	beq.n	8014a4a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f7f8 fb1d 	bl	800d080 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014a46:	2300      	movs	r3, #0
 8014a48:	e107      	b.n	8014c5a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	f003 030f 	and.w	r3, r3, #15
 8014a52:	b2db      	uxtb	r3, r3
 8014a54:	009b      	lsls	r3, r3, #2
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	885b      	ldrh	r3, [r3, #2]
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	4618      	mov	r0, r3
 8014a62:	f7f6 ff1b 	bl	800b89c <lwip_htons>
 8014a66:	4603      	mov	r3, r0
 8014a68:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	891b      	ldrh	r3, [r3, #8]
 8014a6e:	89ba      	ldrh	r2, [r7, #12]
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d204      	bcs.n	8014a7e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014a74:	89bb      	ldrh	r3, [r7, #12]
 8014a76:	4619      	mov	r1, r3
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f7f8 f97b 	bl	800cd74 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	895b      	ldrh	r3, [r3, #10]
 8014a82:	89fa      	ldrh	r2, [r7, #14]
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d807      	bhi.n	8014a98 <ip4_input+0x74>
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	891b      	ldrh	r3, [r3, #8]
 8014a8c:	89ba      	ldrh	r2, [r7, #12]
 8014a8e:	429a      	cmp	r2, r3
 8014a90:	d802      	bhi.n	8014a98 <ip4_input+0x74>
 8014a92:	89fb      	ldrh	r3, [r7, #14]
 8014a94:	2b13      	cmp	r3, #19
 8014a96:	d804      	bhi.n	8014aa2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7f8 faf1 	bl	800d080 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	e0db      	b.n	8014c5a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	691b      	ldr	r3, [r3, #16]
 8014aa6:	4a6f      	ldr	r2, [pc, #444]	; (8014c64 <ip4_input+0x240>)
 8014aa8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	68db      	ldr	r3, [r3, #12]
 8014aae:	4a6d      	ldr	r2, [pc, #436]	; (8014c64 <ip4_input+0x240>)
 8014ab0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014ab2:	4b6c      	ldr	r3, [pc, #432]	; (8014c64 <ip4_input+0x240>)
 8014ab4:	695b      	ldr	r3, [r3, #20]
 8014ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014aba:	2be0      	cmp	r3, #224	; 0xe0
 8014abc:	d112      	bne.n	8014ae4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ac4:	f003 0301 	and.w	r3, r3, #1
 8014ac8:	b2db      	uxtb	r3, r3
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d007      	beq.n	8014ade <ip4_input+0xba>
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	3304      	adds	r3, #4
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d002      	beq.n	8014ade <ip4_input+0xba>
      netif = inp;
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	613b      	str	r3, [r7, #16]
 8014adc:	e02a      	b.n	8014b34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	613b      	str	r3, [r7, #16]
 8014ae2:	e027      	b.n	8014b34 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014ae4:	6838      	ldr	r0, [r7, #0]
 8014ae6:	f7ff ff73 	bl	80149d0 <ip4_input_accept>
 8014aea:	4603      	mov	r3, r0
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d002      	beq.n	8014af6 <ip4_input+0xd2>
      netif = inp;
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	613b      	str	r3, [r7, #16]
 8014af4:	e01e      	b.n	8014b34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014af6:	2300      	movs	r3, #0
 8014af8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014afa:	4b5a      	ldr	r3, [pc, #360]	; (8014c64 <ip4_input+0x240>)
 8014afc:	695b      	ldr	r3, [r3, #20]
 8014afe:	b2db      	uxtb	r3, r3
 8014b00:	2b7f      	cmp	r3, #127	; 0x7f
 8014b02:	d017      	beq.n	8014b34 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014b04:	4b58      	ldr	r3, [pc, #352]	; (8014c68 <ip4_input+0x244>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	613b      	str	r3, [r7, #16]
 8014b0a:	e00e      	b.n	8014b2a <ip4_input+0x106>
          if (netif == inp) {
 8014b0c:	693a      	ldr	r2, [r7, #16]
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d006      	beq.n	8014b22 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014b14:	6938      	ldr	r0, [r7, #16]
 8014b16:	f7ff ff5b 	bl	80149d0 <ip4_input_accept>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d108      	bne.n	8014b32 <ip4_input+0x10e>
 8014b20:	e000      	b.n	8014b24 <ip4_input+0x100>
            continue;
 8014b22:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014b24:	693b      	ldr	r3, [r7, #16]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	613b      	str	r3, [r7, #16]
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d1ed      	bne.n	8014b0c <ip4_input+0xe8>
 8014b30:	e000      	b.n	8014b34 <ip4_input+0x110>
            break;
 8014b32:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b34:	4b4b      	ldr	r3, [pc, #300]	; (8014c64 <ip4_input+0x240>)
 8014b36:	691b      	ldr	r3, [r3, #16]
 8014b38:	6839      	ldr	r1, [r7, #0]
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f000 f96e 	bl	8014e1c <ip4_addr_isbroadcast_u32>
 8014b40:	4603      	mov	r3, r0
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d105      	bne.n	8014b52 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014b46:	4b47      	ldr	r3, [pc, #284]	; (8014c64 <ip4_input+0x240>)
 8014b48:	691b      	ldr	r3, [r3, #16]
 8014b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b4e:	2be0      	cmp	r3, #224	; 0xe0
 8014b50:	d104      	bne.n	8014b5c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f7f8 fa94 	bl	800d080 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	e07e      	b.n	8014c5a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014b5c:	693b      	ldr	r3, [r7, #16]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d104      	bne.n	8014b6c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f7f8 fa8c 	bl	800d080 <pbuf_free>
    return ERR_OK;
 8014b68:	2300      	movs	r3, #0
 8014b6a:	e076      	b.n	8014c5a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	88db      	ldrh	r3, [r3, #6]
 8014b70:	b29b      	uxth	r3, r3
 8014b72:	461a      	mov	r2, r3
 8014b74:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014b78:	4013      	ands	r3, r2
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d00b      	beq.n	8014b96 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 fc92 	bl	80154a8 <ip4_reass>
 8014b84:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d101      	bne.n	8014b90 <ip4_input+0x16c>
      return ERR_OK;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	e064      	b.n	8014c5a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	685b      	ldr	r3, [r3, #4]
 8014b94:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014b96:	4a33      	ldr	r2, [pc, #204]	; (8014c64 <ip4_input+0x240>)
 8014b98:	693b      	ldr	r3, [r7, #16]
 8014b9a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014b9c:	4a31      	ldr	r2, [pc, #196]	; (8014c64 <ip4_input+0x240>)
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014ba2:	4a30      	ldr	r2, [pc, #192]	; (8014c64 <ip4_input+0x240>)
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	781b      	ldrb	r3, [r3, #0]
 8014bac:	f003 030f 	and.w	r3, r3, #15
 8014bb0:	b2db      	uxtb	r3, r3
 8014bb2:	009b      	lsls	r3, r3, #2
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	b29a      	uxth	r2, r3
 8014bb8:	4b2a      	ldr	r3, [pc, #168]	; (8014c64 <ip4_input+0x240>)
 8014bba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014bbc:	89fb      	ldrh	r3, [r7, #14]
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f7f8 f9d7 	bl	800cf74 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	7a5b      	ldrb	r3, [r3, #9]
 8014bca:	2b11      	cmp	r3, #17
 8014bcc:	d006      	beq.n	8014bdc <ip4_input+0x1b8>
 8014bce:	2b11      	cmp	r3, #17
 8014bd0:	dc13      	bgt.n	8014bfa <ip4_input+0x1d6>
 8014bd2:	2b01      	cmp	r3, #1
 8014bd4:	d00c      	beq.n	8014bf0 <ip4_input+0x1cc>
 8014bd6:	2b06      	cmp	r3, #6
 8014bd8:	d005      	beq.n	8014be6 <ip4_input+0x1c2>
 8014bda:	e00e      	b.n	8014bfa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014bdc:	6839      	ldr	r1, [r7, #0]
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f7fe f9a4 	bl	8012f2c <udp_input>
        break;
 8014be4:	e026      	b.n	8014c34 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014be6:	6839      	ldr	r1, [r7, #0]
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f7fa f97b 	bl	800eee4 <tcp_input>
        break;
 8014bee:	e021      	b.n	8014c34 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014bf0:	6839      	ldr	r1, [r7, #0]
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f7ff fcee 	bl	80145d4 <icmp_input>
        break;
 8014bf8:	e01c      	b.n	8014c34 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014bfa:	4b1a      	ldr	r3, [pc, #104]	; (8014c64 <ip4_input+0x240>)
 8014bfc:	695b      	ldr	r3, [r3, #20]
 8014bfe:	6939      	ldr	r1, [r7, #16]
 8014c00:	4618      	mov	r0, r3
 8014c02:	f000 f90b 	bl	8014e1c <ip4_addr_isbroadcast_u32>
 8014c06:	4603      	mov	r3, r0
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d10f      	bne.n	8014c2c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014c0c:	4b15      	ldr	r3, [pc, #84]	; (8014c64 <ip4_input+0x240>)
 8014c0e:	695b      	ldr	r3, [r3, #20]
 8014c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c14:	2be0      	cmp	r3, #224	; 0xe0
 8014c16:	d009      	beq.n	8014c2c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f7f8 fa1b 	bl	800d05a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014c24:	2102      	movs	r1, #2
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f7ff fdd8 	bl	80147dc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014c2c:	6878      	ldr	r0, [r7, #4]
 8014c2e:	f7f8 fa27 	bl	800d080 <pbuf_free>
        break;
 8014c32:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014c34:	4b0b      	ldr	r3, [pc, #44]	; (8014c64 <ip4_input+0x240>)
 8014c36:	2200      	movs	r2, #0
 8014c38:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014c3a:	4b0a      	ldr	r3, [pc, #40]	; (8014c64 <ip4_input+0x240>)
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014c40:	4b08      	ldr	r3, [pc, #32]	; (8014c64 <ip4_input+0x240>)
 8014c42:	2200      	movs	r2, #0
 8014c44:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014c46:	4b07      	ldr	r3, [pc, #28]	; (8014c64 <ip4_input+0x240>)
 8014c48:	2200      	movs	r2, #0
 8014c4a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014c4c:	4b05      	ldr	r3, [pc, #20]	; (8014c64 <ip4_input+0x240>)
 8014c4e:	2200      	movs	r2, #0
 8014c50:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014c52:	4b04      	ldr	r3, [pc, #16]	; (8014c64 <ip4_input+0x240>)
 8014c54:	2200      	movs	r2, #0
 8014c56:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014c58:	2300      	movs	r3, #0
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3718      	adds	r7, #24
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	2002ccfc 	.word	0x2002ccfc
 8014c68:	20030444 	.word	0x20030444

08014c6c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b08a      	sub	sp, #40	; 0x28
 8014c70:	af04      	add	r7, sp, #16
 8014c72:	60f8      	str	r0, [r7, #12]
 8014c74:	60b9      	str	r1, [r7, #8]
 8014c76:	607a      	str	r2, [r7, #4]
 8014c78:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d009      	beq.n	8014c98 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d003      	beq.n	8014c92 <ip4_output_if+0x26>
 8014c8a:	68bb      	ldr	r3, [r7, #8]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d102      	bne.n	8014c98 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c94:	3304      	adds	r3, #4
 8014c96:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014c98:	78fa      	ldrb	r2, [r7, #3]
 8014c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c9c:	9302      	str	r3, [sp, #8]
 8014c9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014ca2:	9301      	str	r3, [sp, #4]
 8014ca4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014ca8:	9300      	str	r3, [sp, #0]
 8014caa:	4613      	mov	r3, r2
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	6979      	ldr	r1, [r7, #20]
 8014cb0:	68f8      	ldr	r0, [r7, #12]
 8014cb2:	f000 f805 	bl	8014cc0 <ip4_output_if_src>
 8014cb6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3718      	adds	r7, #24
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b088      	sub	sp, #32
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	60b9      	str	r1, [r7, #8]
 8014cca:	607a      	str	r2, [r7, #4]
 8014ccc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	7b9b      	ldrb	r3, [r3, #14]
 8014cd2:	2b01      	cmp	r3, #1
 8014cd4:	d006      	beq.n	8014ce4 <ip4_output_if_src+0x24>
 8014cd6:	4b4b      	ldr	r3, [pc, #300]	; (8014e04 <ip4_output_if_src+0x144>)
 8014cd8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014cdc:	494a      	ldr	r1, [pc, #296]	; (8014e08 <ip4_output_if_src+0x148>)
 8014cde:	484b      	ldr	r0, [pc, #300]	; (8014e0c <ip4_output_if_src+0x14c>)
 8014ce0:	f001 fb0e 	bl	8016300 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d060      	beq.n	8014dac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014cea:	2314      	movs	r3, #20
 8014cec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014cee:	2114      	movs	r1, #20
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	f7f8 f92f 	bl	800cf54 <pbuf_add_header>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d002      	beq.n	8014d02 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014cfc:	f06f 0301 	mvn.w	r3, #1
 8014d00:	e07c      	b.n	8014dfc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	685b      	ldr	r3, [r3, #4]
 8014d06:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	895b      	ldrh	r3, [r3, #10]
 8014d0c:	2b13      	cmp	r3, #19
 8014d0e:	d806      	bhi.n	8014d1e <ip4_output_if_src+0x5e>
 8014d10:	4b3c      	ldr	r3, [pc, #240]	; (8014e04 <ip4_output_if_src+0x144>)
 8014d12:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014d16:	493e      	ldr	r1, [pc, #248]	; (8014e10 <ip4_output_if_src+0x150>)
 8014d18:	483c      	ldr	r0, [pc, #240]	; (8014e0c <ip4_output_if_src+0x14c>)
 8014d1a:	f001 faf1 	bl	8016300 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014d1e:	69fb      	ldr	r3, [r7, #28]
 8014d20:	78fa      	ldrb	r2, [r7, #3]
 8014d22:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014d24:	69fb      	ldr	r3, [r7, #28]
 8014d26:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014d2a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681a      	ldr	r2, [r3, #0]
 8014d30:	69fb      	ldr	r3, [r7, #28]
 8014d32:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014d34:	8b7b      	ldrh	r3, [r7, #26]
 8014d36:	089b      	lsrs	r3, r3, #2
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	b2db      	uxtb	r3, r3
 8014d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d40:	b2da      	uxtb	r2, r3
 8014d42:	69fb      	ldr	r3, [r7, #28]
 8014d44:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014d46:	69fb      	ldr	r3, [r7, #28]
 8014d48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014d4c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	891b      	ldrh	r3, [r3, #8]
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7f6 fda2 	bl	800b89c <lwip_htons>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	69fb      	ldr	r3, [r7, #28]
 8014d5e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014d60:	69fb      	ldr	r3, [r7, #28]
 8014d62:	2200      	movs	r2, #0
 8014d64:	719a      	strb	r2, [r3, #6]
 8014d66:	2200      	movs	r2, #0
 8014d68:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014d6a:	4b2a      	ldr	r3, [pc, #168]	; (8014e14 <ip4_output_if_src+0x154>)
 8014d6c:	881b      	ldrh	r3, [r3, #0]
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f7f6 fd94 	bl	800b89c <lwip_htons>
 8014d74:	4603      	mov	r3, r0
 8014d76:	461a      	mov	r2, r3
 8014d78:	69fb      	ldr	r3, [r7, #28]
 8014d7a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014d7c:	4b25      	ldr	r3, [pc, #148]	; (8014e14 <ip4_output_if_src+0x154>)
 8014d7e:	881b      	ldrh	r3, [r3, #0]
 8014d80:	3301      	adds	r3, #1
 8014d82:	b29a      	uxth	r2, r3
 8014d84:	4b23      	ldr	r3, [pc, #140]	; (8014e14 <ip4_output_if_src+0x154>)
 8014d86:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d104      	bne.n	8014d98 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014d8e:	4b22      	ldr	r3, [pc, #136]	; (8014e18 <ip4_output_if_src+0x158>)
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	69fb      	ldr	r3, [r7, #28]
 8014d94:	60da      	str	r2, [r3, #12]
 8014d96:	e003      	b.n	8014da0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	681a      	ldr	r2, [r3, #0]
 8014d9c:	69fb      	ldr	r3, [r7, #28]
 8014d9e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014da0:	69fb      	ldr	r3, [r7, #28]
 8014da2:	2200      	movs	r2, #0
 8014da4:	729a      	strb	r2, [r3, #10]
 8014da6:	2200      	movs	r2, #0
 8014da8:	72da      	strb	r2, [r3, #11]
 8014daa:	e00f      	b.n	8014dcc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	895b      	ldrh	r3, [r3, #10]
 8014db0:	2b13      	cmp	r3, #19
 8014db2:	d802      	bhi.n	8014dba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014db4:	f06f 0301 	mvn.w	r3, #1
 8014db8:	e020      	b.n	8014dfc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	685b      	ldr	r3, [r3, #4]
 8014dbe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014dc0:	69fb      	ldr	r3, [r7, #28]
 8014dc2:	691b      	ldr	r3, [r3, #16]
 8014dc4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014dc6:	f107 0314 	add.w	r3, r7, #20
 8014dca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d00c      	beq.n	8014dee <ip4_output_if_src+0x12e>
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	891a      	ldrh	r2, [r3, #8]
 8014dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d906      	bls.n	8014dee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014de0:	687a      	ldr	r2, [r7, #4]
 8014de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014de4:	68f8      	ldr	r0, [r7, #12]
 8014de6:	f000 fd53 	bl	8015890 <ip4_frag>
 8014dea:	4603      	mov	r3, r0
 8014dec:	e006      	b.n	8014dfc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df0:	695b      	ldr	r3, [r3, #20]
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	68f9      	ldr	r1, [r7, #12]
 8014df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014df8:	4798      	blx	r3
 8014dfa:	4603      	mov	r3, r0
}
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	3720      	adds	r7, #32
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}
 8014e04:	0801a2c4 	.word	0x0801a2c4
 8014e08:	0801a2f8 	.word	0x0801a2f8
 8014e0c:	0801a304 	.word	0x0801a304
 8014e10:	0801a32c 	.word	0x0801a32c
 8014e14:	200305a2 	.word	0x200305a2
 8014e18:	0801a74c 	.word	0x0801a74c

08014e1c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014e1c:	b480      	push	{r7}
 8014e1e:	b085      	sub	sp, #20
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]
 8014e24:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e30:	d002      	beq.n	8014e38 <ip4_addr_isbroadcast_u32+0x1c>
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d101      	bne.n	8014e3c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014e38:	2301      	movs	r3, #1
 8014e3a:	e02a      	b.n	8014e92 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e42:	f003 0302 	and.w	r3, r3, #2
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d101      	bne.n	8014e4e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	e021      	b.n	8014e92 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	3304      	adds	r3, #4
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d101      	bne.n	8014e5e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	e019      	b.n	8014e92 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014e5e:	68fa      	ldr	r2, [r7, #12]
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	3304      	adds	r3, #4
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	405a      	eors	r2, r3
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	3308      	adds	r3, #8
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	4013      	ands	r3, r2
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d10d      	bne.n	8014e90 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	3308      	adds	r3, #8
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	43da      	mvns	r2, r3
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	3308      	adds	r3, #8
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d101      	bne.n	8014e90 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	e000      	b.n	8014e92 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014e90:	2300      	movs	r3, #0
  }
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3714      	adds	r7, #20
 8014e96:	46bd      	mov	sp, r7
 8014e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9c:	4770      	bx	lr
	...

08014ea0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b084      	sub	sp, #16
 8014ea4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014eaa:	4b12      	ldr	r3, [pc, #72]	; (8014ef4 <ip_reass_tmr+0x54>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014eb0:	e018      	b.n	8014ee4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	7fdb      	ldrb	r3, [r3, #31]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d00b      	beq.n	8014ed2 <ip_reass_tmr+0x32>
      r->timer--;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	7fdb      	ldrb	r3, [r3, #31]
 8014ebe:	3b01      	subs	r3, #1
 8014ec0:	b2da      	uxtb	r2, r3
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	60fb      	str	r3, [r7, #12]
 8014ed0:	e008      	b.n	8014ee4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014edc:	68b9      	ldr	r1, [r7, #8]
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f000 f80a 	bl	8014ef8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d1e3      	bne.n	8014eb2 <ip_reass_tmr+0x12>
    }
  }
}
 8014eea:	bf00      	nop
 8014eec:	bf00      	nop
 8014eee:	3710      	adds	r7, #16
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}
 8014ef4:	200305a4 	.word	0x200305a4

08014ef8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b088      	sub	sp, #32
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
 8014f00:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014f02:	2300      	movs	r3, #0
 8014f04:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014f06:	683a      	ldr	r2, [r7, #0]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d105      	bne.n	8014f1a <ip_reass_free_complete_datagram+0x22>
 8014f0e:	4b45      	ldr	r3, [pc, #276]	; (8015024 <ip_reass_free_complete_datagram+0x12c>)
 8014f10:	22ab      	movs	r2, #171	; 0xab
 8014f12:	4945      	ldr	r1, [pc, #276]	; (8015028 <ip_reass_free_complete_datagram+0x130>)
 8014f14:	4845      	ldr	r0, [pc, #276]	; (801502c <ip_reass_free_complete_datagram+0x134>)
 8014f16:	f001 f9f3 	bl	8016300 <iprintf>
  if (prev != NULL) {
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d00a      	beq.n	8014f36 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014f20:	683b      	ldr	r3, [r7, #0]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	687a      	ldr	r2, [r7, #4]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	d005      	beq.n	8014f36 <ip_reass_free_complete_datagram+0x3e>
 8014f2a:	4b3e      	ldr	r3, [pc, #248]	; (8015024 <ip_reass_free_complete_datagram+0x12c>)
 8014f2c:	22ad      	movs	r2, #173	; 0xad
 8014f2e:	4940      	ldr	r1, [pc, #256]	; (8015030 <ip_reass_free_complete_datagram+0x138>)
 8014f30:	483e      	ldr	r0, [pc, #248]	; (801502c <ip_reass_free_complete_datagram+0x134>)
 8014f32:	f001 f9e5 	bl	8016300 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	889b      	ldrh	r3, [r3, #4]
 8014f42:	b29b      	uxth	r3, r3
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d12a      	bne.n	8014f9e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	685b      	ldr	r3, [r3, #4]
 8014f4c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	681a      	ldr	r2, [r3, #0]
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014f56:	69bb      	ldr	r3, [r7, #24]
 8014f58:	6858      	ldr	r0, [r3, #4]
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	3308      	adds	r3, #8
 8014f5e:	2214      	movs	r2, #20
 8014f60:	4619      	mov	r1, r3
 8014f62:	f001 f908 	bl	8016176 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014f66:	2101      	movs	r1, #1
 8014f68:	69b8      	ldr	r0, [r7, #24]
 8014f6a:	f7ff fc47 	bl	80147fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014f6e:	69b8      	ldr	r0, [r7, #24]
 8014f70:	f7f8 f914 	bl	800d19c <pbuf_clen>
 8014f74:	4603      	mov	r3, r0
 8014f76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014f78:	8bfa      	ldrh	r2, [r7, #30]
 8014f7a:	8a7b      	ldrh	r3, [r7, #18]
 8014f7c:	4413      	add	r3, r2
 8014f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f82:	db05      	blt.n	8014f90 <ip_reass_free_complete_datagram+0x98>
 8014f84:	4b27      	ldr	r3, [pc, #156]	; (8015024 <ip_reass_free_complete_datagram+0x12c>)
 8014f86:	22bc      	movs	r2, #188	; 0xbc
 8014f88:	492a      	ldr	r1, [pc, #168]	; (8015034 <ip_reass_free_complete_datagram+0x13c>)
 8014f8a:	4828      	ldr	r0, [pc, #160]	; (801502c <ip_reass_free_complete_datagram+0x134>)
 8014f8c:	f001 f9b8 	bl	8016300 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014f90:	8bfa      	ldrh	r2, [r7, #30]
 8014f92:	8a7b      	ldrh	r3, [r7, #18]
 8014f94:	4413      	add	r3, r2
 8014f96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014f98:	69b8      	ldr	r0, [r7, #24]
 8014f9a:	f7f8 f871 	bl	800d080 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	685b      	ldr	r3, [r3, #4]
 8014fa2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014fa4:	e01f      	b.n	8014fe6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014fa6:	69bb      	ldr	r3, [r7, #24]
 8014fa8:	685b      	ldr	r3, [r3, #4]
 8014faa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014fac:	69bb      	ldr	r3, [r7, #24]
 8014fae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014fb6:	68f8      	ldr	r0, [r7, #12]
 8014fb8:	f7f8 f8f0 	bl	800d19c <pbuf_clen>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014fc0:	8bfa      	ldrh	r2, [r7, #30]
 8014fc2:	8a7b      	ldrh	r3, [r7, #18]
 8014fc4:	4413      	add	r3, r2
 8014fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014fca:	db05      	blt.n	8014fd8 <ip_reass_free_complete_datagram+0xe0>
 8014fcc:	4b15      	ldr	r3, [pc, #84]	; (8015024 <ip_reass_free_complete_datagram+0x12c>)
 8014fce:	22cc      	movs	r2, #204	; 0xcc
 8014fd0:	4918      	ldr	r1, [pc, #96]	; (8015034 <ip_reass_free_complete_datagram+0x13c>)
 8014fd2:	4816      	ldr	r0, [pc, #88]	; (801502c <ip_reass_free_complete_datagram+0x134>)
 8014fd4:	f001 f994 	bl	8016300 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014fd8:	8bfa      	ldrh	r2, [r7, #30]
 8014fda:	8a7b      	ldrh	r3, [r7, #18]
 8014fdc:	4413      	add	r3, r2
 8014fde:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014fe0:	68f8      	ldr	r0, [r7, #12]
 8014fe2:	f7f8 f84d 	bl	800d080 <pbuf_free>
  while (p != NULL) {
 8014fe6:	69bb      	ldr	r3, [r7, #24]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d1dc      	bne.n	8014fa6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014fec:	6839      	ldr	r1, [r7, #0]
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f000 f8c2 	bl	8015178 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014ff4:	4b10      	ldr	r3, [pc, #64]	; (8015038 <ip_reass_free_complete_datagram+0x140>)
 8014ff6:	881b      	ldrh	r3, [r3, #0]
 8014ff8:	8bfa      	ldrh	r2, [r7, #30]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	d905      	bls.n	801500a <ip_reass_free_complete_datagram+0x112>
 8014ffe:	4b09      	ldr	r3, [pc, #36]	; (8015024 <ip_reass_free_complete_datagram+0x12c>)
 8015000:	22d2      	movs	r2, #210	; 0xd2
 8015002:	490e      	ldr	r1, [pc, #56]	; (801503c <ip_reass_free_complete_datagram+0x144>)
 8015004:	4809      	ldr	r0, [pc, #36]	; (801502c <ip_reass_free_complete_datagram+0x134>)
 8015006:	f001 f97b 	bl	8016300 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801500a:	4b0b      	ldr	r3, [pc, #44]	; (8015038 <ip_reass_free_complete_datagram+0x140>)
 801500c:	881a      	ldrh	r2, [r3, #0]
 801500e:	8bfb      	ldrh	r3, [r7, #30]
 8015010:	1ad3      	subs	r3, r2, r3
 8015012:	b29a      	uxth	r2, r3
 8015014:	4b08      	ldr	r3, [pc, #32]	; (8015038 <ip_reass_free_complete_datagram+0x140>)
 8015016:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015018:	8bfb      	ldrh	r3, [r7, #30]
}
 801501a:	4618      	mov	r0, r3
 801501c:	3720      	adds	r7, #32
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}
 8015022:	bf00      	nop
 8015024:	0801a35c 	.word	0x0801a35c
 8015028:	0801a398 	.word	0x0801a398
 801502c:	0801a3a4 	.word	0x0801a3a4
 8015030:	0801a3cc 	.word	0x0801a3cc
 8015034:	0801a3e0 	.word	0x0801a3e0
 8015038:	200305a8 	.word	0x200305a8
 801503c:	0801a400 	.word	0x0801a400

08015040 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b08a      	sub	sp, #40	; 0x28
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801504a:	2300      	movs	r3, #0
 801504c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801504e:	2300      	movs	r3, #0
 8015050:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015052:	2300      	movs	r3, #0
 8015054:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015056:	2300      	movs	r3, #0
 8015058:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801505a:	2300      	movs	r3, #0
 801505c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801505e:	4b28      	ldr	r3, [pc, #160]	; (8015100 <ip_reass_remove_oldest_datagram+0xc0>)
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015064:	e030      	b.n	80150c8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015068:	695a      	ldr	r2, [r3, #20]
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	68db      	ldr	r3, [r3, #12]
 801506e:	429a      	cmp	r2, r3
 8015070:	d10c      	bne.n	801508c <ip_reass_remove_oldest_datagram+0x4c>
 8015072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015074:	699a      	ldr	r2, [r3, #24]
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	691b      	ldr	r3, [r3, #16]
 801507a:	429a      	cmp	r2, r3
 801507c:	d106      	bne.n	801508c <ip_reass_remove_oldest_datagram+0x4c>
 801507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015080:	899a      	ldrh	r2, [r3, #12]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	889b      	ldrh	r3, [r3, #4]
 8015086:	b29b      	uxth	r3, r3
 8015088:	429a      	cmp	r2, r3
 801508a:	d014      	beq.n	80150b6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801508c:	693b      	ldr	r3, [r7, #16]
 801508e:	3301      	adds	r3, #1
 8015090:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015092:	6a3b      	ldr	r3, [r7, #32]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d104      	bne.n	80150a2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801509c:	69fb      	ldr	r3, [r7, #28]
 801509e:	61bb      	str	r3, [r7, #24]
 80150a0:	e009      	b.n	80150b6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80150a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a4:	7fda      	ldrb	r2, [r3, #31]
 80150a6:	6a3b      	ldr	r3, [r7, #32]
 80150a8:	7fdb      	ldrb	r3, [r3, #31]
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d803      	bhi.n	80150b6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80150ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80150b2:	69fb      	ldr	r3, [r7, #28]
 80150b4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80150b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d001      	beq.n	80150c2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80150be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80150c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80150c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d1cb      	bne.n	8015066 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80150ce:	6a3b      	ldr	r3, [r7, #32]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d008      	beq.n	80150e6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80150d4:	69b9      	ldr	r1, [r7, #24]
 80150d6:	6a38      	ldr	r0, [r7, #32]
 80150d8:	f7ff ff0e 	bl	8014ef8 <ip_reass_free_complete_datagram>
 80150dc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80150de:	697a      	ldr	r2, [r7, #20]
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	4413      	add	r3, r2
 80150e4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80150e6:	697a      	ldr	r2, [r7, #20]
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	429a      	cmp	r2, r3
 80150ec:	da02      	bge.n	80150f4 <ip_reass_remove_oldest_datagram+0xb4>
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	2b01      	cmp	r3, #1
 80150f2:	dcac      	bgt.n	801504e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80150f4:	697b      	ldr	r3, [r7, #20]
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3728      	adds	r7, #40	; 0x28
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
 80150fe:	bf00      	nop
 8015100:	200305a4 	.word	0x200305a4

08015104 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801510e:	2004      	movs	r0, #4
 8015110:	f7f7 f89c 	bl	800c24c <memp_malloc>
 8015114:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d110      	bne.n	801513e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801511c:	6839      	ldr	r1, [r7, #0]
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f7ff ff8e 	bl	8015040 <ip_reass_remove_oldest_datagram>
 8015124:	4602      	mov	r2, r0
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	4293      	cmp	r3, r2
 801512a:	dc03      	bgt.n	8015134 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801512c:	2004      	movs	r0, #4
 801512e:	f7f7 f88d 	bl	800c24c <memp_malloc>
 8015132:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d101      	bne.n	801513e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801513a:	2300      	movs	r3, #0
 801513c:	e016      	b.n	801516c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801513e:	2220      	movs	r2, #32
 8015140:	2100      	movs	r1, #0
 8015142:	68f8      	ldr	r0, [r7, #12]
 8015144:	f001 f83f 	bl	80161c6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	220f      	movs	r2, #15
 801514c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801514e:	4b09      	ldr	r3, [pc, #36]	; (8015174 <ip_reass_enqueue_new_datagram+0x70>)
 8015150:	681a      	ldr	r2, [r3, #0]
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015156:	4a07      	ldr	r2, [pc, #28]	; (8015174 <ip_reass_enqueue_new_datagram+0x70>)
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	3308      	adds	r3, #8
 8015160:	2214      	movs	r2, #20
 8015162:	6879      	ldr	r1, [r7, #4]
 8015164:	4618      	mov	r0, r3
 8015166:	f001 f806 	bl	8016176 <memcpy>
  return ipr;
 801516a:	68fb      	ldr	r3, [r7, #12]
}
 801516c:	4618      	mov	r0, r3
 801516e:	3710      	adds	r7, #16
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}
 8015174:	200305a4 	.word	0x200305a4

08015178 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
 8015180:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015182:	4b10      	ldr	r3, [pc, #64]	; (80151c4 <ip_reass_dequeue_datagram+0x4c>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	687a      	ldr	r2, [r7, #4]
 8015188:	429a      	cmp	r2, r3
 801518a:	d104      	bne.n	8015196 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	4a0c      	ldr	r2, [pc, #48]	; (80151c4 <ip_reass_dequeue_datagram+0x4c>)
 8015192:	6013      	str	r3, [r2, #0]
 8015194:	e00d      	b.n	80151b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015196:	683b      	ldr	r3, [r7, #0]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d106      	bne.n	80151aa <ip_reass_dequeue_datagram+0x32>
 801519c:	4b0a      	ldr	r3, [pc, #40]	; (80151c8 <ip_reass_dequeue_datagram+0x50>)
 801519e:	f240 1245 	movw	r2, #325	; 0x145
 80151a2:	490a      	ldr	r1, [pc, #40]	; (80151cc <ip_reass_dequeue_datagram+0x54>)
 80151a4:	480a      	ldr	r0, [pc, #40]	; (80151d0 <ip_reass_dequeue_datagram+0x58>)
 80151a6:	f001 f8ab 	bl	8016300 <iprintf>
    prev->next = ipr->next;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	681a      	ldr	r2, [r3, #0]
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80151b2:	6879      	ldr	r1, [r7, #4]
 80151b4:	2004      	movs	r0, #4
 80151b6:	f7f7 f8bf 	bl	800c338 <memp_free>
}
 80151ba:	bf00      	nop
 80151bc:	3708      	adds	r7, #8
 80151be:	46bd      	mov	sp, r7
 80151c0:	bd80      	pop	{r7, pc}
 80151c2:	bf00      	nop
 80151c4:	200305a4 	.word	0x200305a4
 80151c8:	0801a35c 	.word	0x0801a35c
 80151cc:	0801a424 	.word	0x0801a424
 80151d0:	0801a3a4 	.word	0x0801a3a4

080151d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b08c      	sub	sp, #48	; 0x30
 80151d8:	af00      	add	r7, sp, #0
 80151da:	60f8      	str	r0, [r7, #12]
 80151dc:	60b9      	str	r1, [r7, #8]
 80151de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80151e0:	2300      	movs	r3, #0
 80151e2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80151e4:	2301      	movs	r3, #1
 80151e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	685b      	ldr	r3, [r3, #4]
 80151ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80151ee:	69fb      	ldr	r3, [r7, #28]
 80151f0:	885b      	ldrh	r3, [r3, #2]
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	4618      	mov	r0, r3
 80151f6:	f7f6 fb51 	bl	800b89c <lwip_htons>
 80151fa:	4603      	mov	r3, r0
 80151fc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80151fe:	69fb      	ldr	r3, [r7, #28]
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	f003 030f 	and.w	r3, r3, #15
 8015206:	b2db      	uxtb	r3, r3
 8015208:	009b      	lsls	r3, r3, #2
 801520a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801520c:	7e7b      	ldrb	r3, [r7, #25]
 801520e:	b29b      	uxth	r3, r3
 8015210:	8b7a      	ldrh	r2, [r7, #26]
 8015212:	429a      	cmp	r2, r3
 8015214:	d202      	bcs.n	801521c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801521a:	e135      	b.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801521c:	7e7b      	ldrb	r3, [r7, #25]
 801521e:	b29b      	uxth	r3, r3
 8015220:	8b7a      	ldrh	r2, [r7, #26]
 8015222:	1ad3      	subs	r3, r2, r3
 8015224:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015226:	69fb      	ldr	r3, [r7, #28]
 8015228:	88db      	ldrh	r3, [r3, #6]
 801522a:	b29b      	uxth	r3, r3
 801522c:	4618      	mov	r0, r3
 801522e:	f7f6 fb35 	bl	800b89c <lwip_htons>
 8015232:	4603      	mov	r3, r0
 8015234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015238:	b29b      	uxth	r3, r3
 801523a:	00db      	lsls	r3, r3, #3
 801523c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015246:	2200      	movs	r2, #0
 8015248:	701a      	strb	r2, [r3, #0]
 801524a:	2200      	movs	r2, #0
 801524c:	705a      	strb	r2, [r3, #1]
 801524e:	2200      	movs	r2, #0
 8015250:	709a      	strb	r2, [r3, #2]
 8015252:	2200      	movs	r2, #0
 8015254:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015258:	8afa      	ldrh	r2, [r7, #22]
 801525a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801525c:	8afa      	ldrh	r2, [r7, #22]
 801525e:	8b7b      	ldrh	r3, [r7, #26]
 8015260:	4413      	add	r3, r2
 8015262:	b29a      	uxth	r2, r3
 8015264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015266:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801526a:	88db      	ldrh	r3, [r3, #6]
 801526c:	b29b      	uxth	r3, r3
 801526e:	8afa      	ldrh	r2, [r7, #22]
 8015270:	429a      	cmp	r2, r3
 8015272:	d902      	bls.n	801527a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015278:	e106      	b.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	627b      	str	r3, [r7, #36]	; 0x24
 8015280:	e068      	b.n	8015354 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801528a:	889b      	ldrh	r3, [r3, #4]
 801528c:	b29a      	uxth	r2, r3
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	889b      	ldrh	r3, [r3, #4]
 8015292:	b29b      	uxth	r3, r3
 8015294:	429a      	cmp	r2, r3
 8015296:	d235      	bcs.n	8015304 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801529a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801529c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d020      	beq.n	80152e6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80152a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152a6:	889b      	ldrh	r3, [r3, #4]
 80152a8:	b29a      	uxth	r2, r3
 80152aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ac:	88db      	ldrh	r3, [r3, #6]
 80152ae:	b29b      	uxth	r3, r3
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d307      	bcc.n	80152c4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80152b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152b6:	88db      	ldrh	r3, [r3, #6]
 80152b8:	b29a      	uxth	r2, r3
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	889b      	ldrh	r3, [r3, #4]
 80152be:	b29b      	uxth	r3, r3
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d902      	bls.n	80152ca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80152c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152c8:	e0de      	b.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80152ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152cc:	68ba      	ldr	r2, [r7, #8]
 80152ce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80152d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152d2:	88db      	ldrh	r3, [r3, #6]
 80152d4:	b29a      	uxth	r2, r3
 80152d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152d8:	889b      	ldrh	r3, [r3, #4]
 80152da:	b29b      	uxth	r3, r3
 80152dc:	429a      	cmp	r2, r3
 80152de:	d03d      	beq.n	801535c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80152e0:	2300      	movs	r3, #0
 80152e2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80152e4:	e03a      	b.n	801535c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80152e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e8:	88db      	ldrh	r3, [r3, #6]
 80152ea:	b29a      	uxth	r2, r3
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	889b      	ldrh	r3, [r3, #4]
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	429a      	cmp	r2, r3
 80152f4:	d902      	bls.n	80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80152f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152fa:	e0c5      	b.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	68ba      	ldr	r2, [r7, #8]
 8015300:	605a      	str	r2, [r3, #4]
      break;
 8015302:	e02b      	b.n	801535c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015306:	889b      	ldrh	r3, [r3, #4]
 8015308:	b29a      	uxth	r2, r3
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	889b      	ldrh	r3, [r3, #4]
 801530e:	b29b      	uxth	r3, r3
 8015310:	429a      	cmp	r2, r3
 8015312:	d102      	bne.n	801531a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015318:	e0b6      	b.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801531c:	889b      	ldrh	r3, [r3, #4]
 801531e:	b29a      	uxth	r2, r3
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	88db      	ldrh	r3, [r3, #6]
 8015324:	b29b      	uxth	r3, r3
 8015326:	429a      	cmp	r2, r3
 8015328:	d202      	bcs.n	8015330 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801532a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801532e:	e0ab      	b.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015332:	2b00      	cmp	r3, #0
 8015334:	d009      	beq.n	801534a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015338:	88db      	ldrh	r3, [r3, #6]
 801533a:	b29a      	uxth	r2, r3
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	889b      	ldrh	r3, [r3, #4]
 8015340:	b29b      	uxth	r3, r3
 8015342:	429a      	cmp	r2, r3
 8015344:	d001      	beq.n	801534a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015346:	2300      	movs	r3, #0
 8015348:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015356:	2b00      	cmp	r3, #0
 8015358:	d193      	bne.n	8015282 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801535a:	e000      	b.n	801535e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801535c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015360:	2b00      	cmp	r3, #0
 8015362:	d12d      	bne.n	80153c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015366:	2b00      	cmp	r3, #0
 8015368:	d01c      	beq.n	80153a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801536c:	88db      	ldrh	r3, [r3, #6]
 801536e:	b29a      	uxth	r2, r3
 8015370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015372:	889b      	ldrh	r3, [r3, #4]
 8015374:	b29b      	uxth	r3, r3
 8015376:	429a      	cmp	r2, r3
 8015378:	d906      	bls.n	8015388 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801537a:	4b45      	ldr	r3, [pc, #276]	; (8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801537c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015380:	4944      	ldr	r1, [pc, #272]	; (8015494 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015382:	4845      	ldr	r0, [pc, #276]	; (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015384:	f000 ffbc 	bl	8016300 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801538a:	68ba      	ldr	r2, [r7, #8]
 801538c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015390:	88db      	ldrh	r3, [r3, #6]
 8015392:	b29a      	uxth	r2, r3
 8015394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015396:	889b      	ldrh	r3, [r3, #4]
 8015398:	b29b      	uxth	r3, r3
 801539a:	429a      	cmp	r2, r3
 801539c:	d010      	beq.n	80153c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801539e:	2300      	movs	r3, #0
 80153a0:	623b      	str	r3, [r7, #32]
 80153a2:	e00d      	b.n	80153c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	685b      	ldr	r3, [r3, #4]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d006      	beq.n	80153ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80153ac:	4b38      	ldr	r3, [pc, #224]	; (8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80153ae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80153b2:	493a      	ldr	r1, [pc, #232]	; (801549c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80153b4:	4838      	ldr	r0, [pc, #224]	; (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153b6:	f000 ffa3 	bl	8016300 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	68ba      	ldr	r2, [r7, #8]
 80153be:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d105      	bne.n	80153d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	7f9b      	ldrb	r3, [r3, #30]
 80153ca:	f003 0301 	and.w	r3, r3, #1
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d059      	beq.n	8015486 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80153d2:	6a3b      	ldr	r3, [r7, #32]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d04f      	beq.n	8015478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d006      	beq.n	80153ee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	685b      	ldr	r3, [r3, #4]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	889b      	ldrh	r3, [r3, #4]
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d002      	beq.n	80153f4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80153ee:	2300      	movs	r3, #0
 80153f0:	623b      	str	r3, [r7, #32]
 80153f2:	e041      	b.n	8015478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80153f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153f6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80153f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80153fe:	e012      	b.n	8015426 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015402:	685b      	ldr	r3, [r3, #4]
 8015404:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015408:	88db      	ldrh	r3, [r3, #6]
 801540a:	b29a      	uxth	r2, r3
 801540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801540e:	889b      	ldrh	r3, [r3, #4]
 8015410:	b29b      	uxth	r3, r3
 8015412:	429a      	cmp	r2, r3
 8015414:	d002      	beq.n	801541c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015416:	2300      	movs	r3, #0
 8015418:	623b      	str	r3, [r7, #32]
            break;
 801541a:	e007      	b.n	801542c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801541e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015428:	2b00      	cmp	r3, #0
 801542a:	d1e9      	bne.n	8015400 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801542c:	6a3b      	ldr	r3, [r7, #32]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d022      	beq.n	8015478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d106      	bne.n	8015448 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801543a:	4b15      	ldr	r3, [pc, #84]	; (8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801543c:	f240 12df 	movw	r2, #479	; 0x1df
 8015440:	4917      	ldr	r1, [pc, #92]	; (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015442:	4815      	ldr	r0, [pc, #84]	; (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015444:	f000 ff5c 	bl	8016300 <iprintf>
          LWIP_ASSERT("sanity check",
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	685b      	ldr	r3, [r3, #4]
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015450:	429a      	cmp	r2, r3
 8015452:	d106      	bne.n	8015462 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015454:	4b0e      	ldr	r3, [pc, #56]	; (8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015456:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801545a:	4911      	ldr	r1, [pc, #68]	; (80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801545c:	480e      	ldr	r0, [pc, #56]	; (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801545e:	f000 ff4f 	bl	8016300 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d006      	beq.n	8015478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801546a:	4b09      	ldr	r3, [pc, #36]	; (8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801546c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015470:	490c      	ldr	r1, [pc, #48]	; (80154a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015472:	4809      	ldr	r0, [pc, #36]	; (8015498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015474:	f000 ff44 	bl	8016300 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015478:	6a3b      	ldr	r3, [r7, #32]
 801547a:	2b00      	cmp	r3, #0
 801547c:	bf14      	ite	ne
 801547e:	2301      	movne	r3, #1
 8015480:	2300      	moveq	r3, #0
 8015482:	b2db      	uxtb	r3, r3
 8015484:	e000      	b.n	8015488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015486:	2300      	movs	r3, #0
}
 8015488:	4618      	mov	r0, r3
 801548a:	3730      	adds	r7, #48	; 0x30
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}
 8015490:	0801a35c 	.word	0x0801a35c
 8015494:	0801a440 	.word	0x0801a440
 8015498:	0801a3a4 	.word	0x0801a3a4
 801549c:	0801a460 	.word	0x0801a460
 80154a0:	0801a498 	.word	0x0801a498
 80154a4:	0801a4a8 	.word	0x0801a4a8

080154a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b08e      	sub	sp, #56	; 0x38
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	685b      	ldr	r3, [r3, #4]
 80154b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80154b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b8:	781b      	ldrb	r3, [r3, #0]
 80154ba:	f003 030f 	and.w	r3, r3, #15
 80154be:	b2db      	uxtb	r3, r3
 80154c0:	009b      	lsls	r3, r3, #2
 80154c2:	b2db      	uxtb	r3, r3
 80154c4:	2b14      	cmp	r3, #20
 80154c6:	f040 8171 	bne.w	80157ac <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80154ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154cc:	88db      	ldrh	r3, [r3, #6]
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7f6 f9e3 	bl	800b89c <lwip_htons>
 80154d6:	4603      	mov	r3, r0
 80154d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80154dc:	b29b      	uxth	r3, r3
 80154de:	00db      	lsls	r3, r3, #3
 80154e0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80154e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154e4:	885b      	ldrh	r3, [r3, #2]
 80154e6:	b29b      	uxth	r3, r3
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7f6 f9d7 	bl	800b89c <lwip_htons>
 80154ee:	4603      	mov	r3, r0
 80154f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80154f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	f003 030f 	and.w	r3, r3, #15
 80154fa:	b2db      	uxtb	r3, r3
 80154fc:	009b      	lsls	r3, r3, #2
 80154fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015506:	b29b      	uxth	r3, r3
 8015508:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801550a:	429a      	cmp	r2, r3
 801550c:	f0c0 8150 	bcc.w	80157b0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015514:	b29b      	uxth	r3, r3
 8015516:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015518:	1ad3      	subs	r3, r2, r3
 801551a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801551c:	6878      	ldr	r0, [r7, #4]
 801551e:	f7f7 fe3d 	bl	800d19c <pbuf_clen>
 8015522:	4603      	mov	r3, r0
 8015524:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015526:	4b8c      	ldr	r3, [pc, #560]	; (8015758 <ip4_reass+0x2b0>)
 8015528:	881b      	ldrh	r3, [r3, #0]
 801552a:	461a      	mov	r2, r3
 801552c:	8c3b      	ldrh	r3, [r7, #32]
 801552e:	4413      	add	r3, r2
 8015530:	2b0a      	cmp	r3, #10
 8015532:	dd10      	ble.n	8015556 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015534:	8c3b      	ldrh	r3, [r7, #32]
 8015536:	4619      	mov	r1, r3
 8015538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801553a:	f7ff fd81 	bl	8015040 <ip_reass_remove_oldest_datagram>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	f000 8137 	beq.w	80157b4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015546:	4b84      	ldr	r3, [pc, #528]	; (8015758 <ip4_reass+0x2b0>)
 8015548:	881b      	ldrh	r3, [r3, #0]
 801554a:	461a      	mov	r2, r3
 801554c:	8c3b      	ldrh	r3, [r7, #32]
 801554e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015550:	2b0a      	cmp	r3, #10
 8015552:	f300 812f 	bgt.w	80157b4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015556:	4b81      	ldr	r3, [pc, #516]	; (801575c <ip4_reass+0x2b4>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	633b      	str	r3, [r7, #48]	; 0x30
 801555c:	e015      	b.n	801558a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015560:	695a      	ldr	r2, [r3, #20]
 8015562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015564:	68db      	ldr	r3, [r3, #12]
 8015566:	429a      	cmp	r2, r3
 8015568:	d10c      	bne.n	8015584 <ip4_reass+0xdc>
 801556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801556c:	699a      	ldr	r2, [r3, #24]
 801556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015570:	691b      	ldr	r3, [r3, #16]
 8015572:	429a      	cmp	r2, r3
 8015574:	d106      	bne.n	8015584 <ip4_reass+0xdc>
 8015576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015578:	899a      	ldrh	r2, [r3, #12]
 801557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801557c:	889b      	ldrh	r3, [r3, #4]
 801557e:	b29b      	uxth	r3, r3
 8015580:	429a      	cmp	r2, r3
 8015582:	d006      	beq.n	8015592 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	633b      	str	r3, [r7, #48]	; 0x30
 801558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801558c:	2b00      	cmp	r3, #0
 801558e:	d1e6      	bne.n	801555e <ip4_reass+0xb6>
 8015590:	e000      	b.n	8015594 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015592:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015596:	2b00      	cmp	r3, #0
 8015598:	d109      	bne.n	80155ae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801559a:	8c3b      	ldrh	r3, [r7, #32]
 801559c:	4619      	mov	r1, r3
 801559e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155a0:	f7ff fdb0 	bl	8015104 <ip_reass_enqueue_new_datagram>
 80155a4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80155a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d11c      	bne.n	80155e6 <ip4_reass+0x13e>
      goto nullreturn;
 80155ac:	e105      	b.n	80157ba <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80155ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b0:	88db      	ldrh	r3, [r3, #6]
 80155b2:	b29b      	uxth	r3, r3
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7f6 f971 	bl	800b89c <lwip_htons>
 80155ba:	4603      	mov	r3, r0
 80155bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d110      	bne.n	80155e6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80155c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c6:	89db      	ldrh	r3, [r3, #14]
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7f6 f967 	bl	800b89c <lwip_htons>
 80155ce:	4603      	mov	r3, r0
 80155d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d006      	beq.n	80155e6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80155d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155da:	3308      	adds	r3, #8
 80155dc:	2214      	movs	r2, #20
 80155de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80155e0:	4618      	mov	r0, r3
 80155e2:	f000 fdc8 	bl	8016176 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80155e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155e8:	88db      	ldrh	r3, [r3, #6]
 80155ea:	b29b      	uxth	r3, r3
 80155ec:	f003 0320 	and.w	r3, r3, #32
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	bf0c      	ite	eq
 80155f4:	2301      	moveq	r3, #1
 80155f6:	2300      	movne	r3, #0
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d00e      	beq.n	8015620 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015602:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015606:	4413      	add	r3, r2
 8015608:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801560a:	8b7a      	ldrh	r2, [r7, #26]
 801560c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801560e:	429a      	cmp	r2, r3
 8015610:	f0c0 80a0 	bcc.w	8015754 <ip4_reass+0x2ac>
 8015614:	8b7b      	ldrh	r3, [r7, #26]
 8015616:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801561a:	4293      	cmp	r3, r2
 801561c:	f200 809a 	bhi.w	8015754 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015620:	69fa      	ldr	r2, [r7, #28]
 8015622:	6879      	ldr	r1, [r7, #4]
 8015624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015626:	f7ff fdd5 	bl	80151d4 <ip_reass_chain_frag_into_datagram_and_validate>
 801562a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015632:	f000 809b 	beq.w	801576c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015636:	4b48      	ldr	r3, [pc, #288]	; (8015758 <ip4_reass+0x2b0>)
 8015638:	881a      	ldrh	r2, [r3, #0]
 801563a:	8c3b      	ldrh	r3, [r7, #32]
 801563c:	4413      	add	r3, r2
 801563e:	b29a      	uxth	r2, r3
 8015640:	4b45      	ldr	r3, [pc, #276]	; (8015758 <ip4_reass+0x2b0>)
 8015642:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015644:	69fb      	ldr	r3, [r7, #28]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d00d      	beq.n	8015666 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801564a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801564c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801564e:	4413      	add	r3, r2
 8015650:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015654:	8a7a      	ldrh	r2, [r7, #18]
 8015656:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801565a:	7f9b      	ldrb	r3, [r3, #30]
 801565c:	f043 0301 	orr.w	r3, r3, #1
 8015660:	b2da      	uxtb	r2, r3
 8015662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015664:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	2b01      	cmp	r3, #1
 801566a:	d171      	bne.n	8015750 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801566e:	8b9b      	ldrh	r3, [r3, #28]
 8015670:	3314      	adds	r3, #20
 8015672:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015676:	685b      	ldr	r3, [r3, #4]
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015680:	685b      	ldr	r3, [r3, #4]
 8015682:	685b      	ldr	r3, [r3, #4]
 8015684:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015688:	3308      	adds	r3, #8
 801568a:	2214      	movs	r2, #20
 801568c:	4619      	mov	r1, r3
 801568e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015690:	f000 fd71 	bl	8016176 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015694:	8a3b      	ldrh	r3, [r7, #16]
 8015696:	4618      	mov	r0, r3
 8015698:	f7f6 f900 	bl	800b89c <lwip_htons>
 801569c:	4603      	mov	r3, r0
 801569e:	461a      	mov	r2, r3
 80156a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80156a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a6:	2200      	movs	r2, #0
 80156a8:	719a      	strb	r2, [r3, #6]
 80156aa:	2200      	movs	r2, #0
 80156ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80156ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b0:	2200      	movs	r2, #0
 80156b2:	729a      	strb	r2, [r3, #10]
 80156b4:	2200      	movs	r2, #0
 80156b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80156b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ba:	685b      	ldr	r3, [r3, #4]
 80156bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80156be:	e00d      	b.n	80156dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80156c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80156c6:	2114      	movs	r1, #20
 80156c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80156ca:	f7f7 fc53 	bl	800cf74 <pbuf_remove_header>
      pbuf_cat(p, r);
 80156ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80156d0:	6878      	ldr	r0, [r7, #4]
 80156d2:	f7f7 fda3 	bl	800d21c <pbuf_cat>
      r = iprh->next_pbuf;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80156dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d1ee      	bne.n	80156c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80156e2:	4b1e      	ldr	r3, [pc, #120]	; (801575c <ip4_reass+0x2b4>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d102      	bne.n	80156f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80156ec:	2300      	movs	r3, #0
 80156ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156f0:	e010      	b.n	8015714 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80156f2:	4b1a      	ldr	r3, [pc, #104]	; (801575c <ip4_reass+0x2b4>)
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156f8:	e007      	b.n	801570a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80156fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015700:	429a      	cmp	r2, r3
 8015702:	d006      	beq.n	8015712 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	62fb      	str	r3, [r7, #44]	; 0x2c
 801570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570c:	2b00      	cmp	r3, #0
 801570e:	d1f4      	bne.n	80156fa <ip4_reass+0x252>
 8015710:	e000      	b.n	8015714 <ip4_reass+0x26c>
          break;
 8015712:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015718:	f7ff fd2e 	bl	8015178 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f7f7 fd3d 	bl	800d19c <pbuf_clen>
 8015722:	4603      	mov	r3, r0
 8015724:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015726:	4b0c      	ldr	r3, [pc, #48]	; (8015758 <ip4_reass+0x2b0>)
 8015728:	881b      	ldrh	r3, [r3, #0]
 801572a:	8c3a      	ldrh	r2, [r7, #32]
 801572c:	429a      	cmp	r2, r3
 801572e:	d906      	bls.n	801573e <ip4_reass+0x296>
 8015730:	4b0b      	ldr	r3, [pc, #44]	; (8015760 <ip4_reass+0x2b8>)
 8015732:	f240 229b 	movw	r2, #667	; 0x29b
 8015736:	490b      	ldr	r1, [pc, #44]	; (8015764 <ip4_reass+0x2bc>)
 8015738:	480b      	ldr	r0, [pc, #44]	; (8015768 <ip4_reass+0x2c0>)
 801573a:	f000 fde1 	bl	8016300 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801573e:	4b06      	ldr	r3, [pc, #24]	; (8015758 <ip4_reass+0x2b0>)
 8015740:	881a      	ldrh	r2, [r3, #0]
 8015742:	8c3b      	ldrh	r3, [r7, #32]
 8015744:	1ad3      	subs	r3, r2, r3
 8015746:	b29a      	uxth	r2, r3
 8015748:	4b03      	ldr	r3, [pc, #12]	; (8015758 <ip4_reass+0x2b0>)
 801574a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	e038      	b.n	80157c2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015750:	2300      	movs	r3, #0
 8015752:	e036      	b.n	80157c2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015754:	bf00      	nop
 8015756:	e00a      	b.n	801576e <ip4_reass+0x2c6>
 8015758:	200305a8 	.word	0x200305a8
 801575c:	200305a4 	.word	0x200305a4
 8015760:	0801a35c 	.word	0x0801a35c
 8015764:	0801a4cc 	.word	0x0801a4cc
 8015768:	0801a3a4 	.word	0x0801a3a4
    goto nullreturn_ipr;
 801576c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015770:	2b00      	cmp	r3, #0
 8015772:	d106      	bne.n	8015782 <ip4_reass+0x2da>
 8015774:	4b15      	ldr	r3, [pc, #84]	; (80157cc <ip4_reass+0x324>)
 8015776:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801577a:	4915      	ldr	r1, [pc, #84]	; (80157d0 <ip4_reass+0x328>)
 801577c:	4815      	ldr	r0, [pc, #84]	; (80157d4 <ip4_reass+0x32c>)
 801577e:	f000 fdbf 	bl	8016300 <iprintf>
  if (ipr->p == NULL) {
 8015782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015784:	685b      	ldr	r3, [r3, #4]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d116      	bne.n	80157b8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801578a:	4b13      	ldr	r3, [pc, #76]	; (80157d8 <ip4_reass+0x330>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015790:	429a      	cmp	r2, r3
 8015792:	d006      	beq.n	80157a2 <ip4_reass+0x2fa>
 8015794:	4b0d      	ldr	r3, [pc, #52]	; (80157cc <ip4_reass+0x324>)
 8015796:	f240 22ab 	movw	r2, #683	; 0x2ab
 801579a:	4910      	ldr	r1, [pc, #64]	; (80157dc <ip4_reass+0x334>)
 801579c:	480d      	ldr	r0, [pc, #52]	; (80157d4 <ip4_reass+0x32c>)
 801579e:	f000 fdaf 	bl	8016300 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80157a2:	2100      	movs	r1, #0
 80157a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157a6:	f7ff fce7 	bl	8015178 <ip_reass_dequeue_datagram>
 80157aa:	e006      	b.n	80157ba <ip4_reass+0x312>
    goto nullreturn;
 80157ac:	bf00      	nop
 80157ae:	e004      	b.n	80157ba <ip4_reass+0x312>
    goto nullreturn;
 80157b0:	bf00      	nop
 80157b2:	e002      	b.n	80157ba <ip4_reass+0x312>
      goto nullreturn;
 80157b4:	bf00      	nop
 80157b6:	e000      	b.n	80157ba <ip4_reass+0x312>
  }

nullreturn:
 80157b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	f7f7 fc60 	bl	800d080 <pbuf_free>
  return NULL;
 80157c0:	2300      	movs	r3, #0
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3738      	adds	r7, #56	; 0x38
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	0801a35c 	.word	0x0801a35c
 80157d0:	0801a4e8 	.word	0x0801a4e8
 80157d4:	0801a3a4 	.word	0x0801a3a4
 80157d8:	200305a4 	.word	0x200305a4
 80157dc:	0801a4f4 	.word	0x0801a4f4

080157e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80157e4:	2005      	movs	r0, #5
 80157e6:	f7f6 fd31 	bl	800c24c <memp_malloc>
 80157ea:	4603      	mov	r3, r0
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d106      	bne.n	801580c <ip_frag_free_pbuf_custom_ref+0x1c>
 80157fe:	4b07      	ldr	r3, [pc, #28]	; (801581c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015800:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015804:	4906      	ldr	r1, [pc, #24]	; (8015820 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015806:	4807      	ldr	r0, [pc, #28]	; (8015824 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015808:	f000 fd7a 	bl	8016300 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801580c:	6879      	ldr	r1, [r7, #4]
 801580e:	2005      	movs	r0, #5
 8015810:	f7f6 fd92 	bl	800c338 <memp_free>
}
 8015814:	bf00      	nop
 8015816:	3708      	adds	r7, #8
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}
 801581c:	0801a35c 	.word	0x0801a35c
 8015820:	0801a514 	.word	0x0801a514
 8015824:	0801a3a4 	.word	0x0801a3a4

08015828 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b084      	sub	sp, #16
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d106      	bne.n	8015848 <ipfrag_free_pbuf_custom+0x20>
 801583a:	4b11      	ldr	r3, [pc, #68]	; (8015880 <ipfrag_free_pbuf_custom+0x58>)
 801583c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015840:	4910      	ldr	r1, [pc, #64]	; (8015884 <ipfrag_free_pbuf_custom+0x5c>)
 8015842:	4811      	ldr	r0, [pc, #68]	; (8015888 <ipfrag_free_pbuf_custom+0x60>)
 8015844:	f000 fd5c 	bl	8016300 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015848:	68fa      	ldr	r2, [r7, #12]
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	429a      	cmp	r2, r3
 801584e:	d006      	beq.n	801585e <ipfrag_free_pbuf_custom+0x36>
 8015850:	4b0b      	ldr	r3, [pc, #44]	; (8015880 <ipfrag_free_pbuf_custom+0x58>)
 8015852:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015856:	490d      	ldr	r1, [pc, #52]	; (801588c <ipfrag_free_pbuf_custom+0x64>)
 8015858:	480b      	ldr	r0, [pc, #44]	; (8015888 <ipfrag_free_pbuf_custom+0x60>)
 801585a:	f000 fd51 	bl	8016300 <iprintf>
  if (pcr->original != NULL) {
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	695b      	ldr	r3, [r3, #20]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d004      	beq.n	8015870 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	695b      	ldr	r3, [r3, #20]
 801586a:	4618      	mov	r0, r3
 801586c:	f7f7 fc08 	bl	800d080 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015870:	68f8      	ldr	r0, [r7, #12]
 8015872:	f7ff ffbd 	bl	80157f0 <ip_frag_free_pbuf_custom_ref>
}
 8015876:	bf00      	nop
 8015878:	3710      	adds	r7, #16
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	0801a35c 	.word	0x0801a35c
 8015884:	0801a520 	.word	0x0801a520
 8015888:	0801a3a4 	.word	0x0801a3a4
 801588c:	0801a52c 	.word	0x0801a52c

08015890 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b094      	sub	sp, #80	; 0x50
 8015894:	af02      	add	r7, sp, #8
 8015896:	60f8      	str	r0, [r7, #12]
 8015898:	60b9      	str	r1, [r7, #8]
 801589a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801589c:	2300      	movs	r3, #0
 801589e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80158a6:	3b14      	subs	r3, #20
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	da00      	bge.n	80158ae <ip4_frag+0x1e>
 80158ac:	3307      	adds	r3, #7
 80158ae:	10db      	asrs	r3, r3, #3
 80158b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80158b2:	2314      	movs	r3, #20
 80158b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80158bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158be:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80158c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	f003 030f 	and.w	r3, r3, #15
 80158c8:	b2db      	uxtb	r3, r3
 80158ca:	009b      	lsls	r3, r3, #2
 80158cc:	b2db      	uxtb	r3, r3
 80158ce:	2b14      	cmp	r3, #20
 80158d0:	d002      	beq.n	80158d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80158d2:	f06f 0305 	mvn.w	r3, #5
 80158d6:	e110      	b.n	8015afa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	895b      	ldrh	r3, [r3, #10]
 80158dc:	2b13      	cmp	r3, #19
 80158de:	d809      	bhi.n	80158f4 <ip4_frag+0x64>
 80158e0:	4b88      	ldr	r3, [pc, #544]	; (8015b04 <ip4_frag+0x274>)
 80158e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80158e6:	4988      	ldr	r1, [pc, #544]	; (8015b08 <ip4_frag+0x278>)
 80158e8:	4888      	ldr	r0, [pc, #544]	; (8015b0c <ip4_frag+0x27c>)
 80158ea:	f000 fd09 	bl	8016300 <iprintf>
 80158ee:	f06f 0305 	mvn.w	r3, #5
 80158f2:	e102      	b.n	8015afa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80158f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f6:	88db      	ldrh	r3, [r3, #6]
 80158f8:	b29b      	uxth	r3, r3
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7f5 ffce 	bl	800b89c <lwip_htons>
 8015900:	4603      	mov	r3, r0
 8015902:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015904:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015906:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801590a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801590e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015914:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	891b      	ldrh	r3, [r3, #8]
 801591a:	3b14      	subs	r3, #20
 801591c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015920:	e0e1      	b.n	8015ae6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015922:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015924:	00db      	lsls	r3, r3, #3
 8015926:	b29b      	uxth	r3, r3
 8015928:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801592c:	4293      	cmp	r3, r2
 801592e:	bf28      	it	cs
 8015930:	4613      	movcs	r3, r2
 8015932:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015934:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015938:	2114      	movs	r1, #20
 801593a:	200e      	movs	r0, #14
 801593c:	f7f7 f8bc 	bl	800cab8 <pbuf_alloc>
 8015940:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015944:	2b00      	cmp	r3, #0
 8015946:	f000 80d5 	beq.w	8015af4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801594c:	895b      	ldrh	r3, [r3, #10]
 801594e:	2b13      	cmp	r3, #19
 8015950:	d806      	bhi.n	8015960 <ip4_frag+0xd0>
 8015952:	4b6c      	ldr	r3, [pc, #432]	; (8015b04 <ip4_frag+0x274>)
 8015954:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015958:	496d      	ldr	r1, [pc, #436]	; (8015b10 <ip4_frag+0x280>)
 801595a:	486c      	ldr	r0, [pc, #432]	; (8015b0c <ip4_frag+0x27c>)
 801595c:	f000 fcd0 	bl	8016300 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015962:	685b      	ldr	r3, [r3, #4]
 8015964:	2214      	movs	r2, #20
 8015966:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015968:	4618      	mov	r0, r3
 801596a:	f000 fc04 	bl	8016176 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015970:	685b      	ldr	r3, [r3, #4]
 8015972:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015974:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015976:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801597a:	e064      	b.n	8015a46 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	895a      	ldrh	r2, [r3, #10]
 8015980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015982:	1ad3      	subs	r3, r2, r3
 8015984:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	895b      	ldrh	r3, [r3, #10]
 801598a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801598c:	429a      	cmp	r2, r3
 801598e:	d906      	bls.n	801599e <ip4_frag+0x10e>
 8015990:	4b5c      	ldr	r3, [pc, #368]	; (8015b04 <ip4_frag+0x274>)
 8015992:	f240 322d 	movw	r2, #813	; 0x32d
 8015996:	495f      	ldr	r1, [pc, #380]	; (8015b14 <ip4_frag+0x284>)
 8015998:	485c      	ldr	r0, [pc, #368]	; (8015b0c <ip4_frag+0x27c>)
 801599a:	f000 fcb1 	bl	8016300 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801599e:	8bfa      	ldrh	r2, [r7, #30]
 80159a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80159a4:	4293      	cmp	r3, r2
 80159a6:	bf28      	it	cs
 80159a8:	4613      	movcs	r3, r2
 80159aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80159ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d105      	bne.n	80159c2 <ip4_frag+0x132>
        poff = 0;
 80159b6:	2300      	movs	r3, #0
 80159b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	60fb      	str	r3, [r7, #12]
        continue;
 80159c0:	e041      	b.n	8015a46 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80159c2:	f7ff ff0d 	bl	80157e0 <ip_frag_alloc_pbuf_custom_ref>
 80159c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80159c8:	69bb      	ldr	r3, [r7, #24]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d103      	bne.n	80159d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80159ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159d0:	f7f7 fb56 	bl	800d080 <pbuf_free>
        goto memerr;
 80159d4:	e08f      	b.n	8015af6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80159d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80159dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80159de:	4413      	add	r3, r2
 80159e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80159e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80159e8:	9201      	str	r2, [sp, #4]
 80159ea:	9300      	str	r3, [sp, #0]
 80159ec:	4603      	mov	r3, r0
 80159ee:	2241      	movs	r2, #65	; 0x41
 80159f0:	2000      	movs	r0, #0
 80159f2:	f7f7 f98b 	bl	800cd0c <pbuf_alloced_custom>
 80159f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d106      	bne.n	8015a0c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80159fe:	69b8      	ldr	r0, [r7, #24]
 8015a00:	f7ff fef6 	bl	80157f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a06:	f7f7 fb3b 	bl	800d080 <pbuf_free>
        goto memerr;
 8015a0a:	e074      	b.n	8015af6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015a0c:	68f8      	ldr	r0, [r7, #12]
 8015a0e:	f7f7 fbdd 	bl	800d1cc <pbuf_ref>
      pcr->original = p;
 8015a12:	69bb      	ldr	r3, [r7, #24]
 8015a14:	68fa      	ldr	r2, [r7, #12]
 8015a16:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015a18:	69bb      	ldr	r3, [r7, #24]
 8015a1a:	4a3f      	ldr	r2, [pc, #252]	; (8015b18 <ip4_frag+0x288>)
 8015a1c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015a1e:	6979      	ldr	r1, [r7, #20]
 8015a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a22:	f7f7 fbfb 	bl	800d21c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015a26:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015a2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015a2e:	1ad3      	subs	r3, r2, r3
 8015a30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015a34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d004      	beq.n	8015a46 <ip4_frag+0x1b6>
        poff = 0;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015a46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d196      	bne.n	801597c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015a4e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015a50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015a54:	4413      	add	r3, r2
 8015a56:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015a5c:	f1a3 0213 	sub.w	r2, r3, #19
 8015a60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a64:	429a      	cmp	r2, r3
 8015a66:	bfcc      	ite	gt
 8015a68:	2301      	movgt	r3, #1
 8015a6a:	2300      	movle	r3, #0
 8015a6c:	b2db      	uxtb	r3, r3
 8015a6e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015a70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015a7a:	6a3b      	ldr	r3, [r7, #32]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d002      	beq.n	8015a86 <ip4_frag+0x1f6>
 8015a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d003      	beq.n	8015a8e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015a86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015a8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015a8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7f5 ff03 	bl	800b89c <lwip_htons>
 8015a96:	4603      	mov	r3, r0
 8015a98:	461a      	mov	r2, r3
 8015a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015aa0:	3314      	adds	r3, #20
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7f5 fef9 	bl	800b89c <lwip_htons>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	461a      	mov	r2, r3
 8015aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	729a      	strb	r2, [r3, #10]
 8015ab8:	2200      	movs	r2, #0
 8015aba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015abc:	68bb      	ldr	r3, [r7, #8]
 8015abe:	695b      	ldr	r3, [r3, #20]
 8015ac0:	687a      	ldr	r2, [r7, #4]
 8015ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015ac4:	68b8      	ldr	r0, [r7, #8]
 8015ac6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015aca:	f7f7 fad9 	bl	800d080 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015ace:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015ad2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015ad4:	1ad3      	subs	r3, r2, r3
 8015ad6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015ada:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015ade:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ae0:	4413      	add	r3, r2
 8015ae2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015ae6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	f47f af19 	bne.w	8015922 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015af0:	2300      	movs	r3, #0
 8015af2:	e002      	b.n	8015afa <ip4_frag+0x26a>
      goto memerr;
 8015af4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015afa:	4618      	mov	r0, r3
 8015afc:	3748      	adds	r7, #72	; 0x48
 8015afe:	46bd      	mov	sp, r7
 8015b00:	bd80      	pop	{r7, pc}
 8015b02:	bf00      	nop
 8015b04:	0801a35c 	.word	0x0801a35c
 8015b08:	0801a538 	.word	0x0801a538
 8015b0c:	0801a3a4 	.word	0x0801a3a4
 8015b10:	0801a554 	.word	0x0801a554
 8015b14:	0801a574 	.word	0x0801a574
 8015b18:	08015829 	.word	0x08015829

08015b1c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b086      	sub	sp, #24
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015b26:	230e      	movs	r3, #14
 8015b28:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	895b      	ldrh	r3, [r3, #10]
 8015b2e:	2b0e      	cmp	r3, #14
 8015b30:	d96e      	bls.n	8015c10 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	7bdb      	ldrb	r3, [r3, #15]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d106      	bne.n	8015b48 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015b3a:	683b      	ldr	r3, [r7, #0]
 8015b3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015b40:	3301      	adds	r3, #1
 8015b42:	b2da      	uxtb	r2, r3
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015b4e:	693b      	ldr	r3, [r7, #16]
 8015b50:	7b1a      	ldrb	r2, [r3, #12]
 8015b52:	7b5b      	ldrb	r3, [r3, #13]
 8015b54:	021b      	lsls	r3, r3, #8
 8015b56:	4313      	orrs	r3, r2
 8015b58:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015b5a:	693b      	ldr	r3, [r7, #16]
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	f003 0301 	and.w	r3, r3, #1
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d023      	beq.n	8015bae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	781b      	ldrb	r3, [r3, #0]
 8015b6a:	2b01      	cmp	r3, #1
 8015b6c:	d10f      	bne.n	8015b8e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	785b      	ldrb	r3, [r3, #1]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d11b      	bne.n	8015bae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015b7a:	2b5e      	cmp	r3, #94	; 0x5e
 8015b7c:	d117      	bne.n	8015bae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	7b5b      	ldrb	r3, [r3, #13]
 8015b82:	f043 0310 	orr.w	r3, r3, #16
 8015b86:	b2da      	uxtb	r2, r3
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	735a      	strb	r2, [r3, #13]
 8015b8c:	e00f      	b.n	8015bae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	2206      	movs	r2, #6
 8015b92:	4928      	ldr	r1, [pc, #160]	; (8015c34 <ethernet_input+0x118>)
 8015b94:	4618      	mov	r0, r3
 8015b96:	f000 fade 	bl	8016156 <memcmp>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d106      	bne.n	8015bae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	7b5b      	ldrb	r3, [r3, #13]
 8015ba4:	f043 0308 	orr.w	r3, r3, #8
 8015ba8:	b2da      	uxtb	r2, r3
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015bae:	89fb      	ldrh	r3, [r7, #14]
 8015bb0:	2b08      	cmp	r3, #8
 8015bb2:	d003      	beq.n	8015bbc <ethernet_input+0xa0>
 8015bb4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015bb8:	d014      	beq.n	8015be4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015bba:	e032      	b.n	8015c22 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015bc2:	f003 0308 	and.w	r3, r3, #8
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d024      	beq.n	8015c14 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015bca:	8afb      	ldrh	r3, [r7, #22]
 8015bcc:	4619      	mov	r1, r3
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	f7f7 f9d0 	bl	800cf74 <pbuf_remove_header>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d11e      	bne.n	8015c18 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015bda:	6839      	ldr	r1, [r7, #0]
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f7fe ff21 	bl	8014a24 <ip4_input>
      break;
 8015be2:	e013      	b.n	8015c0c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015bea:	f003 0308 	and.w	r3, r3, #8
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d014      	beq.n	8015c1c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015bf2:	8afb      	ldrh	r3, [r7, #22]
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f7f7 f9bc 	bl	800cf74 <pbuf_remove_header>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d10e      	bne.n	8015c20 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015c02:	6839      	ldr	r1, [r7, #0]
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f7fe f8c1 	bl	8013d8c <etharp_input>
      break;
 8015c0a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	e00c      	b.n	8015c2a <ethernet_input+0x10e>
    goto free_and_return;
 8015c10:	bf00      	nop
 8015c12:	e006      	b.n	8015c22 <ethernet_input+0x106>
        goto free_and_return;
 8015c14:	bf00      	nop
 8015c16:	e004      	b.n	8015c22 <ethernet_input+0x106>
        goto free_and_return;
 8015c18:	bf00      	nop
 8015c1a:	e002      	b.n	8015c22 <ethernet_input+0x106>
        goto free_and_return;
 8015c1c:	bf00      	nop
 8015c1e:	e000      	b.n	8015c22 <ethernet_input+0x106>
        goto free_and_return;
 8015c20:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f7f7 fa2c 	bl	800d080 <pbuf_free>
  return ERR_OK;
 8015c28:	2300      	movs	r3, #0
}
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	3718      	adds	r7, #24
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	bd80      	pop	{r7, pc}
 8015c32:	bf00      	nop
 8015c34:	0801a750 	.word	0x0801a750

08015c38 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b086      	sub	sp, #24
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	60f8      	str	r0, [r7, #12]
 8015c40:	60b9      	str	r1, [r7, #8]
 8015c42:	607a      	str	r2, [r7, #4]
 8015c44:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015c46:	8c3b      	ldrh	r3, [r7, #32]
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7f5 fe27 	bl	800b89c <lwip_htons>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015c52:	210e      	movs	r1, #14
 8015c54:	68b8      	ldr	r0, [r7, #8]
 8015c56:	f7f7 f97d 	bl	800cf54 <pbuf_add_header>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d125      	bne.n	8015cac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	685b      	ldr	r3, [r3, #4]
 8015c64:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	8afa      	ldrh	r2, [r7, #22]
 8015c6a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	2206      	movs	r2, #6
 8015c70:	6839      	ldr	r1, [r7, #0]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f000 fa7f 	bl	8016176 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015c78:	693b      	ldr	r3, [r7, #16]
 8015c7a:	3306      	adds	r3, #6
 8015c7c:	2206      	movs	r2, #6
 8015c7e:	6879      	ldr	r1, [r7, #4]
 8015c80:	4618      	mov	r0, r3
 8015c82:	f000 fa78 	bl	8016176 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015c8c:	2b06      	cmp	r3, #6
 8015c8e:	d006      	beq.n	8015c9e <ethernet_output+0x66>
 8015c90:	4b0a      	ldr	r3, [pc, #40]	; (8015cbc <ethernet_output+0x84>)
 8015c92:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015c96:	490a      	ldr	r1, [pc, #40]	; (8015cc0 <ethernet_output+0x88>)
 8015c98:	480a      	ldr	r0, [pc, #40]	; (8015cc4 <ethernet_output+0x8c>)
 8015c9a:	f000 fb31 	bl	8016300 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	699b      	ldr	r3, [r3, #24]
 8015ca2:	68b9      	ldr	r1, [r7, #8]
 8015ca4:	68f8      	ldr	r0, [r7, #12]
 8015ca6:	4798      	blx	r3
 8015ca8:	4603      	mov	r3, r0
 8015caa:	e002      	b.n	8015cb2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015cac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015cae:	f06f 0301 	mvn.w	r3, #1
}
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	3718      	adds	r7, #24
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	bf00      	nop
 8015cbc:	0801a584 	.word	0x0801a584
 8015cc0:	0801a5bc 	.word	0x0801a5bc
 8015cc4:	0801a5f0 	.word	0x0801a5f0

08015cc8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b086      	sub	sp, #24
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	60bb      	str	r3, [r7, #8]
 8015cd6:	2304      	movs	r3, #4
 8015cd8:	60fb      	str	r3, [r7, #12]
 8015cda:	2300      	movs	r3, #0
 8015cdc:	613b      	str	r3, [r7, #16]
 8015cde:	2300      	movs	r3, #0
 8015ce0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015ce2:	f107 0308 	add.w	r3, r7, #8
 8015ce6:	2100      	movs	r1, #0
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f7f2 f987 	bl	8007ffc <osMessageCreate>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d102      	bne.n	8015d02 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d00:	e000      	b.n	8015d04 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015d02:	2300      	movs	r3, #0
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3718      	adds	r7, #24
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	6839      	ldr	r1, [r7, #0]
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7f2 f994 	bl	800804c <osMessagePut>
 8015d24:	4603      	mov	r3, r0
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d102      	bne.n	8015d30 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	73fb      	strb	r3, [r7, #15]
 8015d2e:	e001      	b.n	8015d34 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015d30:	23ff      	movs	r3, #255	; 0xff
 8015d32:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015d38:	4618      	mov	r0, r3
 8015d3a:	3710      	adds	r7, #16
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	bd80      	pop	{r7, pc}

08015d40 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b08c      	sub	sp, #48	; 0x30
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	61f8      	str	r0, [r7, #28]
 8015d48:	61b9      	str	r1, [r7, #24]
 8015d4a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015d4c:	f7f1 ffc6 	bl	8007cdc <osKernelSysTick>
 8015d50:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015d52:	697b      	ldr	r3, [r7, #20]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d017      	beq.n	8015d88 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015d58:	69fb      	ldr	r3, [r7, #28]
 8015d5a:	6819      	ldr	r1, [r3, #0]
 8015d5c:	f107 0320 	add.w	r3, r7, #32
 8015d60:	697a      	ldr	r2, [r7, #20]
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7f2 f9b2 	bl	80080cc <osMessageGet>

    if(event.status == osEventMessage)
 8015d68:	6a3b      	ldr	r3, [r7, #32]
 8015d6a:	2b10      	cmp	r3, #16
 8015d6c:	d109      	bne.n	8015d82 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d70:	461a      	mov	r2, r3
 8015d72:	69bb      	ldr	r3, [r7, #24]
 8015d74:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015d76:	f7f1 ffb1 	bl	8007cdc <osKernelSysTick>
 8015d7a:	4602      	mov	r2, r0
 8015d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d7e:	1ad3      	subs	r3, r2, r3
 8015d80:	e019      	b.n	8015db6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d86:	e016      	b.n	8015db6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015d88:	69fb      	ldr	r3, [r7, #28]
 8015d8a:	6819      	ldr	r1, [r3, #0]
 8015d8c:	463b      	mov	r3, r7
 8015d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7f2 f99a 	bl	80080cc <osMessageGet>
 8015d98:	f107 0320 	add.w	r3, r7, #32
 8015d9c:	463a      	mov	r2, r7
 8015d9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015da0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da6:	461a      	mov	r2, r3
 8015da8:	69bb      	ldr	r3, [r7, #24]
 8015daa:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015dac:	f7f1 ff96 	bl	8007cdc <osKernelSysTick>
 8015db0:	4602      	mov	r2, r0
 8015db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3730      	adds	r7, #48	; 0x30
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}

08015dbe <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015dbe:	b480      	push	{r7}
 8015dc0:	b083      	sub	sp, #12
 8015dc2:	af00      	add	r7, sp, #0
 8015dc4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d101      	bne.n	8015dd2 <sys_mbox_valid+0x14>
    return 0;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	e000      	b.n	8015dd4 <sys_mbox_valid+0x16>
  else
    return 1;
 8015dd2:	2301      	movs	r3, #1
}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	370c      	adds	r7, #12
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dde:	4770      	bx	lr

08015de0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015de4:	4803      	ldr	r0, [pc, #12]	; (8015df4 <sys_init+0x14>)
 8015de6:	f7f1 ffe9 	bl	8007dbc <osMutexCreate>
 8015dea:	4603      	mov	r3, r0
 8015dec:	4a02      	ldr	r2, [pc, #8]	; (8015df8 <sys_init+0x18>)
 8015dee:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015df0:	bf00      	nop
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	0801a760 	.word	0x0801a760
 8015df8:	200305ac 	.word	0x200305ac

08015dfc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b084      	sub	sp, #16
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015e04:	2300      	movs	r3, #0
 8015e06:	60bb      	str	r3, [r7, #8]
 8015e08:	2300      	movs	r3, #0
 8015e0a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015e0c:	f107 0308 	add.w	r3, r7, #8
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7f1 ffd3 	bl	8007dbc <osMutexCreate>
 8015e16:	4602      	mov	r2, r0
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d102      	bne.n	8015e2a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e28:	e000      	b.n	8015e2c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015e2a:	2300      	movs	r3, #0
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3710      	adds	r7, #16
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}

08015e34 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b082      	sub	sp, #8
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7f1 ffd1 	bl	8007dec <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015e4a:	bf00      	nop
 8015e4c:	3708      	adds	r7, #8
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}

08015e52 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015e52:	b580      	push	{r7, lr}
 8015e54:	b082      	sub	sp, #8
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f7f2 f812 	bl	8007e88 <osMutexRelease>
}
 8015e64:	bf00      	nop
 8015e66:	3708      	adds	r7, #8
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b08c      	sub	sp, #48	; 0x30
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	60f8      	str	r0, [r7, #12]
 8015e74:	60b9      	str	r1, [r7, #8]
 8015e76:	607a      	str	r2, [r7, #4]
 8015e78:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015e7a:	f107 0314 	add.w	r3, r7, #20
 8015e7e:	2200      	movs	r2, #0
 8015e80:	601a      	str	r2, [r3, #0]
 8015e82:	605a      	str	r2, [r3, #4]
 8015e84:	609a      	str	r2, [r3, #8]
 8015e86:	60da      	str	r2, [r3, #12]
 8015e88:	611a      	str	r2, [r3, #16]
 8015e8a:	615a      	str	r2, [r3, #20]
 8015e8c:	619a      	str	r2, [r3, #24]
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	617b      	str	r3, [r7, #20]
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	61bb      	str	r3, [r7, #24]
 8015e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e98:	b21b      	sxth	r3, r3
 8015e9a:	83bb      	strh	r3, [r7, #28]
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015ea0:	f107 0314 	add.w	r3, r7, #20
 8015ea4:	6879      	ldr	r1, [r7, #4]
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f7f1 ff28 	bl	8007cfc <osThreadCreate>
 8015eac:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	3730      	adds	r7, #48	; 0x30
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}
	...

08015eb8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015ebc:	4b04      	ldr	r3, [pc, #16]	; (8015ed0 <sys_arch_protect+0x18>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f7f1 ff91 	bl	8007dec <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015eca:	2301      	movs	r3, #1
}
 8015ecc:	4618      	mov	r0, r3
 8015ece:	bd80      	pop	{r7, pc}
 8015ed0:	200305ac 	.word	0x200305ac

08015ed4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b082      	sub	sp, #8
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015edc:	4b04      	ldr	r3, [pc, #16]	; (8015ef0 <sys_arch_unprotect+0x1c>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7f1 ffd1 	bl	8007e88 <osMutexRelease>
}
 8015ee6:	bf00      	nop
 8015ee8:	3708      	adds	r7, #8
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	200305ac 	.word	0x200305ac

08015ef4 <exit>:
 8015ef4:	b508      	push	{r3, lr}
 8015ef6:	4b07      	ldr	r3, [pc, #28]	; (8015f14 <exit+0x20>)
 8015ef8:	4604      	mov	r4, r0
 8015efa:	b113      	cbz	r3, 8015f02 <exit+0xe>
 8015efc:	2100      	movs	r1, #0
 8015efe:	f3af 8000 	nop.w
 8015f02:	4b05      	ldr	r3, [pc, #20]	; (8015f18 <exit+0x24>)
 8015f04:	6818      	ldr	r0, [r3, #0]
 8015f06:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015f08:	b103      	cbz	r3, 8015f0c <exit+0x18>
 8015f0a:	4798      	blx	r3
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	f7ea feed 	bl	8000cec <_exit>
 8015f12:	bf00      	nop
 8015f14:	00000000 	.word	0x00000000
 8015f18:	0801a7c8 	.word	0x0801a7c8

08015f1c <std>:
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	b510      	push	{r4, lr}
 8015f20:	4604      	mov	r4, r0
 8015f22:	e9c0 3300 	strd	r3, r3, [r0]
 8015f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f2a:	6083      	str	r3, [r0, #8]
 8015f2c:	8181      	strh	r1, [r0, #12]
 8015f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8015f30:	81c2      	strh	r2, [r0, #14]
 8015f32:	6183      	str	r3, [r0, #24]
 8015f34:	4619      	mov	r1, r3
 8015f36:	2208      	movs	r2, #8
 8015f38:	305c      	adds	r0, #92	; 0x5c
 8015f3a:	f000 f944 	bl	80161c6 <memset>
 8015f3e:	4b05      	ldr	r3, [pc, #20]	; (8015f54 <std+0x38>)
 8015f40:	6263      	str	r3, [r4, #36]	; 0x24
 8015f42:	4b05      	ldr	r3, [pc, #20]	; (8015f58 <std+0x3c>)
 8015f44:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f46:	4b05      	ldr	r3, [pc, #20]	; (8015f5c <std+0x40>)
 8015f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f4a:	4b05      	ldr	r3, [pc, #20]	; (8015f60 <std+0x44>)
 8015f4c:	6224      	str	r4, [r4, #32]
 8015f4e:	6323      	str	r3, [r4, #48]	; 0x30
 8015f50:	bd10      	pop	{r4, pc}
 8015f52:	bf00      	nop
 8015f54:	080165cd 	.word	0x080165cd
 8015f58:	080165ef 	.word	0x080165ef
 8015f5c:	08016627 	.word	0x08016627
 8015f60:	0801664b 	.word	0x0801664b

08015f64 <_cleanup_r>:
 8015f64:	4901      	ldr	r1, [pc, #4]	; (8015f6c <_cleanup_r+0x8>)
 8015f66:	f000 b8af 	b.w	80160c8 <_fwalk_reent>
 8015f6a:	bf00      	nop
 8015f6c:	08016961 	.word	0x08016961

08015f70 <__sfmoreglue>:
 8015f70:	b570      	push	{r4, r5, r6, lr}
 8015f72:	2268      	movs	r2, #104	; 0x68
 8015f74:	1e4d      	subs	r5, r1, #1
 8015f76:	4355      	muls	r5, r2
 8015f78:	460e      	mov	r6, r1
 8015f7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f7e:	f000 f94b 	bl	8016218 <_malloc_r>
 8015f82:	4604      	mov	r4, r0
 8015f84:	b140      	cbz	r0, 8015f98 <__sfmoreglue+0x28>
 8015f86:	2100      	movs	r1, #0
 8015f88:	e9c0 1600 	strd	r1, r6, [r0]
 8015f8c:	300c      	adds	r0, #12
 8015f8e:	60a0      	str	r0, [r4, #8]
 8015f90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f94:	f000 f917 	bl	80161c6 <memset>
 8015f98:	4620      	mov	r0, r4
 8015f9a:	bd70      	pop	{r4, r5, r6, pc}

08015f9c <__sfp_lock_acquire>:
 8015f9c:	4801      	ldr	r0, [pc, #4]	; (8015fa4 <__sfp_lock_acquire+0x8>)
 8015f9e:	f000 b8d8 	b.w	8016152 <__retarget_lock_acquire_recursive>
 8015fa2:	bf00      	nop
 8015fa4:	200305b1 	.word	0x200305b1

08015fa8 <__sfp_lock_release>:
 8015fa8:	4801      	ldr	r0, [pc, #4]	; (8015fb0 <__sfp_lock_release+0x8>)
 8015faa:	f000 b8d3 	b.w	8016154 <__retarget_lock_release_recursive>
 8015fae:	bf00      	nop
 8015fb0:	200305b1 	.word	0x200305b1

08015fb4 <__sinit_lock_acquire>:
 8015fb4:	4801      	ldr	r0, [pc, #4]	; (8015fbc <__sinit_lock_acquire+0x8>)
 8015fb6:	f000 b8cc 	b.w	8016152 <__retarget_lock_acquire_recursive>
 8015fba:	bf00      	nop
 8015fbc:	200305b2 	.word	0x200305b2

08015fc0 <__sinit_lock_release>:
 8015fc0:	4801      	ldr	r0, [pc, #4]	; (8015fc8 <__sinit_lock_release+0x8>)
 8015fc2:	f000 b8c7 	b.w	8016154 <__retarget_lock_release_recursive>
 8015fc6:	bf00      	nop
 8015fc8:	200305b2 	.word	0x200305b2

08015fcc <__sinit>:
 8015fcc:	b510      	push	{r4, lr}
 8015fce:	4604      	mov	r4, r0
 8015fd0:	f7ff fff0 	bl	8015fb4 <__sinit_lock_acquire>
 8015fd4:	69a3      	ldr	r3, [r4, #24]
 8015fd6:	b11b      	cbz	r3, 8015fe0 <__sinit+0x14>
 8015fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fdc:	f7ff bff0 	b.w	8015fc0 <__sinit_lock_release>
 8015fe0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015fe4:	6523      	str	r3, [r4, #80]	; 0x50
 8015fe6:	4b13      	ldr	r3, [pc, #76]	; (8016034 <__sinit+0x68>)
 8015fe8:	4a13      	ldr	r2, [pc, #76]	; (8016038 <__sinit+0x6c>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	62a2      	str	r2, [r4, #40]	; 0x28
 8015fee:	42a3      	cmp	r3, r4
 8015ff0:	bf04      	itt	eq
 8015ff2:	2301      	moveq	r3, #1
 8015ff4:	61a3      	streq	r3, [r4, #24]
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	f000 f820 	bl	801603c <__sfp>
 8015ffc:	6060      	str	r0, [r4, #4]
 8015ffe:	4620      	mov	r0, r4
 8016000:	f000 f81c 	bl	801603c <__sfp>
 8016004:	60a0      	str	r0, [r4, #8]
 8016006:	4620      	mov	r0, r4
 8016008:	f000 f818 	bl	801603c <__sfp>
 801600c:	2200      	movs	r2, #0
 801600e:	60e0      	str	r0, [r4, #12]
 8016010:	2104      	movs	r1, #4
 8016012:	6860      	ldr	r0, [r4, #4]
 8016014:	f7ff ff82 	bl	8015f1c <std>
 8016018:	68a0      	ldr	r0, [r4, #8]
 801601a:	2201      	movs	r2, #1
 801601c:	2109      	movs	r1, #9
 801601e:	f7ff ff7d 	bl	8015f1c <std>
 8016022:	68e0      	ldr	r0, [r4, #12]
 8016024:	2202      	movs	r2, #2
 8016026:	2112      	movs	r1, #18
 8016028:	f7ff ff78 	bl	8015f1c <std>
 801602c:	2301      	movs	r3, #1
 801602e:	61a3      	str	r3, [r4, #24]
 8016030:	e7d2      	b.n	8015fd8 <__sinit+0xc>
 8016032:	bf00      	nop
 8016034:	0801a7c8 	.word	0x0801a7c8
 8016038:	08015f65 	.word	0x08015f65

0801603c <__sfp>:
 801603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801603e:	4607      	mov	r7, r0
 8016040:	f7ff ffac 	bl	8015f9c <__sfp_lock_acquire>
 8016044:	4b1e      	ldr	r3, [pc, #120]	; (80160c0 <__sfp+0x84>)
 8016046:	681e      	ldr	r6, [r3, #0]
 8016048:	69b3      	ldr	r3, [r6, #24]
 801604a:	b913      	cbnz	r3, 8016052 <__sfp+0x16>
 801604c:	4630      	mov	r0, r6
 801604e:	f7ff ffbd 	bl	8015fcc <__sinit>
 8016052:	3648      	adds	r6, #72	; 0x48
 8016054:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016058:	3b01      	subs	r3, #1
 801605a:	d503      	bpl.n	8016064 <__sfp+0x28>
 801605c:	6833      	ldr	r3, [r6, #0]
 801605e:	b30b      	cbz	r3, 80160a4 <__sfp+0x68>
 8016060:	6836      	ldr	r6, [r6, #0]
 8016062:	e7f7      	b.n	8016054 <__sfp+0x18>
 8016064:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016068:	b9d5      	cbnz	r5, 80160a0 <__sfp+0x64>
 801606a:	4b16      	ldr	r3, [pc, #88]	; (80160c4 <__sfp+0x88>)
 801606c:	60e3      	str	r3, [r4, #12]
 801606e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016072:	6665      	str	r5, [r4, #100]	; 0x64
 8016074:	f000 f86c 	bl	8016150 <__retarget_lock_init_recursive>
 8016078:	f7ff ff96 	bl	8015fa8 <__sfp_lock_release>
 801607c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016080:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016084:	6025      	str	r5, [r4, #0]
 8016086:	61a5      	str	r5, [r4, #24]
 8016088:	2208      	movs	r2, #8
 801608a:	4629      	mov	r1, r5
 801608c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016090:	f000 f899 	bl	80161c6 <memset>
 8016094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801609c:	4620      	mov	r0, r4
 801609e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160a0:	3468      	adds	r4, #104	; 0x68
 80160a2:	e7d9      	b.n	8016058 <__sfp+0x1c>
 80160a4:	2104      	movs	r1, #4
 80160a6:	4638      	mov	r0, r7
 80160a8:	f7ff ff62 	bl	8015f70 <__sfmoreglue>
 80160ac:	4604      	mov	r4, r0
 80160ae:	6030      	str	r0, [r6, #0]
 80160b0:	2800      	cmp	r0, #0
 80160b2:	d1d5      	bne.n	8016060 <__sfp+0x24>
 80160b4:	f7ff ff78 	bl	8015fa8 <__sfp_lock_release>
 80160b8:	230c      	movs	r3, #12
 80160ba:	603b      	str	r3, [r7, #0]
 80160bc:	e7ee      	b.n	801609c <__sfp+0x60>
 80160be:	bf00      	nop
 80160c0:	0801a7c8 	.word	0x0801a7c8
 80160c4:	ffff0001 	.word	0xffff0001

080160c8 <_fwalk_reent>:
 80160c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160cc:	4606      	mov	r6, r0
 80160ce:	4688      	mov	r8, r1
 80160d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160d4:	2700      	movs	r7, #0
 80160d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160da:	f1b9 0901 	subs.w	r9, r9, #1
 80160de:	d505      	bpl.n	80160ec <_fwalk_reent+0x24>
 80160e0:	6824      	ldr	r4, [r4, #0]
 80160e2:	2c00      	cmp	r4, #0
 80160e4:	d1f7      	bne.n	80160d6 <_fwalk_reent+0xe>
 80160e6:	4638      	mov	r0, r7
 80160e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160ec:	89ab      	ldrh	r3, [r5, #12]
 80160ee:	2b01      	cmp	r3, #1
 80160f0:	d907      	bls.n	8016102 <_fwalk_reent+0x3a>
 80160f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160f6:	3301      	adds	r3, #1
 80160f8:	d003      	beq.n	8016102 <_fwalk_reent+0x3a>
 80160fa:	4629      	mov	r1, r5
 80160fc:	4630      	mov	r0, r6
 80160fe:	47c0      	blx	r8
 8016100:	4307      	orrs	r7, r0
 8016102:	3568      	adds	r5, #104	; 0x68
 8016104:	e7e9      	b.n	80160da <_fwalk_reent+0x12>
	...

08016108 <__libc_init_array>:
 8016108:	b570      	push	{r4, r5, r6, lr}
 801610a:	4d0d      	ldr	r5, [pc, #52]	; (8016140 <__libc_init_array+0x38>)
 801610c:	4c0d      	ldr	r4, [pc, #52]	; (8016144 <__libc_init_array+0x3c>)
 801610e:	1b64      	subs	r4, r4, r5
 8016110:	10a4      	asrs	r4, r4, #2
 8016112:	2600      	movs	r6, #0
 8016114:	42a6      	cmp	r6, r4
 8016116:	d109      	bne.n	801612c <__libc_init_array+0x24>
 8016118:	4d0b      	ldr	r5, [pc, #44]	; (8016148 <__libc_init_array+0x40>)
 801611a:	4c0c      	ldr	r4, [pc, #48]	; (801614c <__libc_init_array+0x44>)
 801611c:	f001 fa48 	bl	80175b0 <_init>
 8016120:	1b64      	subs	r4, r4, r5
 8016122:	10a4      	asrs	r4, r4, #2
 8016124:	2600      	movs	r6, #0
 8016126:	42a6      	cmp	r6, r4
 8016128:	d105      	bne.n	8016136 <__libc_init_array+0x2e>
 801612a:	bd70      	pop	{r4, r5, r6, pc}
 801612c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016130:	4798      	blx	r3
 8016132:	3601      	adds	r6, #1
 8016134:	e7ee      	b.n	8016114 <__libc_init_array+0xc>
 8016136:	f855 3b04 	ldr.w	r3, [r5], #4
 801613a:	4798      	blx	r3
 801613c:	3601      	adds	r6, #1
 801613e:	e7f2      	b.n	8016126 <__libc_init_array+0x1e>
 8016140:	0801a8b8 	.word	0x0801a8b8
 8016144:	0801a8b8 	.word	0x0801a8b8
 8016148:	0801a8b8 	.word	0x0801a8b8
 801614c:	0801a8bc 	.word	0x0801a8bc

08016150 <__retarget_lock_init_recursive>:
 8016150:	4770      	bx	lr

08016152 <__retarget_lock_acquire_recursive>:
 8016152:	4770      	bx	lr

08016154 <__retarget_lock_release_recursive>:
 8016154:	4770      	bx	lr

08016156 <memcmp>:
 8016156:	b510      	push	{r4, lr}
 8016158:	3901      	subs	r1, #1
 801615a:	4402      	add	r2, r0
 801615c:	4290      	cmp	r0, r2
 801615e:	d101      	bne.n	8016164 <memcmp+0xe>
 8016160:	2000      	movs	r0, #0
 8016162:	e005      	b.n	8016170 <memcmp+0x1a>
 8016164:	7803      	ldrb	r3, [r0, #0]
 8016166:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801616a:	42a3      	cmp	r3, r4
 801616c:	d001      	beq.n	8016172 <memcmp+0x1c>
 801616e:	1b18      	subs	r0, r3, r4
 8016170:	bd10      	pop	{r4, pc}
 8016172:	3001      	adds	r0, #1
 8016174:	e7f2      	b.n	801615c <memcmp+0x6>

08016176 <memcpy>:
 8016176:	440a      	add	r2, r1
 8016178:	4291      	cmp	r1, r2
 801617a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801617e:	d100      	bne.n	8016182 <memcpy+0xc>
 8016180:	4770      	bx	lr
 8016182:	b510      	push	{r4, lr}
 8016184:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016188:	f803 4f01 	strb.w	r4, [r3, #1]!
 801618c:	4291      	cmp	r1, r2
 801618e:	d1f9      	bne.n	8016184 <memcpy+0xe>
 8016190:	bd10      	pop	{r4, pc}

08016192 <memmove>:
 8016192:	4288      	cmp	r0, r1
 8016194:	b510      	push	{r4, lr}
 8016196:	eb01 0402 	add.w	r4, r1, r2
 801619a:	d902      	bls.n	80161a2 <memmove+0x10>
 801619c:	4284      	cmp	r4, r0
 801619e:	4623      	mov	r3, r4
 80161a0:	d807      	bhi.n	80161b2 <memmove+0x20>
 80161a2:	1e43      	subs	r3, r0, #1
 80161a4:	42a1      	cmp	r1, r4
 80161a6:	d008      	beq.n	80161ba <memmove+0x28>
 80161a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80161ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80161b0:	e7f8      	b.n	80161a4 <memmove+0x12>
 80161b2:	4402      	add	r2, r0
 80161b4:	4601      	mov	r1, r0
 80161b6:	428a      	cmp	r2, r1
 80161b8:	d100      	bne.n	80161bc <memmove+0x2a>
 80161ba:	bd10      	pop	{r4, pc}
 80161bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80161c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80161c4:	e7f7      	b.n	80161b6 <memmove+0x24>

080161c6 <memset>:
 80161c6:	4402      	add	r2, r0
 80161c8:	4603      	mov	r3, r0
 80161ca:	4293      	cmp	r3, r2
 80161cc:	d100      	bne.n	80161d0 <memset+0xa>
 80161ce:	4770      	bx	lr
 80161d0:	f803 1b01 	strb.w	r1, [r3], #1
 80161d4:	e7f9      	b.n	80161ca <memset+0x4>
	...

080161d8 <sbrk_aligned>:
 80161d8:	b570      	push	{r4, r5, r6, lr}
 80161da:	4e0e      	ldr	r6, [pc, #56]	; (8016214 <sbrk_aligned+0x3c>)
 80161dc:	460c      	mov	r4, r1
 80161de:	6831      	ldr	r1, [r6, #0]
 80161e0:	4605      	mov	r5, r0
 80161e2:	b911      	cbnz	r1, 80161ea <sbrk_aligned+0x12>
 80161e4:	f000 f9c2 	bl	801656c <_sbrk_r>
 80161e8:	6030      	str	r0, [r6, #0]
 80161ea:	4621      	mov	r1, r4
 80161ec:	4628      	mov	r0, r5
 80161ee:	f000 f9bd 	bl	801656c <_sbrk_r>
 80161f2:	1c43      	adds	r3, r0, #1
 80161f4:	d00a      	beq.n	801620c <sbrk_aligned+0x34>
 80161f6:	1cc4      	adds	r4, r0, #3
 80161f8:	f024 0403 	bic.w	r4, r4, #3
 80161fc:	42a0      	cmp	r0, r4
 80161fe:	d007      	beq.n	8016210 <sbrk_aligned+0x38>
 8016200:	1a21      	subs	r1, r4, r0
 8016202:	4628      	mov	r0, r5
 8016204:	f000 f9b2 	bl	801656c <_sbrk_r>
 8016208:	3001      	adds	r0, #1
 801620a:	d101      	bne.n	8016210 <sbrk_aligned+0x38>
 801620c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016210:	4620      	mov	r0, r4
 8016212:	bd70      	pop	{r4, r5, r6, pc}
 8016214:	200305b8 	.word	0x200305b8

08016218 <_malloc_r>:
 8016218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801621c:	1ccd      	adds	r5, r1, #3
 801621e:	f025 0503 	bic.w	r5, r5, #3
 8016222:	3508      	adds	r5, #8
 8016224:	2d0c      	cmp	r5, #12
 8016226:	bf38      	it	cc
 8016228:	250c      	movcc	r5, #12
 801622a:	2d00      	cmp	r5, #0
 801622c:	4607      	mov	r7, r0
 801622e:	db01      	blt.n	8016234 <_malloc_r+0x1c>
 8016230:	42a9      	cmp	r1, r5
 8016232:	d905      	bls.n	8016240 <_malloc_r+0x28>
 8016234:	230c      	movs	r3, #12
 8016236:	603b      	str	r3, [r7, #0]
 8016238:	2600      	movs	r6, #0
 801623a:	4630      	mov	r0, r6
 801623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016240:	4e2e      	ldr	r6, [pc, #184]	; (80162fc <_malloc_r+0xe4>)
 8016242:	f000 fc5b 	bl	8016afc <__malloc_lock>
 8016246:	6833      	ldr	r3, [r6, #0]
 8016248:	461c      	mov	r4, r3
 801624a:	bb34      	cbnz	r4, 801629a <_malloc_r+0x82>
 801624c:	4629      	mov	r1, r5
 801624e:	4638      	mov	r0, r7
 8016250:	f7ff ffc2 	bl	80161d8 <sbrk_aligned>
 8016254:	1c43      	adds	r3, r0, #1
 8016256:	4604      	mov	r4, r0
 8016258:	d14d      	bne.n	80162f6 <_malloc_r+0xde>
 801625a:	6834      	ldr	r4, [r6, #0]
 801625c:	4626      	mov	r6, r4
 801625e:	2e00      	cmp	r6, #0
 8016260:	d140      	bne.n	80162e4 <_malloc_r+0xcc>
 8016262:	6823      	ldr	r3, [r4, #0]
 8016264:	4631      	mov	r1, r6
 8016266:	4638      	mov	r0, r7
 8016268:	eb04 0803 	add.w	r8, r4, r3
 801626c:	f000 f97e 	bl	801656c <_sbrk_r>
 8016270:	4580      	cmp	r8, r0
 8016272:	d13a      	bne.n	80162ea <_malloc_r+0xd2>
 8016274:	6821      	ldr	r1, [r4, #0]
 8016276:	3503      	adds	r5, #3
 8016278:	1a6d      	subs	r5, r5, r1
 801627a:	f025 0503 	bic.w	r5, r5, #3
 801627e:	3508      	adds	r5, #8
 8016280:	2d0c      	cmp	r5, #12
 8016282:	bf38      	it	cc
 8016284:	250c      	movcc	r5, #12
 8016286:	4629      	mov	r1, r5
 8016288:	4638      	mov	r0, r7
 801628a:	f7ff ffa5 	bl	80161d8 <sbrk_aligned>
 801628e:	3001      	adds	r0, #1
 8016290:	d02b      	beq.n	80162ea <_malloc_r+0xd2>
 8016292:	6823      	ldr	r3, [r4, #0]
 8016294:	442b      	add	r3, r5
 8016296:	6023      	str	r3, [r4, #0]
 8016298:	e00e      	b.n	80162b8 <_malloc_r+0xa0>
 801629a:	6822      	ldr	r2, [r4, #0]
 801629c:	1b52      	subs	r2, r2, r5
 801629e:	d41e      	bmi.n	80162de <_malloc_r+0xc6>
 80162a0:	2a0b      	cmp	r2, #11
 80162a2:	d916      	bls.n	80162d2 <_malloc_r+0xba>
 80162a4:	1961      	adds	r1, r4, r5
 80162a6:	42a3      	cmp	r3, r4
 80162a8:	6025      	str	r5, [r4, #0]
 80162aa:	bf18      	it	ne
 80162ac:	6059      	strne	r1, [r3, #4]
 80162ae:	6863      	ldr	r3, [r4, #4]
 80162b0:	bf08      	it	eq
 80162b2:	6031      	streq	r1, [r6, #0]
 80162b4:	5162      	str	r2, [r4, r5]
 80162b6:	604b      	str	r3, [r1, #4]
 80162b8:	4638      	mov	r0, r7
 80162ba:	f104 060b 	add.w	r6, r4, #11
 80162be:	f000 fc23 	bl	8016b08 <__malloc_unlock>
 80162c2:	f026 0607 	bic.w	r6, r6, #7
 80162c6:	1d23      	adds	r3, r4, #4
 80162c8:	1af2      	subs	r2, r6, r3
 80162ca:	d0b6      	beq.n	801623a <_malloc_r+0x22>
 80162cc:	1b9b      	subs	r3, r3, r6
 80162ce:	50a3      	str	r3, [r4, r2]
 80162d0:	e7b3      	b.n	801623a <_malloc_r+0x22>
 80162d2:	6862      	ldr	r2, [r4, #4]
 80162d4:	42a3      	cmp	r3, r4
 80162d6:	bf0c      	ite	eq
 80162d8:	6032      	streq	r2, [r6, #0]
 80162da:	605a      	strne	r2, [r3, #4]
 80162dc:	e7ec      	b.n	80162b8 <_malloc_r+0xa0>
 80162de:	4623      	mov	r3, r4
 80162e0:	6864      	ldr	r4, [r4, #4]
 80162e2:	e7b2      	b.n	801624a <_malloc_r+0x32>
 80162e4:	4634      	mov	r4, r6
 80162e6:	6876      	ldr	r6, [r6, #4]
 80162e8:	e7b9      	b.n	801625e <_malloc_r+0x46>
 80162ea:	230c      	movs	r3, #12
 80162ec:	603b      	str	r3, [r7, #0]
 80162ee:	4638      	mov	r0, r7
 80162f0:	f000 fc0a 	bl	8016b08 <__malloc_unlock>
 80162f4:	e7a1      	b.n	801623a <_malloc_r+0x22>
 80162f6:	6025      	str	r5, [r4, #0]
 80162f8:	e7de      	b.n	80162b8 <_malloc_r+0xa0>
 80162fa:	bf00      	nop
 80162fc:	200305b4 	.word	0x200305b4

08016300 <iprintf>:
 8016300:	b40f      	push	{r0, r1, r2, r3}
 8016302:	4b0a      	ldr	r3, [pc, #40]	; (801632c <iprintf+0x2c>)
 8016304:	b513      	push	{r0, r1, r4, lr}
 8016306:	681c      	ldr	r4, [r3, #0]
 8016308:	b124      	cbz	r4, 8016314 <iprintf+0x14>
 801630a:	69a3      	ldr	r3, [r4, #24]
 801630c:	b913      	cbnz	r3, 8016314 <iprintf+0x14>
 801630e:	4620      	mov	r0, r4
 8016310:	f7ff fe5c 	bl	8015fcc <__sinit>
 8016314:	ab05      	add	r3, sp, #20
 8016316:	9a04      	ldr	r2, [sp, #16]
 8016318:	68a1      	ldr	r1, [r4, #8]
 801631a:	9301      	str	r3, [sp, #4]
 801631c:	4620      	mov	r0, r4
 801631e:	f000 fdcb 	bl	8016eb8 <_vfiprintf_r>
 8016322:	b002      	add	sp, #8
 8016324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016328:	b004      	add	sp, #16
 801632a:	4770      	bx	lr
 801632c:	20000034 	.word	0x20000034

08016330 <_puts_r>:
 8016330:	b570      	push	{r4, r5, r6, lr}
 8016332:	460e      	mov	r6, r1
 8016334:	4605      	mov	r5, r0
 8016336:	b118      	cbz	r0, 8016340 <_puts_r+0x10>
 8016338:	6983      	ldr	r3, [r0, #24]
 801633a:	b90b      	cbnz	r3, 8016340 <_puts_r+0x10>
 801633c:	f7ff fe46 	bl	8015fcc <__sinit>
 8016340:	69ab      	ldr	r3, [r5, #24]
 8016342:	68ac      	ldr	r4, [r5, #8]
 8016344:	b913      	cbnz	r3, 801634c <_puts_r+0x1c>
 8016346:	4628      	mov	r0, r5
 8016348:	f7ff fe40 	bl	8015fcc <__sinit>
 801634c:	4b2c      	ldr	r3, [pc, #176]	; (8016400 <_puts_r+0xd0>)
 801634e:	429c      	cmp	r4, r3
 8016350:	d120      	bne.n	8016394 <_puts_r+0x64>
 8016352:	686c      	ldr	r4, [r5, #4]
 8016354:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016356:	07db      	lsls	r3, r3, #31
 8016358:	d405      	bmi.n	8016366 <_puts_r+0x36>
 801635a:	89a3      	ldrh	r3, [r4, #12]
 801635c:	0598      	lsls	r0, r3, #22
 801635e:	d402      	bmi.n	8016366 <_puts_r+0x36>
 8016360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016362:	f7ff fef6 	bl	8016152 <__retarget_lock_acquire_recursive>
 8016366:	89a3      	ldrh	r3, [r4, #12]
 8016368:	0719      	lsls	r1, r3, #28
 801636a:	d51d      	bpl.n	80163a8 <_puts_r+0x78>
 801636c:	6923      	ldr	r3, [r4, #16]
 801636e:	b1db      	cbz	r3, 80163a8 <_puts_r+0x78>
 8016370:	3e01      	subs	r6, #1
 8016372:	68a3      	ldr	r3, [r4, #8]
 8016374:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016378:	3b01      	subs	r3, #1
 801637a:	60a3      	str	r3, [r4, #8]
 801637c:	bb39      	cbnz	r1, 80163ce <_puts_r+0x9e>
 801637e:	2b00      	cmp	r3, #0
 8016380:	da38      	bge.n	80163f4 <_puts_r+0xc4>
 8016382:	4622      	mov	r2, r4
 8016384:	210a      	movs	r1, #10
 8016386:	4628      	mov	r0, r5
 8016388:	f000 f964 	bl	8016654 <__swbuf_r>
 801638c:	3001      	adds	r0, #1
 801638e:	d011      	beq.n	80163b4 <_puts_r+0x84>
 8016390:	250a      	movs	r5, #10
 8016392:	e011      	b.n	80163b8 <_puts_r+0x88>
 8016394:	4b1b      	ldr	r3, [pc, #108]	; (8016404 <_puts_r+0xd4>)
 8016396:	429c      	cmp	r4, r3
 8016398:	d101      	bne.n	801639e <_puts_r+0x6e>
 801639a:	68ac      	ldr	r4, [r5, #8]
 801639c:	e7da      	b.n	8016354 <_puts_r+0x24>
 801639e:	4b1a      	ldr	r3, [pc, #104]	; (8016408 <_puts_r+0xd8>)
 80163a0:	429c      	cmp	r4, r3
 80163a2:	bf08      	it	eq
 80163a4:	68ec      	ldreq	r4, [r5, #12]
 80163a6:	e7d5      	b.n	8016354 <_puts_r+0x24>
 80163a8:	4621      	mov	r1, r4
 80163aa:	4628      	mov	r0, r5
 80163ac:	f000 f9b6 	bl	801671c <__swsetup_r>
 80163b0:	2800      	cmp	r0, #0
 80163b2:	d0dd      	beq.n	8016370 <_puts_r+0x40>
 80163b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80163b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80163ba:	07da      	lsls	r2, r3, #31
 80163bc:	d405      	bmi.n	80163ca <_puts_r+0x9a>
 80163be:	89a3      	ldrh	r3, [r4, #12]
 80163c0:	059b      	lsls	r3, r3, #22
 80163c2:	d402      	bmi.n	80163ca <_puts_r+0x9a>
 80163c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163c6:	f7ff fec5 	bl	8016154 <__retarget_lock_release_recursive>
 80163ca:	4628      	mov	r0, r5
 80163cc:	bd70      	pop	{r4, r5, r6, pc}
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	da04      	bge.n	80163dc <_puts_r+0xac>
 80163d2:	69a2      	ldr	r2, [r4, #24]
 80163d4:	429a      	cmp	r2, r3
 80163d6:	dc06      	bgt.n	80163e6 <_puts_r+0xb6>
 80163d8:	290a      	cmp	r1, #10
 80163da:	d004      	beq.n	80163e6 <_puts_r+0xb6>
 80163dc:	6823      	ldr	r3, [r4, #0]
 80163de:	1c5a      	adds	r2, r3, #1
 80163e0:	6022      	str	r2, [r4, #0]
 80163e2:	7019      	strb	r1, [r3, #0]
 80163e4:	e7c5      	b.n	8016372 <_puts_r+0x42>
 80163e6:	4622      	mov	r2, r4
 80163e8:	4628      	mov	r0, r5
 80163ea:	f000 f933 	bl	8016654 <__swbuf_r>
 80163ee:	3001      	adds	r0, #1
 80163f0:	d1bf      	bne.n	8016372 <_puts_r+0x42>
 80163f2:	e7df      	b.n	80163b4 <_puts_r+0x84>
 80163f4:	6823      	ldr	r3, [r4, #0]
 80163f6:	250a      	movs	r5, #10
 80163f8:	1c5a      	adds	r2, r3, #1
 80163fa:	6022      	str	r2, [r4, #0]
 80163fc:	701d      	strb	r5, [r3, #0]
 80163fe:	e7db      	b.n	80163b8 <_puts_r+0x88>
 8016400:	0801a788 	.word	0x0801a788
 8016404:	0801a7a8 	.word	0x0801a7a8
 8016408:	0801a768 	.word	0x0801a768

0801640c <puts>:
 801640c:	4b02      	ldr	r3, [pc, #8]	; (8016418 <puts+0xc>)
 801640e:	4601      	mov	r1, r0
 8016410:	6818      	ldr	r0, [r3, #0]
 8016412:	f7ff bf8d 	b.w	8016330 <_puts_r>
 8016416:	bf00      	nop
 8016418:	20000034 	.word	0x20000034

0801641c <rand>:
 801641c:	4b16      	ldr	r3, [pc, #88]	; (8016478 <rand+0x5c>)
 801641e:	b510      	push	{r4, lr}
 8016420:	681c      	ldr	r4, [r3, #0]
 8016422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016424:	b9b3      	cbnz	r3, 8016454 <rand+0x38>
 8016426:	2018      	movs	r0, #24
 8016428:	f000 fb60 	bl	8016aec <malloc>
 801642c:	63a0      	str	r0, [r4, #56]	; 0x38
 801642e:	b928      	cbnz	r0, 801643c <rand+0x20>
 8016430:	4602      	mov	r2, r0
 8016432:	4b12      	ldr	r3, [pc, #72]	; (801647c <rand+0x60>)
 8016434:	4812      	ldr	r0, [pc, #72]	; (8016480 <rand+0x64>)
 8016436:	214e      	movs	r1, #78	; 0x4e
 8016438:	f000 f9de 	bl	80167f8 <__assert_func>
 801643c:	4a11      	ldr	r2, [pc, #68]	; (8016484 <rand+0x68>)
 801643e:	4b12      	ldr	r3, [pc, #72]	; (8016488 <rand+0x6c>)
 8016440:	e9c0 2300 	strd	r2, r3, [r0]
 8016444:	4b11      	ldr	r3, [pc, #68]	; (801648c <rand+0x70>)
 8016446:	6083      	str	r3, [r0, #8]
 8016448:	230b      	movs	r3, #11
 801644a:	8183      	strh	r3, [r0, #12]
 801644c:	2201      	movs	r2, #1
 801644e:	2300      	movs	r3, #0
 8016450:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016454:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8016456:	4a0e      	ldr	r2, [pc, #56]	; (8016490 <rand+0x74>)
 8016458:	6920      	ldr	r0, [r4, #16]
 801645a:	6963      	ldr	r3, [r4, #20]
 801645c:	490d      	ldr	r1, [pc, #52]	; (8016494 <rand+0x78>)
 801645e:	4342      	muls	r2, r0
 8016460:	fb01 2203 	mla	r2, r1, r3, r2
 8016464:	fba0 0101 	umull	r0, r1, r0, r1
 8016468:	1c43      	adds	r3, r0, #1
 801646a:	eb42 0001 	adc.w	r0, r2, r1
 801646e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8016472:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016476:	bd10      	pop	{r4, pc}
 8016478:	20000034 	.word	0x20000034
 801647c:	0801a7cc 	.word	0x0801a7cc
 8016480:	0801a7e3 	.word	0x0801a7e3
 8016484:	abcd330e 	.word	0xabcd330e
 8016488:	e66d1234 	.word	0xe66d1234
 801648c:	0005deec 	.word	0x0005deec
 8016490:	5851f42d 	.word	0x5851f42d
 8016494:	4c957f2d 	.word	0x4c957f2d

08016498 <cleanup_glue>:
 8016498:	b538      	push	{r3, r4, r5, lr}
 801649a:	460c      	mov	r4, r1
 801649c:	6809      	ldr	r1, [r1, #0]
 801649e:	4605      	mov	r5, r0
 80164a0:	b109      	cbz	r1, 80164a6 <cleanup_glue+0xe>
 80164a2:	f7ff fff9 	bl	8016498 <cleanup_glue>
 80164a6:	4621      	mov	r1, r4
 80164a8:	4628      	mov	r0, r5
 80164aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80164ae:	f000 bb31 	b.w	8016b14 <_free_r>
	...

080164b4 <_reclaim_reent>:
 80164b4:	4b2c      	ldr	r3, [pc, #176]	; (8016568 <_reclaim_reent+0xb4>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	4283      	cmp	r3, r0
 80164ba:	b570      	push	{r4, r5, r6, lr}
 80164bc:	4604      	mov	r4, r0
 80164be:	d051      	beq.n	8016564 <_reclaim_reent+0xb0>
 80164c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80164c2:	b143      	cbz	r3, 80164d6 <_reclaim_reent+0x22>
 80164c4:	68db      	ldr	r3, [r3, #12]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d14a      	bne.n	8016560 <_reclaim_reent+0xac>
 80164ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80164cc:	6819      	ldr	r1, [r3, #0]
 80164ce:	b111      	cbz	r1, 80164d6 <_reclaim_reent+0x22>
 80164d0:	4620      	mov	r0, r4
 80164d2:	f000 fb1f 	bl	8016b14 <_free_r>
 80164d6:	6961      	ldr	r1, [r4, #20]
 80164d8:	b111      	cbz	r1, 80164e0 <_reclaim_reent+0x2c>
 80164da:	4620      	mov	r0, r4
 80164dc:	f000 fb1a 	bl	8016b14 <_free_r>
 80164e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80164e2:	b111      	cbz	r1, 80164ea <_reclaim_reent+0x36>
 80164e4:	4620      	mov	r0, r4
 80164e6:	f000 fb15 	bl	8016b14 <_free_r>
 80164ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80164ec:	b111      	cbz	r1, 80164f4 <_reclaim_reent+0x40>
 80164ee:	4620      	mov	r0, r4
 80164f0:	f000 fb10 	bl	8016b14 <_free_r>
 80164f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80164f6:	b111      	cbz	r1, 80164fe <_reclaim_reent+0x4a>
 80164f8:	4620      	mov	r0, r4
 80164fa:	f000 fb0b 	bl	8016b14 <_free_r>
 80164fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016500:	b111      	cbz	r1, 8016508 <_reclaim_reent+0x54>
 8016502:	4620      	mov	r0, r4
 8016504:	f000 fb06 	bl	8016b14 <_free_r>
 8016508:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801650a:	b111      	cbz	r1, 8016512 <_reclaim_reent+0x5e>
 801650c:	4620      	mov	r0, r4
 801650e:	f000 fb01 	bl	8016b14 <_free_r>
 8016512:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016514:	b111      	cbz	r1, 801651c <_reclaim_reent+0x68>
 8016516:	4620      	mov	r0, r4
 8016518:	f000 fafc 	bl	8016b14 <_free_r>
 801651c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801651e:	b111      	cbz	r1, 8016526 <_reclaim_reent+0x72>
 8016520:	4620      	mov	r0, r4
 8016522:	f000 faf7 	bl	8016b14 <_free_r>
 8016526:	69a3      	ldr	r3, [r4, #24]
 8016528:	b1e3      	cbz	r3, 8016564 <_reclaim_reent+0xb0>
 801652a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801652c:	4620      	mov	r0, r4
 801652e:	4798      	blx	r3
 8016530:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016532:	b1b9      	cbz	r1, 8016564 <_reclaim_reent+0xb0>
 8016534:	4620      	mov	r0, r4
 8016536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801653a:	f7ff bfad 	b.w	8016498 <cleanup_glue>
 801653e:	5949      	ldr	r1, [r1, r5]
 8016540:	b941      	cbnz	r1, 8016554 <_reclaim_reent+0xa0>
 8016542:	3504      	adds	r5, #4
 8016544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016546:	2d80      	cmp	r5, #128	; 0x80
 8016548:	68d9      	ldr	r1, [r3, #12]
 801654a:	d1f8      	bne.n	801653e <_reclaim_reent+0x8a>
 801654c:	4620      	mov	r0, r4
 801654e:	f000 fae1 	bl	8016b14 <_free_r>
 8016552:	e7ba      	b.n	80164ca <_reclaim_reent+0x16>
 8016554:	680e      	ldr	r6, [r1, #0]
 8016556:	4620      	mov	r0, r4
 8016558:	f000 fadc 	bl	8016b14 <_free_r>
 801655c:	4631      	mov	r1, r6
 801655e:	e7ef      	b.n	8016540 <_reclaim_reent+0x8c>
 8016560:	2500      	movs	r5, #0
 8016562:	e7ef      	b.n	8016544 <_reclaim_reent+0x90>
 8016564:	bd70      	pop	{r4, r5, r6, pc}
 8016566:	bf00      	nop
 8016568:	20000034 	.word	0x20000034

0801656c <_sbrk_r>:
 801656c:	b538      	push	{r3, r4, r5, lr}
 801656e:	4d06      	ldr	r5, [pc, #24]	; (8016588 <_sbrk_r+0x1c>)
 8016570:	2300      	movs	r3, #0
 8016572:	4604      	mov	r4, r0
 8016574:	4608      	mov	r0, r1
 8016576:	602b      	str	r3, [r5, #0]
 8016578:	f7ea fbf6 	bl	8000d68 <_sbrk>
 801657c:	1c43      	adds	r3, r0, #1
 801657e:	d102      	bne.n	8016586 <_sbrk_r+0x1a>
 8016580:	682b      	ldr	r3, [r5, #0]
 8016582:	b103      	cbz	r3, 8016586 <_sbrk_r+0x1a>
 8016584:	6023      	str	r3, [r4, #0]
 8016586:	bd38      	pop	{r3, r4, r5, pc}
 8016588:	200305bc 	.word	0x200305bc

0801658c <siprintf>:
 801658c:	b40e      	push	{r1, r2, r3}
 801658e:	b500      	push	{lr}
 8016590:	b09c      	sub	sp, #112	; 0x70
 8016592:	ab1d      	add	r3, sp, #116	; 0x74
 8016594:	9002      	str	r0, [sp, #8]
 8016596:	9006      	str	r0, [sp, #24]
 8016598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801659c:	4809      	ldr	r0, [pc, #36]	; (80165c4 <siprintf+0x38>)
 801659e:	9107      	str	r1, [sp, #28]
 80165a0:	9104      	str	r1, [sp, #16]
 80165a2:	4909      	ldr	r1, [pc, #36]	; (80165c8 <siprintf+0x3c>)
 80165a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80165a8:	9105      	str	r1, [sp, #20]
 80165aa:	6800      	ldr	r0, [r0, #0]
 80165ac:	9301      	str	r3, [sp, #4]
 80165ae:	a902      	add	r1, sp, #8
 80165b0:	f000 fb58 	bl	8016c64 <_svfiprintf_r>
 80165b4:	9b02      	ldr	r3, [sp, #8]
 80165b6:	2200      	movs	r2, #0
 80165b8:	701a      	strb	r2, [r3, #0]
 80165ba:	b01c      	add	sp, #112	; 0x70
 80165bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80165c0:	b003      	add	sp, #12
 80165c2:	4770      	bx	lr
 80165c4:	20000034 	.word	0x20000034
 80165c8:	ffff0208 	.word	0xffff0208

080165cc <__sread>:
 80165cc:	b510      	push	{r4, lr}
 80165ce:	460c      	mov	r4, r1
 80165d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165d4:	f000 ff34 	bl	8017440 <_read_r>
 80165d8:	2800      	cmp	r0, #0
 80165da:	bfab      	itete	ge
 80165dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80165de:	89a3      	ldrhlt	r3, [r4, #12]
 80165e0:	181b      	addge	r3, r3, r0
 80165e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80165e6:	bfac      	ite	ge
 80165e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80165ea:	81a3      	strhlt	r3, [r4, #12]
 80165ec:	bd10      	pop	{r4, pc}

080165ee <__swrite>:
 80165ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165f2:	461f      	mov	r7, r3
 80165f4:	898b      	ldrh	r3, [r1, #12]
 80165f6:	05db      	lsls	r3, r3, #23
 80165f8:	4605      	mov	r5, r0
 80165fa:	460c      	mov	r4, r1
 80165fc:	4616      	mov	r6, r2
 80165fe:	d505      	bpl.n	801660c <__swrite+0x1e>
 8016600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016604:	2302      	movs	r3, #2
 8016606:	2200      	movs	r2, #0
 8016608:	f000 f9f8 	bl	80169fc <_lseek_r>
 801660c:	89a3      	ldrh	r3, [r4, #12]
 801660e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016616:	81a3      	strh	r3, [r4, #12]
 8016618:	4632      	mov	r2, r6
 801661a:	463b      	mov	r3, r7
 801661c:	4628      	mov	r0, r5
 801661e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016622:	f000 b869 	b.w	80166f8 <_write_r>

08016626 <__sseek>:
 8016626:	b510      	push	{r4, lr}
 8016628:	460c      	mov	r4, r1
 801662a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801662e:	f000 f9e5 	bl	80169fc <_lseek_r>
 8016632:	1c43      	adds	r3, r0, #1
 8016634:	89a3      	ldrh	r3, [r4, #12]
 8016636:	bf15      	itete	ne
 8016638:	6560      	strne	r0, [r4, #84]	; 0x54
 801663a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801663e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016642:	81a3      	strheq	r3, [r4, #12]
 8016644:	bf18      	it	ne
 8016646:	81a3      	strhne	r3, [r4, #12]
 8016648:	bd10      	pop	{r4, pc}

0801664a <__sclose>:
 801664a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801664e:	f000 b8f1 	b.w	8016834 <_close_r>
	...

08016654 <__swbuf_r>:
 8016654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016656:	460e      	mov	r6, r1
 8016658:	4614      	mov	r4, r2
 801665a:	4605      	mov	r5, r0
 801665c:	b118      	cbz	r0, 8016666 <__swbuf_r+0x12>
 801665e:	6983      	ldr	r3, [r0, #24]
 8016660:	b90b      	cbnz	r3, 8016666 <__swbuf_r+0x12>
 8016662:	f7ff fcb3 	bl	8015fcc <__sinit>
 8016666:	4b21      	ldr	r3, [pc, #132]	; (80166ec <__swbuf_r+0x98>)
 8016668:	429c      	cmp	r4, r3
 801666a:	d12b      	bne.n	80166c4 <__swbuf_r+0x70>
 801666c:	686c      	ldr	r4, [r5, #4]
 801666e:	69a3      	ldr	r3, [r4, #24]
 8016670:	60a3      	str	r3, [r4, #8]
 8016672:	89a3      	ldrh	r3, [r4, #12]
 8016674:	071a      	lsls	r2, r3, #28
 8016676:	d52f      	bpl.n	80166d8 <__swbuf_r+0x84>
 8016678:	6923      	ldr	r3, [r4, #16]
 801667a:	b36b      	cbz	r3, 80166d8 <__swbuf_r+0x84>
 801667c:	6923      	ldr	r3, [r4, #16]
 801667e:	6820      	ldr	r0, [r4, #0]
 8016680:	1ac0      	subs	r0, r0, r3
 8016682:	6963      	ldr	r3, [r4, #20]
 8016684:	b2f6      	uxtb	r6, r6
 8016686:	4283      	cmp	r3, r0
 8016688:	4637      	mov	r7, r6
 801668a:	dc04      	bgt.n	8016696 <__swbuf_r+0x42>
 801668c:	4621      	mov	r1, r4
 801668e:	4628      	mov	r0, r5
 8016690:	f000 f966 	bl	8016960 <_fflush_r>
 8016694:	bb30      	cbnz	r0, 80166e4 <__swbuf_r+0x90>
 8016696:	68a3      	ldr	r3, [r4, #8]
 8016698:	3b01      	subs	r3, #1
 801669a:	60a3      	str	r3, [r4, #8]
 801669c:	6823      	ldr	r3, [r4, #0]
 801669e:	1c5a      	adds	r2, r3, #1
 80166a0:	6022      	str	r2, [r4, #0]
 80166a2:	701e      	strb	r6, [r3, #0]
 80166a4:	6963      	ldr	r3, [r4, #20]
 80166a6:	3001      	adds	r0, #1
 80166a8:	4283      	cmp	r3, r0
 80166aa:	d004      	beq.n	80166b6 <__swbuf_r+0x62>
 80166ac:	89a3      	ldrh	r3, [r4, #12]
 80166ae:	07db      	lsls	r3, r3, #31
 80166b0:	d506      	bpl.n	80166c0 <__swbuf_r+0x6c>
 80166b2:	2e0a      	cmp	r6, #10
 80166b4:	d104      	bne.n	80166c0 <__swbuf_r+0x6c>
 80166b6:	4621      	mov	r1, r4
 80166b8:	4628      	mov	r0, r5
 80166ba:	f000 f951 	bl	8016960 <_fflush_r>
 80166be:	b988      	cbnz	r0, 80166e4 <__swbuf_r+0x90>
 80166c0:	4638      	mov	r0, r7
 80166c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166c4:	4b0a      	ldr	r3, [pc, #40]	; (80166f0 <__swbuf_r+0x9c>)
 80166c6:	429c      	cmp	r4, r3
 80166c8:	d101      	bne.n	80166ce <__swbuf_r+0x7a>
 80166ca:	68ac      	ldr	r4, [r5, #8]
 80166cc:	e7cf      	b.n	801666e <__swbuf_r+0x1a>
 80166ce:	4b09      	ldr	r3, [pc, #36]	; (80166f4 <__swbuf_r+0xa0>)
 80166d0:	429c      	cmp	r4, r3
 80166d2:	bf08      	it	eq
 80166d4:	68ec      	ldreq	r4, [r5, #12]
 80166d6:	e7ca      	b.n	801666e <__swbuf_r+0x1a>
 80166d8:	4621      	mov	r1, r4
 80166da:	4628      	mov	r0, r5
 80166dc:	f000 f81e 	bl	801671c <__swsetup_r>
 80166e0:	2800      	cmp	r0, #0
 80166e2:	d0cb      	beq.n	801667c <__swbuf_r+0x28>
 80166e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80166e8:	e7ea      	b.n	80166c0 <__swbuf_r+0x6c>
 80166ea:	bf00      	nop
 80166ec:	0801a788 	.word	0x0801a788
 80166f0:	0801a7a8 	.word	0x0801a7a8
 80166f4:	0801a768 	.word	0x0801a768

080166f8 <_write_r>:
 80166f8:	b538      	push	{r3, r4, r5, lr}
 80166fa:	4d07      	ldr	r5, [pc, #28]	; (8016718 <_write_r+0x20>)
 80166fc:	4604      	mov	r4, r0
 80166fe:	4608      	mov	r0, r1
 8016700:	4611      	mov	r1, r2
 8016702:	2200      	movs	r2, #0
 8016704:	602a      	str	r2, [r5, #0]
 8016706:	461a      	mov	r2, r3
 8016708:	f7eb fa22 	bl	8001b50 <_write>
 801670c:	1c43      	adds	r3, r0, #1
 801670e:	d102      	bne.n	8016716 <_write_r+0x1e>
 8016710:	682b      	ldr	r3, [r5, #0]
 8016712:	b103      	cbz	r3, 8016716 <_write_r+0x1e>
 8016714:	6023      	str	r3, [r4, #0]
 8016716:	bd38      	pop	{r3, r4, r5, pc}
 8016718:	200305bc 	.word	0x200305bc

0801671c <__swsetup_r>:
 801671c:	4b32      	ldr	r3, [pc, #200]	; (80167e8 <__swsetup_r+0xcc>)
 801671e:	b570      	push	{r4, r5, r6, lr}
 8016720:	681d      	ldr	r5, [r3, #0]
 8016722:	4606      	mov	r6, r0
 8016724:	460c      	mov	r4, r1
 8016726:	b125      	cbz	r5, 8016732 <__swsetup_r+0x16>
 8016728:	69ab      	ldr	r3, [r5, #24]
 801672a:	b913      	cbnz	r3, 8016732 <__swsetup_r+0x16>
 801672c:	4628      	mov	r0, r5
 801672e:	f7ff fc4d 	bl	8015fcc <__sinit>
 8016732:	4b2e      	ldr	r3, [pc, #184]	; (80167ec <__swsetup_r+0xd0>)
 8016734:	429c      	cmp	r4, r3
 8016736:	d10f      	bne.n	8016758 <__swsetup_r+0x3c>
 8016738:	686c      	ldr	r4, [r5, #4]
 801673a:	89a3      	ldrh	r3, [r4, #12]
 801673c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016740:	0719      	lsls	r1, r3, #28
 8016742:	d42c      	bmi.n	801679e <__swsetup_r+0x82>
 8016744:	06dd      	lsls	r5, r3, #27
 8016746:	d411      	bmi.n	801676c <__swsetup_r+0x50>
 8016748:	2309      	movs	r3, #9
 801674a:	6033      	str	r3, [r6, #0]
 801674c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016750:	81a3      	strh	r3, [r4, #12]
 8016752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016756:	e03e      	b.n	80167d6 <__swsetup_r+0xba>
 8016758:	4b25      	ldr	r3, [pc, #148]	; (80167f0 <__swsetup_r+0xd4>)
 801675a:	429c      	cmp	r4, r3
 801675c:	d101      	bne.n	8016762 <__swsetup_r+0x46>
 801675e:	68ac      	ldr	r4, [r5, #8]
 8016760:	e7eb      	b.n	801673a <__swsetup_r+0x1e>
 8016762:	4b24      	ldr	r3, [pc, #144]	; (80167f4 <__swsetup_r+0xd8>)
 8016764:	429c      	cmp	r4, r3
 8016766:	bf08      	it	eq
 8016768:	68ec      	ldreq	r4, [r5, #12]
 801676a:	e7e6      	b.n	801673a <__swsetup_r+0x1e>
 801676c:	0758      	lsls	r0, r3, #29
 801676e:	d512      	bpl.n	8016796 <__swsetup_r+0x7a>
 8016770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016772:	b141      	cbz	r1, 8016786 <__swsetup_r+0x6a>
 8016774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016778:	4299      	cmp	r1, r3
 801677a:	d002      	beq.n	8016782 <__swsetup_r+0x66>
 801677c:	4630      	mov	r0, r6
 801677e:	f000 f9c9 	bl	8016b14 <_free_r>
 8016782:	2300      	movs	r3, #0
 8016784:	6363      	str	r3, [r4, #52]	; 0x34
 8016786:	89a3      	ldrh	r3, [r4, #12]
 8016788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801678c:	81a3      	strh	r3, [r4, #12]
 801678e:	2300      	movs	r3, #0
 8016790:	6063      	str	r3, [r4, #4]
 8016792:	6923      	ldr	r3, [r4, #16]
 8016794:	6023      	str	r3, [r4, #0]
 8016796:	89a3      	ldrh	r3, [r4, #12]
 8016798:	f043 0308 	orr.w	r3, r3, #8
 801679c:	81a3      	strh	r3, [r4, #12]
 801679e:	6923      	ldr	r3, [r4, #16]
 80167a0:	b94b      	cbnz	r3, 80167b6 <__swsetup_r+0x9a>
 80167a2:	89a3      	ldrh	r3, [r4, #12]
 80167a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80167a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80167ac:	d003      	beq.n	80167b6 <__swsetup_r+0x9a>
 80167ae:	4621      	mov	r1, r4
 80167b0:	4630      	mov	r0, r6
 80167b2:	f000 f95b 	bl	8016a6c <__smakebuf_r>
 80167b6:	89a0      	ldrh	r0, [r4, #12]
 80167b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80167bc:	f010 0301 	ands.w	r3, r0, #1
 80167c0:	d00a      	beq.n	80167d8 <__swsetup_r+0xbc>
 80167c2:	2300      	movs	r3, #0
 80167c4:	60a3      	str	r3, [r4, #8]
 80167c6:	6963      	ldr	r3, [r4, #20]
 80167c8:	425b      	negs	r3, r3
 80167ca:	61a3      	str	r3, [r4, #24]
 80167cc:	6923      	ldr	r3, [r4, #16]
 80167ce:	b943      	cbnz	r3, 80167e2 <__swsetup_r+0xc6>
 80167d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80167d4:	d1ba      	bne.n	801674c <__swsetup_r+0x30>
 80167d6:	bd70      	pop	{r4, r5, r6, pc}
 80167d8:	0781      	lsls	r1, r0, #30
 80167da:	bf58      	it	pl
 80167dc:	6963      	ldrpl	r3, [r4, #20]
 80167de:	60a3      	str	r3, [r4, #8]
 80167e0:	e7f4      	b.n	80167cc <__swsetup_r+0xb0>
 80167e2:	2000      	movs	r0, #0
 80167e4:	e7f7      	b.n	80167d6 <__swsetup_r+0xba>
 80167e6:	bf00      	nop
 80167e8:	20000034 	.word	0x20000034
 80167ec:	0801a788 	.word	0x0801a788
 80167f0:	0801a7a8 	.word	0x0801a7a8
 80167f4:	0801a768 	.word	0x0801a768

080167f8 <__assert_func>:
 80167f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167fa:	4614      	mov	r4, r2
 80167fc:	461a      	mov	r2, r3
 80167fe:	4b09      	ldr	r3, [pc, #36]	; (8016824 <__assert_func+0x2c>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	4605      	mov	r5, r0
 8016804:	68d8      	ldr	r0, [r3, #12]
 8016806:	b14c      	cbz	r4, 801681c <__assert_func+0x24>
 8016808:	4b07      	ldr	r3, [pc, #28]	; (8016828 <__assert_func+0x30>)
 801680a:	9100      	str	r1, [sp, #0]
 801680c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016810:	4906      	ldr	r1, [pc, #24]	; (801682c <__assert_func+0x34>)
 8016812:	462b      	mov	r3, r5
 8016814:	f000 f8e0 	bl	80169d8 <fiprintf>
 8016818:	f000 fe24 	bl	8017464 <abort>
 801681c:	4b04      	ldr	r3, [pc, #16]	; (8016830 <__assert_func+0x38>)
 801681e:	461c      	mov	r4, r3
 8016820:	e7f3      	b.n	801680a <__assert_func+0x12>
 8016822:	bf00      	nop
 8016824:	20000034 	.word	0x20000034
 8016828:	0801a83e 	.word	0x0801a83e
 801682c:	0801a84b 	.word	0x0801a84b
 8016830:	0801a879 	.word	0x0801a879

08016834 <_close_r>:
 8016834:	b538      	push	{r3, r4, r5, lr}
 8016836:	4d06      	ldr	r5, [pc, #24]	; (8016850 <_close_r+0x1c>)
 8016838:	2300      	movs	r3, #0
 801683a:	4604      	mov	r4, r0
 801683c:	4608      	mov	r0, r1
 801683e:	602b      	str	r3, [r5, #0]
 8016840:	f7ea fa5e 	bl	8000d00 <_close>
 8016844:	1c43      	adds	r3, r0, #1
 8016846:	d102      	bne.n	801684e <_close_r+0x1a>
 8016848:	682b      	ldr	r3, [r5, #0]
 801684a:	b103      	cbz	r3, 801684e <_close_r+0x1a>
 801684c:	6023      	str	r3, [r4, #0]
 801684e:	bd38      	pop	{r3, r4, r5, pc}
 8016850:	200305bc 	.word	0x200305bc

08016854 <__sflush_r>:
 8016854:	898a      	ldrh	r2, [r1, #12]
 8016856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801685a:	4605      	mov	r5, r0
 801685c:	0710      	lsls	r0, r2, #28
 801685e:	460c      	mov	r4, r1
 8016860:	d458      	bmi.n	8016914 <__sflush_r+0xc0>
 8016862:	684b      	ldr	r3, [r1, #4]
 8016864:	2b00      	cmp	r3, #0
 8016866:	dc05      	bgt.n	8016874 <__sflush_r+0x20>
 8016868:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801686a:	2b00      	cmp	r3, #0
 801686c:	dc02      	bgt.n	8016874 <__sflush_r+0x20>
 801686e:	2000      	movs	r0, #0
 8016870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016876:	2e00      	cmp	r6, #0
 8016878:	d0f9      	beq.n	801686e <__sflush_r+0x1a>
 801687a:	2300      	movs	r3, #0
 801687c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016880:	682f      	ldr	r7, [r5, #0]
 8016882:	602b      	str	r3, [r5, #0]
 8016884:	d032      	beq.n	80168ec <__sflush_r+0x98>
 8016886:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016888:	89a3      	ldrh	r3, [r4, #12]
 801688a:	075a      	lsls	r2, r3, #29
 801688c:	d505      	bpl.n	801689a <__sflush_r+0x46>
 801688e:	6863      	ldr	r3, [r4, #4]
 8016890:	1ac0      	subs	r0, r0, r3
 8016892:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016894:	b10b      	cbz	r3, 801689a <__sflush_r+0x46>
 8016896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016898:	1ac0      	subs	r0, r0, r3
 801689a:	2300      	movs	r3, #0
 801689c:	4602      	mov	r2, r0
 801689e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168a0:	6a21      	ldr	r1, [r4, #32]
 80168a2:	4628      	mov	r0, r5
 80168a4:	47b0      	blx	r6
 80168a6:	1c43      	adds	r3, r0, #1
 80168a8:	89a3      	ldrh	r3, [r4, #12]
 80168aa:	d106      	bne.n	80168ba <__sflush_r+0x66>
 80168ac:	6829      	ldr	r1, [r5, #0]
 80168ae:	291d      	cmp	r1, #29
 80168b0:	d82c      	bhi.n	801690c <__sflush_r+0xb8>
 80168b2:	4a2a      	ldr	r2, [pc, #168]	; (801695c <__sflush_r+0x108>)
 80168b4:	40ca      	lsrs	r2, r1
 80168b6:	07d6      	lsls	r6, r2, #31
 80168b8:	d528      	bpl.n	801690c <__sflush_r+0xb8>
 80168ba:	2200      	movs	r2, #0
 80168bc:	6062      	str	r2, [r4, #4]
 80168be:	04d9      	lsls	r1, r3, #19
 80168c0:	6922      	ldr	r2, [r4, #16]
 80168c2:	6022      	str	r2, [r4, #0]
 80168c4:	d504      	bpl.n	80168d0 <__sflush_r+0x7c>
 80168c6:	1c42      	adds	r2, r0, #1
 80168c8:	d101      	bne.n	80168ce <__sflush_r+0x7a>
 80168ca:	682b      	ldr	r3, [r5, #0]
 80168cc:	b903      	cbnz	r3, 80168d0 <__sflush_r+0x7c>
 80168ce:	6560      	str	r0, [r4, #84]	; 0x54
 80168d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168d2:	602f      	str	r7, [r5, #0]
 80168d4:	2900      	cmp	r1, #0
 80168d6:	d0ca      	beq.n	801686e <__sflush_r+0x1a>
 80168d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168dc:	4299      	cmp	r1, r3
 80168de:	d002      	beq.n	80168e6 <__sflush_r+0x92>
 80168e0:	4628      	mov	r0, r5
 80168e2:	f000 f917 	bl	8016b14 <_free_r>
 80168e6:	2000      	movs	r0, #0
 80168e8:	6360      	str	r0, [r4, #52]	; 0x34
 80168ea:	e7c1      	b.n	8016870 <__sflush_r+0x1c>
 80168ec:	6a21      	ldr	r1, [r4, #32]
 80168ee:	2301      	movs	r3, #1
 80168f0:	4628      	mov	r0, r5
 80168f2:	47b0      	blx	r6
 80168f4:	1c41      	adds	r1, r0, #1
 80168f6:	d1c7      	bne.n	8016888 <__sflush_r+0x34>
 80168f8:	682b      	ldr	r3, [r5, #0]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d0c4      	beq.n	8016888 <__sflush_r+0x34>
 80168fe:	2b1d      	cmp	r3, #29
 8016900:	d001      	beq.n	8016906 <__sflush_r+0xb2>
 8016902:	2b16      	cmp	r3, #22
 8016904:	d101      	bne.n	801690a <__sflush_r+0xb6>
 8016906:	602f      	str	r7, [r5, #0]
 8016908:	e7b1      	b.n	801686e <__sflush_r+0x1a>
 801690a:	89a3      	ldrh	r3, [r4, #12]
 801690c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016910:	81a3      	strh	r3, [r4, #12]
 8016912:	e7ad      	b.n	8016870 <__sflush_r+0x1c>
 8016914:	690f      	ldr	r7, [r1, #16]
 8016916:	2f00      	cmp	r7, #0
 8016918:	d0a9      	beq.n	801686e <__sflush_r+0x1a>
 801691a:	0793      	lsls	r3, r2, #30
 801691c:	680e      	ldr	r6, [r1, #0]
 801691e:	bf08      	it	eq
 8016920:	694b      	ldreq	r3, [r1, #20]
 8016922:	600f      	str	r7, [r1, #0]
 8016924:	bf18      	it	ne
 8016926:	2300      	movne	r3, #0
 8016928:	eba6 0807 	sub.w	r8, r6, r7
 801692c:	608b      	str	r3, [r1, #8]
 801692e:	f1b8 0f00 	cmp.w	r8, #0
 8016932:	dd9c      	ble.n	801686e <__sflush_r+0x1a>
 8016934:	6a21      	ldr	r1, [r4, #32]
 8016936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016938:	4643      	mov	r3, r8
 801693a:	463a      	mov	r2, r7
 801693c:	4628      	mov	r0, r5
 801693e:	47b0      	blx	r6
 8016940:	2800      	cmp	r0, #0
 8016942:	dc06      	bgt.n	8016952 <__sflush_r+0xfe>
 8016944:	89a3      	ldrh	r3, [r4, #12]
 8016946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801694a:	81a3      	strh	r3, [r4, #12]
 801694c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016950:	e78e      	b.n	8016870 <__sflush_r+0x1c>
 8016952:	4407      	add	r7, r0
 8016954:	eba8 0800 	sub.w	r8, r8, r0
 8016958:	e7e9      	b.n	801692e <__sflush_r+0xda>
 801695a:	bf00      	nop
 801695c:	20400001 	.word	0x20400001

08016960 <_fflush_r>:
 8016960:	b538      	push	{r3, r4, r5, lr}
 8016962:	690b      	ldr	r3, [r1, #16]
 8016964:	4605      	mov	r5, r0
 8016966:	460c      	mov	r4, r1
 8016968:	b913      	cbnz	r3, 8016970 <_fflush_r+0x10>
 801696a:	2500      	movs	r5, #0
 801696c:	4628      	mov	r0, r5
 801696e:	bd38      	pop	{r3, r4, r5, pc}
 8016970:	b118      	cbz	r0, 801697a <_fflush_r+0x1a>
 8016972:	6983      	ldr	r3, [r0, #24]
 8016974:	b90b      	cbnz	r3, 801697a <_fflush_r+0x1a>
 8016976:	f7ff fb29 	bl	8015fcc <__sinit>
 801697a:	4b14      	ldr	r3, [pc, #80]	; (80169cc <_fflush_r+0x6c>)
 801697c:	429c      	cmp	r4, r3
 801697e:	d11b      	bne.n	80169b8 <_fflush_r+0x58>
 8016980:	686c      	ldr	r4, [r5, #4]
 8016982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d0ef      	beq.n	801696a <_fflush_r+0xa>
 801698a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801698c:	07d0      	lsls	r0, r2, #31
 801698e:	d404      	bmi.n	801699a <_fflush_r+0x3a>
 8016990:	0599      	lsls	r1, r3, #22
 8016992:	d402      	bmi.n	801699a <_fflush_r+0x3a>
 8016994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016996:	f7ff fbdc 	bl	8016152 <__retarget_lock_acquire_recursive>
 801699a:	4628      	mov	r0, r5
 801699c:	4621      	mov	r1, r4
 801699e:	f7ff ff59 	bl	8016854 <__sflush_r>
 80169a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80169a4:	07da      	lsls	r2, r3, #31
 80169a6:	4605      	mov	r5, r0
 80169a8:	d4e0      	bmi.n	801696c <_fflush_r+0xc>
 80169aa:	89a3      	ldrh	r3, [r4, #12]
 80169ac:	059b      	lsls	r3, r3, #22
 80169ae:	d4dd      	bmi.n	801696c <_fflush_r+0xc>
 80169b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169b2:	f7ff fbcf 	bl	8016154 <__retarget_lock_release_recursive>
 80169b6:	e7d9      	b.n	801696c <_fflush_r+0xc>
 80169b8:	4b05      	ldr	r3, [pc, #20]	; (80169d0 <_fflush_r+0x70>)
 80169ba:	429c      	cmp	r4, r3
 80169bc:	d101      	bne.n	80169c2 <_fflush_r+0x62>
 80169be:	68ac      	ldr	r4, [r5, #8]
 80169c0:	e7df      	b.n	8016982 <_fflush_r+0x22>
 80169c2:	4b04      	ldr	r3, [pc, #16]	; (80169d4 <_fflush_r+0x74>)
 80169c4:	429c      	cmp	r4, r3
 80169c6:	bf08      	it	eq
 80169c8:	68ec      	ldreq	r4, [r5, #12]
 80169ca:	e7da      	b.n	8016982 <_fflush_r+0x22>
 80169cc:	0801a788 	.word	0x0801a788
 80169d0:	0801a7a8 	.word	0x0801a7a8
 80169d4:	0801a768 	.word	0x0801a768

080169d8 <fiprintf>:
 80169d8:	b40e      	push	{r1, r2, r3}
 80169da:	b503      	push	{r0, r1, lr}
 80169dc:	4601      	mov	r1, r0
 80169de:	ab03      	add	r3, sp, #12
 80169e0:	4805      	ldr	r0, [pc, #20]	; (80169f8 <fiprintf+0x20>)
 80169e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80169e6:	6800      	ldr	r0, [r0, #0]
 80169e8:	9301      	str	r3, [sp, #4]
 80169ea:	f000 fa65 	bl	8016eb8 <_vfiprintf_r>
 80169ee:	b002      	add	sp, #8
 80169f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80169f4:	b003      	add	sp, #12
 80169f6:	4770      	bx	lr
 80169f8:	20000034 	.word	0x20000034

080169fc <_lseek_r>:
 80169fc:	b538      	push	{r3, r4, r5, lr}
 80169fe:	4d07      	ldr	r5, [pc, #28]	; (8016a1c <_lseek_r+0x20>)
 8016a00:	4604      	mov	r4, r0
 8016a02:	4608      	mov	r0, r1
 8016a04:	4611      	mov	r1, r2
 8016a06:	2200      	movs	r2, #0
 8016a08:	602a      	str	r2, [r5, #0]
 8016a0a:	461a      	mov	r2, r3
 8016a0c:	f7ea f99f 	bl	8000d4e <_lseek>
 8016a10:	1c43      	adds	r3, r0, #1
 8016a12:	d102      	bne.n	8016a1a <_lseek_r+0x1e>
 8016a14:	682b      	ldr	r3, [r5, #0]
 8016a16:	b103      	cbz	r3, 8016a1a <_lseek_r+0x1e>
 8016a18:	6023      	str	r3, [r4, #0]
 8016a1a:	bd38      	pop	{r3, r4, r5, pc}
 8016a1c:	200305bc 	.word	0x200305bc

08016a20 <__swhatbuf_r>:
 8016a20:	b570      	push	{r4, r5, r6, lr}
 8016a22:	460e      	mov	r6, r1
 8016a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a28:	2900      	cmp	r1, #0
 8016a2a:	b096      	sub	sp, #88	; 0x58
 8016a2c:	4614      	mov	r4, r2
 8016a2e:	461d      	mov	r5, r3
 8016a30:	da08      	bge.n	8016a44 <__swhatbuf_r+0x24>
 8016a32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016a36:	2200      	movs	r2, #0
 8016a38:	602a      	str	r2, [r5, #0]
 8016a3a:	061a      	lsls	r2, r3, #24
 8016a3c:	d410      	bmi.n	8016a60 <__swhatbuf_r+0x40>
 8016a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a42:	e00e      	b.n	8016a62 <__swhatbuf_r+0x42>
 8016a44:	466a      	mov	r2, sp
 8016a46:	f000 fd15 	bl	8017474 <_fstat_r>
 8016a4a:	2800      	cmp	r0, #0
 8016a4c:	dbf1      	blt.n	8016a32 <__swhatbuf_r+0x12>
 8016a4e:	9a01      	ldr	r2, [sp, #4]
 8016a50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a58:	425a      	negs	r2, r3
 8016a5a:	415a      	adcs	r2, r3
 8016a5c:	602a      	str	r2, [r5, #0]
 8016a5e:	e7ee      	b.n	8016a3e <__swhatbuf_r+0x1e>
 8016a60:	2340      	movs	r3, #64	; 0x40
 8016a62:	2000      	movs	r0, #0
 8016a64:	6023      	str	r3, [r4, #0]
 8016a66:	b016      	add	sp, #88	; 0x58
 8016a68:	bd70      	pop	{r4, r5, r6, pc}
	...

08016a6c <__smakebuf_r>:
 8016a6c:	898b      	ldrh	r3, [r1, #12]
 8016a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a70:	079d      	lsls	r5, r3, #30
 8016a72:	4606      	mov	r6, r0
 8016a74:	460c      	mov	r4, r1
 8016a76:	d507      	bpl.n	8016a88 <__smakebuf_r+0x1c>
 8016a78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016a7c:	6023      	str	r3, [r4, #0]
 8016a7e:	6123      	str	r3, [r4, #16]
 8016a80:	2301      	movs	r3, #1
 8016a82:	6163      	str	r3, [r4, #20]
 8016a84:	b002      	add	sp, #8
 8016a86:	bd70      	pop	{r4, r5, r6, pc}
 8016a88:	ab01      	add	r3, sp, #4
 8016a8a:	466a      	mov	r2, sp
 8016a8c:	f7ff ffc8 	bl	8016a20 <__swhatbuf_r>
 8016a90:	9900      	ldr	r1, [sp, #0]
 8016a92:	4605      	mov	r5, r0
 8016a94:	4630      	mov	r0, r6
 8016a96:	f7ff fbbf 	bl	8016218 <_malloc_r>
 8016a9a:	b948      	cbnz	r0, 8016ab0 <__smakebuf_r+0x44>
 8016a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016aa0:	059a      	lsls	r2, r3, #22
 8016aa2:	d4ef      	bmi.n	8016a84 <__smakebuf_r+0x18>
 8016aa4:	f023 0303 	bic.w	r3, r3, #3
 8016aa8:	f043 0302 	orr.w	r3, r3, #2
 8016aac:	81a3      	strh	r3, [r4, #12]
 8016aae:	e7e3      	b.n	8016a78 <__smakebuf_r+0xc>
 8016ab0:	4b0d      	ldr	r3, [pc, #52]	; (8016ae8 <__smakebuf_r+0x7c>)
 8016ab2:	62b3      	str	r3, [r6, #40]	; 0x28
 8016ab4:	89a3      	ldrh	r3, [r4, #12]
 8016ab6:	6020      	str	r0, [r4, #0]
 8016ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016abc:	81a3      	strh	r3, [r4, #12]
 8016abe:	9b00      	ldr	r3, [sp, #0]
 8016ac0:	6163      	str	r3, [r4, #20]
 8016ac2:	9b01      	ldr	r3, [sp, #4]
 8016ac4:	6120      	str	r0, [r4, #16]
 8016ac6:	b15b      	cbz	r3, 8016ae0 <__smakebuf_r+0x74>
 8016ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016acc:	4630      	mov	r0, r6
 8016ace:	f000 fce3 	bl	8017498 <_isatty_r>
 8016ad2:	b128      	cbz	r0, 8016ae0 <__smakebuf_r+0x74>
 8016ad4:	89a3      	ldrh	r3, [r4, #12]
 8016ad6:	f023 0303 	bic.w	r3, r3, #3
 8016ada:	f043 0301 	orr.w	r3, r3, #1
 8016ade:	81a3      	strh	r3, [r4, #12]
 8016ae0:	89a0      	ldrh	r0, [r4, #12]
 8016ae2:	4305      	orrs	r5, r0
 8016ae4:	81a5      	strh	r5, [r4, #12]
 8016ae6:	e7cd      	b.n	8016a84 <__smakebuf_r+0x18>
 8016ae8:	08015f65 	.word	0x08015f65

08016aec <malloc>:
 8016aec:	4b02      	ldr	r3, [pc, #8]	; (8016af8 <malloc+0xc>)
 8016aee:	4601      	mov	r1, r0
 8016af0:	6818      	ldr	r0, [r3, #0]
 8016af2:	f7ff bb91 	b.w	8016218 <_malloc_r>
 8016af6:	bf00      	nop
 8016af8:	20000034 	.word	0x20000034

08016afc <__malloc_lock>:
 8016afc:	4801      	ldr	r0, [pc, #4]	; (8016b04 <__malloc_lock+0x8>)
 8016afe:	f7ff bb28 	b.w	8016152 <__retarget_lock_acquire_recursive>
 8016b02:	bf00      	nop
 8016b04:	200305b0 	.word	0x200305b0

08016b08 <__malloc_unlock>:
 8016b08:	4801      	ldr	r0, [pc, #4]	; (8016b10 <__malloc_unlock+0x8>)
 8016b0a:	f7ff bb23 	b.w	8016154 <__retarget_lock_release_recursive>
 8016b0e:	bf00      	nop
 8016b10:	200305b0 	.word	0x200305b0

08016b14 <_free_r>:
 8016b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b16:	2900      	cmp	r1, #0
 8016b18:	d044      	beq.n	8016ba4 <_free_r+0x90>
 8016b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b1e:	9001      	str	r0, [sp, #4]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	f1a1 0404 	sub.w	r4, r1, #4
 8016b26:	bfb8      	it	lt
 8016b28:	18e4      	addlt	r4, r4, r3
 8016b2a:	f7ff ffe7 	bl	8016afc <__malloc_lock>
 8016b2e:	4a1e      	ldr	r2, [pc, #120]	; (8016ba8 <_free_r+0x94>)
 8016b30:	9801      	ldr	r0, [sp, #4]
 8016b32:	6813      	ldr	r3, [r2, #0]
 8016b34:	b933      	cbnz	r3, 8016b44 <_free_r+0x30>
 8016b36:	6063      	str	r3, [r4, #4]
 8016b38:	6014      	str	r4, [r2, #0]
 8016b3a:	b003      	add	sp, #12
 8016b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b40:	f7ff bfe2 	b.w	8016b08 <__malloc_unlock>
 8016b44:	42a3      	cmp	r3, r4
 8016b46:	d908      	bls.n	8016b5a <_free_r+0x46>
 8016b48:	6825      	ldr	r5, [r4, #0]
 8016b4a:	1961      	adds	r1, r4, r5
 8016b4c:	428b      	cmp	r3, r1
 8016b4e:	bf01      	itttt	eq
 8016b50:	6819      	ldreq	r1, [r3, #0]
 8016b52:	685b      	ldreq	r3, [r3, #4]
 8016b54:	1949      	addeq	r1, r1, r5
 8016b56:	6021      	streq	r1, [r4, #0]
 8016b58:	e7ed      	b.n	8016b36 <_free_r+0x22>
 8016b5a:	461a      	mov	r2, r3
 8016b5c:	685b      	ldr	r3, [r3, #4]
 8016b5e:	b10b      	cbz	r3, 8016b64 <_free_r+0x50>
 8016b60:	42a3      	cmp	r3, r4
 8016b62:	d9fa      	bls.n	8016b5a <_free_r+0x46>
 8016b64:	6811      	ldr	r1, [r2, #0]
 8016b66:	1855      	adds	r5, r2, r1
 8016b68:	42a5      	cmp	r5, r4
 8016b6a:	d10b      	bne.n	8016b84 <_free_r+0x70>
 8016b6c:	6824      	ldr	r4, [r4, #0]
 8016b6e:	4421      	add	r1, r4
 8016b70:	1854      	adds	r4, r2, r1
 8016b72:	42a3      	cmp	r3, r4
 8016b74:	6011      	str	r1, [r2, #0]
 8016b76:	d1e0      	bne.n	8016b3a <_free_r+0x26>
 8016b78:	681c      	ldr	r4, [r3, #0]
 8016b7a:	685b      	ldr	r3, [r3, #4]
 8016b7c:	6053      	str	r3, [r2, #4]
 8016b7e:	4421      	add	r1, r4
 8016b80:	6011      	str	r1, [r2, #0]
 8016b82:	e7da      	b.n	8016b3a <_free_r+0x26>
 8016b84:	d902      	bls.n	8016b8c <_free_r+0x78>
 8016b86:	230c      	movs	r3, #12
 8016b88:	6003      	str	r3, [r0, #0]
 8016b8a:	e7d6      	b.n	8016b3a <_free_r+0x26>
 8016b8c:	6825      	ldr	r5, [r4, #0]
 8016b8e:	1961      	adds	r1, r4, r5
 8016b90:	428b      	cmp	r3, r1
 8016b92:	bf04      	itt	eq
 8016b94:	6819      	ldreq	r1, [r3, #0]
 8016b96:	685b      	ldreq	r3, [r3, #4]
 8016b98:	6063      	str	r3, [r4, #4]
 8016b9a:	bf04      	itt	eq
 8016b9c:	1949      	addeq	r1, r1, r5
 8016b9e:	6021      	streq	r1, [r4, #0]
 8016ba0:	6054      	str	r4, [r2, #4]
 8016ba2:	e7ca      	b.n	8016b3a <_free_r+0x26>
 8016ba4:	b003      	add	sp, #12
 8016ba6:	bd30      	pop	{r4, r5, pc}
 8016ba8:	200305b4 	.word	0x200305b4

08016bac <__ssputs_r>:
 8016bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bb0:	688e      	ldr	r6, [r1, #8]
 8016bb2:	429e      	cmp	r6, r3
 8016bb4:	4682      	mov	sl, r0
 8016bb6:	460c      	mov	r4, r1
 8016bb8:	4690      	mov	r8, r2
 8016bba:	461f      	mov	r7, r3
 8016bbc:	d838      	bhi.n	8016c30 <__ssputs_r+0x84>
 8016bbe:	898a      	ldrh	r2, [r1, #12]
 8016bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016bc4:	d032      	beq.n	8016c2c <__ssputs_r+0x80>
 8016bc6:	6825      	ldr	r5, [r4, #0]
 8016bc8:	6909      	ldr	r1, [r1, #16]
 8016bca:	eba5 0901 	sub.w	r9, r5, r1
 8016bce:	6965      	ldr	r5, [r4, #20]
 8016bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016bd8:	3301      	adds	r3, #1
 8016bda:	444b      	add	r3, r9
 8016bdc:	106d      	asrs	r5, r5, #1
 8016bde:	429d      	cmp	r5, r3
 8016be0:	bf38      	it	cc
 8016be2:	461d      	movcc	r5, r3
 8016be4:	0553      	lsls	r3, r2, #21
 8016be6:	d531      	bpl.n	8016c4c <__ssputs_r+0xa0>
 8016be8:	4629      	mov	r1, r5
 8016bea:	f7ff fb15 	bl	8016218 <_malloc_r>
 8016bee:	4606      	mov	r6, r0
 8016bf0:	b950      	cbnz	r0, 8016c08 <__ssputs_r+0x5c>
 8016bf2:	230c      	movs	r3, #12
 8016bf4:	f8ca 3000 	str.w	r3, [sl]
 8016bf8:	89a3      	ldrh	r3, [r4, #12]
 8016bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bfe:	81a3      	strh	r3, [r4, #12]
 8016c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c08:	6921      	ldr	r1, [r4, #16]
 8016c0a:	464a      	mov	r2, r9
 8016c0c:	f7ff fab3 	bl	8016176 <memcpy>
 8016c10:	89a3      	ldrh	r3, [r4, #12]
 8016c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c1a:	81a3      	strh	r3, [r4, #12]
 8016c1c:	6126      	str	r6, [r4, #16]
 8016c1e:	6165      	str	r5, [r4, #20]
 8016c20:	444e      	add	r6, r9
 8016c22:	eba5 0509 	sub.w	r5, r5, r9
 8016c26:	6026      	str	r6, [r4, #0]
 8016c28:	60a5      	str	r5, [r4, #8]
 8016c2a:	463e      	mov	r6, r7
 8016c2c:	42be      	cmp	r6, r7
 8016c2e:	d900      	bls.n	8016c32 <__ssputs_r+0x86>
 8016c30:	463e      	mov	r6, r7
 8016c32:	6820      	ldr	r0, [r4, #0]
 8016c34:	4632      	mov	r2, r6
 8016c36:	4641      	mov	r1, r8
 8016c38:	f7ff faab 	bl	8016192 <memmove>
 8016c3c:	68a3      	ldr	r3, [r4, #8]
 8016c3e:	1b9b      	subs	r3, r3, r6
 8016c40:	60a3      	str	r3, [r4, #8]
 8016c42:	6823      	ldr	r3, [r4, #0]
 8016c44:	4433      	add	r3, r6
 8016c46:	6023      	str	r3, [r4, #0]
 8016c48:	2000      	movs	r0, #0
 8016c4a:	e7db      	b.n	8016c04 <__ssputs_r+0x58>
 8016c4c:	462a      	mov	r2, r5
 8016c4e:	f000 fc33 	bl	80174b8 <_realloc_r>
 8016c52:	4606      	mov	r6, r0
 8016c54:	2800      	cmp	r0, #0
 8016c56:	d1e1      	bne.n	8016c1c <__ssputs_r+0x70>
 8016c58:	6921      	ldr	r1, [r4, #16]
 8016c5a:	4650      	mov	r0, sl
 8016c5c:	f7ff ff5a 	bl	8016b14 <_free_r>
 8016c60:	e7c7      	b.n	8016bf2 <__ssputs_r+0x46>
	...

08016c64 <_svfiprintf_r>:
 8016c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c68:	4698      	mov	r8, r3
 8016c6a:	898b      	ldrh	r3, [r1, #12]
 8016c6c:	061b      	lsls	r3, r3, #24
 8016c6e:	b09d      	sub	sp, #116	; 0x74
 8016c70:	4607      	mov	r7, r0
 8016c72:	460d      	mov	r5, r1
 8016c74:	4614      	mov	r4, r2
 8016c76:	d50e      	bpl.n	8016c96 <_svfiprintf_r+0x32>
 8016c78:	690b      	ldr	r3, [r1, #16]
 8016c7a:	b963      	cbnz	r3, 8016c96 <_svfiprintf_r+0x32>
 8016c7c:	2140      	movs	r1, #64	; 0x40
 8016c7e:	f7ff facb 	bl	8016218 <_malloc_r>
 8016c82:	6028      	str	r0, [r5, #0]
 8016c84:	6128      	str	r0, [r5, #16]
 8016c86:	b920      	cbnz	r0, 8016c92 <_svfiprintf_r+0x2e>
 8016c88:	230c      	movs	r3, #12
 8016c8a:	603b      	str	r3, [r7, #0]
 8016c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c90:	e0d1      	b.n	8016e36 <_svfiprintf_r+0x1d2>
 8016c92:	2340      	movs	r3, #64	; 0x40
 8016c94:	616b      	str	r3, [r5, #20]
 8016c96:	2300      	movs	r3, #0
 8016c98:	9309      	str	r3, [sp, #36]	; 0x24
 8016c9a:	2320      	movs	r3, #32
 8016c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ca4:	2330      	movs	r3, #48	; 0x30
 8016ca6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016e50 <_svfiprintf_r+0x1ec>
 8016caa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016cae:	f04f 0901 	mov.w	r9, #1
 8016cb2:	4623      	mov	r3, r4
 8016cb4:	469a      	mov	sl, r3
 8016cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cba:	b10a      	cbz	r2, 8016cc0 <_svfiprintf_r+0x5c>
 8016cbc:	2a25      	cmp	r2, #37	; 0x25
 8016cbe:	d1f9      	bne.n	8016cb4 <_svfiprintf_r+0x50>
 8016cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8016cc4:	d00b      	beq.n	8016cde <_svfiprintf_r+0x7a>
 8016cc6:	465b      	mov	r3, fp
 8016cc8:	4622      	mov	r2, r4
 8016cca:	4629      	mov	r1, r5
 8016ccc:	4638      	mov	r0, r7
 8016cce:	f7ff ff6d 	bl	8016bac <__ssputs_r>
 8016cd2:	3001      	adds	r0, #1
 8016cd4:	f000 80aa 	beq.w	8016e2c <_svfiprintf_r+0x1c8>
 8016cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cda:	445a      	add	r2, fp
 8016cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8016cde:	f89a 3000 	ldrb.w	r3, [sl]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	f000 80a2 	beq.w	8016e2c <_svfiprintf_r+0x1c8>
 8016ce8:	2300      	movs	r3, #0
 8016cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cf2:	f10a 0a01 	add.w	sl, sl, #1
 8016cf6:	9304      	str	r3, [sp, #16]
 8016cf8:	9307      	str	r3, [sp, #28]
 8016cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8016d00:	4654      	mov	r4, sl
 8016d02:	2205      	movs	r2, #5
 8016d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d08:	4851      	ldr	r0, [pc, #324]	; (8016e50 <_svfiprintf_r+0x1ec>)
 8016d0a:	f7e9 fa89 	bl	8000220 <memchr>
 8016d0e:	9a04      	ldr	r2, [sp, #16]
 8016d10:	b9d8      	cbnz	r0, 8016d4a <_svfiprintf_r+0xe6>
 8016d12:	06d0      	lsls	r0, r2, #27
 8016d14:	bf44      	itt	mi
 8016d16:	2320      	movmi	r3, #32
 8016d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d1c:	0711      	lsls	r1, r2, #28
 8016d1e:	bf44      	itt	mi
 8016d20:	232b      	movmi	r3, #43	; 0x2b
 8016d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d26:	f89a 3000 	ldrb.w	r3, [sl]
 8016d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8016d2c:	d015      	beq.n	8016d5a <_svfiprintf_r+0xf6>
 8016d2e:	9a07      	ldr	r2, [sp, #28]
 8016d30:	4654      	mov	r4, sl
 8016d32:	2000      	movs	r0, #0
 8016d34:	f04f 0c0a 	mov.w	ip, #10
 8016d38:	4621      	mov	r1, r4
 8016d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d3e:	3b30      	subs	r3, #48	; 0x30
 8016d40:	2b09      	cmp	r3, #9
 8016d42:	d94e      	bls.n	8016de2 <_svfiprintf_r+0x17e>
 8016d44:	b1b0      	cbz	r0, 8016d74 <_svfiprintf_r+0x110>
 8016d46:	9207      	str	r2, [sp, #28]
 8016d48:	e014      	b.n	8016d74 <_svfiprintf_r+0x110>
 8016d4a:	eba0 0308 	sub.w	r3, r0, r8
 8016d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8016d52:	4313      	orrs	r3, r2
 8016d54:	9304      	str	r3, [sp, #16]
 8016d56:	46a2      	mov	sl, r4
 8016d58:	e7d2      	b.n	8016d00 <_svfiprintf_r+0x9c>
 8016d5a:	9b03      	ldr	r3, [sp, #12]
 8016d5c:	1d19      	adds	r1, r3, #4
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	9103      	str	r1, [sp, #12]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	bfbb      	ittet	lt
 8016d66:	425b      	neglt	r3, r3
 8016d68:	f042 0202 	orrlt.w	r2, r2, #2
 8016d6c:	9307      	strge	r3, [sp, #28]
 8016d6e:	9307      	strlt	r3, [sp, #28]
 8016d70:	bfb8      	it	lt
 8016d72:	9204      	strlt	r2, [sp, #16]
 8016d74:	7823      	ldrb	r3, [r4, #0]
 8016d76:	2b2e      	cmp	r3, #46	; 0x2e
 8016d78:	d10c      	bne.n	8016d94 <_svfiprintf_r+0x130>
 8016d7a:	7863      	ldrb	r3, [r4, #1]
 8016d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8016d7e:	d135      	bne.n	8016dec <_svfiprintf_r+0x188>
 8016d80:	9b03      	ldr	r3, [sp, #12]
 8016d82:	1d1a      	adds	r2, r3, #4
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	9203      	str	r2, [sp, #12]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	bfb8      	it	lt
 8016d8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016d90:	3402      	adds	r4, #2
 8016d92:	9305      	str	r3, [sp, #20]
 8016d94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016e60 <_svfiprintf_r+0x1fc>
 8016d98:	7821      	ldrb	r1, [r4, #0]
 8016d9a:	2203      	movs	r2, #3
 8016d9c:	4650      	mov	r0, sl
 8016d9e:	f7e9 fa3f 	bl	8000220 <memchr>
 8016da2:	b140      	cbz	r0, 8016db6 <_svfiprintf_r+0x152>
 8016da4:	2340      	movs	r3, #64	; 0x40
 8016da6:	eba0 000a 	sub.w	r0, r0, sl
 8016daa:	fa03 f000 	lsl.w	r0, r3, r0
 8016dae:	9b04      	ldr	r3, [sp, #16]
 8016db0:	4303      	orrs	r3, r0
 8016db2:	3401      	adds	r4, #1
 8016db4:	9304      	str	r3, [sp, #16]
 8016db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dba:	4826      	ldr	r0, [pc, #152]	; (8016e54 <_svfiprintf_r+0x1f0>)
 8016dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016dc0:	2206      	movs	r2, #6
 8016dc2:	f7e9 fa2d 	bl	8000220 <memchr>
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	d038      	beq.n	8016e3c <_svfiprintf_r+0x1d8>
 8016dca:	4b23      	ldr	r3, [pc, #140]	; (8016e58 <_svfiprintf_r+0x1f4>)
 8016dcc:	bb1b      	cbnz	r3, 8016e16 <_svfiprintf_r+0x1b2>
 8016dce:	9b03      	ldr	r3, [sp, #12]
 8016dd0:	3307      	adds	r3, #7
 8016dd2:	f023 0307 	bic.w	r3, r3, #7
 8016dd6:	3308      	adds	r3, #8
 8016dd8:	9303      	str	r3, [sp, #12]
 8016dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ddc:	4433      	add	r3, r6
 8016dde:	9309      	str	r3, [sp, #36]	; 0x24
 8016de0:	e767      	b.n	8016cb2 <_svfiprintf_r+0x4e>
 8016de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8016de6:	460c      	mov	r4, r1
 8016de8:	2001      	movs	r0, #1
 8016dea:	e7a5      	b.n	8016d38 <_svfiprintf_r+0xd4>
 8016dec:	2300      	movs	r3, #0
 8016dee:	3401      	adds	r4, #1
 8016df0:	9305      	str	r3, [sp, #20]
 8016df2:	4619      	mov	r1, r3
 8016df4:	f04f 0c0a 	mov.w	ip, #10
 8016df8:	4620      	mov	r0, r4
 8016dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dfe:	3a30      	subs	r2, #48	; 0x30
 8016e00:	2a09      	cmp	r2, #9
 8016e02:	d903      	bls.n	8016e0c <_svfiprintf_r+0x1a8>
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d0c5      	beq.n	8016d94 <_svfiprintf_r+0x130>
 8016e08:	9105      	str	r1, [sp, #20]
 8016e0a:	e7c3      	b.n	8016d94 <_svfiprintf_r+0x130>
 8016e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e10:	4604      	mov	r4, r0
 8016e12:	2301      	movs	r3, #1
 8016e14:	e7f0      	b.n	8016df8 <_svfiprintf_r+0x194>
 8016e16:	ab03      	add	r3, sp, #12
 8016e18:	9300      	str	r3, [sp, #0]
 8016e1a:	462a      	mov	r2, r5
 8016e1c:	4b0f      	ldr	r3, [pc, #60]	; (8016e5c <_svfiprintf_r+0x1f8>)
 8016e1e:	a904      	add	r1, sp, #16
 8016e20:	4638      	mov	r0, r7
 8016e22:	f3af 8000 	nop.w
 8016e26:	1c42      	adds	r2, r0, #1
 8016e28:	4606      	mov	r6, r0
 8016e2a:	d1d6      	bne.n	8016dda <_svfiprintf_r+0x176>
 8016e2c:	89ab      	ldrh	r3, [r5, #12]
 8016e2e:	065b      	lsls	r3, r3, #25
 8016e30:	f53f af2c 	bmi.w	8016c8c <_svfiprintf_r+0x28>
 8016e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e36:	b01d      	add	sp, #116	; 0x74
 8016e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e3c:	ab03      	add	r3, sp, #12
 8016e3e:	9300      	str	r3, [sp, #0]
 8016e40:	462a      	mov	r2, r5
 8016e42:	4b06      	ldr	r3, [pc, #24]	; (8016e5c <_svfiprintf_r+0x1f8>)
 8016e44:	a904      	add	r1, sp, #16
 8016e46:	4638      	mov	r0, r7
 8016e48:	f000 f9d4 	bl	80171f4 <_printf_i>
 8016e4c:	e7eb      	b.n	8016e26 <_svfiprintf_r+0x1c2>
 8016e4e:	bf00      	nop
 8016e50:	0801a87a 	.word	0x0801a87a
 8016e54:	0801a884 	.word	0x0801a884
 8016e58:	00000000 	.word	0x00000000
 8016e5c:	08016bad 	.word	0x08016bad
 8016e60:	0801a880 	.word	0x0801a880

08016e64 <__sfputc_r>:
 8016e64:	6893      	ldr	r3, [r2, #8]
 8016e66:	3b01      	subs	r3, #1
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	b410      	push	{r4}
 8016e6c:	6093      	str	r3, [r2, #8]
 8016e6e:	da08      	bge.n	8016e82 <__sfputc_r+0x1e>
 8016e70:	6994      	ldr	r4, [r2, #24]
 8016e72:	42a3      	cmp	r3, r4
 8016e74:	db01      	blt.n	8016e7a <__sfputc_r+0x16>
 8016e76:	290a      	cmp	r1, #10
 8016e78:	d103      	bne.n	8016e82 <__sfputc_r+0x1e>
 8016e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e7e:	f7ff bbe9 	b.w	8016654 <__swbuf_r>
 8016e82:	6813      	ldr	r3, [r2, #0]
 8016e84:	1c58      	adds	r0, r3, #1
 8016e86:	6010      	str	r0, [r2, #0]
 8016e88:	7019      	strb	r1, [r3, #0]
 8016e8a:	4608      	mov	r0, r1
 8016e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e90:	4770      	bx	lr

08016e92 <__sfputs_r>:
 8016e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e94:	4606      	mov	r6, r0
 8016e96:	460f      	mov	r7, r1
 8016e98:	4614      	mov	r4, r2
 8016e9a:	18d5      	adds	r5, r2, r3
 8016e9c:	42ac      	cmp	r4, r5
 8016e9e:	d101      	bne.n	8016ea4 <__sfputs_r+0x12>
 8016ea0:	2000      	movs	r0, #0
 8016ea2:	e007      	b.n	8016eb4 <__sfputs_r+0x22>
 8016ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ea8:	463a      	mov	r2, r7
 8016eaa:	4630      	mov	r0, r6
 8016eac:	f7ff ffda 	bl	8016e64 <__sfputc_r>
 8016eb0:	1c43      	adds	r3, r0, #1
 8016eb2:	d1f3      	bne.n	8016e9c <__sfputs_r+0xa>
 8016eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016eb8 <_vfiprintf_r>:
 8016eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ebc:	460d      	mov	r5, r1
 8016ebe:	b09d      	sub	sp, #116	; 0x74
 8016ec0:	4614      	mov	r4, r2
 8016ec2:	4698      	mov	r8, r3
 8016ec4:	4606      	mov	r6, r0
 8016ec6:	b118      	cbz	r0, 8016ed0 <_vfiprintf_r+0x18>
 8016ec8:	6983      	ldr	r3, [r0, #24]
 8016eca:	b90b      	cbnz	r3, 8016ed0 <_vfiprintf_r+0x18>
 8016ecc:	f7ff f87e 	bl	8015fcc <__sinit>
 8016ed0:	4b89      	ldr	r3, [pc, #548]	; (80170f8 <_vfiprintf_r+0x240>)
 8016ed2:	429d      	cmp	r5, r3
 8016ed4:	d11b      	bne.n	8016f0e <_vfiprintf_r+0x56>
 8016ed6:	6875      	ldr	r5, [r6, #4]
 8016ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016eda:	07d9      	lsls	r1, r3, #31
 8016edc:	d405      	bmi.n	8016eea <_vfiprintf_r+0x32>
 8016ede:	89ab      	ldrh	r3, [r5, #12]
 8016ee0:	059a      	lsls	r2, r3, #22
 8016ee2:	d402      	bmi.n	8016eea <_vfiprintf_r+0x32>
 8016ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016ee6:	f7ff f934 	bl	8016152 <__retarget_lock_acquire_recursive>
 8016eea:	89ab      	ldrh	r3, [r5, #12]
 8016eec:	071b      	lsls	r3, r3, #28
 8016eee:	d501      	bpl.n	8016ef4 <_vfiprintf_r+0x3c>
 8016ef0:	692b      	ldr	r3, [r5, #16]
 8016ef2:	b9eb      	cbnz	r3, 8016f30 <_vfiprintf_r+0x78>
 8016ef4:	4629      	mov	r1, r5
 8016ef6:	4630      	mov	r0, r6
 8016ef8:	f7ff fc10 	bl	801671c <__swsetup_r>
 8016efc:	b1c0      	cbz	r0, 8016f30 <_vfiprintf_r+0x78>
 8016efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f00:	07dc      	lsls	r4, r3, #31
 8016f02:	d50e      	bpl.n	8016f22 <_vfiprintf_r+0x6a>
 8016f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f08:	b01d      	add	sp, #116	; 0x74
 8016f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f0e:	4b7b      	ldr	r3, [pc, #492]	; (80170fc <_vfiprintf_r+0x244>)
 8016f10:	429d      	cmp	r5, r3
 8016f12:	d101      	bne.n	8016f18 <_vfiprintf_r+0x60>
 8016f14:	68b5      	ldr	r5, [r6, #8]
 8016f16:	e7df      	b.n	8016ed8 <_vfiprintf_r+0x20>
 8016f18:	4b79      	ldr	r3, [pc, #484]	; (8017100 <_vfiprintf_r+0x248>)
 8016f1a:	429d      	cmp	r5, r3
 8016f1c:	bf08      	it	eq
 8016f1e:	68f5      	ldreq	r5, [r6, #12]
 8016f20:	e7da      	b.n	8016ed8 <_vfiprintf_r+0x20>
 8016f22:	89ab      	ldrh	r3, [r5, #12]
 8016f24:	0598      	lsls	r0, r3, #22
 8016f26:	d4ed      	bmi.n	8016f04 <_vfiprintf_r+0x4c>
 8016f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f2a:	f7ff f913 	bl	8016154 <__retarget_lock_release_recursive>
 8016f2e:	e7e9      	b.n	8016f04 <_vfiprintf_r+0x4c>
 8016f30:	2300      	movs	r3, #0
 8016f32:	9309      	str	r3, [sp, #36]	; 0x24
 8016f34:	2320      	movs	r3, #32
 8016f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f3e:	2330      	movs	r3, #48	; 0x30
 8016f40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017104 <_vfiprintf_r+0x24c>
 8016f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f48:	f04f 0901 	mov.w	r9, #1
 8016f4c:	4623      	mov	r3, r4
 8016f4e:	469a      	mov	sl, r3
 8016f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f54:	b10a      	cbz	r2, 8016f5a <_vfiprintf_r+0xa2>
 8016f56:	2a25      	cmp	r2, #37	; 0x25
 8016f58:	d1f9      	bne.n	8016f4e <_vfiprintf_r+0x96>
 8016f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8016f5e:	d00b      	beq.n	8016f78 <_vfiprintf_r+0xc0>
 8016f60:	465b      	mov	r3, fp
 8016f62:	4622      	mov	r2, r4
 8016f64:	4629      	mov	r1, r5
 8016f66:	4630      	mov	r0, r6
 8016f68:	f7ff ff93 	bl	8016e92 <__sfputs_r>
 8016f6c:	3001      	adds	r0, #1
 8016f6e:	f000 80aa 	beq.w	80170c6 <_vfiprintf_r+0x20e>
 8016f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f74:	445a      	add	r2, fp
 8016f76:	9209      	str	r2, [sp, #36]	; 0x24
 8016f78:	f89a 3000 	ldrb.w	r3, [sl]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	f000 80a2 	beq.w	80170c6 <_vfiprintf_r+0x20e>
 8016f82:	2300      	movs	r3, #0
 8016f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f8c:	f10a 0a01 	add.w	sl, sl, #1
 8016f90:	9304      	str	r3, [sp, #16]
 8016f92:	9307      	str	r3, [sp, #28]
 8016f94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016f98:	931a      	str	r3, [sp, #104]	; 0x68
 8016f9a:	4654      	mov	r4, sl
 8016f9c:	2205      	movs	r2, #5
 8016f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fa2:	4858      	ldr	r0, [pc, #352]	; (8017104 <_vfiprintf_r+0x24c>)
 8016fa4:	f7e9 f93c 	bl	8000220 <memchr>
 8016fa8:	9a04      	ldr	r2, [sp, #16]
 8016faa:	b9d8      	cbnz	r0, 8016fe4 <_vfiprintf_r+0x12c>
 8016fac:	06d1      	lsls	r1, r2, #27
 8016fae:	bf44      	itt	mi
 8016fb0:	2320      	movmi	r3, #32
 8016fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016fb6:	0713      	lsls	r3, r2, #28
 8016fb8:	bf44      	itt	mi
 8016fba:	232b      	movmi	r3, #43	; 0x2b
 8016fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8016fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8016fc6:	d015      	beq.n	8016ff4 <_vfiprintf_r+0x13c>
 8016fc8:	9a07      	ldr	r2, [sp, #28]
 8016fca:	4654      	mov	r4, sl
 8016fcc:	2000      	movs	r0, #0
 8016fce:	f04f 0c0a 	mov.w	ip, #10
 8016fd2:	4621      	mov	r1, r4
 8016fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016fd8:	3b30      	subs	r3, #48	; 0x30
 8016fda:	2b09      	cmp	r3, #9
 8016fdc:	d94e      	bls.n	801707c <_vfiprintf_r+0x1c4>
 8016fde:	b1b0      	cbz	r0, 801700e <_vfiprintf_r+0x156>
 8016fe0:	9207      	str	r2, [sp, #28]
 8016fe2:	e014      	b.n	801700e <_vfiprintf_r+0x156>
 8016fe4:	eba0 0308 	sub.w	r3, r0, r8
 8016fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8016fec:	4313      	orrs	r3, r2
 8016fee:	9304      	str	r3, [sp, #16]
 8016ff0:	46a2      	mov	sl, r4
 8016ff2:	e7d2      	b.n	8016f9a <_vfiprintf_r+0xe2>
 8016ff4:	9b03      	ldr	r3, [sp, #12]
 8016ff6:	1d19      	adds	r1, r3, #4
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	9103      	str	r1, [sp, #12]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	bfbb      	ittet	lt
 8017000:	425b      	neglt	r3, r3
 8017002:	f042 0202 	orrlt.w	r2, r2, #2
 8017006:	9307      	strge	r3, [sp, #28]
 8017008:	9307      	strlt	r3, [sp, #28]
 801700a:	bfb8      	it	lt
 801700c:	9204      	strlt	r2, [sp, #16]
 801700e:	7823      	ldrb	r3, [r4, #0]
 8017010:	2b2e      	cmp	r3, #46	; 0x2e
 8017012:	d10c      	bne.n	801702e <_vfiprintf_r+0x176>
 8017014:	7863      	ldrb	r3, [r4, #1]
 8017016:	2b2a      	cmp	r3, #42	; 0x2a
 8017018:	d135      	bne.n	8017086 <_vfiprintf_r+0x1ce>
 801701a:	9b03      	ldr	r3, [sp, #12]
 801701c:	1d1a      	adds	r2, r3, #4
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	9203      	str	r2, [sp, #12]
 8017022:	2b00      	cmp	r3, #0
 8017024:	bfb8      	it	lt
 8017026:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801702a:	3402      	adds	r4, #2
 801702c:	9305      	str	r3, [sp, #20]
 801702e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017114 <_vfiprintf_r+0x25c>
 8017032:	7821      	ldrb	r1, [r4, #0]
 8017034:	2203      	movs	r2, #3
 8017036:	4650      	mov	r0, sl
 8017038:	f7e9 f8f2 	bl	8000220 <memchr>
 801703c:	b140      	cbz	r0, 8017050 <_vfiprintf_r+0x198>
 801703e:	2340      	movs	r3, #64	; 0x40
 8017040:	eba0 000a 	sub.w	r0, r0, sl
 8017044:	fa03 f000 	lsl.w	r0, r3, r0
 8017048:	9b04      	ldr	r3, [sp, #16]
 801704a:	4303      	orrs	r3, r0
 801704c:	3401      	adds	r4, #1
 801704e:	9304      	str	r3, [sp, #16]
 8017050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017054:	482c      	ldr	r0, [pc, #176]	; (8017108 <_vfiprintf_r+0x250>)
 8017056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801705a:	2206      	movs	r2, #6
 801705c:	f7e9 f8e0 	bl	8000220 <memchr>
 8017060:	2800      	cmp	r0, #0
 8017062:	d03f      	beq.n	80170e4 <_vfiprintf_r+0x22c>
 8017064:	4b29      	ldr	r3, [pc, #164]	; (801710c <_vfiprintf_r+0x254>)
 8017066:	bb1b      	cbnz	r3, 80170b0 <_vfiprintf_r+0x1f8>
 8017068:	9b03      	ldr	r3, [sp, #12]
 801706a:	3307      	adds	r3, #7
 801706c:	f023 0307 	bic.w	r3, r3, #7
 8017070:	3308      	adds	r3, #8
 8017072:	9303      	str	r3, [sp, #12]
 8017074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017076:	443b      	add	r3, r7
 8017078:	9309      	str	r3, [sp, #36]	; 0x24
 801707a:	e767      	b.n	8016f4c <_vfiprintf_r+0x94>
 801707c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017080:	460c      	mov	r4, r1
 8017082:	2001      	movs	r0, #1
 8017084:	e7a5      	b.n	8016fd2 <_vfiprintf_r+0x11a>
 8017086:	2300      	movs	r3, #0
 8017088:	3401      	adds	r4, #1
 801708a:	9305      	str	r3, [sp, #20]
 801708c:	4619      	mov	r1, r3
 801708e:	f04f 0c0a 	mov.w	ip, #10
 8017092:	4620      	mov	r0, r4
 8017094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017098:	3a30      	subs	r2, #48	; 0x30
 801709a:	2a09      	cmp	r2, #9
 801709c:	d903      	bls.n	80170a6 <_vfiprintf_r+0x1ee>
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d0c5      	beq.n	801702e <_vfiprintf_r+0x176>
 80170a2:	9105      	str	r1, [sp, #20]
 80170a4:	e7c3      	b.n	801702e <_vfiprintf_r+0x176>
 80170a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80170aa:	4604      	mov	r4, r0
 80170ac:	2301      	movs	r3, #1
 80170ae:	e7f0      	b.n	8017092 <_vfiprintf_r+0x1da>
 80170b0:	ab03      	add	r3, sp, #12
 80170b2:	9300      	str	r3, [sp, #0]
 80170b4:	462a      	mov	r2, r5
 80170b6:	4b16      	ldr	r3, [pc, #88]	; (8017110 <_vfiprintf_r+0x258>)
 80170b8:	a904      	add	r1, sp, #16
 80170ba:	4630      	mov	r0, r6
 80170bc:	f3af 8000 	nop.w
 80170c0:	4607      	mov	r7, r0
 80170c2:	1c78      	adds	r0, r7, #1
 80170c4:	d1d6      	bne.n	8017074 <_vfiprintf_r+0x1bc>
 80170c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80170c8:	07d9      	lsls	r1, r3, #31
 80170ca:	d405      	bmi.n	80170d8 <_vfiprintf_r+0x220>
 80170cc:	89ab      	ldrh	r3, [r5, #12]
 80170ce:	059a      	lsls	r2, r3, #22
 80170d0:	d402      	bmi.n	80170d8 <_vfiprintf_r+0x220>
 80170d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170d4:	f7ff f83e 	bl	8016154 <__retarget_lock_release_recursive>
 80170d8:	89ab      	ldrh	r3, [r5, #12]
 80170da:	065b      	lsls	r3, r3, #25
 80170dc:	f53f af12 	bmi.w	8016f04 <_vfiprintf_r+0x4c>
 80170e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80170e2:	e711      	b.n	8016f08 <_vfiprintf_r+0x50>
 80170e4:	ab03      	add	r3, sp, #12
 80170e6:	9300      	str	r3, [sp, #0]
 80170e8:	462a      	mov	r2, r5
 80170ea:	4b09      	ldr	r3, [pc, #36]	; (8017110 <_vfiprintf_r+0x258>)
 80170ec:	a904      	add	r1, sp, #16
 80170ee:	4630      	mov	r0, r6
 80170f0:	f000 f880 	bl	80171f4 <_printf_i>
 80170f4:	e7e4      	b.n	80170c0 <_vfiprintf_r+0x208>
 80170f6:	bf00      	nop
 80170f8:	0801a788 	.word	0x0801a788
 80170fc:	0801a7a8 	.word	0x0801a7a8
 8017100:	0801a768 	.word	0x0801a768
 8017104:	0801a87a 	.word	0x0801a87a
 8017108:	0801a884 	.word	0x0801a884
 801710c:	00000000 	.word	0x00000000
 8017110:	08016e93 	.word	0x08016e93
 8017114:	0801a880 	.word	0x0801a880

08017118 <_printf_common>:
 8017118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801711c:	4616      	mov	r6, r2
 801711e:	4699      	mov	r9, r3
 8017120:	688a      	ldr	r2, [r1, #8]
 8017122:	690b      	ldr	r3, [r1, #16]
 8017124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017128:	4293      	cmp	r3, r2
 801712a:	bfb8      	it	lt
 801712c:	4613      	movlt	r3, r2
 801712e:	6033      	str	r3, [r6, #0]
 8017130:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017134:	4607      	mov	r7, r0
 8017136:	460c      	mov	r4, r1
 8017138:	b10a      	cbz	r2, 801713e <_printf_common+0x26>
 801713a:	3301      	adds	r3, #1
 801713c:	6033      	str	r3, [r6, #0]
 801713e:	6823      	ldr	r3, [r4, #0]
 8017140:	0699      	lsls	r1, r3, #26
 8017142:	bf42      	ittt	mi
 8017144:	6833      	ldrmi	r3, [r6, #0]
 8017146:	3302      	addmi	r3, #2
 8017148:	6033      	strmi	r3, [r6, #0]
 801714a:	6825      	ldr	r5, [r4, #0]
 801714c:	f015 0506 	ands.w	r5, r5, #6
 8017150:	d106      	bne.n	8017160 <_printf_common+0x48>
 8017152:	f104 0a19 	add.w	sl, r4, #25
 8017156:	68e3      	ldr	r3, [r4, #12]
 8017158:	6832      	ldr	r2, [r6, #0]
 801715a:	1a9b      	subs	r3, r3, r2
 801715c:	42ab      	cmp	r3, r5
 801715e:	dc26      	bgt.n	80171ae <_printf_common+0x96>
 8017160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017164:	1e13      	subs	r3, r2, #0
 8017166:	6822      	ldr	r2, [r4, #0]
 8017168:	bf18      	it	ne
 801716a:	2301      	movne	r3, #1
 801716c:	0692      	lsls	r2, r2, #26
 801716e:	d42b      	bmi.n	80171c8 <_printf_common+0xb0>
 8017170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017174:	4649      	mov	r1, r9
 8017176:	4638      	mov	r0, r7
 8017178:	47c0      	blx	r8
 801717a:	3001      	adds	r0, #1
 801717c:	d01e      	beq.n	80171bc <_printf_common+0xa4>
 801717e:	6823      	ldr	r3, [r4, #0]
 8017180:	68e5      	ldr	r5, [r4, #12]
 8017182:	6832      	ldr	r2, [r6, #0]
 8017184:	f003 0306 	and.w	r3, r3, #6
 8017188:	2b04      	cmp	r3, #4
 801718a:	bf08      	it	eq
 801718c:	1aad      	subeq	r5, r5, r2
 801718e:	68a3      	ldr	r3, [r4, #8]
 8017190:	6922      	ldr	r2, [r4, #16]
 8017192:	bf0c      	ite	eq
 8017194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017198:	2500      	movne	r5, #0
 801719a:	4293      	cmp	r3, r2
 801719c:	bfc4      	itt	gt
 801719e:	1a9b      	subgt	r3, r3, r2
 80171a0:	18ed      	addgt	r5, r5, r3
 80171a2:	2600      	movs	r6, #0
 80171a4:	341a      	adds	r4, #26
 80171a6:	42b5      	cmp	r5, r6
 80171a8:	d11a      	bne.n	80171e0 <_printf_common+0xc8>
 80171aa:	2000      	movs	r0, #0
 80171ac:	e008      	b.n	80171c0 <_printf_common+0xa8>
 80171ae:	2301      	movs	r3, #1
 80171b0:	4652      	mov	r2, sl
 80171b2:	4649      	mov	r1, r9
 80171b4:	4638      	mov	r0, r7
 80171b6:	47c0      	blx	r8
 80171b8:	3001      	adds	r0, #1
 80171ba:	d103      	bne.n	80171c4 <_printf_common+0xac>
 80171bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80171c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171c4:	3501      	adds	r5, #1
 80171c6:	e7c6      	b.n	8017156 <_printf_common+0x3e>
 80171c8:	18e1      	adds	r1, r4, r3
 80171ca:	1c5a      	adds	r2, r3, #1
 80171cc:	2030      	movs	r0, #48	; 0x30
 80171ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80171d2:	4422      	add	r2, r4
 80171d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80171d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80171dc:	3302      	adds	r3, #2
 80171de:	e7c7      	b.n	8017170 <_printf_common+0x58>
 80171e0:	2301      	movs	r3, #1
 80171e2:	4622      	mov	r2, r4
 80171e4:	4649      	mov	r1, r9
 80171e6:	4638      	mov	r0, r7
 80171e8:	47c0      	blx	r8
 80171ea:	3001      	adds	r0, #1
 80171ec:	d0e6      	beq.n	80171bc <_printf_common+0xa4>
 80171ee:	3601      	adds	r6, #1
 80171f0:	e7d9      	b.n	80171a6 <_printf_common+0x8e>
	...

080171f4 <_printf_i>:
 80171f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80171f8:	7e0f      	ldrb	r7, [r1, #24]
 80171fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80171fc:	2f78      	cmp	r7, #120	; 0x78
 80171fe:	4691      	mov	r9, r2
 8017200:	4680      	mov	r8, r0
 8017202:	460c      	mov	r4, r1
 8017204:	469a      	mov	sl, r3
 8017206:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801720a:	d807      	bhi.n	801721c <_printf_i+0x28>
 801720c:	2f62      	cmp	r7, #98	; 0x62
 801720e:	d80a      	bhi.n	8017226 <_printf_i+0x32>
 8017210:	2f00      	cmp	r7, #0
 8017212:	f000 80d8 	beq.w	80173c6 <_printf_i+0x1d2>
 8017216:	2f58      	cmp	r7, #88	; 0x58
 8017218:	f000 80a3 	beq.w	8017362 <_printf_i+0x16e>
 801721c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017224:	e03a      	b.n	801729c <_printf_i+0xa8>
 8017226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801722a:	2b15      	cmp	r3, #21
 801722c:	d8f6      	bhi.n	801721c <_printf_i+0x28>
 801722e:	a101      	add	r1, pc, #4	; (adr r1, 8017234 <_printf_i+0x40>)
 8017230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017234:	0801728d 	.word	0x0801728d
 8017238:	080172a1 	.word	0x080172a1
 801723c:	0801721d 	.word	0x0801721d
 8017240:	0801721d 	.word	0x0801721d
 8017244:	0801721d 	.word	0x0801721d
 8017248:	0801721d 	.word	0x0801721d
 801724c:	080172a1 	.word	0x080172a1
 8017250:	0801721d 	.word	0x0801721d
 8017254:	0801721d 	.word	0x0801721d
 8017258:	0801721d 	.word	0x0801721d
 801725c:	0801721d 	.word	0x0801721d
 8017260:	080173ad 	.word	0x080173ad
 8017264:	080172d1 	.word	0x080172d1
 8017268:	0801738f 	.word	0x0801738f
 801726c:	0801721d 	.word	0x0801721d
 8017270:	0801721d 	.word	0x0801721d
 8017274:	080173cf 	.word	0x080173cf
 8017278:	0801721d 	.word	0x0801721d
 801727c:	080172d1 	.word	0x080172d1
 8017280:	0801721d 	.word	0x0801721d
 8017284:	0801721d 	.word	0x0801721d
 8017288:	08017397 	.word	0x08017397
 801728c:	682b      	ldr	r3, [r5, #0]
 801728e:	1d1a      	adds	r2, r3, #4
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	602a      	str	r2, [r5, #0]
 8017294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801729c:	2301      	movs	r3, #1
 801729e:	e0a3      	b.n	80173e8 <_printf_i+0x1f4>
 80172a0:	6820      	ldr	r0, [r4, #0]
 80172a2:	6829      	ldr	r1, [r5, #0]
 80172a4:	0606      	lsls	r6, r0, #24
 80172a6:	f101 0304 	add.w	r3, r1, #4
 80172aa:	d50a      	bpl.n	80172c2 <_printf_i+0xce>
 80172ac:	680e      	ldr	r6, [r1, #0]
 80172ae:	602b      	str	r3, [r5, #0]
 80172b0:	2e00      	cmp	r6, #0
 80172b2:	da03      	bge.n	80172bc <_printf_i+0xc8>
 80172b4:	232d      	movs	r3, #45	; 0x2d
 80172b6:	4276      	negs	r6, r6
 80172b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172bc:	485e      	ldr	r0, [pc, #376]	; (8017438 <_printf_i+0x244>)
 80172be:	230a      	movs	r3, #10
 80172c0:	e019      	b.n	80172f6 <_printf_i+0x102>
 80172c2:	680e      	ldr	r6, [r1, #0]
 80172c4:	602b      	str	r3, [r5, #0]
 80172c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80172ca:	bf18      	it	ne
 80172cc:	b236      	sxthne	r6, r6
 80172ce:	e7ef      	b.n	80172b0 <_printf_i+0xbc>
 80172d0:	682b      	ldr	r3, [r5, #0]
 80172d2:	6820      	ldr	r0, [r4, #0]
 80172d4:	1d19      	adds	r1, r3, #4
 80172d6:	6029      	str	r1, [r5, #0]
 80172d8:	0601      	lsls	r1, r0, #24
 80172da:	d501      	bpl.n	80172e0 <_printf_i+0xec>
 80172dc:	681e      	ldr	r6, [r3, #0]
 80172de:	e002      	b.n	80172e6 <_printf_i+0xf2>
 80172e0:	0646      	lsls	r6, r0, #25
 80172e2:	d5fb      	bpl.n	80172dc <_printf_i+0xe8>
 80172e4:	881e      	ldrh	r6, [r3, #0]
 80172e6:	4854      	ldr	r0, [pc, #336]	; (8017438 <_printf_i+0x244>)
 80172e8:	2f6f      	cmp	r7, #111	; 0x6f
 80172ea:	bf0c      	ite	eq
 80172ec:	2308      	moveq	r3, #8
 80172ee:	230a      	movne	r3, #10
 80172f0:	2100      	movs	r1, #0
 80172f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80172f6:	6865      	ldr	r5, [r4, #4]
 80172f8:	60a5      	str	r5, [r4, #8]
 80172fa:	2d00      	cmp	r5, #0
 80172fc:	bfa2      	ittt	ge
 80172fe:	6821      	ldrge	r1, [r4, #0]
 8017300:	f021 0104 	bicge.w	r1, r1, #4
 8017304:	6021      	strge	r1, [r4, #0]
 8017306:	b90e      	cbnz	r6, 801730c <_printf_i+0x118>
 8017308:	2d00      	cmp	r5, #0
 801730a:	d04d      	beq.n	80173a8 <_printf_i+0x1b4>
 801730c:	4615      	mov	r5, r2
 801730e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017312:	fb03 6711 	mls	r7, r3, r1, r6
 8017316:	5dc7      	ldrb	r7, [r0, r7]
 8017318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801731c:	4637      	mov	r7, r6
 801731e:	42bb      	cmp	r3, r7
 8017320:	460e      	mov	r6, r1
 8017322:	d9f4      	bls.n	801730e <_printf_i+0x11a>
 8017324:	2b08      	cmp	r3, #8
 8017326:	d10b      	bne.n	8017340 <_printf_i+0x14c>
 8017328:	6823      	ldr	r3, [r4, #0]
 801732a:	07de      	lsls	r6, r3, #31
 801732c:	d508      	bpl.n	8017340 <_printf_i+0x14c>
 801732e:	6923      	ldr	r3, [r4, #16]
 8017330:	6861      	ldr	r1, [r4, #4]
 8017332:	4299      	cmp	r1, r3
 8017334:	bfde      	ittt	le
 8017336:	2330      	movle	r3, #48	; 0x30
 8017338:	f805 3c01 	strble.w	r3, [r5, #-1]
 801733c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017340:	1b52      	subs	r2, r2, r5
 8017342:	6122      	str	r2, [r4, #16]
 8017344:	f8cd a000 	str.w	sl, [sp]
 8017348:	464b      	mov	r3, r9
 801734a:	aa03      	add	r2, sp, #12
 801734c:	4621      	mov	r1, r4
 801734e:	4640      	mov	r0, r8
 8017350:	f7ff fee2 	bl	8017118 <_printf_common>
 8017354:	3001      	adds	r0, #1
 8017356:	d14c      	bne.n	80173f2 <_printf_i+0x1fe>
 8017358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801735c:	b004      	add	sp, #16
 801735e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017362:	4835      	ldr	r0, [pc, #212]	; (8017438 <_printf_i+0x244>)
 8017364:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017368:	6829      	ldr	r1, [r5, #0]
 801736a:	6823      	ldr	r3, [r4, #0]
 801736c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017370:	6029      	str	r1, [r5, #0]
 8017372:	061d      	lsls	r5, r3, #24
 8017374:	d514      	bpl.n	80173a0 <_printf_i+0x1ac>
 8017376:	07df      	lsls	r7, r3, #31
 8017378:	bf44      	itt	mi
 801737a:	f043 0320 	orrmi.w	r3, r3, #32
 801737e:	6023      	strmi	r3, [r4, #0]
 8017380:	b91e      	cbnz	r6, 801738a <_printf_i+0x196>
 8017382:	6823      	ldr	r3, [r4, #0]
 8017384:	f023 0320 	bic.w	r3, r3, #32
 8017388:	6023      	str	r3, [r4, #0]
 801738a:	2310      	movs	r3, #16
 801738c:	e7b0      	b.n	80172f0 <_printf_i+0xfc>
 801738e:	6823      	ldr	r3, [r4, #0]
 8017390:	f043 0320 	orr.w	r3, r3, #32
 8017394:	6023      	str	r3, [r4, #0]
 8017396:	2378      	movs	r3, #120	; 0x78
 8017398:	4828      	ldr	r0, [pc, #160]	; (801743c <_printf_i+0x248>)
 801739a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801739e:	e7e3      	b.n	8017368 <_printf_i+0x174>
 80173a0:	0659      	lsls	r1, r3, #25
 80173a2:	bf48      	it	mi
 80173a4:	b2b6      	uxthmi	r6, r6
 80173a6:	e7e6      	b.n	8017376 <_printf_i+0x182>
 80173a8:	4615      	mov	r5, r2
 80173aa:	e7bb      	b.n	8017324 <_printf_i+0x130>
 80173ac:	682b      	ldr	r3, [r5, #0]
 80173ae:	6826      	ldr	r6, [r4, #0]
 80173b0:	6961      	ldr	r1, [r4, #20]
 80173b2:	1d18      	adds	r0, r3, #4
 80173b4:	6028      	str	r0, [r5, #0]
 80173b6:	0635      	lsls	r5, r6, #24
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	d501      	bpl.n	80173c0 <_printf_i+0x1cc>
 80173bc:	6019      	str	r1, [r3, #0]
 80173be:	e002      	b.n	80173c6 <_printf_i+0x1d2>
 80173c0:	0670      	lsls	r0, r6, #25
 80173c2:	d5fb      	bpl.n	80173bc <_printf_i+0x1c8>
 80173c4:	8019      	strh	r1, [r3, #0]
 80173c6:	2300      	movs	r3, #0
 80173c8:	6123      	str	r3, [r4, #16]
 80173ca:	4615      	mov	r5, r2
 80173cc:	e7ba      	b.n	8017344 <_printf_i+0x150>
 80173ce:	682b      	ldr	r3, [r5, #0]
 80173d0:	1d1a      	adds	r2, r3, #4
 80173d2:	602a      	str	r2, [r5, #0]
 80173d4:	681d      	ldr	r5, [r3, #0]
 80173d6:	6862      	ldr	r2, [r4, #4]
 80173d8:	2100      	movs	r1, #0
 80173da:	4628      	mov	r0, r5
 80173dc:	f7e8 ff20 	bl	8000220 <memchr>
 80173e0:	b108      	cbz	r0, 80173e6 <_printf_i+0x1f2>
 80173e2:	1b40      	subs	r0, r0, r5
 80173e4:	6060      	str	r0, [r4, #4]
 80173e6:	6863      	ldr	r3, [r4, #4]
 80173e8:	6123      	str	r3, [r4, #16]
 80173ea:	2300      	movs	r3, #0
 80173ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80173f0:	e7a8      	b.n	8017344 <_printf_i+0x150>
 80173f2:	6923      	ldr	r3, [r4, #16]
 80173f4:	462a      	mov	r2, r5
 80173f6:	4649      	mov	r1, r9
 80173f8:	4640      	mov	r0, r8
 80173fa:	47d0      	blx	sl
 80173fc:	3001      	adds	r0, #1
 80173fe:	d0ab      	beq.n	8017358 <_printf_i+0x164>
 8017400:	6823      	ldr	r3, [r4, #0]
 8017402:	079b      	lsls	r3, r3, #30
 8017404:	d413      	bmi.n	801742e <_printf_i+0x23a>
 8017406:	68e0      	ldr	r0, [r4, #12]
 8017408:	9b03      	ldr	r3, [sp, #12]
 801740a:	4298      	cmp	r0, r3
 801740c:	bfb8      	it	lt
 801740e:	4618      	movlt	r0, r3
 8017410:	e7a4      	b.n	801735c <_printf_i+0x168>
 8017412:	2301      	movs	r3, #1
 8017414:	4632      	mov	r2, r6
 8017416:	4649      	mov	r1, r9
 8017418:	4640      	mov	r0, r8
 801741a:	47d0      	blx	sl
 801741c:	3001      	adds	r0, #1
 801741e:	d09b      	beq.n	8017358 <_printf_i+0x164>
 8017420:	3501      	adds	r5, #1
 8017422:	68e3      	ldr	r3, [r4, #12]
 8017424:	9903      	ldr	r1, [sp, #12]
 8017426:	1a5b      	subs	r3, r3, r1
 8017428:	42ab      	cmp	r3, r5
 801742a:	dcf2      	bgt.n	8017412 <_printf_i+0x21e>
 801742c:	e7eb      	b.n	8017406 <_printf_i+0x212>
 801742e:	2500      	movs	r5, #0
 8017430:	f104 0619 	add.w	r6, r4, #25
 8017434:	e7f5      	b.n	8017422 <_printf_i+0x22e>
 8017436:	bf00      	nop
 8017438:	0801a88b 	.word	0x0801a88b
 801743c:	0801a89c 	.word	0x0801a89c

08017440 <_read_r>:
 8017440:	b538      	push	{r3, r4, r5, lr}
 8017442:	4d07      	ldr	r5, [pc, #28]	; (8017460 <_read_r+0x20>)
 8017444:	4604      	mov	r4, r0
 8017446:	4608      	mov	r0, r1
 8017448:	4611      	mov	r1, r2
 801744a:	2200      	movs	r2, #0
 801744c:	602a      	str	r2, [r5, #0]
 801744e:	461a      	mov	r2, r3
 8017450:	f7ea fbae 	bl	8001bb0 <_read>
 8017454:	1c43      	adds	r3, r0, #1
 8017456:	d102      	bne.n	801745e <_read_r+0x1e>
 8017458:	682b      	ldr	r3, [r5, #0]
 801745a:	b103      	cbz	r3, 801745e <_read_r+0x1e>
 801745c:	6023      	str	r3, [r4, #0]
 801745e:	bd38      	pop	{r3, r4, r5, pc}
 8017460:	200305bc 	.word	0x200305bc

08017464 <abort>:
 8017464:	b508      	push	{r3, lr}
 8017466:	2006      	movs	r0, #6
 8017468:	f000 f87e 	bl	8017568 <raise>
 801746c:	2001      	movs	r0, #1
 801746e:	f7e9 fc3d 	bl	8000cec <_exit>
	...

08017474 <_fstat_r>:
 8017474:	b538      	push	{r3, r4, r5, lr}
 8017476:	4d07      	ldr	r5, [pc, #28]	; (8017494 <_fstat_r+0x20>)
 8017478:	2300      	movs	r3, #0
 801747a:	4604      	mov	r4, r0
 801747c:	4608      	mov	r0, r1
 801747e:	4611      	mov	r1, r2
 8017480:	602b      	str	r3, [r5, #0]
 8017482:	f7e9 fc49 	bl	8000d18 <_fstat>
 8017486:	1c43      	adds	r3, r0, #1
 8017488:	d102      	bne.n	8017490 <_fstat_r+0x1c>
 801748a:	682b      	ldr	r3, [r5, #0]
 801748c:	b103      	cbz	r3, 8017490 <_fstat_r+0x1c>
 801748e:	6023      	str	r3, [r4, #0]
 8017490:	bd38      	pop	{r3, r4, r5, pc}
 8017492:	bf00      	nop
 8017494:	200305bc 	.word	0x200305bc

08017498 <_isatty_r>:
 8017498:	b538      	push	{r3, r4, r5, lr}
 801749a:	4d06      	ldr	r5, [pc, #24]	; (80174b4 <_isatty_r+0x1c>)
 801749c:	2300      	movs	r3, #0
 801749e:	4604      	mov	r4, r0
 80174a0:	4608      	mov	r0, r1
 80174a2:	602b      	str	r3, [r5, #0]
 80174a4:	f7e9 fc48 	bl	8000d38 <_isatty>
 80174a8:	1c43      	adds	r3, r0, #1
 80174aa:	d102      	bne.n	80174b2 <_isatty_r+0x1a>
 80174ac:	682b      	ldr	r3, [r5, #0]
 80174ae:	b103      	cbz	r3, 80174b2 <_isatty_r+0x1a>
 80174b0:	6023      	str	r3, [r4, #0]
 80174b2:	bd38      	pop	{r3, r4, r5, pc}
 80174b4:	200305bc 	.word	0x200305bc

080174b8 <_realloc_r>:
 80174b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174bc:	4680      	mov	r8, r0
 80174be:	4614      	mov	r4, r2
 80174c0:	460e      	mov	r6, r1
 80174c2:	b921      	cbnz	r1, 80174ce <_realloc_r+0x16>
 80174c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174c8:	4611      	mov	r1, r2
 80174ca:	f7fe bea5 	b.w	8016218 <_malloc_r>
 80174ce:	b92a      	cbnz	r2, 80174dc <_realloc_r+0x24>
 80174d0:	f7ff fb20 	bl	8016b14 <_free_r>
 80174d4:	4625      	mov	r5, r4
 80174d6:	4628      	mov	r0, r5
 80174d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174dc:	f000 f860 	bl	80175a0 <_malloc_usable_size_r>
 80174e0:	4284      	cmp	r4, r0
 80174e2:	4607      	mov	r7, r0
 80174e4:	d802      	bhi.n	80174ec <_realloc_r+0x34>
 80174e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80174ea:	d812      	bhi.n	8017512 <_realloc_r+0x5a>
 80174ec:	4621      	mov	r1, r4
 80174ee:	4640      	mov	r0, r8
 80174f0:	f7fe fe92 	bl	8016218 <_malloc_r>
 80174f4:	4605      	mov	r5, r0
 80174f6:	2800      	cmp	r0, #0
 80174f8:	d0ed      	beq.n	80174d6 <_realloc_r+0x1e>
 80174fa:	42bc      	cmp	r4, r7
 80174fc:	4622      	mov	r2, r4
 80174fe:	4631      	mov	r1, r6
 8017500:	bf28      	it	cs
 8017502:	463a      	movcs	r2, r7
 8017504:	f7fe fe37 	bl	8016176 <memcpy>
 8017508:	4631      	mov	r1, r6
 801750a:	4640      	mov	r0, r8
 801750c:	f7ff fb02 	bl	8016b14 <_free_r>
 8017510:	e7e1      	b.n	80174d6 <_realloc_r+0x1e>
 8017512:	4635      	mov	r5, r6
 8017514:	e7df      	b.n	80174d6 <_realloc_r+0x1e>

08017516 <_raise_r>:
 8017516:	291f      	cmp	r1, #31
 8017518:	b538      	push	{r3, r4, r5, lr}
 801751a:	4604      	mov	r4, r0
 801751c:	460d      	mov	r5, r1
 801751e:	d904      	bls.n	801752a <_raise_r+0x14>
 8017520:	2316      	movs	r3, #22
 8017522:	6003      	str	r3, [r0, #0]
 8017524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017528:	bd38      	pop	{r3, r4, r5, pc}
 801752a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801752c:	b112      	cbz	r2, 8017534 <_raise_r+0x1e>
 801752e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017532:	b94b      	cbnz	r3, 8017548 <_raise_r+0x32>
 8017534:	4620      	mov	r0, r4
 8017536:	f000 f831 	bl	801759c <_getpid_r>
 801753a:	462a      	mov	r2, r5
 801753c:	4601      	mov	r1, r0
 801753e:	4620      	mov	r0, r4
 8017540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017544:	f000 b818 	b.w	8017578 <_kill_r>
 8017548:	2b01      	cmp	r3, #1
 801754a:	d00a      	beq.n	8017562 <_raise_r+0x4c>
 801754c:	1c59      	adds	r1, r3, #1
 801754e:	d103      	bne.n	8017558 <_raise_r+0x42>
 8017550:	2316      	movs	r3, #22
 8017552:	6003      	str	r3, [r0, #0]
 8017554:	2001      	movs	r0, #1
 8017556:	e7e7      	b.n	8017528 <_raise_r+0x12>
 8017558:	2400      	movs	r4, #0
 801755a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801755e:	4628      	mov	r0, r5
 8017560:	4798      	blx	r3
 8017562:	2000      	movs	r0, #0
 8017564:	e7e0      	b.n	8017528 <_raise_r+0x12>
	...

08017568 <raise>:
 8017568:	4b02      	ldr	r3, [pc, #8]	; (8017574 <raise+0xc>)
 801756a:	4601      	mov	r1, r0
 801756c:	6818      	ldr	r0, [r3, #0]
 801756e:	f7ff bfd2 	b.w	8017516 <_raise_r>
 8017572:	bf00      	nop
 8017574:	20000034 	.word	0x20000034

08017578 <_kill_r>:
 8017578:	b538      	push	{r3, r4, r5, lr}
 801757a:	4d07      	ldr	r5, [pc, #28]	; (8017598 <_kill_r+0x20>)
 801757c:	2300      	movs	r3, #0
 801757e:	4604      	mov	r4, r0
 8017580:	4608      	mov	r0, r1
 8017582:	4611      	mov	r1, r2
 8017584:	602b      	str	r3, [r5, #0]
 8017586:	f7e9 fb9f 	bl	8000cc8 <_kill>
 801758a:	1c43      	adds	r3, r0, #1
 801758c:	d102      	bne.n	8017594 <_kill_r+0x1c>
 801758e:	682b      	ldr	r3, [r5, #0]
 8017590:	b103      	cbz	r3, 8017594 <_kill_r+0x1c>
 8017592:	6023      	str	r3, [r4, #0]
 8017594:	bd38      	pop	{r3, r4, r5, pc}
 8017596:	bf00      	nop
 8017598:	200305bc 	.word	0x200305bc

0801759c <_getpid_r>:
 801759c:	f7e9 bb8c 	b.w	8000cb8 <_getpid>

080175a0 <_malloc_usable_size_r>:
 80175a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175a4:	1f18      	subs	r0, r3, #4
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	bfbc      	itt	lt
 80175aa:	580b      	ldrlt	r3, [r1, r0]
 80175ac:	18c0      	addlt	r0, r0, r3
 80175ae:	4770      	bx	lr

080175b0 <_init>:
 80175b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175b2:	bf00      	nop
 80175b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175b6:	bc08      	pop	{r3}
 80175b8:	469e      	mov	lr, r3
 80175ba:	4770      	bx	lr

080175bc <_fini>:
 80175bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175be:	bf00      	nop
 80175c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175c2:	bc08      	pop	{r3}
 80175c4:	469e      	mov	lr, r3
 80175c6:	4770      	bx	lr
